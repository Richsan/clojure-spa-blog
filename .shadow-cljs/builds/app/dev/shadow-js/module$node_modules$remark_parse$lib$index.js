["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/remark-parse/lib/index.js"],"~:js","shadow$provide.module$node_modules$remark_parse$lib$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(options){Object.assign(this,{Parser:doc=>{const settings=this.data(\"settings\");return(0,_mdastUtilFromMarkdown.fromMarkdown)(doc,Object.assign({},settings,options,{extensions:this.data(\"micromarkExtensions\")||[],mdastExtensions:this.data(\"fromMarkdownExtensions\")||[]}))}})};var _mdastUtilFromMarkdown=require(\"module$node_modules$mdast_util_from_markdown$index\")}","~:source","shadow$provide[\"module$node_modules$remark_parse$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = remarkParse;\n\nvar _mdastUtilFromMarkdown = require(\"mdast-util-from-markdown\");\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nfunction remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = doc => {\n    // Assume options.\n    const settings = this.data('settings');\n    return (0, _mdastUtilFromMarkdown.fromMarkdown)(doc, Object.assign({}, settings, options, {\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: this.data('micromarkExtensions') || [],\n      mdastExtensions: this.data('fromMarkdownExtensions') || []\n    }));\n  };\n\n  Object.assign(this, {\n    Parser: parser\n  });\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mdast_util_from_markdown$index","~$shadow.js"]],"~:properties",["^5",["extensions","__esModule","Parser","mdastExtensions","value","default"]],"~:compiled-at",1676665867308,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$remark_parse$lib$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,0CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAUAC,QAAoB,CAACC,OAAD,CAAU,CAc5BL,MAAOM,CAAAA,MAAP,CAAc,IAAd,CAAoB,CAClBC,OAbaC,GAAAC,EAAO,CAEpB,MAAMC,SAAW,IAAKC,CAAAA,IAAL,CAAU,UAAV,CACjB,OAAO,GAAIC,sBAAuBC,CAAAA,YAA3B,EAAyCL,GAAzC,CAA8CR,MAAOM,CAAAA,MAAP,CAAc,EAAd,CAAkBI,QAAlB,CAA4BL,OAA5B,CAAqC,CAIxFS,WAAY,IAAKH,CAAAA,IAAL,CAAU,qBAAV,CAAZG,EAAgD,EAJwC,CAKxFC,gBAAiB,IAAKJ,CAAAA,IAAL,CAAU,wBAAV,CAAjBI,EAAwD,EALgC,CAArC,CAA9C,CAHa,CAYF,CAApB,CAd4B,CAR9B,KAAIH,uBAAyBf,OAAA,CAAQ,oDAAR,CAR0E;\",\n\"sources\":[\"node_modules/remark-parse/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$remark_parse$lib$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = remarkParse;\\n\\nvar _mdastUtilFromMarkdown = require(\\\"mdast-util-from-markdown\\\");\\n\\n/**\\n * @typedef {import('mdast').Root} Root\\n * @typedef {import('mdast-util-from-markdown').Options} Options\\n */\\n\\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\\nfunction remarkParse(options) {\\n  /** @type {import('unified').ParserFunction<Root>} */\\n  const parser = doc => {\\n    // Assume options.\\n    const settings = this.data('settings');\\n    return (0, _mdastUtilFromMarkdown.fromMarkdown)(doc, Object.assign({}, settings, options, {\\n      // Note: these options are not in the readme.\\n      // The goal is for them to be set by plugins on `data` instead of being\\n      // passed by users.\\n      extensions: this.data('micromarkExtensions') || [],\\n      mdastExtensions: this.data('fromMarkdownExtensions') || []\\n    }));\\n  };\\n\\n  Object.assign(this, {\\n    Parser: parser\\n  });\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"remarkParse\",\"options\",\"assign\",\"Parser\",\"doc\",\"parser\",\"settings\",\"data\",\"_mdastUtilFromMarkdown\",\"fromMarkdown\",\"extensions\",\"mdastExtensions\"]\n}\n"]