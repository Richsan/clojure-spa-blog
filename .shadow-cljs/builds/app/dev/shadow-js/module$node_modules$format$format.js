["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/format/format.js"],"~:js","shadow$provide.module$node_modules$format$format=function(global,require,module,exports){(function(){function printf(){console.log(format.apply(null,arguments))}function format(fmt){var argIndex=1,args=[].slice.call(arguments),i=0,n=fmt.length,result=\"\",escaped=!1;var arg=!1;for(var nextArg=function(){return args[argIndex++]},slurpNumber=function(){for(var digits=\"\";/\\d/.test(fmt[i]);)digits+=fmt[i++],c=fmt[i];return 0<digits.length?parseInt(digits):null};i<n;++i){var c=fmt[i];if(escaped){escaped=\n!1;\".\"==c?(arg=!1,c=fmt[++i]):\"0\"==c&&\".\"==fmt[i+1]?(arg=!0,i+=2,c=fmt[i]):arg=!0;var tmp=slurpNumber();switch(c){case \"b\":result+=parseInt(nextArg(),10).toString(2);break;case \"c\":arg=nextArg();result=\"string\"===typeof arg||arg instanceof String?result+arg:result+String.fromCharCode(parseInt(arg,10));break;case \"d\":result+=parseInt(nextArg(),10);break;case \"f\":tmp=String(parseFloat(nextArg()).toFixed(tmp||6));result+=arg?tmp:tmp.replace(/^0/,\"\");break;case \"j\":result+=JSON.stringify(nextArg());break;\ncase \"o\":result+=\"0\"+parseInt(nextArg(),10).toString(8);break;case \"s\":result+=nextArg();break;case \"x\":result+=\"0x\"+parseInt(nextArg(),10).toString(16);break;case \"X\":result+=\"0x\"+parseInt(nextArg(),10).toString(16).toUpperCase();break;default:result+=c}}else\"%\"===c?escaped=!0:result+=c}return result}var namespace=\"undefined\"!==typeof module?module.exports=format:function(){return this||(0,eval)(\"this\")}();namespace.format=format;namespace.vsprintf=function(fmt,replacements){return format.apply(null,\n[fmt].concat(replacements))};\"undefined\"!==typeof console&&\"function\"===typeof console.log&&(namespace.printf=printf)})()}","~:source","shadow$provide[\"module$node_modules$format$format\"] = function(global,require,module,exports) {\n//\n// format - printf-like string formatting for JavaScript\n// github.com/samsonjs/format\n// @_sjs\n//\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n\n;(function() {\n\n  //// Export the API\n  var namespace;\n\n  // CommonJS / Node module\n  if (typeof module !== 'undefined') {\n    namespace = module.exports = format;\n  }\n\n  // Browsers and other environments\n  else {\n    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n    namespace = (function(){ return this || (1,eval)('this') }());\n  }\n\n  namespace.format = format;\n  namespace.vsprintf = vsprintf;\n\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n    namespace.printf = printf;\n  }\n\n  function printf(/* ... */) {\n    console.log(format.apply(null, arguments));\n  }\n\n  function vsprintf(fmt, replacements) {\n    return format.apply(null, [fmt].concat(replacements));\n  }\n\n  function format(fmt) {\n    var argIndex = 1 // skip initial format argument\n      , args = [].slice.call(arguments)\n      , i = 0\n      , n = fmt.length\n      , result = ''\n      , c\n      , escaped = false\n      , arg\n      , tmp\n      , leadingZero = false\n      , precision\n      , nextArg = function() { return args[argIndex++]; }\n      , slurpNumber = function() {\n          var digits = '';\n          while (/\\d/.test(fmt[i])) {\n            digits += fmt[i++];\n            c = fmt[i];\n          }\n          return digits.length > 0 ? parseInt(digits) : null;\n        }\n      ;\n    for (; i < n; ++i) {\n      c = fmt[i];\n      if (escaped) {\n        escaped = false;\n        if (c == '.') {\n          leadingZero = false;\n          c = fmt[++i];\n        }\n        else if (c == '0' && fmt[i + 1] == '.') {\n          leadingZero = true;\n          i += 2;\n          c = fmt[i];\n        }\n        else {\n          leadingZero = true;\n        }\n        precision = slurpNumber();\n        switch (c) {\n        case 'b': // number in binary\n          result += parseInt(nextArg(), 10).toString(2);\n          break;\n        case 'c': // character\n          arg = nextArg();\n          if (typeof arg === 'string' || arg instanceof String)\n            result += arg;\n          else\n            result += String.fromCharCode(parseInt(arg, 10));\n          break;\n        case 'd': // number in decimal\n          result += parseInt(nextArg(), 10);\n          break;\n        case 'f': // floating point number\n          tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n          result += leadingZero ? tmp : tmp.replace(/^0/, '');\n          break;\n        case 'j': // JSON\n          result += JSON.stringify(nextArg());\n          break;\n        case 'o': // number in octal\n          result += '0' + parseInt(nextArg(), 10).toString(8);\n          break;\n        case 's': // string\n          result += nextArg();\n          break;\n        case 'x': // lowercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16);\n          break;\n        case 'X': // uppercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\n          break;\n        default:\n          result += c;\n          break;\n        }\n      } else if (c === '%') {\n        escaped = true;\n      } else {\n        result += c;\n      }\n    }\n    return result;\n  }\n\n}());\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["printf","vsprintf","format"]],"~:compiled-at",1676671710260,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$format$format.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/format/format.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$format$format\\\"] = function(global,require,module,exports) {\\n//\\n// format - printf-like string formatting for JavaScript\\n// github.com/samsonjs/format\\n// @_sjs\\n//\\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\\n//\\n// MIT License\\n// http://sjs.mit-license.org\\n//\\n\\n;(function() {\\n\\n  //// Export the API\\n  var namespace;\\n\\n  // CommonJS / Node module\\n  if (typeof module !== 'undefined') {\\n    namespace = module.exports = format;\\n  }\\n\\n  // Browsers and other environments\\n  else {\\n    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\\n    namespace = (function(){ return this || (1,eval)('this') }());\\n  }\\n\\n  namespace.format = format;\\n  namespace.vsprintf = vsprintf;\\n\\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\\n    namespace.printf = printf;\\n  }\\n\\n  function printf(/* ... */) {\\n    console.log(format.apply(null, arguments));\\n  }\\n\\n  function vsprintf(fmt, replacements) {\\n    return format.apply(null, [fmt].concat(replacements));\\n  }\\n\\n  function format(fmt) {\\n    var argIndex = 1 // skip initial format argument\\n      , args = [].slice.call(arguments)\\n      , i = 0\\n      , n = fmt.length\\n      , result = ''\\n      , c\\n      , escaped = false\\n      , arg\\n      , tmp\\n      , leadingZero = false\\n      , precision\\n      , nextArg = function() { return args[argIndex++]; }\\n      , slurpNumber = function() {\\n          var digits = '';\\n          while (/\\\\d/.test(fmt[i])) {\\n            digits += fmt[i++];\\n            c = fmt[i];\\n          }\\n          return digits.length > 0 ? parseInt(digits) : null;\\n        }\\n      ;\\n    for (; i < n; ++i) {\\n      c = fmt[i];\\n      if (escaped) {\\n        escaped = false;\\n        if (c == '.') {\\n          leadingZero = false;\\n          c = fmt[++i];\\n        }\\n        else if (c == '0' && fmt[i + 1] == '.') {\\n          leadingZero = true;\\n          i += 2;\\n          c = fmt[i];\\n        }\\n        else {\\n          leadingZero = true;\\n        }\\n        precision = slurpNumber();\\n        switch (c) {\\n        case 'b': // number in binary\\n          result += parseInt(nextArg(), 10).toString(2);\\n          break;\\n        case 'c': // character\\n          arg = nextArg();\\n          if (typeof arg === 'string' || arg instanceof String)\\n            result += arg;\\n          else\\n            result += String.fromCharCode(parseInt(arg, 10));\\n          break;\\n        case 'd': // number in decimal\\n          result += parseInt(nextArg(), 10);\\n          break;\\n        case 'f': // floating point number\\n          tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\\n          result += leadingZero ? tmp : tmp.replace(/^0/, '');\\n          break;\\n        case 'j': // JSON\\n          result += JSON.stringify(nextArg());\\n          break;\\n        case 'o': // number in octal\\n          result += '0' + parseInt(nextArg(), 10).toString(8);\\n          break;\\n        case 's': // string\\n          result += nextArg();\\n          break;\\n        case 'x': // lowercase hexadecimal\\n          result += '0x' + parseInt(nextArg(), 10).toString(16);\\n          break;\\n        case 'X': // uppercase hexadecimal\\n          result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\\n          break;\\n        default:\\n          result += c;\\n          break;\\n        }\\n      } else if (c === '%') {\\n        escaped = true;\\n      } else {\\n        result += c;\\n      }\\n    }\\n    return result;\\n  }\\n\\n}());\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"printf\",\"console\",\"log\",\"format\",\"apply\",\"arguments\",\"fmt\",\"argIndex\",\"args\",\"slice\",\"call\",\"i\",\"n\",\"length\",\"result\",\"escaped\",\"leadingZero\",\"nextArg\",\"slurpNumber\",\"digits\",\"test\",\"c\",\"parseInt\",\"precision\",\"toString\",\"arg\",\"String\",\"fromCharCode\",\"tmp\",\"parseFloat\",\"toFixed\",\"replace\",\"JSON\",\"stringify\",\"toUpperCase\",\"namespace\",\"eval\",\"vsprintf\",\"replacements\",\"concat\"]\n}\n"]