["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/rust.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$rust=function(global,require,module,exports){module.exports=function(hljs){var regex=hljs.regex;regex={className:\"title.function.invoke\",relevance:0,begin:regex.concat(/\\b/,/(?!let\\b)/,hljs.IDENT_RE,regex.lookahead(/\\s*\\(/))};const BUILTINS=\"drop ;Copy;Send;Sized;Sync;Drop;Fn;FnMut;FnOnce;ToOwned;Clone;Debug;PartialEq;PartialOrd;Eq;Ord;AsRef;AsMut;Into;From;Default;Iterator;Extend;IntoIterator;DoubleEndedIterator;ExactSizeIterator;SliceConcatExt;ToString;assert!;assert_eq!;bitflags!;bytes!;cfg!;col!;concat!;concat_idents!;debug_assert!;debug_assert_eq!;env!;panic!;file!;format!;format_args!;include_bytes!;include_str!;line!;local_data_key!;module_path!;option_env!;print!;println!;select!;stringify!;try!;unimplemented!;unreachable!;vec!;write!;writeln!;macro_rules!;assert_ne!;debug_assert_ne!\".split(\";\"),\nTYPES=\"i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize f32 f64 str char bool Box Option Result String Vec\".split(\" \");return{name:\"Rust\",aliases:[\"rs\"],keywords:{$pattern:hljs.IDENT_RE+\"!?\",type:TYPES,keyword:\"abstract as async await become box break const continue crate do dyn else enum extern false final fn for if impl in let loop macro match mod move mut override priv pub ref return self Self static struct super trait true try type typeof unsafe unsized use virtual where while yield\".split(\" \"),\nliteral:\"true false Some None Ok Err\".split(\" \"),built_in:BUILTINS},illegal:\"\\x3c/\",contains:[hljs.C_LINE_COMMENT_MODE,hljs.COMMENT(\"/\\\\*\",\"\\\\*/\",{contains:[\"self\"]}),hljs.inherit(hljs.QUOTE_STRING_MODE,{begin:/b?\"/,illegal:null}),{className:\"string\",variants:[{begin:/b?r(#*)\"(.|\\n)*?\"\\1(?!#)/},{begin:/b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/}]},{className:\"symbol\",begin:/'[a-zA-Z_][a-zA-Z0-9_]*/},{className:\"number\",variants:[{begin:\"\\\\b0b([01_]+)([ui](8|16|32|64|128|size)|f(32|64))?\"},{begin:\"\\\\b0o([0-7_]+)([ui](8|16|32|64|128|size)|f(32|64))?\"},\n{begin:\"\\\\b0x([A-Fa-f0-9_]+)([ui](8|16|32|64|128|size)|f(32|64))?\"},{begin:\"\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)([ui](8|16|32|64|128|size)|f(32|64))?\"}],relevance:0},{begin:[/fn/,/\\s+/,hljs.UNDERSCORE_IDENT_RE],className:{1:\"keyword\",3:\"title.function\"}},{className:\"meta\",begin:\"#!?\\\\[\",end:\"\\\\]\",contains:[{className:\"string\",begin:/\"/,end:/\"/}]},{begin:[/let/,/\\s+/,/(?:mut\\s+)?/,hljs.UNDERSCORE_IDENT_RE],className:{1:\"keyword\",3:\"keyword\",4:\"variable\"}},{begin:[/for/,/\\s+/,hljs.UNDERSCORE_IDENT_RE,\n/\\s+/,/in/],className:{1:\"keyword\",3:\"variable\",5:\"keyword\"}},{begin:[/type/,/\\s+/,hljs.UNDERSCORE_IDENT_RE],className:{1:\"keyword\",3:\"title.class\"}},{begin:[/(?:trait|enum|struct|union|impl|for)/,/\\s+/,hljs.UNDERSCORE_IDENT_RE],className:{1:\"keyword\",3:\"title.class\"}},{begin:hljs.IDENT_RE+\"::\",keywords:{keyword:\"Self\",built_in:BUILTINS,type:TYPES}},{className:\"punctuation\",begin:\"-\\x3e\"},regex]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$rust\"] = function(global,require,module,exports) {\n/*\nLanguage: Rust\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\nWebsite: https://www.rust-lang.org\nCategory: common, system\n*/\n\n/** @type LanguageFn */\nfunction rust(hljs) {\n  const regex = hljs.regex;\n  const FUNCTION_INVOKE = {\n    className: \"title.function.invoke\",\n    relevance: 0,\n    begin: regex.concat(\n      /\\b/,\n      /(?!let\\b)/,\n      hljs.IDENT_RE,\n      regex.lookahead(/\\s*\\(/))\n  };\n  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\?';\n  const KEYWORDS = [\n    \"abstract\",\n    \"as\",\n    \"async\",\n    \"await\",\n    \"become\",\n    \"box\",\n    \"break\",\n    \"const\",\n    \"continue\",\n    \"crate\",\n    \"do\",\n    \"dyn\",\n    \"else\",\n    \"enum\",\n    \"extern\",\n    \"false\",\n    \"final\",\n    \"fn\",\n    \"for\",\n    \"if\",\n    \"impl\",\n    \"in\",\n    \"let\",\n    \"loop\",\n    \"macro\",\n    \"match\",\n    \"mod\",\n    \"move\",\n    \"mut\",\n    \"override\",\n    \"priv\",\n    \"pub\",\n    \"ref\",\n    \"return\",\n    \"self\",\n    \"Self\",\n    \"static\",\n    \"struct\",\n    \"super\",\n    \"trait\",\n    \"true\",\n    \"try\",\n    \"type\",\n    \"typeof\",\n    \"unsafe\",\n    \"unsized\",\n    \"use\",\n    \"virtual\",\n    \"where\",\n    \"while\",\n    \"yield\"\n  ];\n  const LITERALS = [\n    \"true\",\n    \"false\",\n    \"Some\",\n    \"None\",\n    \"Ok\",\n    \"Err\"\n  ];\n  const BUILTINS = [\n    // functions\n    'drop ',\n    // traits\n    \"Copy\",\n    \"Send\",\n    \"Sized\",\n    \"Sync\",\n    \"Drop\",\n    \"Fn\",\n    \"FnMut\",\n    \"FnOnce\",\n    \"ToOwned\",\n    \"Clone\",\n    \"Debug\",\n    \"PartialEq\",\n    \"PartialOrd\",\n    \"Eq\",\n    \"Ord\",\n    \"AsRef\",\n    \"AsMut\",\n    \"Into\",\n    \"From\",\n    \"Default\",\n    \"Iterator\",\n    \"Extend\",\n    \"IntoIterator\",\n    \"DoubleEndedIterator\",\n    \"ExactSizeIterator\",\n    \"SliceConcatExt\",\n    \"ToString\",\n    // macros\n    \"assert!\",\n    \"assert_eq!\",\n    \"bitflags!\",\n    \"bytes!\",\n    \"cfg!\",\n    \"col!\",\n    \"concat!\",\n    \"concat_idents!\",\n    \"debug_assert!\",\n    \"debug_assert_eq!\",\n    \"env!\",\n    \"panic!\",\n    \"file!\",\n    \"format!\",\n    \"format_args!\",\n    \"include_bytes!\",\n    \"include_str!\",\n    \"line!\",\n    \"local_data_key!\",\n    \"module_path!\",\n    \"option_env!\",\n    \"print!\",\n    \"println!\",\n    \"select!\",\n    \"stringify!\",\n    \"try!\",\n    \"unimplemented!\",\n    \"unreachable!\",\n    \"vec!\",\n    \"write!\",\n    \"writeln!\",\n    \"macro_rules!\",\n    \"assert_ne!\",\n    \"debug_assert_ne!\"\n  ];\n  const TYPES = [\n    \"i8\",\n    \"i16\",\n    \"i32\",\n    \"i64\",\n    \"i128\",\n    \"isize\",\n    \"u8\",\n    \"u16\",\n    \"u32\",\n    \"u64\",\n    \"u128\",\n    \"usize\",\n    \"f32\",\n    \"f64\",\n    \"str\",\n    \"char\",\n    \"bool\",\n    \"Box\",\n    \"Option\",\n    \"Result\",\n    \"String\",\n    \"Vec\"\n  ];\n  return {\n    name: 'Rust',\n    aliases: [ 'rs' ],\n    keywords: {\n      $pattern: hljs.IDENT_RE + '!?',\n      type: TYPES,\n      keyword: KEYWORDS,\n      literal: LITERALS,\n      built_in: BUILTINS\n    },\n    illegal: '</',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT('/\\\\*', '\\\\*/', { contains: [ 'self' ] }),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        begin: /b?\"/,\n        illegal: null\n      }),\n      {\n        className: 'string',\n        variants: [\n          { begin: /b?r(#*)\"(.|\\n)*?\"\\1(?!#)/ },\n          { begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/ }\n        ]\n      },\n      {\n        className: 'symbol',\n        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\n      },\n      {\n        className: 'number',\n        variants: [\n          { begin: '\\\\b0b([01_]+)' + NUMBER_SUFFIX },\n          { begin: '\\\\b0o([0-7_]+)' + NUMBER_SUFFIX },\n          { begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX },\n          { begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)'\n                   + NUMBER_SUFFIX }\n        ],\n        relevance: 0\n      },\n      {\n        begin: [\n          /fn/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"title.function\"\n        }\n      },\n      {\n        className: 'meta',\n        begin: '#!?\\\\[',\n        end: '\\\\]',\n        contains: [\n          {\n            className: 'string',\n            begin: /\"/,\n            end: /\"/\n          }\n        ]\n      },\n      {\n        begin: [\n          /let/,\n          /\\s+/,\n          /(?:mut\\s+)?/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"keyword\",\n          4: \"variable\"\n        }\n      },\n      // must come before impl/for rule later\n      {\n        begin: [\n          /for/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE,\n          /\\s+/,\n          /in/\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"variable\",\n          5: \"keyword\"\n        }\n      },\n      {\n        begin: [\n          /type/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"title.class\"\n        }\n      },\n      {\n        begin: [\n          /(?:trait|enum|struct|union|impl|for)/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"title.class\"\n        }\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: {\n          keyword: \"Self\",\n          built_in: BUILTINS,\n          type: TYPES\n        }\n      },\n      {\n        className: \"punctuation\",\n        begin: '->'\n      },\n      FUNCTION_INVOKE\n    ]\n  };\n}\n\nmodule.exports = rust;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["variants","begin","aliases","className","contains","$pattern","relevance","name","built_in","keyword","keywords","type","illegal","literal","end"]],"~:compiled-at",1676671710228,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$rust.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/rust.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$rust\\\"] = function(global,require,module,exports) {\\n/*\\nLanguage: Rust\\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\\nWebsite: https://www.rust-lang.org\\nCategory: common, system\\n*/\\n\\n/** @type LanguageFn */\\nfunction rust(hljs) {\\n  const regex = hljs.regex;\\n  const FUNCTION_INVOKE = {\\n    className: \\\"title.function.invoke\\\",\\n    relevance: 0,\\n    begin: regex.concat(\\n      /\\\\b/,\\n      /(?!let\\\\b)/,\\n      hljs.IDENT_RE,\\n      regex.lookahead(/\\\\s*\\\\(/))\\n  };\\n  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\\\?';\\n  const KEYWORDS = [\\n    \\\"abstract\\\",\\n    \\\"as\\\",\\n    \\\"async\\\",\\n    \\\"await\\\",\\n    \\\"become\\\",\\n    \\\"box\\\",\\n    \\\"break\\\",\\n    \\\"const\\\",\\n    \\\"continue\\\",\\n    \\\"crate\\\",\\n    \\\"do\\\",\\n    \\\"dyn\\\",\\n    \\\"else\\\",\\n    \\\"enum\\\",\\n    \\\"extern\\\",\\n    \\\"false\\\",\\n    \\\"final\\\",\\n    \\\"fn\\\",\\n    \\\"for\\\",\\n    \\\"if\\\",\\n    \\\"impl\\\",\\n    \\\"in\\\",\\n    \\\"let\\\",\\n    \\\"loop\\\",\\n    \\\"macro\\\",\\n    \\\"match\\\",\\n    \\\"mod\\\",\\n    \\\"move\\\",\\n    \\\"mut\\\",\\n    \\\"override\\\",\\n    \\\"priv\\\",\\n    \\\"pub\\\",\\n    \\\"ref\\\",\\n    \\\"return\\\",\\n    \\\"self\\\",\\n    \\\"Self\\\",\\n    \\\"static\\\",\\n    \\\"struct\\\",\\n    \\\"super\\\",\\n    \\\"trait\\\",\\n    \\\"true\\\",\\n    \\\"try\\\",\\n    \\\"type\\\",\\n    \\\"typeof\\\",\\n    \\\"unsafe\\\",\\n    \\\"unsized\\\",\\n    \\\"use\\\",\\n    \\\"virtual\\\",\\n    \\\"where\\\",\\n    \\\"while\\\",\\n    \\\"yield\\\"\\n  ];\\n  const LITERALS = [\\n    \\\"true\\\",\\n    \\\"false\\\",\\n    \\\"Some\\\",\\n    \\\"None\\\",\\n    \\\"Ok\\\",\\n    \\\"Err\\\"\\n  ];\\n  const BUILTINS = [\\n    // functions\\n    'drop ',\\n    // traits\\n    \\\"Copy\\\",\\n    \\\"Send\\\",\\n    \\\"Sized\\\",\\n    \\\"Sync\\\",\\n    \\\"Drop\\\",\\n    \\\"Fn\\\",\\n    \\\"FnMut\\\",\\n    \\\"FnOnce\\\",\\n    \\\"ToOwned\\\",\\n    \\\"Clone\\\",\\n    \\\"Debug\\\",\\n    \\\"PartialEq\\\",\\n    \\\"PartialOrd\\\",\\n    \\\"Eq\\\",\\n    \\\"Ord\\\",\\n    \\\"AsRef\\\",\\n    \\\"AsMut\\\",\\n    \\\"Into\\\",\\n    \\\"From\\\",\\n    \\\"Default\\\",\\n    \\\"Iterator\\\",\\n    \\\"Extend\\\",\\n    \\\"IntoIterator\\\",\\n    \\\"DoubleEndedIterator\\\",\\n    \\\"ExactSizeIterator\\\",\\n    \\\"SliceConcatExt\\\",\\n    \\\"ToString\\\",\\n    // macros\\n    \\\"assert!\\\",\\n    \\\"assert_eq!\\\",\\n    \\\"bitflags!\\\",\\n    \\\"bytes!\\\",\\n    \\\"cfg!\\\",\\n    \\\"col!\\\",\\n    \\\"concat!\\\",\\n    \\\"concat_idents!\\\",\\n    \\\"debug_assert!\\\",\\n    \\\"debug_assert_eq!\\\",\\n    \\\"env!\\\",\\n    \\\"panic!\\\",\\n    \\\"file!\\\",\\n    \\\"format!\\\",\\n    \\\"format_args!\\\",\\n    \\\"include_bytes!\\\",\\n    \\\"include_str!\\\",\\n    \\\"line!\\\",\\n    \\\"local_data_key!\\\",\\n    \\\"module_path!\\\",\\n    \\\"option_env!\\\",\\n    \\\"print!\\\",\\n    \\\"println!\\\",\\n    \\\"select!\\\",\\n    \\\"stringify!\\\",\\n    \\\"try!\\\",\\n    \\\"unimplemented!\\\",\\n    \\\"unreachable!\\\",\\n    \\\"vec!\\\",\\n    \\\"write!\\\",\\n    \\\"writeln!\\\",\\n    \\\"macro_rules!\\\",\\n    \\\"assert_ne!\\\",\\n    \\\"debug_assert_ne!\\\"\\n  ];\\n  const TYPES = [\\n    \\\"i8\\\",\\n    \\\"i16\\\",\\n    \\\"i32\\\",\\n    \\\"i64\\\",\\n    \\\"i128\\\",\\n    \\\"isize\\\",\\n    \\\"u8\\\",\\n    \\\"u16\\\",\\n    \\\"u32\\\",\\n    \\\"u64\\\",\\n    \\\"u128\\\",\\n    \\\"usize\\\",\\n    \\\"f32\\\",\\n    \\\"f64\\\",\\n    \\\"str\\\",\\n    \\\"char\\\",\\n    \\\"bool\\\",\\n    \\\"Box\\\",\\n    \\\"Option\\\",\\n    \\\"Result\\\",\\n    \\\"String\\\",\\n    \\\"Vec\\\"\\n  ];\\n  return {\\n    name: 'Rust',\\n    aliases: [ 'rs' ],\\n    keywords: {\\n      $pattern: hljs.IDENT_RE + '!?',\\n      type: TYPES,\\n      keyword: KEYWORDS,\\n      literal: LITERALS,\\n      built_in: BUILTINS\\n    },\\n    illegal: '</',\\n    contains: [\\n      hljs.C_LINE_COMMENT_MODE,\\n      hljs.COMMENT('/\\\\\\\\*', '\\\\\\\\*/', { contains: [ 'self' ] }),\\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\\n        begin: /b?\\\"/,\\n        illegal: null\\n      }),\\n      {\\n        className: 'string',\\n        variants: [\\n          { begin: /b?r(#*)\\\"(.|\\\\n)*?\\\"\\\\1(?!#)/ },\\n          { begin: /b?'\\\\\\\\?(x\\\\w{2}|u\\\\w{4}|U\\\\w{8}|.)'/ }\\n        ]\\n      },\\n      {\\n        className: 'symbol',\\n        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\\n      },\\n      {\\n        className: 'number',\\n        variants: [\\n          { begin: '\\\\\\\\b0b([01_]+)' + NUMBER_SUFFIX },\\n          { begin: '\\\\\\\\b0o([0-7_]+)' + NUMBER_SUFFIX },\\n          { begin: '\\\\\\\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX },\\n          { begin: '\\\\\\\\b(\\\\\\\\d[\\\\\\\\d_]*(\\\\\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)'\\n                   + NUMBER_SUFFIX }\\n        ],\\n        relevance: 0\\n      },\\n      {\\n        begin: [\\n          /fn/,\\n          /\\\\s+/,\\n          hljs.UNDERSCORE_IDENT_RE\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.function\\\"\\n        }\\n      },\\n      {\\n        className: 'meta',\\n        begin: '#!?\\\\\\\\[',\\n        end: '\\\\\\\\]',\\n        contains: [\\n          {\\n            className: 'string',\\n            begin: /\\\"/,\\n            end: /\\\"/\\n          }\\n        ]\\n      },\\n      {\\n        begin: [\\n          /let/,\\n          /\\\\s+/,\\n          /(?:mut\\\\s+)?/,\\n          hljs.UNDERSCORE_IDENT_RE\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"keyword\\\",\\n          4: \\\"variable\\\"\\n        }\\n      },\\n      // must come before impl/for rule later\\n      {\\n        begin: [\\n          /for/,\\n          /\\\\s+/,\\n          hljs.UNDERSCORE_IDENT_RE,\\n          /\\\\s+/,\\n          /in/\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"variable\\\",\\n          5: \\\"keyword\\\"\\n        }\\n      },\\n      {\\n        begin: [\\n          /type/,\\n          /\\\\s+/,\\n          hljs.UNDERSCORE_IDENT_RE\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.class\\\"\\n        }\\n      },\\n      {\\n        begin: [\\n          /(?:trait|enum|struct|union|impl|for)/,\\n          /\\\\s+/,\\n          hljs.UNDERSCORE_IDENT_RE\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.class\\\"\\n        }\\n      },\\n      {\\n        begin: hljs.IDENT_RE + '::',\\n        keywords: {\\n          keyword: \\\"Self\\\",\\n          built_in: BUILTINS,\\n          type: TYPES\\n        }\\n      },\\n      {\\n        className: \\\"punctuation\\\",\\n        begin: '->'\\n      },\\n      FUNCTION_INVOKE\\n    ]\\n  };\\n}\\n\\nmodule.exports = rust;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"rust\",\"hljs\",\"regex\",\"FUNCTION_INVOKE\",\"className\",\"relevance\",\"begin\",\"concat\",\"IDENT_RE\",\"lookahead\",\"BUILTINS\",\"TYPES\",\"name\",\"aliases\",\"keywords\",\"$pattern\",\"type\",\"keyword\",\"KEYWORDS\",\"literal\",\"LITERALS\",\"built_in\",\"illegal\",\"contains\",\"C_LINE_COMMENT_MODE\",\"COMMENT\",\"inherit\",\"QUOTE_STRING_MODE\",\"variants\",\"UNDERSCORE_IDENT_RE\",\"end\"]\n}\n"]