["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-hast/lib/handlers/table-row.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_hast$lib$handlers$table_row=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.tableRow=function(state,node,parent){var siblings=parent?parent.children:void 0;siblings=0===(siblings?siblings.indexOf(node):1)?\"th\":\"td\";const length=(parent=parent&&\"table\"===parent.type?parent.align:void 0)?parent.length:node.children.length;let cellIndex=-1;const cells=[];for(;++cellIndex<length;){const cell=node.children[cellIndex];\nvar properties={};const alignValue=parent?parent[cellIndex]:void 0;alignValue&&(properties.align=alignValue);properties={type:\"element\",tagName:siblings,properties,children:[]};cell&&(properties.children=state.all(cell),state.patch(cell,properties),properties=state.applyData(node,properties));cells.push(properties)}siblings={type:\"element\",tagName:\"tr\",properties:{},children:state.wrap(cells,!0)};state.patch(node,siblings);return state.applyData(node,siblings)}}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_hast$lib$handlers$table_row\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tableRow = tableRow;\n\n/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nfunction tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined; // Generate a body row when without parent.\n\n  const rowIndex = siblings ? siblings.indexOf(node) : 1;\n  const tagName = rowIndex === 0 ? 'th' : 'td';\n  const align = parent && parent.type === 'table' ? parent.align : undefined;\n  const length = align ? align.length : node.children.length;\n  let cellIndex = -1;\n  /** @type {Array<ElementContent>} */\n\n  const cells = [];\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex];\n    /** @type {Properties} */\n\n    const properties = {};\n    const alignValue = align ? align[cellIndex] : undefined;\n\n    if (alignValue) {\n      properties.align = alignValue;\n    }\n    /** @type {Element} */\n\n\n    let result = {\n      type: 'element',\n      tagName,\n      properties,\n      children: []\n    };\n\n    if (cell) {\n      result.children = state.all(cell);\n      state.patch(cell, result);\n      result = state.applyData(node, result);\n    }\n\n    cells.push(result);\n  }\n  /** @type {Element} */\n\n\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["properties","align","children","__esModule","value","tableRow","type","tagName"]],"~:compiled-at",1676665867316,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_hast$lib$handlers$table_row.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,QAAR,CA8BAA,QAAiB,CAACC,KAAD,CAAQC,IAAR,CAAcC,MAAd,CAAsB,CACrC,IAAMC,SAAWD,MAAA,CAASA,MAAOE,CAAAA,QAAhB,CAA2BC,IAAAA,EAGtCC,SAAAA,CAAuB,CAAb,IADCH,QAAAI,CAAWJ,QAASK,CAAAA,OAAT,CAAiBP,IAAjB,CAAXM,CAAoC,CACrC,EAAiB,IAAjB,CAAwB,IAExC,OAAME,OAAS,CADTC,MACS,CADDR,MAAA,EAA0B,OAA1B,GAAUA,MAAOS,CAAAA,IAAjB,CAAoCT,MAAOQ,CAAAA,KAA3C,CAAmDL,IAAAA,EAClD,EAAQK,MAAMD,CAAAA,MAAd,CAAuBR,IAAKG,CAAAA,QAASK,CAAAA,MACpD,KAAIG,UAAY,CAAC,CAGjB,OAAMC,MAAQ,EAEd,KAAA,CAAO,EAAED,SAAT,CAAqBH,MAArB,CAAA,CAA6B,CAE3B,MAAMK,KAAOb,IAAKG,CAAAA,QAAL,CAAcQ,SAAd,CAGb;IAAMG,WAAa,EACnB,OAAMC,WAAaN,MAAA,CAAQA,MAAA,CAAME,SAAN,CAAR,CAA2BP,IAAAA,EAE1CW,WAAJ,GACED,UAAWL,CAAAA,KADb,CACqBM,UADrB,CAMIC,WAAAA,CAAS,CACXN,KAAM,SADK,CAEXL,QAAAA,QAFW,CAGXS,UAHW,CAIXX,SAAU,EAJC,CAOTU,KAAJ,GACEG,UAAOb,CAAAA,QAEP,CAFkBJ,KAAMkB,CAAAA,GAAN,CAAUJ,IAAV,CAElB,CADAd,KAAMmB,CAAAA,KAAN,CAAYL,IAAZ,CAAkBG,UAAlB,CACA,CAAAA,UAAA,CAASjB,KAAMoB,CAAAA,SAAN,CAAgBnB,IAAhB,CAAsBgB,UAAtB,CAHX,CAMAJ,MAAMQ,CAAAA,IAAN,CAAWJ,UAAX,CA3B2B,CAgCvBA,QAAAA,CAAS,CACbN,KAAM,SADO,CAEbL,QAAS,IAFI,CAGbS,WAAY,EAHC,CAIbX,SAAUJ,KAAMsB,CAAAA,IAAN,CAAWT,KAAX,CAAkB,CAAA,CAAlB,CAJG,CAMfb,MAAMmB,CAAAA,KAAN,CAAYlB,IAAZ,CAAkBgB,QAAlB,CACA,OAAOjB,MAAMoB,CAAAA,SAAN,CAAgBnB,IAAhB,CAAsBgB,QAAtB,CAnD8B,CApCmF;\",\n\"sources\":[\"node_modules/mdast-util-to-hast/lib/handlers/table-row.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_hast$lib$handlers$table_row\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.tableRow = tableRow;\\n\\n/**\\n * @typedef {import('hast').Properties} Properties\\n * @typedef {import('hast').Element} Element\\n * @typedef {import('hast').ElementContent} ElementContent\\n * @typedef {import('mdast').Content} Content\\n * @typedef {import('mdast').Parent} Parent\\n * @typedef {import('mdast').Root} Root\\n * @typedef {import('mdast').TableRow} TableRow\\n * @typedef {import('../state.js').State} State\\n */\\n\\n/**\\n * @typedef {Root | Content} Nodes\\n * @typedef {Extract<Nodes, Parent>} Parents\\n */\\n\\n/**\\n * Turn an mdast `tableRow` node into hast.\\n *\\n * @param {State} state\\n *   Info passed around.\\n * @param {TableRow} node\\n *   mdast node.\\n * @param {Parents | null | undefined} parent\\n *   Parent of `node`.\\n * @returns {Element}\\n *   hast node.\\n */\\nfunction tableRow(state, node, parent) {\\n  const siblings = parent ? parent.children : undefined; // Generate a body row when without parent.\\n\\n  const rowIndex = siblings ? siblings.indexOf(node) : 1;\\n  const tagName = rowIndex === 0 ? 'th' : 'td';\\n  const align = parent && parent.type === 'table' ? parent.align : undefined;\\n  const length = align ? align.length : node.children.length;\\n  let cellIndex = -1;\\n  /** @type {Array<ElementContent>} */\\n\\n  const cells = [];\\n\\n  while (++cellIndex < length) {\\n    // Note: can also be undefined.\\n    const cell = node.children[cellIndex];\\n    /** @type {Properties} */\\n\\n    const properties = {};\\n    const alignValue = align ? align[cellIndex] : undefined;\\n\\n    if (alignValue) {\\n      properties.align = alignValue;\\n    }\\n    /** @type {Element} */\\n\\n\\n    let result = {\\n      type: 'element',\\n      tagName,\\n      properties,\\n      children: []\\n    };\\n\\n    if (cell) {\\n      result.children = state.all(cell);\\n      state.patch(cell, result);\\n      result = state.applyData(node, result);\\n    }\\n\\n    cells.push(result);\\n  }\\n  /** @type {Element} */\\n\\n\\n  const result = {\\n    type: 'element',\\n    tagName: 'tr',\\n    properties: {},\\n    children: state.wrap(cells, true)\\n  };\\n  state.patch(node, result);\\n  return state.applyData(node, result);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"tableRow\",\"state\",\"node\",\"parent\",\"siblings\",\"children\",\"undefined\",\"tagName\",\"rowIndex\",\"indexOf\",\"length\",\"align\",\"type\",\"cellIndex\",\"cells\",\"cell\",\"properties\",\"alignValue\",\"result\",\"all\",\"patch\",\"applyData\",\"push\",\"wrap\"]\n}\n"]