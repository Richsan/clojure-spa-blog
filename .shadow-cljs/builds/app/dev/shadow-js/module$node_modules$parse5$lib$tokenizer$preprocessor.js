["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/parse5/lib/tokenizer/preprocessor.js"],"~:js","shadow$provide.module$node_modules$parse5$lib$tokenizer$preprocessor=function(global,require,module,exports){const unicode=require(\"module$node_modules$parse5$lib$common$unicode\"),ERR=require(\"module$node_modules$parse5$lib$common$error_codes\"),$=unicode.CODE_POINTS;class Preprocessor{constructor(){this.html=null;this.lastCharPos=this.lastGapPos=this.pos=-1;this.gapStack=[];this.endOfChunkHit=this.lastChunkWritten=this.skipNextNewLine=!1;this.bufferWaterline=65536}_err(){}_addGap(){this.gapStack.push(this.lastGapPos);\nthis.lastGapPos=this.pos}_processSurrogate(cp){if(this.pos!==this.lastCharPos){const nextCp=this.html.charCodeAt(this.pos+1);if(unicode.isSurrogatePair(nextCp))return this.pos++,this._addGap(),unicode.getSurrogatePairCodePoint(cp,nextCp)}else if(!this.lastChunkWritten)return this.endOfChunkHit=!0,$.EOF;this._err(ERR.surrogateInInputStream);return cp}dropParsedChunk(){this.pos>this.bufferWaterline&&(this.lastCharPos-=this.pos,this.html=this.html.substring(this.pos),this.pos=0,this.lastGapPos=-1,this.gapStack=\n[])}write(chunk,isLastChunk){this.html=this.html?this.html+chunk:chunk;this.lastCharPos=this.html.length-1;this.endOfChunkHit=!1;this.lastChunkWritten=isLastChunk}insertHtmlAtCurrentPos(chunk){this.html=this.html.substring(0,this.pos+1)+chunk+this.html.substring(this.pos+1,this.html.length);this.lastCharPos=this.html.length-1;this.endOfChunkHit=!1}advance(){this.pos++;if(this.pos>this.lastCharPos)return this.endOfChunkHit=!this.lastChunkWritten,$.EOF;let cp=this.html.charCodeAt(this.pos);if(this.skipNextNewLine&&\ncp===$.LINE_FEED)return this.skipNextNewLine=!1,this._addGap(),this.advance();if(cp===$.CARRIAGE_RETURN)return this.skipNextNewLine=!0,$.LINE_FEED;this.skipNextNewLine=!1;unicode.isSurrogate(cp)&&(cp=this._processSurrogate(cp));31<cp&&127>cp||cp===$.LINE_FEED||cp===$.CARRIAGE_RETURN||159<cp&&64976>cp||this._checkForProblematicCharacters(cp);return cp}_checkForProblematicCharacters(cp){unicode.isControlCodePoint(cp)?this._err(ERR.controlCharacterInInputStream):unicode.isUndefinedCodePoint(cp)&&this._err(ERR.noncharacterInInputStream)}retreat(){this.pos===\nthis.lastGapPos&&(this.lastGapPos=this.gapStack.pop(),this.pos--);this.pos--}}module.exports=Preprocessor}","~:source","shadow$provide[\"module$node_modules$parse5$lib$tokenizer$preprocessor\"] = function(global,require,module,exports) {\n'use strict';\n\nconst unicode = require('../common/unicode');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\n\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nclass Preprocessor {\n    constructor() {\n        this.html = null;\n\n        this.pos = -1;\n        this.lastGapPos = -1;\n        this.lastCharPos = -1;\n\n        this.gapStack = [];\n\n        this.skipNextNewLine = false;\n\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n    }\n\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.lastCharPos) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n\n            if (unicode.isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n\n                //NOTE: add gap that should be avoided during retreat\n                this._addGap();\n\n                return unicode.getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n\n        //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n\n        return cp;\n    }\n\n    dropParsedChunk() {\n        if (this.pos > this.bufferWaterline) {\n            this.lastCharPos -= this.pos;\n            this.html = this.html.substring(this.pos);\n            this.pos = 0;\n            this.lastGapPos = -1;\n            this.gapStack = [];\n        }\n    }\n\n    write(chunk, isLastChunk) {\n        if (this.html) {\n            this.html += chunk;\n        } else {\n            this.html = chunk;\n        }\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n    }\n\n    advance() {\n        this.pos++;\n\n        if (this.pos > this.lastCharPos) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n\n        let cp = this.html.charCodeAt(this.pos);\n\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (this.skipNextNewLine && cp === $.LINE_FEED) {\n            this.skipNextNewLine = false;\n            this._addGap();\n            return this.advance();\n        }\n\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n\n        this.skipNextNewLine = false;\n\n        if (unicode.isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange =\n            (cp > 0x1f && cp < 0x7f) || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || (cp > 0x9f && cp < 0xfdd0);\n\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n\n        return cp;\n    }\n\n    _checkForProblematicCharacters(cp) {\n        if (unicode.isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        } else if (unicode.isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n\n    retreat() {\n        if (this.pos === this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n\n        this.pos--;\n    }\n}\n\nmodule.exports = Preprocessor;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$parse5$lib$common$error_codes","~$module$node_modules$parse5$lib$common$unicode"]],"~:properties",["^5",["lastCharPos","pos","bufferWaterline","lastChunkWritten","endOfChunkHit","gapStack","skipNextNewLine","lastGapPos","html"]],"~:compiled-at",1676667638372,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$parse5$lib$tokenizer$preprocessor.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/parse5/lib/tokenizer/preprocessor.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$parse5$lib$tokenizer$preprocessor\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nconst unicode = require('../common/unicode');\\nconst ERR = require('../common/error-codes');\\n\\n//Aliases\\nconst $ = unicode.CODE_POINTS;\\n\\n//Const\\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\\n\\n//Preprocessor\\n//NOTE: HTML input preprocessing\\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\\nclass Preprocessor {\\n    constructor() {\\n        this.html = null;\\n\\n        this.pos = -1;\\n        this.lastGapPos = -1;\\n        this.lastCharPos = -1;\\n\\n        this.gapStack = [];\\n\\n        this.skipNextNewLine = false;\\n\\n        this.lastChunkWritten = false;\\n        this.endOfChunkHit = false;\\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\\n    }\\n\\n    _err() {\\n        // NOTE: err reporting is noop by default. Enabled by mixin.\\n    }\\n\\n    _addGap() {\\n        this.gapStack.push(this.lastGapPos);\\n        this.lastGapPos = this.pos;\\n    }\\n\\n    _processSurrogate(cp) {\\n        //NOTE: try to peek a surrogate pair\\n        if (this.pos !== this.lastCharPos) {\\n            const nextCp = this.html.charCodeAt(this.pos + 1);\\n\\n            if (unicode.isSurrogatePair(nextCp)) {\\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\\n                this.pos++;\\n\\n                //NOTE: add gap that should be avoided during retreat\\n                this._addGap();\\n\\n                return unicode.getSurrogatePairCodePoint(cp, nextCp);\\n            }\\n        }\\n\\n        //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\\n        else if (!this.lastChunkWritten) {\\n            this.endOfChunkHit = true;\\n            return $.EOF;\\n        }\\n\\n        //NOTE: isolated surrogate\\n        this._err(ERR.surrogateInInputStream);\\n\\n        return cp;\\n    }\\n\\n    dropParsedChunk() {\\n        if (this.pos > this.bufferWaterline) {\\n            this.lastCharPos -= this.pos;\\n            this.html = this.html.substring(this.pos);\\n            this.pos = 0;\\n            this.lastGapPos = -1;\\n            this.gapStack = [];\\n        }\\n    }\\n\\n    write(chunk, isLastChunk) {\\n        if (this.html) {\\n            this.html += chunk;\\n        } else {\\n            this.html = chunk;\\n        }\\n\\n        this.lastCharPos = this.html.length - 1;\\n        this.endOfChunkHit = false;\\n        this.lastChunkWritten = isLastChunk;\\n    }\\n\\n    insertHtmlAtCurrentPos(chunk) {\\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\\n\\n        this.lastCharPos = this.html.length - 1;\\n        this.endOfChunkHit = false;\\n    }\\n\\n    advance() {\\n        this.pos++;\\n\\n        if (this.pos > this.lastCharPos) {\\n            this.endOfChunkHit = !this.lastChunkWritten;\\n            return $.EOF;\\n        }\\n\\n        let cp = this.html.charCodeAt(this.pos);\\n\\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\\n        //must be ignored.\\n        if (this.skipNextNewLine && cp === $.LINE_FEED) {\\n            this.skipNextNewLine = false;\\n            this._addGap();\\n            return this.advance();\\n        }\\n\\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\\n        if (cp === $.CARRIAGE_RETURN) {\\n            this.skipNextNewLine = true;\\n            return $.LINE_FEED;\\n        }\\n\\n        this.skipNextNewLine = false;\\n\\n        if (unicode.isSurrogate(cp)) {\\n            cp = this._processSurrogate(cp);\\n        }\\n\\n        //OPTIMIZATION: first check if code point is in the common allowed\\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\\n        //before going into detailed performance cost validation.\\n        const isCommonValidRange =\\n            (cp > 0x1f && cp < 0x7f) || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || (cp > 0x9f && cp < 0xfdd0);\\n\\n        if (!isCommonValidRange) {\\n            this._checkForProblematicCharacters(cp);\\n        }\\n\\n        return cp;\\n    }\\n\\n    _checkForProblematicCharacters(cp) {\\n        if (unicode.isControlCodePoint(cp)) {\\n            this._err(ERR.controlCharacterInInputStream);\\n        } else if (unicode.isUndefinedCodePoint(cp)) {\\n            this._err(ERR.noncharacterInInputStream);\\n        }\\n    }\\n\\n    retreat() {\\n        if (this.pos === this.lastGapPos) {\\n            this.lastGapPos = this.gapStack.pop();\\n            this.pos--;\\n        }\\n\\n        this.pos--;\\n    }\\n}\\n\\nmodule.exports = Preprocessor;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"unicode\",\"ERR\",\"$\",\"CODE_POINTS\",\"Preprocessor\",\"constructor\",\"html\",\"lastCharPos\",\"lastGapPos\",\"pos\",\"gapStack\",\"endOfChunkHit\",\"lastChunkWritten\",\"skipNextNewLine\",\"bufferWaterline\",\"DEFAULT_BUFFER_WATERLINE\",\"_err\",\"_addGap\",\"push\",\"_processSurrogate\",\"cp\",\"nextCp\",\"charCodeAt\",\"isSurrogatePair\",\"getSurrogatePairCodePoint\",\"EOF\",\"surrogateInInputStream\",\"dropParsedChunk\",\"substring\",\"write\",\"chunk\",\"isLastChunk\",\"length\",\"insertHtmlAtCurrentPos\",\"advance\",\"LINE_FEED\",\"CARRIAGE_RETURN\",\"isSurrogate\",\"_checkForProblematicCharacters\",\"isControlCodePoint\",\"controlCharacterInInputStream\",\"isUndefinedCodePoint\",\"noncharacterInInputStream\",\"retreat\",\"pop\"]\n}\n"]