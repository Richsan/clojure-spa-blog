["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-factory-destination/index.js"],"~:js","shadow$provide.module$node_modules$micromark_factory_destination$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.factoryDestination=function(effects,ok,nok,type,literalType,literalMarkerType,rawType,stringType,max){function destinationEnclosedBefore(code){if(62===code)return effects.enter(literalMarkerType),effects.consume(code),effects.exit(literalMarkerType),effects.exit(literalType),effects.exit(type),ok;effects.enter(stringType);effects.enter(\"chunkString\",\n{contentType:\"string\"});return destinationEnclosed(code)}function destinationEnclosed(code){if(62===code)return effects.exit(\"chunkString\"),effects.exit(stringType),destinationEnclosedBefore(code);if(null===code||60===code||(0,_micromarkUtilCharacter.markdownLineEnding)(code))return nok(code);effects.consume(code);return 92===code?destinationEnclosedEscape:destinationEnclosed}function destinationEnclosedEscape(code){return 60===code||62===code||92===code?(effects.consume(code),destinationEnclosed):\ndestinationEnclosed(code)}function destinationRaw(code){if(40===code){if(++balance>limit)return nok(code);effects.consume(code);return destinationRaw}if(41===code){if(!balance--)return effects.exit(\"chunkString\"),effects.exit(stringType),effects.exit(rawType),effects.exit(type),ok(code);effects.consume(code);return destinationRaw}if(null===code||(0,_micromarkUtilCharacter.markdownLineEndingOrSpace)(code)){if(balance)return nok(code);effects.exit(\"chunkString\");effects.exit(stringType);effects.exit(rawType);\neffects.exit(type);return ok(code)}if((0,_micromarkUtilCharacter.asciiControl)(code))return nok(code);effects.consume(code);return 92===code?destinationRawEscape:destinationRaw}function destinationRawEscape(code){return 40===code||41===code||92===code?(effects.consume(code),destinationRaw):destinationRaw(code)}const limit=max||Number.POSITIVE_INFINITY;let balance=0;return function(code){if(60===code)return effects.enter(type),effects.enter(literalType),effects.enter(literalMarkerType),effects.consume(code),\neffects.exit(literalMarkerType),destinationEnclosedBefore;if(null===code||41===code||(0,_micromarkUtilCharacter.asciiControl)(code))return nok(code);effects.enter(type);effects.enter(rawType);effects.enter(stringType);effects.enter(\"chunkString\",{contentType:\"string\"});return destinationRaw(code)}};var _micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\")}","~:source","shadow$provide[\"module$node_modules$micromark_factory_destination$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.factoryDestination = factoryDestination;\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nfunction factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return destinationEnclosedBefore;\n    }\n\n    if (code === null || code === 41 || (0, _micromarkUtilCharacter.asciiControl)(code)) {\n      return nok(code);\n    }\n\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return destinationRaw(code);\n  }\n  /** @type {State} */\n\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n\n    effects.enter(stringType);\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return destinationEnclosed(code);\n  }\n  /** @type {State} */\n\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString');\n      effects.exit(stringType);\n      return destinationEnclosedBefore(code);\n    }\n\n    if (code === null || code === 60 || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n      return nok(code);\n    }\n\n    effects.consume(code);\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed;\n  }\n  /** @type {State} */\n\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return destinationEnclosed;\n    }\n\n    return destinationEnclosed(code);\n  }\n  /** @type {State} */\n\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code);\n      effects.consume(code);\n      return destinationRaw;\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString');\n        effects.exit(stringType);\n        effects.exit(rawType);\n        effects.exit(type);\n        return ok(code);\n      }\n\n      effects.consume(code);\n      return destinationRaw;\n    }\n\n    if (code === null || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) {\n      if (balance) return nok(code);\n      effects.exit('chunkString');\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n\n    if ((0, _micromarkUtilCharacter.asciiControl)(code)) return nok(code);\n    effects.consume(code);\n    return code === 92 ? destinationRawEscape : destinationRaw;\n  }\n  /** @type {State} */\n\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return destinationRaw;\n    }\n\n    return destinationRaw(code);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js"]],"~:properties",["^5",["__esModule","value","contentType","factoryDestination"]],"~:compiled-at",1676665867285,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_factory_destination$index.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/micromark-factory-destination/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_factory_destination$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.factoryDestination = factoryDestination;\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Effects} Effects\\n * @typedef {import('micromark-util-types').State} State\\n */\\n\\n/**\\n * @param {Effects} effects\\n * @param {State} ok\\n * @param {State} nok\\n * @param {string} type\\n * @param {string} literalType\\n * @param {string} literalMarkerType\\n * @param {string} rawType\\n * @param {string} stringType\\n * @param {number} [max=Infinity]\\n * @returns {State}\\n */\\n// eslint-disable-next-line max-params\\nfunction factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\\n  const limit = max || Number.POSITIVE_INFINITY;\\n  let balance = 0;\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    if (code === 60) {\\n      effects.enter(type);\\n      effects.enter(literalType);\\n      effects.enter(literalMarkerType);\\n      effects.consume(code);\\n      effects.exit(literalMarkerType);\\n      return destinationEnclosedBefore;\\n    }\\n\\n    if (code === null || code === 41 || (0, _micromarkUtilCharacter.asciiControl)(code)) {\\n      return nok(code);\\n    }\\n\\n    effects.enter(type);\\n    effects.enter(rawType);\\n    effects.enter(stringType);\\n    effects.enter('chunkString', {\\n      contentType: 'string'\\n    });\\n    return destinationRaw(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function destinationEnclosedBefore(code) {\\n    if (code === 62) {\\n      effects.enter(literalMarkerType);\\n      effects.consume(code);\\n      effects.exit(literalMarkerType);\\n      effects.exit(literalType);\\n      effects.exit(type);\\n      return ok;\\n    }\\n\\n    effects.enter(stringType);\\n    effects.enter('chunkString', {\\n      contentType: 'string'\\n    });\\n    return destinationEnclosed(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function destinationEnclosed(code) {\\n    if (code === 62) {\\n      effects.exit('chunkString');\\n      effects.exit(stringType);\\n      return destinationEnclosedBefore(code);\\n    }\\n\\n    if (code === null || code === 60 || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\\n      return nok(code);\\n    }\\n\\n    effects.consume(code);\\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed;\\n  }\\n  /** @type {State} */\\n\\n\\n  function destinationEnclosedEscape(code) {\\n    if (code === 60 || code === 62 || code === 92) {\\n      effects.consume(code);\\n      return destinationEnclosed;\\n    }\\n\\n    return destinationEnclosed(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function destinationRaw(code) {\\n    if (code === 40) {\\n      if (++balance > limit) return nok(code);\\n      effects.consume(code);\\n      return destinationRaw;\\n    }\\n\\n    if (code === 41) {\\n      if (!balance--) {\\n        effects.exit('chunkString');\\n        effects.exit(stringType);\\n        effects.exit(rawType);\\n        effects.exit(type);\\n        return ok(code);\\n      }\\n\\n      effects.consume(code);\\n      return destinationRaw;\\n    }\\n\\n    if (code === null || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) {\\n      if (balance) return nok(code);\\n      effects.exit('chunkString');\\n      effects.exit(stringType);\\n      effects.exit(rawType);\\n      effects.exit(type);\\n      return ok(code);\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.asciiControl)(code)) return nok(code);\\n    effects.consume(code);\\n    return code === 92 ? destinationRawEscape : destinationRaw;\\n  }\\n  /** @type {State} */\\n\\n\\n  function destinationRawEscape(code) {\\n    if (code === 40 || code === 41 || code === 92) {\\n      effects.consume(code);\\n      return destinationRaw;\\n    }\\n\\n    return destinationRaw(code);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"factoryDestination\",\"effects\",\"ok\",\"nok\",\"type\",\"literalType\",\"literalMarkerType\",\"rawType\",\"stringType\",\"max\",\"destinationEnclosedBefore\",\"code\",\"enter\",\"consume\",\"exit\",\"contentType\",\"destinationEnclosed\",\"_micromarkUtilCharacter\",\"markdownLineEnding\",\"destinationEnclosedEscape\",\"destinationRaw\",\"balance\",\"limit\",\"markdownLineEndingOrSpace\",\"asciiControl\",\"destinationRawEscape\",\"Number\",\"POSITIVE_INFINITY\",\"start\"]\n}\n"]