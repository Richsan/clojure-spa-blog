["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/markdown-table/index.js"],"~:js","shadow$provide.module$node_modules$markdown_table$index=function(global,require,module,exports){function defaultStringLength(value){return value.length}function toAlignment(value){value=\"string\"===typeof value?value.codePointAt(0):0;return 67===value||99===value?99:76===value||108===value?108:82===value||114===value?114:0}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.markdownTable=function(table,options={}){var align=(options.align||[]).concat(),stringLength=options.stringLength||\ndefaultStringLength;const alignments=[],cellMatrix=[],sizeMatrix=[],longestCellByColumn=[];let mostCellsPerRow=0;for(var rowIndex=-1;++rowIndex<table.length;){var row=[],sizes=[],columnIndex=-1;table[rowIndex].length>mostCellsPerRow&&(mostCellsPerRow=table[rowIndex].length);for(;++columnIndex<table[rowIndex].length;){var value=table[rowIndex][columnIndex];value=null===value||void 0===value?\"\":String(value);if(!1!==options.alignDelimiters){var size$jscomp$0=stringLength(value);sizes[columnIndex]=size$jscomp$0;\nif(void 0===longestCellByColumn[columnIndex]||size$jscomp$0>longestCellByColumn[columnIndex])longestCellByColumn[columnIndex]=size$jscomp$0}row.push(value)}cellMatrix[rowIndex]=row;sizeMatrix[rowIndex]=sizes}table=-1;if(\"object\"===typeof align&&\"length\"in align)for(;++table<mostCellsPerRow;)alignments[table]=toAlignment(align[table]);else for(rowIndex=toAlignment(align);++table<mostCellsPerRow;)alignments[table]=rowIndex;table=-1;rowIndex=[];for(align=[];++table<mostCellsPerRow;)sizes=alignments[table],\nrow=stringLength=\"\",99===sizes?row=stringLength=\":\":108===sizes?stringLength=\":\":114===sizes&&(row=\":\"),sizes=!1===options.alignDelimiters?1:Math.max(1,longestCellByColumn[table]-stringLength.length-row.length),columnIndex=stringLength+\"-\".repeat(sizes)+row,!1!==options.alignDelimiters&&(sizes=stringLength.length+sizes+row.length,sizes>longestCellByColumn[table]&&(longestCellByColumn[table]=sizes),align[table]=sizes),rowIndex[table]=columnIndex;cellMatrix.splice(1,0,rowIndex);sizeMatrix.splice(1,\n0,align);rowIndex=-1;for(align=[];++rowIndex<cellMatrix.length;){stringLength=cellMatrix[rowIndex];row=sizeMatrix[rowIndex];table=-1;for(sizes=[];++table<mostCellsPerRow;){columnIndex=stringLength[table]||\"\";size$jscomp$0=value=\"\";if(!1!==options.alignDelimiters){const size=longestCellByColumn[table]-(row[table]||0),code=alignments[table];114===code?value=\" \".repeat(size):99===code?size%2?(value=\" \".repeat(size/2+.5),size$jscomp$0=\" \".repeat(size/2-.5)):size$jscomp$0=value=\" \".repeat(size/2):size$jscomp$0=\n\" \".repeat(size)}!1===options.delimiterStart||table||sizes.push(\"|\");!1===options.padding||!1===options.alignDelimiters&&\"\"===columnIndex||!1===options.delimiterStart&&!table||sizes.push(\" \");!1!==options.alignDelimiters&&sizes.push(value);sizes.push(columnIndex);!1!==options.alignDelimiters&&sizes.push(size$jscomp$0);!1!==options.padding&&sizes.push(\" \");!1===options.delimiterEnd&&table===mostCellsPerRow-1||sizes.push(\"|\")}align.push(!1===options.delimiterEnd?sizes.join(\"\").replace(/ +$/,\"\"):sizes.join(\"\"))}return align.join(\"\\n\")}}","~:source","shadow$provide[\"module$node_modules$markdown_table$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.markdownTable = markdownTable;\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > \uD83D\uDC49 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > \uD83D\uDC49 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['\uD83D\uDC69‍❤️‍\uD83D\uDC69', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | \uD83D\uDC69‍❤️‍\uD83D\uDC69 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['\uD83D\uDC69‍❤️‍\uD83D\uDC69', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | \uD83D\uDC69‍❤️‍\uD83D\uDC69    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nfunction markdownTable(table, options = {}) {\n  const align = (options.align || []).concat();\n  const stringLength = options.stringLength || defaultStringLength;\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n\n  const alignments = [];\n  /** @type {Array<Array<string>>} Cells per row. */\n\n  const cellMatrix = [];\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n\n  const sizeMatrix = [];\n  /** @type {Array<number>} */\n\n  const longestCellByColumn = [];\n  let mostCellsPerRow = 0;\n  let rowIndex = -1; // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = [];\n    /** @type {Array<number>} */\n\n    const sizes = [];\n    let columnIndex = -1;\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length;\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex]);\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell);\n        sizes[columnIndex] = size;\n\n        if (longestCellByColumn[columnIndex] === undefined || size > longestCellByColumn[columnIndex]) {\n          longestCellByColumn[columnIndex] = size;\n        }\n      }\n\n      row.push(cell);\n    }\n\n    cellMatrix[rowIndex] = row;\n    sizeMatrix[rowIndex] = sizes;\n  } // Figure out which alignments to use.\n\n\n  let columnIndex = -1;\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex]);\n    }\n  } else {\n    const code = toAlignment(align);\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code;\n    }\n  } // Inject the alignment row.\n\n\n  columnIndex = -1;\n  /** @type {Array<string>} */\n\n  const row = [];\n  /** @type {Array<number>} */\n\n  const sizes = [];\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex];\n    let before = '';\n    let after = '';\n\n    if (code === 99\n    /* `c` */\n    ) {\n      before = ':';\n      after = ':';\n    } else if (code === 108\n    /* `l` */\n    ) {\n      before = ':';\n    } else if (code === 114\n    /* `r` */\n    ) {\n      after = ':';\n    } // There *must* be at least one hyphen-minus in each alignment cell.\n\n\n    let size = options.alignDelimiters === false ? 1 : Math.max(1, longestCellByColumn[columnIndex] - before.length - after.length);\n    const cell = before + '-'.repeat(size) + after;\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length;\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size;\n      }\n\n      sizes[columnIndex] = size;\n    }\n\n    row[columnIndex] = cell;\n  } // Inject the alignment row.\n\n\n  cellMatrix.splice(1, 0, row);\n  sizeMatrix.splice(1, 0, sizes);\n  rowIndex = -1;\n  /** @type {Array<string>} */\n\n  const lines = [];\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex];\n    const sizes = sizeMatrix[rowIndex];\n    columnIndex = -1;\n    /** @type {Array<string>} */\n\n    const line = [];\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || '';\n      let before = '';\n      let after = '';\n\n      if (options.alignDelimiters !== false) {\n        const size = longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);\n        const code = alignments[columnIndex];\n\n        if (code === 114\n        /* `r` */\n        ) {\n          before = ' '.repeat(size);\n        } else if (code === 99\n        /* `c` */\n        ) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5);\n            after = ' '.repeat(size / 2 - 0.5);\n          } else {\n            before = ' '.repeat(size / 2);\n            after = before;\n          }\n        } else {\n          after = ' '.repeat(size);\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|');\n      }\n\n      if (options.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is\n      // empty: there will be a closing space.\n      !(options.alignDelimiters === false && cell === '') && (options.delimiterStart !== false || columnIndex)) {\n        line.push(' ');\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before);\n      }\n\n      line.push(cell);\n\n      if (options.alignDelimiters !== false) {\n        line.push(after);\n      }\n\n      if (options.padding !== false) {\n        line.push(' ');\n      }\n\n      if (options.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {\n        line.push('|');\n      }\n    }\n\n    lines.push(options.delimiterEnd === false ? line.join('').replace(/ +$/, '') : line.join(''));\n  }\n\n  return lines.join('\\n');\n}\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\n\n\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value);\n}\n/**\n * @param {string} value\n * @returns {number}\n */\n\n\nfunction defaultStringLength(value) {\n  return value.length;\n}\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\n\n\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0;\n  return code === 67\n  /* `C` */\n  || code === 99\n  /* `c` */\n  ? 99\n  /* `c` */\n  : code === 76\n  /* `L` */\n  || code === 108\n  /* `l` */\n  ? 108\n  /* `l` */\n  : code === 82\n  /* `R` */\n  || code === 114\n  /* `r` */\n  ? 114\n  /* `r` */\n  : 0;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","markdownTable"]],"~:compiled-at",1676841365342,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$markdown_table$index.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/markdown-table/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$markdown_table$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.markdownTable = markdownTable;\\n\\n/**\\n * @typedef Options\\n *   Configuration (optional).\\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\\n *   One style for all columns, or styles for their respective columns.\\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\\n *   Other values are treated as `''`, which doesn\\u2019t place the colon in the\\n *   alignment row but does align left.\\n *   *Only the lowercased first character is used, so `Right` is fine.*\\n * @property {boolean} [padding=true]\\n *   Whether to add a space of padding between delimiters and cells.\\n *\\n *   When `true`, there is padding:\\n *\\n *   ```markdown\\n *   | Alpha | B     |\\n *   | ----- | ----- |\\n *   | C     | Delta |\\n *   ```\\n *\\n *   When `false`, there is no padding:\\n *\\n *   ```markdown\\n *   |Alpha|B    |\\n *   |-----|-----|\\n *   |C    |Delta|\\n *   ```\\n * @property {boolean} [delimiterStart=true]\\n *   Whether to begin each row with the delimiter.\\n *\\n *   > \\ud83d\\udc49 **Note**: please don\\u2019t use this: it could create fragile structures\\n *   > that aren\\u2019t understandable to some markdown parsers.\\n *\\n *   When `true`, there are starting delimiters:\\n *\\n *   ```markdown\\n *   | Alpha | B     |\\n *   | ----- | ----- |\\n *   | C     | Delta |\\n *   ```\\n *\\n *   When `false`, there are no starting delimiters:\\n *\\n *   ```markdown\\n *   Alpha | B     |\\n *   ----- | ----- |\\n *   C     | Delta |\\n *   ```\\n * @property {boolean} [delimiterEnd=true]\\n *   Whether to end each row with the delimiter.\\n *\\n *   > \\ud83d\\udc49 **Note**: please don\\u2019t use this: it could create fragile structures\\n *   > that aren\\u2019t understandable to some markdown parsers.\\n *\\n *   When `true`, there are ending delimiters:\\n *\\n *   ```markdown\\n *   | Alpha | B     |\\n *   | ----- | ----- |\\n *   | C     | Delta |\\n *   ```\\n *\\n *   When `false`, there are no ending delimiters:\\n *\\n *   ```markdown\\n *   | Alpha | B\\n *   | ----- | -----\\n *   | C     | Delta\\n *   ```\\n * @property {boolean} [alignDelimiters=true]\\n *   Whether to align the delimiters.\\n *   By default, they are aligned:\\n *\\n *   ```markdown\\n *   | Alpha | B     |\\n *   | ----- | ----- |\\n *   | C     | Delta |\\n *   ```\\n *\\n *   Pass `false` to make them staggered:\\n *\\n *   ```markdown\\n *   | Alpha | B |\\n *   | - | - |\\n *   | C | Delta |\\n *   ```\\n * @property {(value: string) => number} [stringLength]\\n *   Function to detect the length of table cell content.\\n *   This is used when aligning the delimiters (`|`) between table cells.\\n *   Full-width characters and emoji mess up delimiter alignment when viewing\\n *   the markdown source.\\n *   To fix this, you can pass this function, which receives the cell content\\n *   and returns its \\u201cvisible\\u201d size.\\n *   Note that what is and isn\\u2019t visible depends on where the text is displayed.\\n *\\n *   Without such a function, the following:\\n *\\n *   ```js\\n *   markdownTable([\\n *     ['Alpha', 'Bravo'],\\n *     ['\\u4e2d\\u6587', 'Charlie'],\\n *     ['\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69', 'Delta']\\n *   ])\\n *   ```\\n *\\n *   Yields:\\n *\\n *   ```markdown\\n *   | Alpha | Bravo |\\n *   | - | - |\\n *   | \\u4e2d\\u6587 | Charlie |\\n *   | \\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69 | Delta |\\n *   ```\\n *\\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\\n *\\n *   ```js\\n *   import stringWidth from 'string-width'\\n *\\n *   markdownTable(\\n *     [\\n *       ['Alpha', 'Bravo'],\\n *       ['\\u4e2d\\u6587', 'Charlie'],\\n *       ['\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69', 'Delta']\\n *     ],\\n *     {stringLength: stringWidth}\\n *   )\\n *   ```\\n *\\n *   Yields:\\n *\\n *   ```markdown\\n *   | Alpha | Bravo   |\\n *   | ----- | ------- |\\n *   | \\u4e2d\\u6587  | Charlie |\\n *   | \\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69    | Delta   |\\n *   ```\\n */\\n\\n/**\\n * @typedef {Options} MarkdownTableOptions\\n * @todo\\n *   Remove next major.\\n */\\n\\n/**\\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\\n *\\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\\n *   Table data (matrix of strings).\\n * @param {Options} [options]\\n *   Configuration (optional).\\n * @returns {string}\\n */\\nfunction markdownTable(table, options = {}) {\\n  const align = (options.align || []).concat();\\n  const stringLength = options.stringLength || defaultStringLength;\\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\\n\\n  const alignments = [];\\n  /** @type {Array<Array<string>>} Cells per row. */\\n\\n  const cellMatrix = [];\\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\\n\\n  const sizeMatrix = [];\\n  /** @type {Array<number>} */\\n\\n  const longestCellByColumn = [];\\n  let mostCellsPerRow = 0;\\n  let rowIndex = -1; // This is a superfluous loop if we don\\u2019t align delimiters, but otherwise we\\u2019d\\n  // do superfluous work when aligning, so optimize for aligning.\\n\\n  while (++rowIndex < table.length) {\\n    /** @type {Array<string>} */\\n    const row = [];\\n    /** @type {Array<number>} */\\n\\n    const sizes = [];\\n    let columnIndex = -1;\\n\\n    if (table[rowIndex].length > mostCellsPerRow) {\\n      mostCellsPerRow = table[rowIndex].length;\\n    }\\n\\n    while (++columnIndex < table[rowIndex].length) {\\n      const cell = serialize(table[rowIndex][columnIndex]);\\n\\n      if (options.alignDelimiters !== false) {\\n        const size = stringLength(cell);\\n        sizes[columnIndex] = size;\\n\\n        if (longestCellByColumn[columnIndex] === undefined || size > longestCellByColumn[columnIndex]) {\\n          longestCellByColumn[columnIndex] = size;\\n        }\\n      }\\n\\n      row.push(cell);\\n    }\\n\\n    cellMatrix[rowIndex] = row;\\n    sizeMatrix[rowIndex] = sizes;\\n  } // Figure out which alignments to use.\\n\\n\\n  let columnIndex = -1;\\n\\n  if (typeof align === 'object' && 'length' in align) {\\n    while (++columnIndex < mostCellsPerRow) {\\n      alignments[columnIndex] = toAlignment(align[columnIndex]);\\n    }\\n  } else {\\n    const code = toAlignment(align);\\n\\n    while (++columnIndex < mostCellsPerRow) {\\n      alignments[columnIndex] = code;\\n    }\\n  } // Inject the alignment row.\\n\\n\\n  columnIndex = -1;\\n  /** @type {Array<string>} */\\n\\n  const row = [];\\n  /** @type {Array<number>} */\\n\\n  const sizes = [];\\n\\n  while (++columnIndex < mostCellsPerRow) {\\n    const code = alignments[columnIndex];\\n    let before = '';\\n    let after = '';\\n\\n    if (code === 99\\n    /* `c` */\\n    ) {\\n      before = ':';\\n      after = ':';\\n    } else if (code === 108\\n    /* `l` */\\n    ) {\\n      before = ':';\\n    } else if (code === 114\\n    /* `r` */\\n    ) {\\n      after = ':';\\n    } // There *must* be at least one hyphen-minus in each alignment cell.\\n\\n\\n    let size = options.alignDelimiters === false ? 1 : Math.max(1, longestCellByColumn[columnIndex] - before.length - after.length);\\n    const cell = before + '-'.repeat(size) + after;\\n\\n    if (options.alignDelimiters !== false) {\\n      size = before.length + size + after.length;\\n\\n      if (size > longestCellByColumn[columnIndex]) {\\n        longestCellByColumn[columnIndex] = size;\\n      }\\n\\n      sizes[columnIndex] = size;\\n    }\\n\\n    row[columnIndex] = cell;\\n  } // Inject the alignment row.\\n\\n\\n  cellMatrix.splice(1, 0, row);\\n  sizeMatrix.splice(1, 0, sizes);\\n  rowIndex = -1;\\n  /** @type {Array<string>} */\\n\\n  const lines = [];\\n\\n  while (++rowIndex < cellMatrix.length) {\\n    const row = cellMatrix[rowIndex];\\n    const sizes = sizeMatrix[rowIndex];\\n    columnIndex = -1;\\n    /** @type {Array<string>} */\\n\\n    const line = [];\\n\\n    while (++columnIndex < mostCellsPerRow) {\\n      const cell = row[columnIndex] || '';\\n      let before = '';\\n      let after = '';\\n\\n      if (options.alignDelimiters !== false) {\\n        const size = longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);\\n        const code = alignments[columnIndex];\\n\\n        if (code === 114\\n        /* `r` */\\n        ) {\\n          before = ' '.repeat(size);\\n        } else if (code === 99\\n        /* `c` */\\n        ) {\\n          if (size % 2) {\\n            before = ' '.repeat(size / 2 + 0.5);\\n            after = ' '.repeat(size / 2 - 0.5);\\n          } else {\\n            before = ' '.repeat(size / 2);\\n            after = before;\\n          }\\n        } else {\\n          after = ' '.repeat(size);\\n        }\\n      }\\n\\n      if (options.delimiterStart !== false && !columnIndex) {\\n        line.push('|');\\n      }\\n\\n      if (options.padding !== false && // Don\\u2019t add the opening space if we\\u2019re not aligning and the cell is\\n      // empty: there will be a closing space.\\n      !(options.alignDelimiters === false && cell === '') && (options.delimiterStart !== false || columnIndex)) {\\n        line.push(' ');\\n      }\\n\\n      if (options.alignDelimiters !== false) {\\n        line.push(before);\\n      }\\n\\n      line.push(cell);\\n\\n      if (options.alignDelimiters !== false) {\\n        line.push(after);\\n      }\\n\\n      if (options.padding !== false) {\\n        line.push(' ');\\n      }\\n\\n      if (options.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {\\n        line.push('|');\\n      }\\n    }\\n\\n    lines.push(options.delimiterEnd === false ? line.join('').replace(/ +$/, '') : line.join(''));\\n  }\\n\\n  return lines.join('\\\\n');\\n}\\n/**\\n * @param {string|null|undefined} [value]\\n * @returns {string}\\n */\\n\\n\\nfunction serialize(value) {\\n  return value === null || value === undefined ? '' : String(value);\\n}\\n/**\\n * @param {string} value\\n * @returns {number}\\n */\\n\\n\\nfunction defaultStringLength(value) {\\n  return value.length;\\n}\\n/**\\n * @param {string|null|undefined} value\\n * @returns {number}\\n */\\n\\n\\nfunction toAlignment(value) {\\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0;\\n  return code === 67\\n  /* `C` */\\n  || code === 99\\n  /* `c` */\\n  ? 99\\n  /* `c` */\\n  : code === 76\\n  /* `L` */\\n  || code === 108\\n  /* `l` */\\n  ? 108\\n  /* `l` */\\n  : code === 82\\n  /* `R` */\\n  || code === 114\\n  /* `r` */\\n  ? 114\\n  /* `r` */\\n  : 0;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"defaultStringLength\",\"value\",\"length\",\"toAlignment\",\"code\",\"codePointAt\",\"Object\",\"defineProperty\",\"markdownTable\",\"table\",\"options\",\"align\",\"concat\",\"stringLength\",\"alignments\",\"cellMatrix\",\"sizeMatrix\",\"longestCellByColumn\",\"mostCellsPerRow\",\"rowIndex\",\"row\",\"sizes\",\"columnIndex\",\"cell\",\"undefined\",\"String\",\"alignDelimiters\",\"size\",\"push\",\"after\",\"before\",\"Math\",\"max\",\"repeat\",\"splice\",\"lines\",\"line\",\"delimiterStart\",\"padding\",\"delimiterEnd\",\"join\",\"replace\"]\n}\n"]