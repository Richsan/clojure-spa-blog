["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/asciidoc.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$asciidoc=function(global,require,module,exports){function asciidoc(Prism$jscomp$0){(function(Prism){function copyFromAsciiDoc(keys){keys=keys.split(\" \");for(var o={},i=0,l=keys.length;i<l;i++)o[keys[i]]=asciidoc[keys[i]];return o}var attributes={pattern:/(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\[\\]\\\\]|\\\\.)*\\]|[^\\[\\]\\\\\"'$`]|\\\\.)*\\]/m,lookbehind:!0,inside:{quoted:{pattern:/([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,inside:{punctuation:/^[$`]|[$`]$/}},\ninterpreted:{pattern:/'(?:[^'\\\\]|\\\\.)*'/,inside:{punctuation:/^'|'$/}},string:/\"(?:[^\"\\\\]|\\\\.)*\"/,variable:/\\w+(?==)/,punctuation:/^\\[|\\]$|,/,operator:/=/,\"attr-value\":/(?!^\\s+$).+/}},asciidoc=Prism.languages.asciidoc={\"comment-block\":{pattern:/^(\\/{4,})$[\\s\\S]*?^\\1/m,alias:\"comment\"},table:{pattern:/^\\|={3,}(?:(?:\\r?\\n|\\r(?!\\n)).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,inside:{specifiers:{pattern:/(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*](?:[<^>](?:\\.[<^>])?|\\.[<^>])?|[<^>](?:\\.[<^>])?|\\.[<^>])[a-z]*|[a-z]+)(?=\\|)/,alias:\"attr-value\"},\npunctuation:{pattern:/(^|[^\\\\])[|!]=*/,lookbehind:!0}}},\"passthrough-block\":{pattern:/^(\\+{4,})$[\\s\\S]*?^\\1$/m,inside:{punctuation:/^\\++|\\++$/}},\"literal-block\":{pattern:/^(-{4,}|\\.{4,})$[\\s\\S]*?^\\1$/m,inside:{punctuation:/^(?:-+|\\.+)|(?:-+|\\.+)$/}},\"other-block\":{pattern:/^(--|\\*{4,}|_{4,}|={4,})$[\\s\\S]*?^\\1$/m,inside:{punctuation:/^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/}},\"list-punctuation\":{pattern:/(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,lookbehind:!0,alias:\"punctuation\"},\n\"list-label\":{pattern:/(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,lookbehind:!0,alias:\"symbol\"},\"indented-block\":{pattern:/((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,lookbehind:!0},comment:/^\\/\\/.*/m,title:{pattern:/^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} .+|^\\.(?![\\s.]).*/m,alias:\"important\",inside:{punctuation:/^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/}},\"attribute-entry\":{pattern:/^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,alias:\"tag\"},attributes,hr:{pattern:/^'{3,}$/m,\nalias:\"punctuation\"},\"page-break\":{pattern:/^<{3,}$/m,alias:\"punctuation\"},admonition:{pattern:/^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,alias:\"keyword\"},callout:[{pattern:/(^[ \\t]*)<?\\d*>/m,lookbehind:!0,alias:\"symbol\"},{pattern:/<\\d+>/,alias:\"symbol\"}],macro:{pattern:/\\b[a-z\\d][a-z\\d-]*::?(?:[^\\s\\[\\]]*\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,inside:{function:/^[a-z\\d-]+(?=:)/,punctuation:/^::?/,attributes:{pattern:/(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,inside:attributes.inside}}},\ninline:{pattern:/(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?:[^`'\\s]|\\s+\\S)+['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\nlookbehind:!0,inside:{attributes,url:{pattern:/^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,inside:{punctuation:/^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/}},\"attribute-ref\":{pattern:/^\\{.+\\}$/,inside:{variable:{pattern:/(^\\{)[a-z\\d,+_-]+/,lookbehind:!0},operator:/^[=?!#%@$]|!(?=[:}])/,punctuation:/^\\{|\\}$|::?/}},italic:{pattern:/^(['_])[\\s\\S]+\\1$/,inside:{punctuation:/^(?:''?|__?)|(?:''?|__?)$/}},bold:{pattern:/^\\*[\\s\\S]+\\*$/,inside:{punctuation:/^\\*\\*?|\\*\\*?$/}},punctuation:/^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/}},\nreplacement:{pattern:/\\((?:C|R|TM)\\)/,alias:\"builtin\"},entity:/&#?[\\da-z]{1,8};/i,\"line-continuation\":{pattern:/(^| )\\+$/m,lookbehind:!0,alias:\"punctuation\"}};attributes.inside.interpreted.inside.rest=copyFromAsciiDoc(\"macro inline replacement entity\");asciidoc[\"passthrough-block\"].inside.rest=copyFromAsciiDoc(\"macro\");asciidoc[\"literal-block\"].inside.rest=copyFromAsciiDoc(\"callout\");asciidoc.table.inside.rest=copyFromAsciiDoc(\"comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation\");\nasciidoc[\"other-block\"].inside.rest=copyFromAsciiDoc(\"table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation\");asciidoc.title.inside.rest=copyFromAsciiDoc(\"macro inline replacement entity\");Prism.hooks.add(\"wrap\",function(env){\"entity\"===env.type&&(env.attributes.title=env.content.value.replace(/&amp;/,\"\\x26\"))});Prism.languages.adoc=Prism.languages.asciidoc})(Prism$jscomp$0)}Object.defineProperty(exports,\n\"__esModule\",{value:!0});exports.default=asciidoc;asciidoc.displayName=\"asciidoc\";asciidoc.aliases=[\"adoc\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$asciidoc\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = asciidoc;\n// @ts-nocheck\nasciidoc.displayName = 'asciidoc';\nasciidoc.aliases = ['adoc'];\n/** @type {import('../core.js').Syntax} */\n\nfunction asciidoc(Prism) {\n  ;\n\n  (function (Prism) {\n    var attributes = {\n      pattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\[\\]\\\\]|\\\\.)*\\]|[^\\[\\]\\\\\"'$`]|\\\\.)*\\]/m,\n      lookbehind: true,\n      inside: {\n        quoted: {\n          pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          inside: {\n            punctuation: /^[$`]|[$`]$/\n          }\n        },\n        interpreted: {\n          pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n          inside: {\n            punctuation: /^'|'$/ // See rest below\n\n          }\n        },\n        string: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        variable: /\\w+(?==)/,\n        punctuation: /^\\[|\\]$|,/,\n        operator: /=/,\n        // The negative look-ahead prevents blank matches\n        'attr-value': /(?!^\\s+$).+/\n      }\n    };\n    var asciidoc = Prism.languages.asciidoc = {\n      'comment-block': {\n        pattern: /^(\\/{4,})$[\\s\\S]*?^\\1/m,\n        alias: 'comment'\n      },\n      table: {\n        pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r(?!\\n)).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n        inside: {\n          specifiers: {\n            pattern: /(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*](?:[<^>](?:\\.[<^>])?|\\.[<^>])?|[<^>](?:\\.[<^>])?|\\.[<^>])[a-z]*|[a-z]+)(?=\\|)/,\n            alias: 'attr-value'\n          },\n          punctuation: {\n            pattern: /(^|[^\\\\])[|!]=*/,\n            lookbehind: true\n          } // See rest below\n\n        }\n      },\n      'passthrough-block': {\n        pattern: /^(\\+{4,})$[\\s\\S]*?^\\1$/m,\n        inside: {\n          punctuation: /^\\++|\\++$/ // See rest below\n\n        }\n      },\n      // Literal blocks and listing blocks\n      'literal-block': {\n        pattern: /^(-{4,}|\\.{4,})$[\\s\\S]*?^\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\.+)|(?:-+|\\.+)$/ // See rest below\n\n        }\n      },\n      // Sidebar blocks, quote blocks, example blocks and open blocks\n      'other-block': {\n        pattern: /^(--|\\*{4,}|_{4,}|={4,})$[\\s\\S]*?^\\1$/m,\n        inside: {\n          punctuation: /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/ // See rest below\n\n        }\n      },\n      // list-punctuation and list-label must appear before indented-block\n      'list-punctuation': {\n        pattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'list-label': {\n        pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n        lookbehind: true,\n        alias: 'symbol'\n      },\n      'indented-block': {\n        pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n        lookbehind: true\n      },\n      comment: /^\\/\\/.*/m,\n      title: {\n        pattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} .+|^\\.(?![\\s.]).*/m,\n        alias: 'important',\n        inside: {\n          punctuation: /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/ // See rest below\n\n        }\n      },\n      'attribute-entry': {\n        pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n        alias: 'tag'\n      },\n      attributes: attributes,\n      hr: {\n        pattern: /^'{3,}$/m,\n        alias: 'punctuation'\n      },\n      'page-break': {\n        pattern: /^<{3,}$/m,\n        alias: 'punctuation'\n      },\n      admonition: {\n        pattern: /^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,\n        alias: 'keyword'\n      },\n      callout: [{\n        pattern: /(^[ \\t]*)<?\\d*>/m,\n        lookbehind: true,\n        alias: 'symbol'\n      }, {\n        pattern: /<\\d+>/,\n        alias: 'symbol'\n      }],\n      macro: {\n        pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:[^\\s\\[\\]]*\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n        inside: {\n          function: /^[a-z\\d-]+(?=:)/,\n          punctuation: /^::?/,\n          attributes: {\n            pattern: /(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n            inside: attributes.inside\n          }\n        }\n      },\n      inline: {\n        /*\n        The initial look-behind prevents the highlighting of escaped quoted text.\n        Quoted text can be multi-line but cannot span an empty line.\n        All quoted text can have attributes before [foobar, 'foobar', baz=\"bar\"].\n        First, we handle the constrained quotes.\n        Those must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\n        They are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\n        Then we handle the unconstrained quotes.\n        Those do not have the restrictions of the constrained quotes.\n        They are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\n        */\n        pattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?:[^`'\\s]|\\s+\\S)+['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n        lookbehind: true,\n        inside: {\n          attributes: attributes,\n          url: {\n            pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n            inside: {\n              punctuation: /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n            }\n          },\n          'attribute-ref': {\n            pattern: /^\\{.+\\}$/,\n            inside: {\n              variable: {\n                pattern: /(^\\{)[a-z\\d,+_-]+/,\n                lookbehind: true\n              },\n              operator: /^[=?!#%@$]|!(?=[:}])/,\n              punctuation: /^\\{|\\}$|::?/\n            }\n          },\n          italic: {\n            pattern: /^(['_])[\\s\\S]+\\1$/,\n            inside: {\n              punctuation: /^(?:''?|__?)|(?:''?|__?)$/\n            }\n          },\n          bold: {\n            pattern: /^\\*[\\s\\S]+\\*$/,\n            inside: {\n              punctuation: /^\\*\\*?|\\*\\*?$/\n            }\n          },\n          punctuation: /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n        }\n      },\n      replacement: {\n        pattern: /\\((?:C|R|TM)\\)/,\n        alias: 'builtin'\n      },\n      entity: /&#?[\\da-z]{1,8};/i,\n      'line-continuation': {\n        pattern: /(^| )\\+$/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    }; // Allow some nesting. There is no recursion though, so cloning should not be needed.\n\n    function copyFromAsciiDoc(keys) {\n      keys = keys.split(' ');\n      var o = {};\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        o[keys[i]] = asciidoc[keys[i]];\n      }\n\n      return o;\n    }\n\n    attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');\n    asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro');\n    asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout');\n    asciidoc['table'].inside.rest = copyFromAsciiDoc('comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation');\n    asciidoc['other-block'].inside.rest = copyFromAsciiDoc('table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation');\n    asciidoc['title'].inside.rest = copyFromAsciiDoc('macro inline replacement entity'); // Plugin to make entity title show the real entity, idea by Roman Komarov\n\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type === 'entity') {\n        env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\n      }\n    });\n    Prism.languages.adoc = Prism.languages.asciidoc;\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["table","specifiers","url","punctuation","string","aliases","operator","displayName","replacement","quoted","inline","__esModule","admonition","rest","lookbehind","hr","value","interpreted","asciidoc","variable","function","attributes","title","pattern","callout","italic","inside","alias","comment","entity","adoc","bold","default","macro"]],"~:compiled-at",1676841365391,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$asciidoc.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/asciidoc.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$asciidoc\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = asciidoc;\\n// @ts-nocheck\\nasciidoc.displayName = 'asciidoc';\\nasciidoc.aliases = ['adoc'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction asciidoc(Prism) {\\n  ;\\n\\n  (function (Prism) {\\n    var attributes = {\\n      pattern: /(^[ \\\\t]*)\\\\[(?!\\\\[)(?:([\\\"'$`])(?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*\\\\2|\\\\[(?:[^\\\\[\\\\]\\\\\\\\]|\\\\\\\\.)*\\\\]|[^\\\\[\\\\]\\\\\\\\\\\"'$`]|\\\\\\\\.)*\\\\]/m,\\n      lookbehind: true,\\n      inside: {\\n        quoted: {\\n          pattern: /([$`])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\.)*\\\\1/,\\n          inside: {\\n            punctuation: /^[$`]|[$`]$/\\n          }\\n        },\\n        interpreted: {\\n          pattern: /'(?:[^'\\\\\\\\]|\\\\\\\\.)*'/,\\n          inside: {\\n            punctuation: /^'|'$/ // See rest below\\n\\n          }\\n        },\\n        string: /\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"/,\\n        variable: /\\\\w+(?==)/,\\n        punctuation: /^\\\\[|\\\\]$|,/,\\n        operator: /=/,\\n        // The negative look-ahead prevents blank matches\\n        'attr-value': /(?!^\\\\s+$).+/\\n      }\\n    };\\n    var asciidoc = Prism.languages.asciidoc = {\\n      'comment-block': {\\n        pattern: /^(\\\\/{4,})$[\\\\s\\\\S]*?^\\\\1/m,\\n        alias: 'comment'\\n      },\\n      table: {\\n        pattern: /^\\\\|={3,}(?:(?:\\\\r?\\\\n|\\\\r(?!\\\\n)).*)*?(?:\\\\r?\\\\n|\\\\r)\\\\|={3,}$/m,\\n        inside: {\\n          specifiers: {\\n            pattern: /(?:(?:(?:\\\\d+(?:\\\\.\\\\d+)?|\\\\.\\\\d+)[+*](?:[<^>](?:\\\\.[<^>])?|\\\\.[<^>])?|[<^>](?:\\\\.[<^>])?|\\\\.[<^>])[a-z]*|[a-z]+)(?=\\\\|)/,\\n            alias: 'attr-value'\\n          },\\n          punctuation: {\\n            pattern: /(^|[^\\\\\\\\])[|!]=*/,\\n            lookbehind: true\\n          } // See rest below\\n\\n        }\\n      },\\n      'passthrough-block': {\\n        pattern: /^(\\\\+{4,})$[\\\\s\\\\S]*?^\\\\1$/m,\\n        inside: {\\n          punctuation: /^\\\\++|\\\\++$/ // See rest below\\n\\n        }\\n      },\\n      // Literal blocks and listing blocks\\n      'literal-block': {\\n        pattern: /^(-{4,}|\\\\.{4,})$[\\\\s\\\\S]*?^\\\\1$/m,\\n        inside: {\\n          punctuation: /^(?:-+|\\\\.+)|(?:-+|\\\\.+)$/ // See rest below\\n\\n        }\\n      },\\n      // Sidebar blocks, quote blocks, example blocks and open blocks\\n      'other-block': {\\n        pattern: /^(--|\\\\*{4,}|_{4,}|={4,})$[\\\\s\\\\S]*?^\\\\1$/m,\\n        inside: {\\n          punctuation: /^(?:-+|\\\\*+|_+|=+)|(?:-+|\\\\*+|_+|=+)$/ // See rest below\\n\\n        }\\n      },\\n      // list-punctuation and list-label must appear before indented-block\\n      'list-punctuation': {\\n        pattern: /(^[ \\\\t]*)(?:-|\\\\*{1,5}|\\\\.{1,5}|(?:[a-z]|\\\\d+)\\\\.|[xvi]+\\\\))(?= )/im,\\n        lookbehind: true,\\n        alias: 'punctuation'\\n      },\\n      'list-label': {\\n        pattern: /(^[ \\\\t]*)[a-z\\\\d].+(?::{2,4}|;;)(?=\\\\s)/im,\\n        lookbehind: true,\\n        alias: 'symbol'\\n      },\\n      'indented-block': {\\n        pattern: /((\\\\r?\\\\n|\\\\r)\\\\2)([ \\\\t]+)\\\\S.*(?:(?:\\\\r?\\\\n|\\\\r)\\\\3.+)*(?=\\\\2{2}|$)/,\\n        lookbehind: true\\n      },\\n      comment: /^\\\\/\\\\/.*/m,\\n      title: {\\n        pattern: /^.+(?:\\\\r?\\\\n|\\\\r)(?:={3,}|-{3,}|~{3,}|\\\\^{3,}|\\\\+{3,})$|^={1,5} .+|^\\\\.(?![\\\\s.]).*/m,\\n        alias: 'important',\\n        inside: {\\n          punctuation: /^(?:\\\\.|=+)|(?:=+|-+|~+|\\\\^+|\\\\++)$/ // See rest below\\n\\n        }\\n      },\\n      'attribute-entry': {\\n        pattern: /^:[^:\\\\r\\\\n]+:(?: .*?(?: \\\\+(?:\\\\r?\\\\n|\\\\r).*?)*)?$/m,\\n        alias: 'tag'\\n      },\\n      attributes: attributes,\\n      hr: {\\n        pattern: /^'{3,}$/m,\\n        alias: 'punctuation'\\n      },\\n      'page-break': {\\n        pattern: /^<{3,}$/m,\\n        alias: 'punctuation'\\n      },\\n      admonition: {\\n        pattern: /^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,\\n        alias: 'keyword'\\n      },\\n      callout: [{\\n        pattern: /(^[ \\\\t]*)<?\\\\d*>/m,\\n        lookbehind: true,\\n        alias: 'symbol'\\n      }, {\\n        pattern: /<\\\\d+>/,\\n        alias: 'symbol'\\n      }],\\n      macro: {\\n        pattern: /\\\\b[a-z\\\\d][a-z\\\\d-]*::?(?:[^\\\\s\\\\[\\\\]]*\\\\[(?:[^\\\\]\\\\\\\\\\\"']|([\\\"'])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\.)*\\\\1|\\\\\\\\.)*\\\\])/,\\n        inside: {\\n          function: /^[a-z\\\\d-]+(?=:)/,\\n          punctuation: /^::?/,\\n          attributes: {\\n            pattern: /(?:\\\\[(?:[^\\\\]\\\\\\\\\\\"']|([\\\"'])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\.)*\\\\1|\\\\\\\\.)*\\\\])/,\\n            inside: attributes.inside\\n          }\\n        }\\n      },\\n      inline: {\\n        /*\\n        The initial look-behind prevents the highlighting of escaped quoted text.\\n        Quoted text can be multi-line but cannot span an empty line.\\n        All quoted text can have attributes before [foobar, 'foobar', baz=\\\"bar\\\"].\\n        First, we handle the constrained quotes.\\n        Those must be bounded by non-word chars and cannot have spaces between the delimiter and the first char.\\n        They are, in order: _emphasis_, ``double quotes'', `single quotes', `monospace`, 'emphasis', *strong*, +monospace+ and #unquoted#\\n        Then we handle the unconstrained quotes.\\n        Those do not have the restrictions of the constrained quotes.\\n        They are, in order: __emphasis__, **strong**, ++monospace++, +++passthrough+++, ##unquoted##, $$passthrough$$, ~subscript~, ^superscript^, {attribute-reference}, [[anchor]], [[[bibliography anchor]]], <<xref>>, (((indexes))) and ((indexes))\\n        */\\n        pattern: /(^|[^\\\\\\\\])(?:(?:\\\\B\\\\[(?:[^\\\\]\\\\\\\\\\\"']|([\\\"'])(?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*\\\\2|\\\\\\\\.)*\\\\])?(?:\\\\b_(?!\\\\s)(?: _|[^_\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)+(?:(?:\\\\r?\\\\n|\\\\r)(?: _|[^_\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)+)*_\\\\b|\\\\B``(?!\\\\s).+?(?:(?:\\\\r?\\\\n|\\\\r).+?)*''\\\\B|\\\\B`(?!\\\\s)(?:[^`'\\\\s]|\\\\s+\\\\S)+['`]\\\\B|\\\\B(['*+#])(?!\\\\s)(?: \\\\3|(?!\\\\3)[^\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)+(?:(?:\\\\r?\\\\n|\\\\r)(?: \\\\3|(?!\\\\3)[^\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)+)*\\\\3\\\\B)|(?:\\\\[(?:[^\\\\]\\\\\\\\\\\"']|([\\\"'])(?:(?!\\\\4)[^\\\\\\\\]|\\\\\\\\.)*\\\\4|\\\\\\\\.)*\\\\])?(?:(__|\\\\*\\\\*|\\\\+\\\\+\\\\+?|##|\\\\$\\\\$|[~^]).+?(?:(?:\\\\r?\\\\n|\\\\r).+?)*\\\\5|\\\\{[^}\\\\r\\\\n]+\\\\}|\\\\[\\\\[\\\\[?.+?(?:(?:\\\\r?\\\\n|\\\\r).+?)*\\\\]?\\\\]\\\\]|<<.+?(?:(?:\\\\r?\\\\n|\\\\r).+?)*>>|\\\\(\\\\(\\\\(?.+?(?:(?:\\\\r?\\\\n|\\\\r).+?)*\\\\)?\\\\)\\\\)))/m,\\n        lookbehind: true,\\n        inside: {\\n          attributes: attributes,\\n          url: {\\n            pattern: /^(?:\\\\[\\\\[\\\\[?.+?\\\\]?\\\\]\\\\]|<<.+?>>)$/,\\n            inside: {\\n              punctuation: /^(?:\\\\[\\\\[\\\\[?|<<)|(?:\\\\]\\\\]\\\\]?|>>)$/\\n            }\\n          },\\n          'attribute-ref': {\\n            pattern: /^\\\\{.+\\\\}$/,\\n            inside: {\\n              variable: {\\n                pattern: /(^\\\\{)[a-z\\\\d,+_-]+/,\\n                lookbehind: true\\n              },\\n              operator: /^[=?!#%@$]|!(?=[:}])/,\\n              punctuation: /^\\\\{|\\\\}$|::?/\\n            }\\n          },\\n          italic: {\\n            pattern: /^(['_])[\\\\s\\\\S]+\\\\1$/,\\n            inside: {\\n              punctuation: /^(?:''?|__?)|(?:''?|__?)$/\\n            }\\n          },\\n          bold: {\\n            pattern: /^\\\\*[\\\\s\\\\S]+\\\\*$/,\\n            inside: {\\n              punctuation: /^\\\\*\\\\*?|\\\\*\\\\*?$/\\n            }\\n          },\\n          punctuation: /^(?:``?|\\\\+{1,3}|##?|\\\\$\\\\$|[~^]|\\\\(\\\\(\\\\(?)|(?:''?|\\\\+{1,3}|##?|\\\\$\\\\$|[~^`]|\\\\)?\\\\)\\\\))$/\\n        }\\n      },\\n      replacement: {\\n        pattern: /\\\\((?:C|R|TM)\\\\)/,\\n        alias: 'builtin'\\n      },\\n      entity: /&#?[\\\\da-z]{1,8};/i,\\n      'line-continuation': {\\n        pattern: /(^| )\\\\+$/m,\\n        lookbehind: true,\\n        alias: 'punctuation'\\n      }\\n    }; // Allow some nesting. There is no recursion though, so cloning should not be needed.\\n\\n    function copyFromAsciiDoc(keys) {\\n      keys = keys.split(' ');\\n      var o = {};\\n\\n      for (var i = 0, l = keys.length; i < l; i++) {\\n        o[keys[i]] = asciidoc[keys[i]];\\n      }\\n\\n      return o;\\n    }\\n\\n    attributes.inside['interpreted'].inside.rest = copyFromAsciiDoc('macro inline replacement entity');\\n    asciidoc['passthrough-block'].inside.rest = copyFromAsciiDoc('macro');\\n    asciidoc['literal-block'].inside.rest = copyFromAsciiDoc('callout');\\n    asciidoc['table'].inside.rest = copyFromAsciiDoc('comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation');\\n    asciidoc['other-block'].inside.rest = copyFromAsciiDoc('table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation');\\n    asciidoc['title'].inside.rest = copyFromAsciiDoc('macro inline replacement entity'); // Plugin to make entity title show the real entity, idea by Roman Komarov\\n\\n    Prism.hooks.add('wrap', function (env) {\\n      if (env.type === 'entity') {\\n        env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\\n      }\\n    });\\n    Prism.languages.adoc = Prism.languages.asciidoc;\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"asciidoc\",\"Prism\",\"copyFromAsciiDoc\",\"keys\",\"split\",\"o\",\"i\",\"l\",\"length\",\"attributes\",\"pattern\",\"lookbehind\",\"inside\",\"quoted\",\"punctuation\",\"interpreted\",\"string\",\"variable\",\"operator\",\"languages\",\"alias\",\"table\",\"specifiers\",\"comment\",\"title\",\"hr\",\"admonition\",\"callout\",\"macro\",\"function\",\"inline\",\"url\",\"italic\",\"bold\",\"replacement\",\"entity\",\"rest\",\"hooks\",\"add\",\"env\",\"type\",\"content\",\"value\",\"replace\",\"adoc\",\"Object\",\"defineProperty\",\"default\",\"displayName\",\"aliases\"]\n}\n"]