["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/hast-util-to-html/lib/handle/element.js"],"~:js","shadow$provide.module$node_modules$hast_util_to_html$lib$handle$element=function(global,require,module,exports){function serializeAttribute(state,key,value){key=(0,_propertyInformation.find)(state.schema,key);const x=state.settings.allowParseErrors&&\"html\"===state.schema.space?0:1,y=state.settings.allowDangerousCharacters?0:1;let quote=state.quote,result;if(key.overloadedBoolean&&(value===key.attribute||\"\"===value))value=!0;else if(key.boolean||key.overloadedBoolean&&\"string\"!==typeof value)value=\n!!value;if(void 0===value||null===value||!1===value||\"number\"===typeof value&&Number.isNaN(value))return\"\";const name=(0,_stringifyEntities.stringifyEntities)(key.attribute,Object.assign({},state.settings.characterReferences,{subset:constants.name[x][y]}));if(!0===value)return name;value=Array.isArray(value)?(key.commaSeparated?_commaSeparatedTokens.stringify:_spaceSeparatedTokens.stringify)(value,{padLeft:!state.settings.tightCommaSeparatedLists}):String(value);if(state.settings.collapseEmptyAttributes&&\n!value)return name;state.settings.preferUnquoted&&(result=(0,_stringifyEntities.stringifyEntities)(value,Object.assign({},state.settings.characterReferences,{subset:constants.unquoted[x][y],attribute:!0})));result!==value&&(state.settings.quoteSmart&&(0,_ccount.ccount)(value,quote)>(0,_ccount.ccount)(value,state.alternative)&&(quote=state.alternative),result=quote+(0,_stringifyEntities.stringifyEntities)(value,Object.assign({},state.settings.characterReferences,{subset:(\"'\"===quote?constants.single:\nconstants.double)[x][y],attribute:!0}))+quote);return name+(result?\"\\x3d\"+result:result)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.element=function(node,index,parent,state){var schema=state.schema;const omit=\"svg\"===schema.space?!1:state.settings.omitOptionalTags;let selfClosing=\"svg\"===schema.space?state.settings.closeEmptyElements:state.settings.voids.includes(node.tagName.toLowerCase());const parts=[];\"html\"===schema.space&&\"svg\"===node.tagName&&(state.schema=_propertyInformation.svg);\nvar props=node.properties,values=[];var JSCompiler_inline_result=-1;let key;if(props)for(key in props)if(void 0!==props[key]&&null!==props[key]){const value=serializeAttribute(state,key,props[key]);value&&values.push(value)}for(;++JSCompiler_inline_result<values.length;)props=state.settings.tightAttributes?values[JSCompiler_inline_result].charAt(values[JSCompiler_inline_result].length-1):null,JSCompiler_inline_result!==values.length-1&&'\"'!==props&&\"'\"!==props&&(values[JSCompiler_inline_result]+=\n\" \");JSCompiler_inline_result=values.join(\"\");values=state.all(\"html\"===schema.space&&\"template\"===node.tagName?node.content:node);state.schema=schema;values&&(selfClosing=!1);!JSCompiler_inline_result&&omit&&(0,_opening.opening)(node,index,parent)||(parts.push(\"\\x3c\",node.tagName,JSCompiler_inline_result?\" \"+JSCompiler_inline_result:\"\"),selfClosing&&(\"svg\"===schema.space||state.settings.closeSelfClosing)&&(schema=JSCompiler_inline_result.charAt(JSCompiler_inline_result.length-1),(!state.settings.tightSelfClosing||\n\"/\"===schema||schema&&'\"'!==schema&&\"'\"!==schema)&&parts.push(\" \"),parts.push(\"/\")),parts.push(\"\\x3e\"));parts.push(values);selfClosing||omit&&(0,_closing.closing)(node,index,parent)||parts.push(\"\\x3c/\"+node.tagName+\"\\x3e\");return parts.join(\"\")};var _ccount=require(\"module$node_modules$ccount$index\"),_commaSeparatedTokens=require(\"module$node_modules$comma_separated_tokens$index\"),_propertyInformation=require(\"module$node_modules$property_information$index\"),_spaceSeparatedTokens=require(\"module$node_modules$space_separated_tokens$index\"),\n_stringifyEntities=require(\"module$node_modules$stringify_entities$index\"),_opening=require(\"module$node_modules$hast_util_to_html$lib$omission$opening\"),_closing=require(\"module$node_modules$hast_util_to_html$lib$omission$closing\");const constants={name:[[\"\\t\\n\\f\\r \\x26/\\x3d\\x3e\".split(\"\"),\"\\t\\n\\f\\r \\\"\\x26'/\\x3d\\x3e`\".split(\"\")],[\"\\x00\\t\\n\\f\\r \\\"\\x26'/\\x3c\\x3d\\x3e\".split(\"\"),\"\\x00\\t\\n\\f\\r \\\"\\x26'/\\x3c\\x3d\\x3e`\".split(\"\")]],unquoted:[[\"\\t\\n\\f\\r \\x26\\x3e\".split(\"\"),\"\\x00\\t\\n\\f\\r \\\"\\x26'\\x3c\\x3d\\x3e`\".split(\"\")],\n[\"\\x00\\t\\n\\f\\r \\\"\\x26'\\x3c\\x3d\\x3e`\".split(\"\"),\"\\x00\\t\\n\\f\\r \\\"\\x26'\\x3c\\x3d\\x3e`\".split(\"\")]],single:[[[\"\\x26\",\"'\"],['\"',\"\\x26\",\"'\",\"`\"]],[[\"\\x00\",\"\\x26\",\"'\"],[\"\\x00\",'\"',\"\\x26\",\"'\",\"`\"]]],double:[[['\"',\"\\x26\"],['\"',\"\\x26\",\"'\",\"`\"]],[[\"\\x00\",'\"',\"\\x26\"],[\"\\x00\",'\"',\"\\x26\",\"'\",\"`\"]]]}}","~:source","shadow$provide[\"module$node_modules$hast_util_to_html$lib$handle$element\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.element = element;\n\nvar _ccount = require(\"ccount\");\n\nvar _commaSeparatedTokens = require(\"comma-separated-tokens\");\n\nvar _propertyInformation = require(\"property-information\");\n\nvar _spaceSeparatedTokens = require(\"space-separated-tokens\");\n\nvar _stringifyEntities = require(\"stringify-entities\");\n\nvar _opening = require(\"../omission/opening.js\");\n\nvar _closing = require(\"../omission/closing.js\");\n\n/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').PropertyValue} PropertyValue\n */\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'name' | 'unquoted' | 'single' | 'double', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')], ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')], ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [[\"&'\".split(''), '\"&\\'`'.split('')], [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [['\"&'.split(''), '\"&\\'`'.split('')], ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]]\n};\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\n// eslint-disable-next-line complexity\n\nfunction element(node, index, parent, state) {\n  const schema = state.schema;\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;\n  let selfClosing = schema.space === 'svg' ? state.settings.closeEmptyElements : state.settings.voids.includes(node.tagName.toLowerCase());\n  /** @type {Array<string>} */\n\n  const parts = [];\n  /** @type {string} */\n\n  let last;\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = _propertyInformation.svg;\n  }\n\n  const attrs = serializeAttributes(state, node.properties);\n  const content = state.all(schema.space === 'html' && node.tagName === 'template' ? node.content : node);\n  state.schema = schema; // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n\n  if (content) selfClosing = false;\n\n  if (attrs || !omit || !(0, _opening.opening)(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '');\n\n    if (selfClosing && (schema.space === 'svg' || state.settings.closeSelfClosing)) {\n      last = attrs.charAt(attrs.length - 1);\n\n      if (!state.settings.tightSelfClosing || last === '/' || last && last !== '\"' && last !== \"'\") {\n        parts.push(' ');\n      }\n\n      parts.push('/');\n    }\n\n    parts.push('>');\n  }\n\n  parts.push(content);\n\n  if (!selfClosing && (!omit || !(0, _closing.closing)(node, index, parent))) {\n    parts.push('</' + node.tagName + '>');\n  }\n\n  return parts.join('');\n}\n/**\n * @param {State} state\n * @param {Properties | null | undefined} props\n * @returns {string}\n */\n\n\nfunction serializeAttributes(state, props) {\n  /** @type {Array<string>} */\n  const values = [];\n  let index = -1;\n  /** @type {string} */\n\n  let key;\n\n  if (props) {\n    for (key in props) {\n      if (props[key] !== undefined && props[key] !== null) {\n        const value = serializeAttribute(state, key, props[key]);\n        if (value) values.push(value);\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes ? values[index].charAt(values[index].length - 1) : null; // In tight mode, donâ€™t add a space after quoted attributes.\n\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' ';\n    }\n  }\n\n  return values.join('');\n}\n/**\n * @param {State} state\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\n\n\nfunction serializeAttribute(state, key, value) {\n  const info = (0, _propertyInformation.find)(state.schema, key);\n  const x = state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;\n  const y = state.settings.allowDangerousCharacters ? 0 : 1;\n  let quote = state.quote;\n  /** @type {string | undefined} */\n\n  let result;\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true;\n  } else if (info.boolean || info.overloadedBoolean && typeof value !== 'string') {\n    value = Boolean(value);\n  }\n\n  if (value === undefined || value === null || value === false || typeof value === 'number' && Number.isNaN(value)) {\n    return '';\n  }\n\n  const name = (0, _stringifyEntities.stringifyEntities)(info.attribute, Object.assign({}, state.settings.characterReferences, {\n    // Always encode without parse errors in non-HTML.\n    subset: constants.name[x][y]\n  })); // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I canâ€™t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n\n  if (value === true) return name; // `spaces` doesnâ€™t accept a second argument, but itâ€™s given here just to\n  // keep the code cleaner.\n\n  value = Array.isArray(value) ? (info.commaSeparated ? _commaSeparatedTokens.stringify : _spaceSeparatedTokens.stringify)(value, {\n    padLeft: !state.settings.tightCommaSeparatedLists\n  }) : String(value);\n  if (state.settings.collapseEmptyAttributes && !value) return name; // Check unquoted value.\n\n  if (state.settings.preferUnquoted) {\n    result = (0, _stringifyEntities.stringifyEntities)(value, Object.assign({}, state.settings.characterReferences, {\n      subset: constants.unquoted[x][y],\n      attribute: true\n    }));\n  } // If we donâ€™t want unquoted, or if `value` contains character references when\n  // unquotedâ€¦\n\n\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (state.settings.quoteSmart && (0, _ccount.ccount)(value, quote) > (0, _ccount.ccount)(value, state.alternative)) {\n      quote = state.alternative;\n    }\n\n    result = quote + (0, _stringifyEntities.stringifyEntities)(value, Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n      attribute: true\n    })) + quote;\n  } // Donâ€™t add a `=` for unquoted empties.\n\n\n  return name + (result ? '=' + result : result);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$property_information$index","~$shadow.js","~$module$node_modules$stringify_entities$index","~$module$node_modules$space_separated_tokens$index","~$module$node_modules$ccount$index","~$module$node_modules$hast_util_to_html$lib$omission$closing","~$module$node_modules$comma_separated_tokens$index","~$module$node_modules$hast_util_to_html$lib$omission$opening"]],"~:properties",["^5",["subset","__esModule","attribute","schema","element","name","value","double","padLeft","single","unquoted"]],"~:compiled-at",1676686799609,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$hast_util_to_html$lib$handle$element.js\",\n\"lineCount\":9,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/hast-util-to-html/lib/handle/element.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$hast_util_to_html$lib$handle$element\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.element = element;\\n\\nvar _ccount = require(\\\"ccount\\\");\\n\\nvar _commaSeparatedTokens = require(\\\"comma-separated-tokens\\\");\\n\\nvar _propertyInformation = require(\\\"property-information\\\");\\n\\nvar _spaceSeparatedTokens = require(\\\"space-separated-tokens\\\");\\n\\nvar _stringifyEntities = require(\\\"stringify-entities\\\");\\n\\nvar _opening = require(\\\"../omission/opening.js\\\");\\n\\nvar _closing = require(\\\"../omission/closing.js\\\");\\n\\n/**\\n * @typedef {import('../types.js').State} State\\n * @typedef {import('../types.js').Parent} Parent\\n * @typedef {import('../types.js').Element} Element\\n * @typedef {import('../types.js').Properties} Properties\\n * @typedef {import('../types.js').PropertyValue} PropertyValue\\n */\\n\\n/**\\n * Maps of subsets.\\n *\\n * Each value is a matrix of tuples.\\n * The value at `0` causes parse errors, the value at `1` is valid.\\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\\n *\\n * @type {Record<'name' | 'unquoted' | 'single' | 'double', Array<[Array<string>, Array<string>]>>}\\n */\\nconst constants = {\\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\\n  name: [['\\\\t\\\\n\\\\f\\\\r &/=>'.split(''), '\\\\t\\\\n\\\\f\\\\r \\\"&\\\\'/=>`'.split('')], ['\\\\0\\\\t\\\\n\\\\f\\\\r \\\"&\\\\'/<=>'.split(''), '\\\\0\\\\t\\\\n\\\\f\\\\r \\\"&\\\\'/<=>`'.split('')]],\\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\\n  unquoted: [['\\\\t\\\\n\\\\f\\\\r &>'.split(''), '\\\\0\\\\t\\\\n\\\\f\\\\r \\\"&\\\\'<=>`'.split('')], ['\\\\0\\\\t\\\\n\\\\f\\\\r \\\"&\\\\'<=>`'.split(''), '\\\\0\\\\t\\\\n\\\\f\\\\r \\\"&\\\\'<=>`'.split('')]],\\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\\n  single: [[\\\"&'\\\".split(''), '\\\"&\\\\'`'.split('')], [\\\"\\\\0&'\\\".split(''), '\\\\0\\\"&\\\\'`'.split('')]],\\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\\n  double: [['\\\"&'.split(''), '\\\"&\\\\'`'.split('')], ['\\\\0\\\"&'.split(''), '\\\\0\\\"&\\\\'`'.split('')]]\\n};\\n/**\\n * Serialize an element node.\\n *\\n * @param {Element} node\\n *   Node to handle.\\n * @param {number | undefined} index\\n *   Index of `node` in `parent.\\n * @param {Parent | undefined} parent\\n *   Parent of `node`.\\n * @param {State} state\\n *   Info passed around about the current state.\\n * @returns {string}\\n *   Serialized node.\\n */\\n// eslint-disable-next-line complexity\\n\\nfunction element(node, index, parent, state) {\\n  const schema = state.schema;\\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;\\n  let selfClosing = schema.space === 'svg' ? state.settings.closeEmptyElements : state.settings.voids.includes(node.tagName.toLowerCase());\\n  /** @type {Array<string>} */\\n\\n  const parts = [];\\n  /** @type {string} */\\n\\n  let last;\\n\\n  if (schema.space === 'html' && node.tagName === 'svg') {\\n    state.schema = _propertyInformation.svg;\\n  }\\n\\n  const attrs = serializeAttributes(state, node.properties);\\n  const content = state.all(schema.space === 'html' && node.tagName === 'template' ? node.content : node);\\n  state.schema = schema; // If the node is categorised as void, but it has children, remove the\\n  // categorisation.\\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\\n  // void in WHATWG HTML, to be stringified properly.\\n\\n  if (content) selfClosing = false;\\n\\n  if (attrs || !omit || !(0, _opening.opening)(node, index, parent)) {\\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '');\\n\\n    if (selfClosing && (schema.space === 'svg' || state.settings.closeSelfClosing)) {\\n      last = attrs.charAt(attrs.length - 1);\\n\\n      if (!state.settings.tightSelfClosing || last === '/' || last && last !== '\\\"' && last !== \\\"'\\\") {\\n        parts.push(' ');\\n      }\\n\\n      parts.push('/');\\n    }\\n\\n    parts.push('>');\\n  }\\n\\n  parts.push(content);\\n\\n  if (!selfClosing && (!omit || !(0, _closing.closing)(node, index, parent))) {\\n    parts.push('</' + node.tagName + '>');\\n  }\\n\\n  return parts.join('');\\n}\\n/**\\n * @param {State} state\\n * @param {Properties | null | undefined} props\\n * @returns {string}\\n */\\n\\n\\nfunction serializeAttributes(state, props) {\\n  /** @type {Array<string>} */\\n  const values = [];\\n  let index = -1;\\n  /** @type {string} */\\n\\n  let key;\\n\\n  if (props) {\\n    for (key in props) {\\n      if (props[key] !== undefined && props[key] !== null) {\\n        const value = serializeAttribute(state, key, props[key]);\\n        if (value) values.push(value);\\n      }\\n    }\\n  }\\n\\n  while (++index < values.length) {\\n    const last = state.settings.tightAttributes ? values[index].charAt(values[index].length - 1) : null; // In tight mode, don\\u2019t add a space after quoted attributes.\\n\\n    if (index !== values.length - 1 && last !== '\\\"' && last !== \\\"'\\\") {\\n      values[index] += ' ';\\n    }\\n  }\\n\\n  return values.join('');\\n}\\n/**\\n * @param {State} state\\n * @param {string} key\\n * @param {PropertyValue} value\\n * @returns {string}\\n */\\n// eslint-disable-next-line complexity\\n\\n\\nfunction serializeAttribute(state, key, value) {\\n  const info = (0, _propertyInformation.find)(state.schema, key);\\n  const x = state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;\\n  const y = state.settings.allowDangerousCharacters ? 0 : 1;\\n  let quote = state.quote;\\n  /** @type {string | undefined} */\\n\\n  let result;\\n\\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\\n    value = true;\\n  } else if (info.boolean || info.overloadedBoolean && typeof value !== 'string') {\\n    value = Boolean(value);\\n  }\\n\\n  if (value === undefined || value === null || value === false || typeof value === 'number' && Number.isNaN(value)) {\\n    return '';\\n  }\\n\\n  const name = (0, _stringifyEntities.stringifyEntities)(info.attribute, Object.assign({}, state.settings.characterReferences, {\\n    // Always encode without parse errors in non-HTML.\\n    subset: constants.name[x][y]\\n  })); // No value.\\n  // There is currently only one boolean property in SVG: `[download]` on\\n  // `<a>`.\\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\\n  // so I can\\u2019t test if dropping the value works.\\n  // But I assume that it should:\\n  //\\n  // ```html\\n  // <!doctype html>\\n  // <svg viewBox=\\\"0 0 100 100\\\">\\n  //   <a href=https://example.com download>\\n  //     <circle cx=50 cy=40 r=35 />\\n  //   </a>\\n  // </svg>\\n  // ```\\n  //\\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\\n\\n  if (value === true) return name; // `spaces` doesn\\u2019t accept a second argument, but it\\u2019s given here just to\\n  // keep the code cleaner.\\n\\n  value = Array.isArray(value) ? (info.commaSeparated ? _commaSeparatedTokens.stringify : _spaceSeparatedTokens.stringify)(value, {\\n    padLeft: !state.settings.tightCommaSeparatedLists\\n  }) : String(value);\\n  if (state.settings.collapseEmptyAttributes && !value) return name; // Check unquoted value.\\n\\n  if (state.settings.preferUnquoted) {\\n    result = (0, _stringifyEntities.stringifyEntities)(value, Object.assign({}, state.settings.characterReferences, {\\n      subset: constants.unquoted[x][y],\\n      attribute: true\\n    }));\\n  } // If we don\\u2019t want unquoted, or if `value` contains character references when\\n  // unquoted\\u2026\\n\\n\\n  if (result !== value) {\\n    // If the alternative is less common than `quote`, switch.\\n    if (state.settings.quoteSmart && (0, _ccount.ccount)(value, quote) > (0, _ccount.ccount)(value, state.alternative)) {\\n      quote = state.alternative;\\n    }\\n\\n    result = quote + (0, _stringifyEntities.stringifyEntities)(value, Object.assign({}, state.settings.characterReferences, {\\n      // Always encode without parse errors in non-HTML.\\n      subset: (quote === \\\"'\\\" ? constants.single : constants.double)[x][y],\\n      attribute: true\\n    })) + quote;\\n  } // Don\\u2019t add a `=` for unquoted empties.\\n\\n\\n  return name + (result ? '=' + result : result);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"serializeAttribute\",\"state\",\"key\",\"value\",\"info\",\"_propertyInformation\",\"find\",\"schema\",\"x\",\"settings\",\"allowParseErrors\",\"space\",\"y\",\"allowDangerousCharacters\",\"quote\",\"result\",\"overloadedBoolean\",\"attribute\",\"boolean\",\"undefined\",\"Number\",\"isNaN\",\"name\",\"_stringifyEntities\",\"stringifyEntities\",\"Object\",\"assign\",\"characterReferences\",\"subset\",\"constants\",\"Array\",\"isArray\",\"commaSeparated\",\"_commaSeparatedTokens\",\"stringify\",\"_spaceSeparatedTokens\",\"padLeft\",\"tightCommaSeparatedLists\",\"String\",\"collapseEmptyAttributes\",\"preferUnquoted\",\"unquoted\",\"quoteSmart\",\"_ccount\",\"ccount\",\"alternative\",\"single\",\"double\",\"defineProperty\",\"element\",\"node\",\"index\",\"parent\",\"omit\",\"omitOptionalTags\",\"selfClosing\",\"closeEmptyElements\",\"voids\",\"includes\",\"tagName\",\"toLowerCase\",\"parts\",\"svg\",\"properties\",\"values\",\"props\",\"push\",\"length\",\"last\",\"tightAttributes\",\"charAt\",\"join\",\"content\",\"all\",\"attrs\",\"_opening\",\"opening\",\"closeSelfClosing\",\"tightSelfClosing\",\"_closing\",\"closing\"]\n}\n"]