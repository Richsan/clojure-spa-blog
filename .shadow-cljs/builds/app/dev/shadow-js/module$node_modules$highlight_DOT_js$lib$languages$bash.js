["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/bash.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$bash=function(global,require,module,exports){module.exports=function(hljs){const VAR={};var BRACED_VAR={begin:/\\$\\{/,end:/\\}/,contains:[\"self\",{begin:/:-/,contains:[VAR]}]};Object.assign(VAR,{className:\"variable\",variants:[{begin:hljs.regex.concat(/\\$[\\w\\d#@][\\w\\d_]*/,\"(?![\\\\w\\\\d])(?![$])\")},BRACED_VAR]});var SUBST={className:\"subst\",begin:/\\$\\(/,end:/\\)/,contains:[hljs.BACKSLASH_ESCAPE]};BRACED_VAR={begin:/<<-?\\s*(?=\\w+)/,starts:{contains:[hljs.END_SAME_AS_BEGIN({begin:/(\\w+)/,\nend:/(\\w+)/,className:\"string\"})]}};const QUOTE_STRING={className:\"string\",begin:/\"/,end:/\"/,contains:[hljs.BACKSLASH_ESCAPE,VAR,SUBST]};SUBST.contains.push(QUOTE_STRING);SUBST={begin:/\\$?\\(\\(/,end:/\\)\\)/,contains:[{begin:/\\d+#[0-9a-f]+/,className:\"number\"},hljs.NUMBER_MODE,VAR]};const KNOWN_SHEBANG=hljs.SHEBANG({binary:\"(fish|bash|zsh|sh|csh|ksh|tcsh|dash|scsh)\",relevance:10}),FUNCTION={className:\"function\",begin:/\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,returnBegin:!0,contains:[hljs.inherit(hljs.TITLE_MODE,{begin:/\\w[\\w\\d_]*/})],\nrelevance:0};return{name:\"Bash\",aliases:[\"sh\"],keywords:{$pattern:/\\b[a-z][a-z0-9._-]+\\b/,keyword:\"if then else elif fi for while in do done case esac function\".split(\" \"),literal:[\"true\",\"false\"],built_in:\"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp chcon chgrp chown chmod cp dd df dir dircolors ln ls mkdir mkfifo mknod mktemp mv realpath rm rmdir shred sync touch truncate vdir b2sum base32 base64 cat cksum comm csplit cut expand fmt fold head join md5sum nl numfmt od paste ptx pr sha1sum sha224sum sha256sum sha384sum sha512sum shuf sort split sum tac tail tr tsort unexpand uniq wc arch basename chroot date dirname du echo env expr factor groups hostid id link logname nice nohup nproc pathchk pinky printenv printf pwd readlink runcon seq sleep stat stdbuf stty tee test timeout tty uname unlink uptime users who whoami yes\".split(\" \")},\ncontains:[KNOWN_SHEBANG,hljs.SHEBANG(),FUNCTION,SUBST,hljs.HASH_COMMENT_MODE,BRACED_VAR,{match:/(\\/[a-z._-]+)+/},QUOTE_STRING,{className:\"\",begin:/\\\\\"/},{className:\"string\",begin:/'/,end:/'/},VAR]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$bash\"] = function(global,require,module,exports) {\n/*\nLanguage: Bash\nAuthor: vah <vahtenberg@gmail.com>\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\nWebsite: https://www.gnu.org/software/bash/\nCategory: common\n*/\n\n/** @type LanguageFn */\nfunction bash(hljs) {\n  const regex = hljs.regex;\n  const VAR = {};\n  const BRACED_VAR = {\n    begin: /\\$\\{/,\n    end: /\\}/,\n    contains: [\n      \"self\",\n      {\n        begin: /:-/,\n        contains: [ VAR ]\n      } // default values\n    ]\n  };\n  Object.assign(VAR, {\n    className: 'variable',\n    variants: [\n      { begin: regex.concat(/\\$[\\w\\d#@][\\w\\d_]*/,\n        // negative look-ahead tries to avoid matching patterns that are not\n        // Perl at all like $ident$, @ident@, etc.\n        `(?![\\\\w\\\\d])(?![$])`) },\n      BRACED_VAR\n    ]\n  });\n\n  const SUBST = {\n    className: 'subst',\n    begin: /\\$\\(/,\n    end: /\\)/,\n    contains: [ hljs.BACKSLASH_ESCAPE ]\n  };\n  const HERE_DOC = {\n    begin: /<<-?\\s*(?=\\w+)/,\n    starts: { contains: [\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(\\w+)/,\n        end: /(\\w+)/,\n        className: 'string'\n      })\n    ] }\n  };\n  const QUOTE_STRING = {\n    className: 'string',\n    begin: /\"/,\n    end: /\"/,\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      VAR,\n      SUBST\n    ]\n  };\n  SUBST.contains.push(QUOTE_STRING);\n  const ESCAPED_QUOTE = {\n    className: '',\n    begin: /\\\\\"/\n\n  };\n  const APOS_STRING = {\n    className: 'string',\n    begin: /'/,\n    end: /'/\n  };\n  const ARITHMETIC = {\n    begin: /\\$?\\(\\(/,\n    end: /\\)\\)/,\n    contains: [\n      {\n        begin: /\\d+#[0-9a-f]+/,\n        className: \"number\"\n      },\n      hljs.NUMBER_MODE,\n      VAR\n    ]\n  };\n  const SH_LIKE_SHELLS = [\n    \"fish\",\n    \"bash\",\n    \"zsh\",\n    \"sh\",\n    \"csh\",\n    \"ksh\",\n    \"tcsh\",\n    \"dash\",\n    \"scsh\",\n  ];\n  const KNOWN_SHEBANG = hljs.SHEBANG({\n    binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\n    relevance: 10\n  });\n  const FUNCTION = {\n    className: 'function',\n    begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\n    returnBegin: true,\n    contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: /\\w[\\w\\d_]*/ }) ],\n    relevance: 0\n  };\n\n  const KEYWORDS = [\n    \"if\",\n    \"then\",\n    \"else\",\n    \"elif\",\n    \"fi\",\n    \"for\",\n    \"while\",\n    \"in\",\n    \"do\",\n    \"done\",\n    \"case\",\n    \"esac\",\n    \"function\"\n  ];\n\n  const LITERALS = [\n    \"true\",\n    \"false\"\n  ];\n\n  // to consume paths to prevent keyword matches inside them\n  const PATH_MODE = { match: /(\\/[a-z._-]+)+/ };\n\n  // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n  const SHELL_BUILT_INS = [\n    \"break\",\n    \"cd\",\n    \"continue\",\n    \"eval\",\n    \"exec\",\n    \"exit\",\n    \"export\",\n    \"getopts\",\n    \"hash\",\n    \"pwd\",\n    \"readonly\",\n    \"return\",\n    \"shift\",\n    \"test\",\n    \"times\",\n    \"trap\",\n    \"umask\",\n    \"unset\"\n  ];\n\n  const BASH_BUILT_INS = [\n    \"alias\",\n    \"bind\",\n    \"builtin\",\n    \"caller\",\n    \"command\",\n    \"declare\",\n    \"echo\",\n    \"enable\",\n    \"help\",\n    \"let\",\n    \"local\",\n    \"logout\",\n    \"mapfile\",\n    \"printf\",\n    \"read\",\n    \"readarray\",\n    \"source\",\n    \"type\",\n    \"typeset\",\n    \"ulimit\",\n    \"unalias\"\n  ];\n\n  const ZSH_BUILT_INS = [\n    \"autoload\",\n    \"bg\",\n    \"bindkey\",\n    \"bye\",\n    \"cap\",\n    \"chdir\",\n    \"clone\",\n    \"comparguments\",\n    \"compcall\",\n    \"compctl\",\n    \"compdescribe\",\n    \"compfiles\",\n    \"compgroups\",\n    \"compquote\",\n    \"comptags\",\n    \"comptry\",\n    \"compvalues\",\n    \"dirs\",\n    \"disable\",\n    \"disown\",\n    \"echotc\",\n    \"echoti\",\n    \"emulate\",\n    \"fc\",\n    \"fg\",\n    \"float\",\n    \"functions\",\n    \"getcap\",\n    \"getln\",\n    \"history\",\n    \"integer\",\n    \"jobs\",\n    \"kill\",\n    \"limit\",\n    \"log\",\n    \"noglob\",\n    \"popd\",\n    \"print\",\n    \"pushd\",\n    \"pushln\",\n    \"rehash\",\n    \"sched\",\n    \"setcap\",\n    \"setopt\",\n    \"stat\",\n    \"suspend\",\n    \"ttyctl\",\n    \"unfunction\",\n    \"unhash\",\n    \"unlimit\",\n    \"unsetopt\",\n    \"vared\",\n    \"wait\",\n    \"whence\",\n    \"where\",\n    \"which\",\n    \"zcompile\",\n    \"zformat\",\n    \"zftp\",\n    \"zle\",\n    \"zmodload\",\n    \"zparseopts\",\n    \"zprof\",\n    \"zpty\",\n    \"zregexparse\",\n    \"zsocket\",\n    \"zstyle\",\n    \"ztcp\"\n  ];\n\n  const GNU_CORE_UTILS = [\n    \"chcon\",\n    \"chgrp\",\n    \"chown\",\n    \"chmod\",\n    \"cp\",\n    \"dd\",\n    \"df\",\n    \"dir\",\n    \"dircolors\",\n    \"ln\",\n    \"ls\",\n    \"mkdir\",\n    \"mkfifo\",\n    \"mknod\",\n    \"mktemp\",\n    \"mv\",\n    \"realpath\",\n    \"rm\",\n    \"rmdir\",\n    \"shred\",\n    \"sync\",\n    \"touch\",\n    \"truncate\",\n    \"vdir\",\n    \"b2sum\",\n    \"base32\",\n    \"base64\",\n    \"cat\",\n    \"cksum\",\n    \"comm\",\n    \"csplit\",\n    \"cut\",\n    \"expand\",\n    \"fmt\",\n    \"fold\",\n    \"head\",\n    \"join\",\n    \"md5sum\",\n    \"nl\",\n    \"numfmt\",\n    \"od\",\n    \"paste\",\n    \"ptx\",\n    \"pr\",\n    \"sha1sum\",\n    \"sha224sum\",\n    \"sha256sum\",\n    \"sha384sum\",\n    \"sha512sum\",\n    \"shuf\",\n    \"sort\",\n    \"split\",\n    \"sum\",\n    \"tac\",\n    \"tail\",\n    \"tr\",\n    \"tsort\",\n    \"unexpand\",\n    \"uniq\",\n    \"wc\",\n    \"arch\",\n    \"basename\",\n    \"chroot\",\n    \"date\",\n    \"dirname\",\n    \"du\",\n    \"echo\",\n    \"env\",\n    \"expr\",\n    \"factor\",\n    // \"false\", // keyword literal already\n    \"groups\",\n    \"hostid\",\n    \"id\",\n    \"link\",\n    \"logname\",\n    \"nice\",\n    \"nohup\",\n    \"nproc\",\n    \"pathchk\",\n    \"pinky\",\n    \"printenv\",\n    \"printf\",\n    \"pwd\",\n    \"readlink\",\n    \"runcon\",\n    \"seq\",\n    \"sleep\",\n    \"stat\",\n    \"stdbuf\",\n    \"stty\",\n    \"tee\",\n    \"test\",\n    \"timeout\",\n    // \"true\", // keyword literal already\n    \"tty\",\n    \"uname\",\n    \"unlink\",\n    \"uptime\",\n    \"users\",\n    \"who\",\n    \"whoami\",\n    \"yes\"\n  ];\n\n  return {\n    name: 'Bash',\n    aliases: [ 'sh' ],\n    keywords: {\n      $pattern: /\\b[a-z][a-z0-9._-]+\\b/,\n      keyword: KEYWORDS,\n      literal: LITERALS,\n      built_in: [\n        ...SHELL_BUILT_INS,\n        ...BASH_BUILT_INS,\n        // Shell modifiers\n        \"set\",\n        \"shopt\",\n        ...ZSH_BUILT_INS,\n        ...GNU_CORE_UTILS\n      ]\n    },\n    contains: [\n      KNOWN_SHEBANG, // to catch known shells and boost relevancy\n      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang\n      FUNCTION,\n      ARITHMETIC,\n      hljs.HASH_COMMENT_MODE,\n      HERE_DOC,\n      PATH_MODE,\n      QUOTE_STRING,\n      ESCAPED_QUOTE,\n      APOS_STRING,\n      VAR\n    ]\n  };\n}\n\nmodule.exports = bash;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["variants","begin","aliases","className","contains","$pattern","binary","relevance","returnBegin","name","built_in","keyword","keywords","match","starts","literal","end"]],"~:compiled-at",1676671710120,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$bash.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmYpHD,MAAOC,CAAAA,OAAP,CAzXAC,QAAa,CAACC,IAAD,CAAO,CAElB,MAAMC,IAAM,EACZ,KAAMC,WAAa,CACjBC,MAAO,MADU,CAEjBC,IAAK,IAFY,CAGjBC,SAAU,CACR,MADQ,CAER,CACEF,MAAO,IADT,CAEEE,SAAU,CAAEJ,GAAF,CAFZ,CAFQ,CAHO,CAWnBK,OAAOC,CAAAA,MAAP,CAAcN,GAAd,CAAmB,CACjBO,UAAW,UADM,CAEjBC,SAAU,CACR,CAAEN,MAhBQH,IAAKU,CAAAA,KAgBAC,CAAAA,MAAN,CAAa,oBAAb,CAGN,qBAHM,CAAT,CADQ,CAKRT,UALQ,CAFO,CAAnB,CAWA,KAAMU,MAAQ,CACZJ,UAAW,OADC,CAEZL,MAAO,MAFK,CAGZC,IAAK,IAHO,CAIZC,SAAU,CAAEL,IAAKa,CAAAA,gBAAP,CAJE,CAMRC,WAAAA,CAAW,CACfX,MAAO,gBADQ,CAEfY,OAAQ,CAAEV,SAAU,CAClBL,IAAKgB,CAAAA,iBAAL,CAAuB,CACrBb,MAAO,OADc;AAErBC,IAAK,OAFgB,CAGrBI,UAAW,QAHU,CAAvB,CADkB,CAAZ,CAFO,CAUjB,OAAMS,aAAe,CACnBT,UAAW,QADQ,CAEnBL,MAAO,GAFY,CAGnBC,IAAK,GAHc,CAInBC,SAAU,CACRL,IAAKa,CAAAA,gBADG,CAERZ,GAFQ,CAGRW,KAHQ,CAJS,CAUrBA,MAAMP,CAAAA,QAASa,CAAAA,IAAf,CAAoBD,YAApB,CAWME,MAAAA,CAAa,CACjBhB,MAAO,SADU,CAEjBC,IAAK,MAFY,CAGjBC,SAAU,CACR,CACEF,MAAO,eADT,CAEEK,UAAW,QAFb,CADQ,CAKRR,IAAKoB,CAAAA,WALG,CAMRnB,GANQ,CAHO,CAuBnB,OAAMoB,cAAgBrB,IAAKsB,CAAAA,OAAL,CAAa,CACjCC,OAAS,2CADwB,CAEjCC,UAAW,EAFsB,CAAb,CAAtB,CAIMC,SAAW,CACfjB,UAAW,UADI,CAEfL,MAAO,2BAFQ,CAGfuB,YAAa,CAAA,CAHE,CAIfrB,SAAU,CAAEL,IAAK2B,CAAAA,OAAL,CAAa3B,IAAK4B,CAAAA,UAAlB,CAA8B,CAAEzB,MAAO,YAAT,CAA9B,CAAF,CAJK;AAKfqB,UAAW,CALI,CA+PjB,OAAO,CACLK,KAAM,MADD,CAELC,QAAS,CAAE,IAAF,CAFJ,CAGLC,SAAU,CACRC,SAAU,uBADF,CAERC,QA5PaC,8DAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CA0PL,CAGRC,QA7OaC,CACf,MADeA,CAEf,OAFeA,CA0OL,CAIRC,SAAU,kzCAAA,CAAA,KAAA,CAAA,GAAA,CAJF,CAHL;AAiBLhC,SAAU,CACRgB,aADQ,CAERrB,IAAKsB,CAAAA,OAAL,EAFQ,CAGRG,QAHQ,CAIRN,KAJQ,CAKRnB,IAAKsC,CAAAA,iBALG,CAMRxB,UANQ,CAlPMyB,CAAEC,MAAO,gBAATD,CAkPN,CAQRtB,YARQ,CArTUwB,CACpBjC,UAAW,EADSiC,CAEpBtC,MAAO,KAFasC,CAqTV,CAhTQC,CAClBlC,UAAW,QADOkC,CAElBvC,MAAO,GAFWuC,CAGlBtC,IAAK,GAHasC,CAgTR,CAWRzC,GAXQ,CAjBL,CAxVW,CAVgG;\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/bash.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$bash\\\"] = function(global,require,module,exports) {\\n/*\\nLanguage: Bash\\nAuthor: vah <vahtenberg@gmail.com>\\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\\nWebsite: https://www.gnu.org/software/bash/\\nCategory: common\\n*/\\n\\n/** @type LanguageFn */\\nfunction bash(hljs) {\\n  const regex = hljs.regex;\\n  const VAR = {};\\n  const BRACED_VAR = {\\n    begin: /\\\\$\\\\{/,\\n    end: /\\\\}/,\\n    contains: [\\n      \\\"self\\\",\\n      {\\n        begin: /:-/,\\n        contains: [ VAR ]\\n      } // default values\\n    ]\\n  };\\n  Object.assign(VAR, {\\n    className: 'variable',\\n    variants: [\\n      { begin: regex.concat(/\\\\$[\\\\w\\\\d#@][\\\\w\\\\d_]*/,\\n        // negative look-ahead tries to avoid matching patterns that are not\\n        // Perl at all like $ident$, @ident@, etc.\\n        `(?![\\\\\\\\w\\\\\\\\d])(?![$])`) },\\n      BRACED_VAR\\n    ]\\n  });\\n\\n  const SUBST = {\\n    className: 'subst',\\n    begin: /\\\\$\\\\(/,\\n    end: /\\\\)/,\\n    contains: [ hljs.BACKSLASH_ESCAPE ]\\n  };\\n  const HERE_DOC = {\\n    begin: /<<-?\\\\s*(?=\\\\w+)/,\\n    starts: { contains: [\\n      hljs.END_SAME_AS_BEGIN({\\n        begin: /(\\\\w+)/,\\n        end: /(\\\\w+)/,\\n        className: 'string'\\n      })\\n    ] }\\n  };\\n  const QUOTE_STRING = {\\n    className: 'string',\\n    begin: /\\\"/,\\n    end: /\\\"/,\\n    contains: [\\n      hljs.BACKSLASH_ESCAPE,\\n      VAR,\\n      SUBST\\n    ]\\n  };\\n  SUBST.contains.push(QUOTE_STRING);\\n  const ESCAPED_QUOTE = {\\n    className: '',\\n    begin: /\\\\\\\\\\\"/\\n\\n  };\\n  const APOS_STRING = {\\n    className: 'string',\\n    begin: /'/,\\n    end: /'/\\n  };\\n  const ARITHMETIC = {\\n    begin: /\\\\$?\\\\(\\\\(/,\\n    end: /\\\\)\\\\)/,\\n    contains: [\\n      {\\n        begin: /\\\\d+#[0-9a-f]+/,\\n        className: \\\"number\\\"\\n      },\\n      hljs.NUMBER_MODE,\\n      VAR\\n    ]\\n  };\\n  const SH_LIKE_SHELLS = [\\n    \\\"fish\\\",\\n    \\\"bash\\\",\\n    \\\"zsh\\\",\\n    \\\"sh\\\",\\n    \\\"csh\\\",\\n    \\\"ksh\\\",\\n    \\\"tcsh\\\",\\n    \\\"dash\\\",\\n    \\\"scsh\\\",\\n  ];\\n  const KNOWN_SHEBANG = hljs.SHEBANG({\\n    binary: `(${SH_LIKE_SHELLS.join(\\\"|\\\")})`,\\n    relevance: 10\\n  });\\n  const FUNCTION = {\\n    className: 'function',\\n    begin: /\\\\w[\\\\w\\\\d_]*\\\\s*\\\\(\\\\s*\\\\)\\\\s*\\\\{/,\\n    returnBegin: true,\\n    contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: /\\\\w[\\\\w\\\\d_]*/ }) ],\\n    relevance: 0\\n  };\\n\\n  const KEYWORDS = [\\n    \\\"if\\\",\\n    \\\"then\\\",\\n    \\\"else\\\",\\n    \\\"elif\\\",\\n    \\\"fi\\\",\\n    \\\"for\\\",\\n    \\\"while\\\",\\n    \\\"in\\\",\\n    \\\"do\\\",\\n    \\\"done\\\",\\n    \\\"case\\\",\\n    \\\"esac\\\",\\n    \\\"function\\\"\\n  ];\\n\\n  const LITERALS = [\\n    \\\"true\\\",\\n    \\\"false\\\"\\n  ];\\n\\n  // to consume paths to prevent keyword matches inside them\\n  const PATH_MODE = { match: /(\\\\/[a-z._-]+)+/ };\\n\\n  // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\\n  const SHELL_BUILT_INS = [\\n    \\\"break\\\",\\n    \\\"cd\\\",\\n    \\\"continue\\\",\\n    \\\"eval\\\",\\n    \\\"exec\\\",\\n    \\\"exit\\\",\\n    \\\"export\\\",\\n    \\\"getopts\\\",\\n    \\\"hash\\\",\\n    \\\"pwd\\\",\\n    \\\"readonly\\\",\\n    \\\"return\\\",\\n    \\\"shift\\\",\\n    \\\"test\\\",\\n    \\\"times\\\",\\n    \\\"trap\\\",\\n    \\\"umask\\\",\\n    \\\"unset\\\"\\n  ];\\n\\n  const BASH_BUILT_INS = [\\n    \\\"alias\\\",\\n    \\\"bind\\\",\\n    \\\"builtin\\\",\\n    \\\"caller\\\",\\n    \\\"command\\\",\\n    \\\"declare\\\",\\n    \\\"echo\\\",\\n    \\\"enable\\\",\\n    \\\"help\\\",\\n    \\\"let\\\",\\n    \\\"local\\\",\\n    \\\"logout\\\",\\n    \\\"mapfile\\\",\\n    \\\"printf\\\",\\n    \\\"read\\\",\\n    \\\"readarray\\\",\\n    \\\"source\\\",\\n    \\\"type\\\",\\n    \\\"typeset\\\",\\n    \\\"ulimit\\\",\\n    \\\"unalias\\\"\\n  ];\\n\\n  const ZSH_BUILT_INS = [\\n    \\\"autoload\\\",\\n    \\\"bg\\\",\\n    \\\"bindkey\\\",\\n    \\\"bye\\\",\\n    \\\"cap\\\",\\n    \\\"chdir\\\",\\n    \\\"clone\\\",\\n    \\\"comparguments\\\",\\n    \\\"compcall\\\",\\n    \\\"compctl\\\",\\n    \\\"compdescribe\\\",\\n    \\\"compfiles\\\",\\n    \\\"compgroups\\\",\\n    \\\"compquote\\\",\\n    \\\"comptags\\\",\\n    \\\"comptry\\\",\\n    \\\"compvalues\\\",\\n    \\\"dirs\\\",\\n    \\\"disable\\\",\\n    \\\"disown\\\",\\n    \\\"echotc\\\",\\n    \\\"echoti\\\",\\n    \\\"emulate\\\",\\n    \\\"fc\\\",\\n    \\\"fg\\\",\\n    \\\"float\\\",\\n    \\\"functions\\\",\\n    \\\"getcap\\\",\\n    \\\"getln\\\",\\n    \\\"history\\\",\\n    \\\"integer\\\",\\n    \\\"jobs\\\",\\n    \\\"kill\\\",\\n    \\\"limit\\\",\\n    \\\"log\\\",\\n    \\\"noglob\\\",\\n    \\\"popd\\\",\\n    \\\"print\\\",\\n    \\\"pushd\\\",\\n    \\\"pushln\\\",\\n    \\\"rehash\\\",\\n    \\\"sched\\\",\\n    \\\"setcap\\\",\\n    \\\"setopt\\\",\\n    \\\"stat\\\",\\n    \\\"suspend\\\",\\n    \\\"ttyctl\\\",\\n    \\\"unfunction\\\",\\n    \\\"unhash\\\",\\n    \\\"unlimit\\\",\\n    \\\"unsetopt\\\",\\n    \\\"vared\\\",\\n    \\\"wait\\\",\\n    \\\"whence\\\",\\n    \\\"where\\\",\\n    \\\"which\\\",\\n    \\\"zcompile\\\",\\n    \\\"zformat\\\",\\n    \\\"zftp\\\",\\n    \\\"zle\\\",\\n    \\\"zmodload\\\",\\n    \\\"zparseopts\\\",\\n    \\\"zprof\\\",\\n    \\\"zpty\\\",\\n    \\\"zregexparse\\\",\\n    \\\"zsocket\\\",\\n    \\\"zstyle\\\",\\n    \\\"ztcp\\\"\\n  ];\\n\\n  const GNU_CORE_UTILS = [\\n    \\\"chcon\\\",\\n    \\\"chgrp\\\",\\n    \\\"chown\\\",\\n    \\\"chmod\\\",\\n    \\\"cp\\\",\\n    \\\"dd\\\",\\n    \\\"df\\\",\\n    \\\"dir\\\",\\n    \\\"dircolors\\\",\\n    \\\"ln\\\",\\n    \\\"ls\\\",\\n    \\\"mkdir\\\",\\n    \\\"mkfifo\\\",\\n    \\\"mknod\\\",\\n    \\\"mktemp\\\",\\n    \\\"mv\\\",\\n    \\\"realpath\\\",\\n    \\\"rm\\\",\\n    \\\"rmdir\\\",\\n    \\\"shred\\\",\\n    \\\"sync\\\",\\n    \\\"touch\\\",\\n    \\\"truncate\\\",\\n    \\\"vdir\\\",\\n    \\\"b2sum\\\",\\n    \\\"base32\\\",\\n    \\\"base64\\\",\\n    \\\"cat\\\",\\n    \\\"cksum\\\",\\n    \\\"comm\\\",\\n    \\\"csplit\\\",\\n    \\\"cut\\\",\\n    \\\"expand\\\",\\n    \\\"fmt\\\",\\n    \\\"fold\\\",\\n    \\\"head\\\",\\n    \\\"join\\\",\\n    \\\"md5sum\\\",\\n    \\\"nl\\\",\\n    \\\"numfmt\\\",\\n    \\\"od\\\",\\n    \\\"paste\\\",\\n    \\\"ptx\\\",\\n    \\\"pr\\\",\\n    \\\"sha1sum\\\",\\n    \\\"sha224sum\\\",\\n    \\\"sha256sum\\\",\\n    \\\"sha384sum\\\",\\n    \\\"sha512sum\\\",\\n    \\\"shuf\\\",\\n    \\\"sort\\\",\\n    \\\"split\\\",\\n    \\\"sum\\\",\\n    \\\"tac\\\",\\n    \\\"tail\\\",\\n    \\\"tr\\\",\\n    \\\"tsort\\\",\\n    \\\"unexpand\\\",\\n    \\\"uniq\\\",\\n    \\\"wc\\\",\\n    \\\"arch\\\",\\n    \\\"basename\\\",\\n    \\\"chroot\\\",\\n    \\\"date\\\",\\n    \\\"dirname\\\",\\n    \\\"du\\\",\\n    \\\"echo\\\",\\n    \\\"env\\\",\\n    \\\"expr\\\",\\n    \\\"factor\\\",\\n    // \\\"false\\\", // keyword literal already\\n    \\\"groups\\\",\\n    \\\"hostid\\\",\\n    \\\"id\\\",\\n    \\\"link\\\",\\n    \\\"logname\\\",\\n    \\\"nice\\\",\\n    \\\"nohup\\\",\\n    \\\"nproc\\\",\\n    \\\"pathchk\\\",\\n    \\\"pinky\\\",\\n    \\\"printenv\\\",\\n    \\\"printf\\\",\\n    \\\"pwd\\\",\\n    \\\"readlink\\\",\\n    \\\"runcon\\\",\\n    \\\"seq\\\",\\n    \\\"sleep\\\",\\n    \\\"stat\\\",\\n    \\\"stdbuf\\\",\\n    \\\"stty\\\",\\n    \\\"tee\\\",\\n    \\\"test\\\",\\n    \\\"timeout\\\",\\n    // \\\"true\\\", // keyword literal already\\n    \\\"tty\\\",\\n    \\\"uname\\\",\\n    \\\"unlink\\\",\\n    \\\"uptime\\\",\\n    \\\"users\\\",\\n    \\\"who\\\",\\n    \\\"whoami\\\",\\n    \\\"yes\\\"\\n  ];\\n\\n  return {\\n    name: 'Bash',\\n    aliases: [ 'sh' ],\\n    keywords: {\\n      $pattern: /\\\\b[a-z][a-z0-9._-]+\\\\b/,\\n      keyword: KEYWORDS,\\n      literal: LITERALS,\\n      built_in: [\\n        ...SHELL_BUILT_INS,\\n        ...BASH_BUILT_INS,\\n        // Shell modifiers\\n        \\\"set\\\",\\n        \\\"shopt\\\",\\n        ...ZSH_BUILT_INS,\\n        ...GNU_CORE_UTILS\\n      ]\\n    },\\n    contains: [\\n      KNOWN_SHEBANG, // to catch known shells and boost relevancy\\n      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang\\n      FUNCTION,\\n      ARITHMETIC,\\n      hljs.HASH_COMMENT_MODE,\\n      HERE_DOC,\\n      PATH_MODE,\\n      QUOTE_STRING,\\n      ESCAPED_QUOTE,\\n      APOS_STRING,\\n      VAR\\n    ]\\n  };\\n}\\n\\nmodule.exports = bash;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"bash\",\"hljs\",\"VAR\",\"BRACED_VAR\",\"begin\",\"end\",\"contains\",\"Object\",\"assign\",\"className\",\"variants\",\"regex\",\"concat\",\"SUBST\",\"BACKSLASH_ESCAPE\",\"HERE_DOC\",\"starts\",\"END_SAME_AS_BEGIN\",\"QUOTE_STRING\",\"push\",\"ARITHMETIC\",\"NUMBER_MODE\",\"KNOWN_SHEBANG\",\"SHEBANG\",\"binary\",\"relevance\",\"FUNCTION\",\"returnBegin\",\"inherit\",\"TITLE_MODE\",\"name\",\"aliases\",\"keywords\",\"$pattern\",\"keyword\",\"KEYWORDS\",\"literal\",\"LITERALS\",\"built_in\",\"HASH_COMMENT_MODE\",\"PATH_MODE\",\"match\",\"ESCAPED_QUOTE\",\"APOS_STRING\"]\n}\n"]