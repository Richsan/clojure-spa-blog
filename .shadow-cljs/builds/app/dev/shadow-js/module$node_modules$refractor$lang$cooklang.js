["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/cooklang.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$cooklang=function(global,require,module,exports){function cooklang(Prism){var single_token_suffix=/(?:(?!\\s)[\\d$+<=a-zA-Z\\x80-\\uFFFF])+/.source,multi_token_infix=/[^{}@#]+/.source,multi_token=multi_token_infix+/\\{[^}#@]*\\}/.source;Prism.languages.cooklang={comment:{pattern:/\\[-[\\s\\S]*?-\\]|--.*/,greedy:!0},meta:{pattern:/>>.*:.*/,inside:{property:{pattern:/(>>\\s*)[^\\s:](?:[^:]*[^\\s:])?/,lookbehind:!0}}},\"cookware-group\":{pattern:new RegExp(\"#(?:\"+multi_token+\n\"|\"+single_token_suffix+\")\"),inside:{cookware:{pattern:new RegExp(\"(^#)(?:\"+multi_token_infix+\")\"),lookbehind:!0,alias:\"variable\"},\"cookware-keyword\":{pattern:/^#/,alias:\"keyword\"},\"quantity-group\":{pattern:new RegExp(/\\{[^{}@#]*\\}/),inside:{quantity:{pattern:new RegExp(/(^\\{)/.source+multi_token_infix),lookbehind:!0,alias:\"number\"},punctuation:/[{}]/}}}},\"ingredient-group\":{pattern:new RegExp(\"@(?:\"+multi_token+\"|\"+single_token_suffix+\")\"),inside:{ingredient:{pattern:new RegExp(\"(^@)(?:\"+multi_token_infix+\n\")\"),lookbehind:!0,alias:\"variable\"},\"ingredient-keyword\":{pattern:/^@/,alias:\"keyword\"},\"amount-group\":{pattern:/\\{[^{}]*\\}/,inside:{amount:{pattern:/([\\{|])[^{}|*%]+/,lookbehind:!0,alias:\"number\"},unit:{pattern:/(%)[^}]+/,lookbehind:!0,alias:\"symbol\"},\"servings-scaler\":{pattern:/\\*/,alias:\"operator\"},\"servings-alternative-separator\":{pattern:/\\|/,alias:\"operator\"},\"unit-separator\":{pattern:/(?:%|(\\*)%)/,lookbehind:!0,alias:\"operator\"},punctuation:/[{}]/}}}},\"timer-group\":{pattern:/~(?!\\s)[^@#~{}]*\\{[^{}]*\\}/,\ninside:{timer:{pattern:/(^~)[^{]+/,lookbehind:!0,alias:\"variable\"},\"duration-group\":{pattern:/\\{[^{}]*\\}/,inside:{punctuation:/[{}]/,unit:{pattern:new RegExp(/(%\\s*)/.source+/(?:h|hours|hrs|m|min|minutes)/.source+/\\b/.source),lookbehind:!0,alias:\"symbol\"},operator:/%/,duration:{pattern:/\\d+/,alias:\"number\"}}},\"timer-keyword\":{pattern:/^~/,alias:\"keyword\"}}}}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=cooklang;cooklang.displayName=\"cooklang\";cooklang.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$cooklang\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = cooklang;\n// @ts-nocheck\ncooklang.displayName = 'cooklang';\ncooklang.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction cooklang(Prism) {\n  ;\n\n  (function (Prism) {\n    // see https://github.com/cooklang/spec/blob/main/EBNF.md\n    var single_token_suffix = /(?:(?!\\s)[\\d$+<=a-zA-Z\\x80-\\uFFFF])+/.source;\n    var multi_token_infix = /[^{}@#]+/.source;\n    var multi_token_suffix = /\\{[^}#@]*\\}/.source;\n    var multi_token = multi_token_infix + multi_token_suffix;\n    var timer_units = /(?:h|hours|hrs|m|min|minutes)/.source;\n    var amount_group_impl = {\n      pattern: /\\{[^{}]*\\}/,\n      inside: {\n        amount: {\n          pattern: /([\\{|])[^{}|*%]+/,\n          lookbehind: true,\n          alias: 'number'\n        },\n        unit: {\n          pattern: /(%)[^}]+/,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        'servings-scaler': {\n          pattern: /\\*/,\n          alias: 'operator'\n        },\n        'servings-alternative-separator': {\n          pattern: /\\|/,\n          alias: 'operator'\n        },\n        'unit-separator': {\n          pattern: /(?:%|(\\*)%)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        punctuation: /[{}]/\n      }\n    };\n    Prism.languages.cooklang = {\n      comment: {\n        // [- comment -]\n        // -- comment\n        pattern: /\\[-[\\s\\S]*?-\\]|--.*/,\n        greedy: true\n      },\n      meta: {\n        // >> key: value\n        pattern: />>.*:.*/,\n        inside: {\n          property: {\n            // key:\n            pattern: /(>>\\s*)[^\\s:](?:[^:]*[^\\s:])?/,\n            lookbehind: true\n          }\n        }\n      },\n      'cookware-group': {\n        // #...{...}, #...\n        pattern: new RegExp('#(?:' + multi_token + '|' + single_token_suffix + ')'),\n        inside: {\n          cookware: {\n            pattern: new RegExp('(^#)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'cookware-keyword': {\n            pattern: /^#/,\n            alias: 'keyword'\n          },\n          'quantity-group': {\n            pattern: new RegExp(/\\{[^{}@#]*\\}/),\n            inside: {\n              quantity: {\n                pattern: new RegExp(/(^\\{)/.source + multi_token_infix),\n                lookbehind: true,\n                alias: 'number'\n              },\n              punctuation: /[{}]/\n            }\n          }\n        }\n      },\n      'ingredient-group': {\n        // @...{...}, @...\n        pattern: new RegExp('@(?:' + multi_token + '|' + single_token_suffix + ')'),\n        inside: {\n          ingredient: {\n            pattern: new RegExp('(^@)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'ingredient-keyword': {\n            pattern: /^@/,\n            alias: 'keyword'\n          },\n          'amount-group': amount_group_impl\n        }\n      },\n      'timer-group': {\n        // ~timer{...}\n        // eslint-disable-next-line regexp/sort-alternatives\n        pattern: /~(?!\\s)[^@#~{}]*\\{[^{}]*\\}/,\n        inside: {\n          timer: {\n            pattern: /(^~)[^{]+/,\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'duration-group': {\n            // {...}\n            pattern: /\\{[^{}]*\\}/,\n            inside: {\n              punctuation: /[{}]/,\n              unit: {\n                pattern: new RegExp(/(%\\s*)/.source + timer_units + /\\b/.source),\n                lookbehind: true,\n                alias: 'symbol'\n              },\n              operator: /%/,\n              duration: {\n                pattern: /\\d+/,\n                alias: 'number'\n              }\n            }\n          },\n          'timer-keyword': {\n            pattern: /^~/,\n            alias: 'keyword'\n          }\n        }\n      }\n    };\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["cooklang","punctuation","aliases","operator","displayName","__esModule","lookbehind","value","quantity","greedy","property","ingredient","duration","pattern","amount","meta","inside","unit","alias","comment","default","cookware","timer"]],"~:compiled-at",1676841365401,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$cooklang.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/cooklang.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$cooklang\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = cooklang;\\n// @ts-nocheck\\ncooklang.displayName = 'cooklang';\\ncooklang.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction cooklang(Prism) {\\n  ;\\n\\n  (function (Prism) {\\n    // see https://github.com/cooklang/spec/blob/main/EBNF.md\\n    var single_token_suffix = /(?:(?!\\\\s)[\\\\d$+<=a-zA-Z\\\\x80-\\\\uFFFF])+/.source;\\n    var multi_token_infix = /[^{}@#]+/.source;\\n    var multi_token_suffix = /\\\\{[^}#@]*\\\\}/.source;\\n    var multi_token = multi_token_infix + multi_token_suffix;\\n    var timer_units = /(?:h|hours|hrs|m|min|minutes)/.source;\\n    var amount_group_impl = {\\n      pattern: /\\\\{[^{}]*\\\\}/,\\n      inside: {\\n        amount: {\\n          pattern: /([\\\\{|])[^{}|*%]+/,\\n          lookbehind: true,\\n          alias: 'number'\\n        },\\n        unit: {\\n          pattern: /(%)[^}]+/,\\n          lookbehind: true,\\n          alias: 'symbol'\\n        },\\n        'servings-scaler': {\\n          pattern: /\\\\*/,\\n          alias: 'operator'\\n        },\\n        'servings-alternative-separator': {\\n          pattern: /\\\\|/,\\n          alias: 'operator'\\n        },\\n        'unit-separator': {\\n          pattern: /(?:%|(\\\\*)%)/,\\n          lookbehind: true,\\n          alias: 'operator'\\n        },\\n        punctuation: /[{}]/\\n      }\\n    };\\n    Prism.languages.cooklang = {\\n      comment: {\\n        // [- comment -]\\n        // -- comment\\n        pattern: /\\\\[-[\\\\s\\\\S]*?-\\\\]|--.*/,\\n        greedy: true\\n      },\\n      meta: {\\n        // >> key: value\\n        pattern: />>.*:.*/,\\n        inside: {\\n          property: {\\n            // key:\\n            pattern: /(>>\\\\s*)[^\\\\s:](?:[^:]*[^\\\\s:])?/,\\n            lookbehind: true\\n          }\\n        }\\n      },\\n      'cookware-group': {\\n        // #...{...}, #...\\n        pattern: new RegExp('#(?:' + multi_token + '|' + single_token_suffix + ')'),\\n        inside: {\\n          cookware: {\\n            pattern: new RegExp('(^#)(?:' + multi_token_infix + ')'),\\n            lookbehind: true,\\n            alias: 'variable'\\n          },\\n          'cookware-keyword': {\\n            pattern: /^#/,\\n            alias: 'keyword'\\n          },\\n          'quantity-group': {\\n            pattern: new RegExp(/\\\\{[^{}@#]*\\\\}/),\\n            inside: {\\n              quantity: {\\n                pattern: new RegExp(/(^\\\\{)/.source + multi_token_infix),\\n                lookbehind: true,\\n                alias: 'number'\\n              },\\n              punctuation: /[{}]/\\n            }\\n          }\\n        }\\n      },\\n      'ingredient-group': {\\n        // @...{...}, @...\\n        pattern: new RegExp('@(?:' + multi_token + '|' + single_token_suffix + ')'),\\n        inside: {\\n          ingredient: {\\n            pattern: new RegExp('(^@)(?:' + multi_token_infix + ')'),\\n            lookbehind: true,\\n            alias: 'variable'\\n          },\\n          'ingredient-keyword': {\\n            pattern: /^@/,\\n            alias: 'keyword'\\n          },\\n          'amount-group': amount_group_impl\\n        }\\n      },\\n      'timer-group': {\\n        // ~timer{...}\\n        // eslint-disable-next-line regexp/sort-alternatives\\n        pattern: /~(?!\\\\s)[^@#~{}]*\\\\{[^{}]*\\\\}/,\\n        inside: {\\n          timer: {\\n            pattern: /(^~)[^{]+/,\\n            lookbehind: true,\\n            alias: 'variable'\\n          },\\n          'duration-group': {\\n            // {...}\\n            pattern: /\\\\{[^{}]*\\\\}/,\\n            inside: {\\n              punctuation: /[{}]/,\\n              unit: {\\n                pattern: new RegExp(/(%\\\\s*)/.source + timer_units + /\\\\b/.source),\\n                lookbehind: true,\\n                alias: 'symbol'\\n              },\\n              operator: /%/,\\n              duration: {\\n                pattern: /\\\\d+/,\\n                alias: 'number'\\n              }\\n            }\\n          },\\n          'timer-keyword': {\\n            pattern: /^~/,\\n            alias: 'keyword'\\n          }\\n        }\\n      }\\n    };\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"cooklang\",\"Prism\",\"single_token_suffix\",\"source\",\"multi_token_infix\",\"multi_token\",\"languages\",\"comment\",\"pattern\",\"greedy\",\"meta\",\"inside\",\"property\",\"lookbehind\",\"RegExp\",\"cookware\",\"alias\",\"quantity\",\"punctuation\",\"ingredient\",\"amount_group_impl\",\"amount\",\"unit\",\"timer\",\"operator\",\"duration\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]