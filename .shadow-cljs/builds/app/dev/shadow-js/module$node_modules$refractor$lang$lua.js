["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/lua.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$lua=function(global,require,module,exports){function lua(Prism){Prism.languages.lua={comment:/^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,string:{pattern:/([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,greedy:!0},number:/\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,keyword:/\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\nfunction:/(?!\\d)\\w+(?=\\s*(?:[({]))/,operator:[/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,{pattern:/(^|[^.])\\.\\.(?!\\.)/,lookbehind:!0}],punctuation:/[\\[\\](){},;]|\\.+|:+/}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=lua;lua.displayName=\"lua\";lua.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$lua\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = lua;\n// @ts-nocheck\nlua.displayName = 'lua';\nlua.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction lua(Prism) {\n  Prism.languages.lua = {\n    comment: /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n    // \\z may be used to skip the following space\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n      greedy: true\n    },\n    number: /\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n    keyword: /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n    function: /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n    operator: [/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/, {\n      // Match \"..\" but don't break \"...\"\n      pattern: /(^|[^.])\\.\\.(?!\\.)/,\n      lookbehind: true\n    }],\n    punctuation: /[\\[\\](){},;]|\\.+|:+/\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["punctuation","string","aliases","operator","displayName","__esModule","lookbehind","value","keyword","number","greedy","function","lua","pattern","comment","default"]],"~:compiled-at",1676841365365,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$lua.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYnGC,QAASA,IAAG,CAACC,KAAD,CAAQ,CAClBA,KAAMC,CAAAA,SAAUF,CAAAA,GAAhB,CAAsB,CACpBG,QAAS,wCADW,CAGpBC,OAAQ,CACNC,QAAS,oFADH,CAENC,OAAQ,CAAA,CAFF,CAHY,CAOpBC,OAAQ,+GAPY,CAQpBC,QAAS,yHARW;AASpBC,SAAU,0BATU,CAUpBC,SAAU,CAAC,uCAAD,CAA0C,CAElDL,QAAS,oBAFyC,CAGlDM,WAAY,CAAA,CAHsC,CAA1C,CAVU,CAepBC,YAAa,qBAfO,CADJ,CATpBC,MAAOC,CAAAA,cAAP,CAAsBf,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CgB,MAAO,CAAA,CADoC,CAA7C,CAGAhB,QAAQiB,CAAAA,OAAR,CAAkBhB,GAElBA,IAAIiB,CAAAA,WAAJ,CAAkB,KAClBjB,IAAIkB,CAAAA,OAAJ,CAAc,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/lua.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$lua\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = lua;\\n// @ts-nocheck\\nlua.displayName = 'lua';\\nlua.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction lua(Prism) {\\n  Prism.languages.lua = {\\n    comment: /^#!.+|--(?:\\\\[(=*)\\\\[[\\\\s\\\\S]*?\\\\]\\\\1\\\\]|.*)/m,\\n    // \\\\z may be used to skip the following space\\n    string: {\\n      pattern: /([\\\"'])(?:(?!\\\\1)[^\\\\\\\\\\\\r\\\\n]|\\\\\\\\z(?:\\\\r\\\\n|\\\\s)|\\\\\\\\(?:\\\\r\\\\n|[^z]))*\\\\1|\\\\[(=*)\\\\[[\\\\s\\\\S]*?\\\\]\\\\2\\\\]/,\\n      greedy: true\\n    },\\n    number: /\\\\b0x[a-f\\\\d]+(?:\\\\.[a-f\\\\d]*)?(?:p[+-]?\\\\d+)?\\\\b|\\\\b\\\\d+(?:\\\\.\\\\B|(?:\\\\.\\\\d*)?(?:e[+-]?\\\\d+)?\\\\b)|\\\\B\\\\.\\\\d+(?:e[+-]?\\\\d+)?\\\\b/i,\\n    keyword: /\\\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\\\b/,\\n    function: /(?!\\\\d)\\\\w+(?=\\\\s*(?:[({]))/,\\n    operator: [/[-+*%^&|#]|\\\\/\\\\/?|<[<=]?|>[>=]?|[=~]=?/, {\\n      // Match \\\"..\\\" but don't break \\\"...\\\"\\n      pattern: /(^|[^.])\\\\.\\\\.(?!\\\\.)/,\\n      lookbehind: true\\n    }],\\n    punctuation: /[\\\\[\\\\](){},;]|\\\\.+|:+/\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"lua\",\"Prism\",\"languages\",\"comment\",\"string\",\"pattern\",\"greedy\",\"number\",\"keyword\",\"function\",\"operator\",\"lookbehind\",\"punctuation\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]