["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-markdown/lib/util/association.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_markdown$lib$util$association=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.association=function(node){return node.label||!node.identifier?node.label||\"\":(0,_micromarkUtilDecodeString.decodeString)(node.identifier)};var _micromarkUtilDecodeString=require(\"module$node_modules$micromark_util_decode_string$index\")}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_markdown$lib$util$association\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.association = association;\n\nvar _micromarkUtilDecodeString = require(\"micromark-util-decode-string\");\n\n/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nfunction association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || '';\n  }\n\n  return (0, _micromarkUtilDecodeString.decodeString)(node.identifier);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$micromark_util_decode_string$index"]],"~:properties",["^5",["association","__esModule","value"]],"~:compiled-at",1676841365336,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_markdown$lib$util$association.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,+DAAA,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG5HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CA4BAA,QAAoB,CAACC,IAAD,CAAO,CACzB,MAAIA,KAAKC,CAAAA,KAAT,EAAkB,CAACD,IAAKE,CAAAA,UAAxB,CACSF,IAAKC,CAAAA,KADd,EACuB,EADvB,CAIO,GAAIE,0BAA2BC,CAAAA,YAA/B,EAA6CJ,IAAKE,CAAAA,UAAlD,CALkB,CA1B3B,KAAIC,2BAA6BV,OAAA,CAAQ,wDAAR,CAR2F;\",\n\"sources\":[\"node_modules/mdast-util-to-markdown/lib/util/association.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_markdown$lib$util$association\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.association = association;\\n\\nvar _micromarkUtilDecodeString = require(\\\"micromark-util-decode-string\\\");\\n\\n/**\\n * @typedef {import('../types.js').AssociationId} AssociationId\\n */\\n\\n/**\\n * Get an identifier from an association to match it to others.\\n *\\n * Associations are nodes that match to something else through an ID:\\n * <https://github.com/syntax-tree/mdast#association>.\\n *\\n * The `label` of an association is the string value: character escapes and\\n * references work, and casing is intact.\\n * The `identifier` is used to match one association to another:\\n * controversially, character escapes and references don\\u2019t work in this\\n * matching: `&copy;` does not match `\\u00a9`, and `\\\\+` does not match `+`.\\n *\\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\\\nb`\\n * matches `a b`.\\n * So, we do prefer the label when figuring out how we\\u2019re going to serialize:\\n * it has whitespace, casing, and we can ignore most useless character\\n * escapes and all character references.\\n *\\n * @type {AssociationId}\\n */\\nfunction association(node) {\\n  if (node.label || !node.identifier) {\\n    return node.label || '';\\n  }\\n\\n  return (0, _micromarkUtilDecodeString.decodeString)(node.identifier);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"association\",\"node\",\"label\",\"identifier\",\"_micromarkUtilDecodeString\",\"decodeString\"]\n}\n"]