["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/python.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$python=function(global,require,module,exports){module.exports=function(hljs){var regex=hljs.regex;const IDENT_RE=/[\\p{XID_Start}_]\\p{XID_Continue}*/u;var RESERVED_WORDS=\"and as assert async await break case class continue def del elif else except finally for from global if import in is lambda match nonlocal|10 not or pass raise return try while with yield\".split(\" \");const KEYWORDS={$pattern:/[A-Za-z]\\w+|__\\w+__/,keyword:RESERVED_WORDS,\nbuilt_in:\"__import__ abs all any ascii bin bool breakpoint bytearray bytes callable chr classmethod compile complex delattr dict dir divmod enumerate eval exec filter float format frozenset getattr globals hasattr hash help hex id input int isinstance issubclass iter len list locals map max memoryview min next object oct open ord pow print property range repr reversed round set setattr slice sorted staticmethod str sum super tuple type vars zip\".split(\" \"),literal:\"__debug__ Ellipsis False None NotImplemented True\".split(\" \"),\ntype:\"Any Callable Coroutine Dict List Literal Generic Optional Sequence Set Tuple Type Union\".split(\" \")},PROMPT={className:\"meta\",begin:/^(>>>|\\.\\.\\.) /},SUBST={className:\"subst\",begin:/\\{/,end:/\\}/,keywords:KEYWORDS,illegal:/#/};var LITERAL_BRACKET={begin:/\\{\\{/,relevance:0};LITERAL_BRACKET={className:\"string\",contains:[hljs.BACKSLASH_ESCAPE],variants:[{begin:/([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,end:/'''/,contains:[hljs.BACKSLASH_ESCAPE,PROMPT],relevance:10},{begin:/([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\nend:/\"\"\"/,contains:[hljs.BACKSLASH_ESCAPE,PROMPT],relevance:10},{begin:/([fF][rR]|[rR][fF]|[fF])'''/,end:/'''/,contains:[hljs.BACKSLASH_ESCAPE,PROMPT,LITERAL_BRACKET,SUBST]},{begin:/([fF][rR]|[rR][fF]|[fF])\"\"\"/,end:/\"\"\"/,contains:[hljs.BACKSLASH_ESCAPE,PROMPT,LITERAL_BRACKET,SUBST]},{begin:/([uU]|[rR])'/,end:/'/,relevance:10},{begin:/([uU]|[rR])\"/,end:/\"/,relevance:10},{begin:/([bB]|[bB][rR]|[rR][bB])'/,end:/'/},{begin:/([bB]|[bB][rR]|[rR][bB])\"/,end:/\"/},{begin:/([fF][rR]|[rR][fF]|[fF])'/,end:/'/,\ncontains:[hljs.BACKSLASH_ESCAPE,LITERAL_BRACKET,SUBST]},{begin:/([fF][rR]|[rR][fF]|[fF])\"/,end:/\"/,contains:[hljs.BACKSLASH_ESCAPE,LITERAL_BRACKET,SUBST]},hljs.APOS_STRING_MODE,hljs.QUOTE_STRING_MODE]};RESERVED_WORDS=`\\\\b|${RESERVED_WORDS.join(\"|\")}`;RESERVED_WORDS={className:\"number\",relevance:0,variants:[{begin:`(\\\\b(${\"[0-9](_?[0-9])*\"})|(${\"(\\\\b([0-9](_?[0-9])*))?\\\\.([0-9](_?[0-9])*)|\\\\b([0-9](_?[0-9])*)\\\\.\"}))[eE][+-]?(${\"[0-9](_?[0-9])*\"})[jJ]?(?=${RESERVED_WORDS})`},{begin:\"((\\\\b([0-9](_?[0-9])*))?\\\\.([0-9](_?[0-9])*)|\\\\b([0-9](_?[0-9])*)\\\\.)[jJ]?\"},\n{begin:`\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${RESERVED_WORDS})`},{begin:`\\\\b0[bB](_?[01])+[lL]?(?=${RESERVED_WORDS})`},{begin:`\\\\b0[oO](_?[0-7])+[lL]?(?=${RESERVED_WORDS})`},{begin:`\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${RESERVED_WORDS})`},{begin:`\\\\b(${\"[0-9](_?[0-9])*\"})[jJ](?=${RESERVED_WORDS})`}]};regex={className:\"comment\",begin:regex.lookahead(/# type:/),end:/$/,keywords:KEYWORDS,contains:[{begin:/# type:/},{begin:/#/,end:/\\b\\B/,endsWithParent:!0}]};const PARAMS={className:\"params\",variants:[{className:\"\",\nbegin:/\\(\\s*\\)/,skip:!0},{begin:/\\(/,end:/\\)/,excludeBegin:!0,excludeEnd:!0,keywords:KEYWORDS,contains:[\"self\",PROMPT,RESERVED_WORDS,LITERAL_BRACKET,hljs.HASH_COMMENT_MODE]}]};SUBST.contains=[LITERAL_BRACKET,RESERVED_WORDS,PROMPT];return{name:\"Python\",aliases:[\"py\",\"gyp\",\"ipython\"],unicodeRegex:!0,keywords:KEYWORDS,illegal:/(<\\/|->|\\?)|=>/,contains:[PROMPT,RESERVED_WORDS,{begin:/\\bself\\b/},{beginKeywords:\"if\",relevance:0},LITERAL_BRACKET,regex,hljs.HASH_COMMENT_MODE,{match:[/\\bdef/,/\\s+/,IDENT_RE],\nscope:{1:\"keyword\",3:\"title.function\"},contains:[PARAMS]},{variants:[{match:[/\\bclass/,/\\s+/,IDENT_RE,/\\s*/,/\\(\\s*/,IDENT_RE,/\\s*\\)/]},{match:[/\\bclass/,/\\s+/,IDENT_RE]}],scope:{1:\"keyword\",3:\"title.class\",6:\"title.class.inherited\"}},{className:\"meta\",begin:/^[\\t ]*@/,end:/(?=#)|$/,contains:[RESERVED_WORDS,PARAMS,LITERAL_BRACKET]}]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$python\"] = function(global,require,module,exports) {\n/*\nLanguage: Python\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\nWebsite: https://www.python.org\nCategory: common\n*/\n\nfunction python(hljs) {\n  const regex = hljs.regex;\n  const IDENT_RE = /[\\p{XID_Start}_]\\p{XID_Continue}*/u;\n  const RESERVED_WORDS = [\n    'and',\n    'as',\n    'assert',\n    'async',\n    'await',\n    'break',\n    'case',\n    'class',\n    'continue',\n    'def',\n    'del',\n    'elif',\n    'else',\n    'except',\n    'finally',\n    'for',\n    'from',\n    'global',\n    'if',\n    'import',\n    'in',\n    'is',\n    'lambda',\n    'match',\n    'nonlocal|10',\n    'not',\n    'or',\n    'pass',\n    'raise',\n    'return',\n    'try',\n    'while',\n    'with',\n    'yield'\n  ];\n\n  const BUILT_INS = [\n    '__import__',\n    'abs',\n    'all',\n    'any',\n    'ascii',\n    'bin',\n    'bool',\n    'breakpoint',\n    'bytearray',\n    'bytes',\n    'callable',\n    'chr',\n    'classmethod',\n    'compile',\n    'complex',\n    'delattr',\n    'dict',\n    'dir',\n    'divmod',\n    'enumerate',\n    'eval',\n    'exec',\n    'filter',\n    'float',\n    'format',\n    'frozenset',\n    'getattr',\n    'globals',\n    'hasattr',\n    'hash',\n    'help',\n    'hex',\n    'id',\n    'input',\n    'int',\n    'isinstance',\n    'issubclass',\n    'iter',\n    'len',\n    'list',\n    'locals',\n    'map',\n    'max',\n    'memoryview',\n    'min',\n    'next',\n    'object',\n    'oct',\n    'open',\n    'ord',\n    'pow',\n    'print',\n    'property',\n    'range',\n    'repr',\n    'reversed',\n    'round',\n    'set',\n    'setattr',\n    'slice',\n    'sorted',\n    'staticmethod',\n    'str',\n    'sum',\n    'super',\n    'tuple',\n    'type',\n    'vars',\n    'zip'\n  ];\n\n  const LITERALS = [\n    '__debug__',\n    'Ellipsis',\n    'False',\n    'None',\n    'NotImplemented',\n    'True'\n  ];\n\n  // https://docs.python.org/3/library/typing.html\n  // TODO: Could these be supplemented by a CamelCase matcher in certain\n  // contexts, leaving these remaining only for relevance hinting?\n  const TYPES = [\n    \"Any\",\n    \"Callable\",\n    \"Coroutine\",\n    \"Dict\",\n    \"List\",\n    \"Literal\",\n    \"Generic\",\n    \"Optional\",\n    \"Sequence\",\n    \"Set\",\n    \"Tuple\",\n    \"Type\",\n    \"Union\"\n  ];\n\n  const KEYWORDS = {\n    $pattern: /[A-Za-z]\\w+|__\\w+__/,\n    keyword: RESERVED_WORDS,\n    built_in: BUILT_INS,\n    literal: LITERALS,\n    type: TYPES\n  };\n\n  const PROMPT = {\n    className: 'meta',\n    begin: /^(>>>|\\.\\.\\.) /\n  };\n\n  const SUBST = {\n    className: 'subst',\n    begin: /\\{/,\n    end: /\\}/,\n    keywords: KEYWORDS,\n    illegal: /#/\n  };\n\n  const LITERAL_BRACKET = {\n    begin: /\\{\\{/,\n    relevance: 0\n  };\n\n  const STRING = {\n    className: 'string',\n    contains: [ hljs.BACKSLASH_ESCAPE ],\n    variants: [\n      {\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n        end: /'''/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT\n        ],\n        relevance: 10\n      },\n      {\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n        end: /\"\"\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT\n        ],\n        relevance: 10\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n        end: /'''/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n        end: /\"\"\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([uU]|[rR])'/,\n        end: /'/,\n        relevance: 10\n      },\n      {\n        begin: /([uU]|[rR])\"/,\n        end: /\"/,\n        relevance: 10\n      },\n      {\n        begin: /([bB]|[bB][rR]|[rR][bB])'/,\n        end: /'/\n      },\n      {\n        begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n        end: /\"/\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])'/,\n        end: /'/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n        end: /\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\n  const digitpart = '[0-9](_?[0-9])*';\n  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\n  // Whitespace after a number (or any lexical token) is needed only if its absence\n  // would change the tokenization\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens\n  // We deviate slightly, requiring a word boundary or a keyword\n  // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)\n  const lookahead = `\\\\b|${RESERVED_WORDS.join('|')}`;\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // exponentfloat, pointfloat\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n      // optionally imaginary\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      // Note: no leading \\b because floats can start with a decimal point\n      // and we don't want to mishandle e.g. `fn(.5)`,\n      // no trailing \\b for pointfloat because it can end with a decimal point\n      // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n      // because both MUST contain a decimal point and so cannot be confused with\n      // the interior part of an identifier\n      {\n        begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`\n      },\n      {\n        begin: `(${pointfloat})[jJ]?`\n      },\n\n      // decinteger, bininteger, octinteger, hexinteger\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n      // optionally \"long\" in Python 2\n      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n      // decinteger is optionally imaginary\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      {\n        begin: `\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[bB](_?[01])+[lL]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`\n      },\n\n      // imagnumber (digitpart-based)\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      {\n        begin: `\\\\b(${digitpart})[jJ](?=${lookahead})`\n      }\n    ]\n  };\n  const COMMENT_TYPE = {\n    className: \"comment\",\n    begin: regex.lookahead(/# type:/),\n    end: /$/,\n    keywords: KEYWORDS,\n    contains: [\n      { // prevent keywords from coloring `type`\n        begin: /# type:/\n      },\n      // comment within a datatype comment includes no keywords\n      {\n        begin: /#/,\n        end: /\\b\\B/,\n        endsWithParent: true\n      }\n    ]\n  };\n  const PARAMS = {\n    className: 'params',\n    variants: [\n      // Exclude params in functions without params\n      {\n        className: \"\",\n        begin: /\\(\\s*\\)/,\n        skip: true\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          'self',\n          PROMPT,\n          NUMBER,\n          STRING,\n          hljs.HASH_COMMENT_MODE\n        ]\n      }\n    ]\n  };\n  SUBST.contains = [\n    STRING,\n    NUMBER,\n    PROMPT\n  ];\n\n  return {\n    name: 'Python',\n    aliases: [\n      'py',\n      'gyp',\n      'ipython'\n    ],\n    unicodeRegex: true,\n    keywords: KEYWORDS,\n    illegal: /(<\\/|->|\\?)|=>/,\n    contains: [\n      PROMPT,\n      NUMBER,\n      {\n        // very common convention\n        begin: /\\bself\\b/\n      },\n      {\n        // eat \"if\" prior to string so that it won't accidentally be\n        // labeled as an f-string\n        beginKeywords: \"if\",\n        relevance: 0\n      },\n      STRING,\n      COMMENT_TYPE,\n      hljs.HASH_COMMENT_MODE,\n      {\n        match: [\n          /\\bdef/, /\\s+/,\n          IDENT_RE,\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.function\"\n        },\n        contains: [ PARAMS ]\n      },\n      {\n        variants: [\n          {\n            match: [\n              /\\bclass/, /\\s+/,\n              IDENT_RE, /\\s*/,\n              /\\(\\s*/, IDENT_RE,/\\s*\\)/\n            ],\n          },\n          {\n            match: [\n              /\\bclass/, /\\s+/,\n              IDENT_RE\n            ],\n          }\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.class\",\n          6: \"title.class.inherited\",\n        }\n      },\n      {\n        className: 'meta',\n        begin: /^[\\t ]*@/,\n        end: /(?=#)|$/,\n        contains: [\n          NUMBER,\n          PARAMS,\n          STRING\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = python;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["skip","variants","excludeBegin","begin","aliases","className","contains","$pattern","relevance","name","built_in","keyword","scope","unicodeRegex","keywords","beginKeywords","type","match","excludeEnd","illegal","endsWithParent","literal","end"]],"~:compiled-at",1676671710222,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$python.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/python.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$python\\\"] = function(global,require,module,exports) {\\n/*\\nLanguage: Python\\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\\nWebsite: https://www.python.org\\nCategory: common\\n*/\\n\\nfunction python(hljs) {\\n  const regex = hljs.regex;\\n  const IDENT_RE = /[\\\\p{XID_Start}_]\\\\p{XID_Continue}*/u;\\n  const RESERVED_WORDS = [\\n    'and',\\n    'as',\\n    'assert',\\n    'async',\\n    'await',\\n    'break',\\n    'case',\\n    'class',\\n    'continue',\\n    'def',\\n    'del',\\n    'elif',\\n    'else',\\n    'except',\\n    'finally',\\n    'for',\\n    'from',\\n    'global',\\n    'if',\\n    'import',\\n    'in',\\n    'is',\\n    'lambda',\\n    'match',\\n    'nonlocal|10',\\n    'not',\\n    'or',\\n    'pass',\\n    'raise',\\n    'return',\\n    'try',\\n    'while',\\n    'with',\\n    'yield'\\n  ];\\n\\n  const BUILT_INS = [\\n    '__import__',\\n    'abs',\\n    'all',\\n    'any',\\n    'ascii',\\n    'bin',\\n    'bool',\\n    'breakpoint',\\n    'bytearray',\\n    'bytes',\\n    'callable',\\n    'chr',\\n    'classmethod',\\n    'compile',\\n    'complex',\\n    'delattr',\\n    'dict',\\n    'dir',\\n    'divmod',\\n    'enumerate',\\n    'eval',\\n    'exec',\\n    'filter',\\n    'float',\\n    'format',\\n    'frozenset',\\n    'getattr',\\n    'globals',\\n    'hasattr',\\n    'hash',\\n    'help',\\n    'hex',\\n    'id',\\n    'input',\\n    'int',\\n    'isinstance',\\n    'issubclass',\\n    'iter',\\n    'len',\\n    'list',\\n    'locals',\\n    'map',\\n    'max',\\n    'memoryview',\\n    'min',\\n    'next',\\n    'object',\\n    'oct',\\n    'open',\\n    'ord',\\n    'pow',\\n    'print',\\n    'property',\\n    'range',\\n    'repr',\\n    'reversed',\\n    'round',\\n    'set',\\n    'setattr',\\n    'slice',\\n    'sorted',\\n    'staticmethod',\\n    'str',\\n    'sum',\\n    'super',\\n    'tuple',\\n    'type',\\n    'vars',\\n    'zip'\\n  ];\\n\\n  const LITERALS = [\\n    '__debug__',\\n    'Ellipsis',\\n    'False',\\n    'None',\\n    'NotImplemented',\\n    'True'\\n  ];\\n\\n  // https://docs.python.org/3/library/typing.html\\n  // TODO: Could these be supplemented by a CamelCase matcher in certain\\n  // contexts, leaving these remaining only for relevance hinting?\\n  const TYPES = [\\n    \\\"Any\\\",\\n    \\\"Callable\\\",\\n    \\\"Coroutine\\\",\\n    \\\"Dict\\\",\\n    \\\"List\\\",\\n    \\\"Literal\\\",\\n    \\\"Generic\\\",\\n    \\\"Optional\\\",\\n    \\\"Sequence\\\",\\n    \\\"Set\\\",\\n    \\\"Tuple\\\",\\n    \\\"Type\\\",\\n    \\\"Union\\\"\\n  ];\\n\\n  const KEYWORDS = {\\n    $pattern: /[A-Za-z]\\\\w+|__\\\\w+__/,\\n    keyword: RESERVED_WORDS,\\n    built_in: BUILT_INS,\\n    literal: LITERALS,\\n    type: TYPES\\n  };\\n\\n  const PROMPT = {\\n    className: 'meta',\\n    begin: /^(>>>|\\\\.\\\\.\\\\.) /\\n  };\\n\\n  const SUBST = {\\n    className: 'subst',\\n    begin: /\\\\{/,\\n    end: /\\\\}/,\\n    keywords: KEYWORDS,\\n    illegal: /#/\\n  };\\n\\n  const LITERAL_BRACKET = {\\n    begin: /\\\\{\\\\{/,\\n    relevance: 0\\n  };\\n\\n  const STRING = {\\n    className: 'string',\\n    contains: [ hljs.BACKSLASH_ESCAPE ],\\n    variants: [\\n      {\\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\\n        end: /'''/,\\n        contains: [\\n          hljs.BACKSLASH_ESCAPE,\\n          PROMPT\\n        ],\\n        relevance: 10\\n      },\\n      {\\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\\\"\\\"\\\"/,\\n        end: /\\\"\\\"\\\"/,\\n        contains: [\\n          hljs.BACKSLASH_ESCAPE,\\n          PROMPT\\n        ],\\n        relevance: 10\\n      },\\n      {\\n        begin: /([fF][rR]|[rR][fF]|[fF])'''/,\\n        end: /'''/,\\n        contains: [\\n          hljs.BACKSLASH_ESCAPE,\\n          PROMPT,\\n          LITERAL_BRACKET,\\n          SUBST\\n        ]\\n      },\\n      {\\n        begin: /([fF][rR]|[rR][fF]|[fF])\\\"\\\"\\\"/,\\n        end: /\\\"\\\"\\\"/,\\n        contains: [\\n          hljs.BACKSLASH_ESCAPE,\\n          PROMPT,\\n          LITERAL_BRACKET,\\n          SUBST\\n        ]\\n      },\\n      {\\n        begin: /([uU]|[rR])'/,\\n        end: /'/,\\n        relevance: 10\\n      },\\n      {\\n        begin: /([uU]|[rR])\\\"/,\\n        end: /\\\"/,\\n        relevance: 10\\n      },\\n      {\\n        begin: /([bB]|[bB][rR]|[rR][bB])'/,\\n        end: /'/\\n      },\\n      {\\n        begin: /([bB]|[bB][rR]|[rR][bB])\\\"/,\\n        end: /\\\"/\\n      },\\n      {\\n        begin: /([fF][rR]|[rR][fF]|[fF])'/,\\n        end: /'/,\\n        contains: [\\n          hljs.BACKSLASH_ESCAPE,\\n          LITERAL_BRACKET,\\n          SUBST\\n        ]\\n      },\\n      {\\n        begin: /([fF][rR]|[rR][fF]|[fF])\\\"/,\\n        end: /\\\"/,\\n        contains: [\\n          hljs.BACKSLASH_ESCAPE,\\n          LITERAL_BRACKET,\\n          SUBST\\n        ]\\n      },\\n      hljs.APOS_STRING_MODE,\\n      hljs.QUOTE_STRING_MODE\\n    ]\\n  };\\n\\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\\n  const digitpart = '[0-9](_?[0-9])*';\\n  const pointfloat = `(\\\\\\\\b(${digitpart}))?\\\\\\\\.(${digitpart})|\\\\\\\\b(${digitpart})\\\\\\\\.`;\\n  // Whitespace after a number (or any lexical token) is needed only if its absence\\n  // would change the tokenization\\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens\\n  // We deviate slightly, requiring a word boundary or a keyword\\n  // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)\\n  const lookahead = `\\\\\\\\b|${RESERVED_WORDS.join('|')}`;\\n  const NUMBER = {\\n    className: 'number',\\n    relevance: 0,\\n    variants: [\\n      // exponentfloat, pointfloat\\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\\n      // optionally imaginary\\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\\n      // Note: no leading \\\\b because floats can start with a decimal point\\n      // and we don't want to mishandle e.g. `fn(.5)`,\\n      // no trailing \\\\b for pointfloat because it can end with a decimal point\\n      // and we don't want to mishandle e.g. `0..hex()`; this should be safe\\n      // because both MUST contain a decimal point and so cannot be confused with\\n      // the interior part of an identifier\\n      {\\n        begin: `(\\\\\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`\\n      },\\n      {\\n        begin: `(${pointfloat})[jJ]?`\\n      },\\n\\n      // decinteger, bininteger, octinteger, hexinteger\\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\\n      // optionally \\\"long\\\" in Python 2\\n      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\\n      // decinteger is optionally imaginary\\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\\n      {\\n        begin: `\\\\\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`\\n      },\\n      {\\n        begin: `\\\\\\\\b0[bB](_?[01])+[lL]?(?=${lookahead})`\\n      },\\n      {\\n        begin: `\\\\\\\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`\\n      },\\n      {\\n        begin: `\\\\\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`\\n      },\\n\\n      // imagnumber (digitpart-based)\\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\\n      {\\n        begin: `\\\\\\\\b(${digitpart})[jJ](?=${lookahead})`\\n      }\\n    ]\\n  };\\n  const COMMENT_TYPE = {\\n    className: \\\"comment\\\",\\n    begin: regex.lookahead(/# type:/),\\n    end: /$/,\\n    keywords: KEYWORDS,\\n    contains: [\\n      { // prevent keywords from coloring `type`\\n        begin: /# type:/\\n      },\\n      // comment within a datatype comment includes no keywords\\n      {\\n        begin: /#/,\\n        end: /\\\\b\\\\B/,\\n        endsWithParent: true\\n      }\\n    ]\\n  };\\n  const PARAMS = {\\n    className: 'params',\\n    variants: [\\n      // Exclude params in functions without params\\n      {\\n        className: \\\"\\\",\\n        begin: /\\\\(\\\\s*\\\\)/,\\n        skip: true\\n      },\\n      {\\n        begin: /\\\\(/,\\n        end: /\\\\)/,\\n        excludeBegin: true,\\n        excludeEnd: true,\\n        keywords: KEYWORDS,\\n        contains: [\\n          'self',\\n          PROMPT,\\n          NUMBER,\\n          STRING,\\n          hljs.HASH_COMMENT_MODE\\n        ]\\n      }\\n    ]\\n  };\\n  SUBST.contains = [\\n    STRING,\\n    NUMBER,\\n    PROMPT\\n  ];\\n\\n  return {\\n    name: 'Python',\\n    aliases: [\\n      'py',\\n      'gyp',\\n      'ipython'\\n    ],\\n    unicodeRegex: true,\\n    keywords: KEYWORDS,\\n    illegal: /(<\\\\/|->|\\\\?)|=>/,\\n    contains: [\\n      PROMPT,\\n      NUMBER,\\n      {\\n        // very common convention\\n        begin: /\\\\bself\\\\b/\\n      },\\n      {\\n        // eat \\\"if\\\" prior to string so that it won't accidentally be\\n        // labeled as an f-string\\n        beginKeywords: \\\"if\\\",\\n        relevance: 0\\n      },\\n      STRING,\\n      COMMENT_TYPE,\\n      hljs.HASH_COMMENT_MODE,\\n      {\\n        match: [\\n          /\\\\bdef/, /\\\\s+/,\\n          IDENT_RE,\\n        ],\\n        scope: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.function\\\"\\n        },\\n        contains: [ PARAMS ]\\n      },\\n      {\\n        variants: [\\n          {\\n            match: [\\n              /\\\\bclass/, /\\\\s+/,\\n              IDENT_RE, /\\\\s*/,\\n              /\\\\(\\\\s*/, IDENT_RE,/\\\\s*\\\\)/\\n            ],\\n          },\\n          {\\n            match: [\\n              /\\\\bclass/, /\\\\s+/,\\n              IDENT_RE\\n            ],\\n          }\\n        ],\\n        scope: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.class\\\",\\n          6: \\\"title.class.inherited\\\",\\n        }\\n      },\\n      {\\n        className: 'meta',\\n        begin: /^[\\\\t ]*@/,\\n        end: /(?=#)|$/,\\n        contains: [\\n          NUMBER,\\n          PARAMS,\\n          STRING\\n        ]\\n      }\\n    ]\\n  };\\n}\\n\\nmodule.exports = python;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"python\",\"hljs\",\"regex\",\"IDENT_RE\",\"RESERVED_WORDS\",\"KEYWORDS\",\"$pattern\",\"keyword\",\"built_in\",\"BUILT_INS\",\"literal\",\"LITERALS\",\"type\",\"TYPES\",\"PROMPT\",\"className\",\"begin\",\"SUBST\",\"end\",\"keywords\",\"illegal\",\"LITERAL_BRACKET\",\"relevance\",\"STRING\",\"contains\",\"BACKSLASH_ESCAPE\",\"variants\",\"APOS_STRING_MODE\",\"QUOTE_STRING_MODE\",\"lookahead\",\"join\",\"NUMBER\",\"digitpart\",\"pointfloat\",\"COMMENT_TYPE\",\"endsWithParent\",\"PARAMS\",\"skip\",\"excludeBegin\",\"excludeEnd\",\"HASH_COMMENT_MODE\",\"name\",\"aliases\",\"unicodeRegex\",\"beginKeywords\",\"match\",\"scope\"]\n}\n"]