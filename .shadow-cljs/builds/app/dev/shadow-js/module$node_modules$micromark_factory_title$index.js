["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-factory-title/index.js"],"~:js","shadow$provide.module$node_modules$micromark_factory_title$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.factoryTitle=function(effects,ok,nok,type,markerType,stringType){function atFirstTitleBreak(code){if(code===marker)return effects.enter(markerType),effects.consume(code),effects.exit(markerType),effects.exit(type),ok;effects.enter(stringType);return atTitleBreak(code)}function atTitleBreak(code){if(code===marker)return effects.exit(stringType),\natFirstTitleBreak(marker);if(null===code)return nok(code);if((0,_micromarkUtilCharacter.markdownLineEnding)(code))return effects.enter(\"lineEnding\"),effects.consume(code),effects.exit(\"lineEnding\"),(0,_micromarkFactorySpace.factorySpace)(effects,atTitleBreak,\"linePrefix\");effects.enter(\"chunkString\",{contentType:\"string\"});return title(code)}function title(code){if(code===marker||null===code||(0,_micromarkUtilCharacter.markdownLineEnding)(code))return effects.exit(\"chunkString\"),atTitleBreak(code);\neffects.consume(code);return 92===code?titleEscape:title}function titleEscape(code){return code===marker||92===code?(effects.consume(code),title):title(code)}let marker;return function(code){effects.enter(type);effects.enter(markerType);effects.consume(code);effects.exit(markerType);marker=40===code?41:code;return atFirstTitleBreak}};var _micromarkFactorySpace=require(\"module$node_modules$micromark_factory_space$index\"),_micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\")}","~:source","shadow$provide[\"module$node_modules$micromark_factory_title$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.factoryTitle = factoryTitle;\n\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nfunction factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    marker = code === 40 ? 41 : code;\n    return atFirstTitleBreak;\n  }\n  /** @type {State} */\n\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    effects.enter(stringType);\n    return atTitleBreak(code);\n  }\n  /** @type {State} */\n\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return atFirstTitleBreak(marker);\n    }\n\n    if (code === null) {\n      return nok(code);\n    } // Note: blank lines canâ€™t exist in content.\n\n\n    if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return (0, _micromarkFactorySpace.factorySpace)(effects, atTitleBreak, 'linePrefix');\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return title(code);\n  }\n  /** @type {State} */\n\n\n  function title(code) {\n    if (code === marker || code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n      effects.exit('chunkString');\n      return atTitleBreak(code);\n    }\n\n    effects.consume(code);\n    return code === 92 ? titleEscape : title;\n  }\n  /** @type {State} */\n\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return title;\n    }\n\n    return title(code);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js","~$module$node_modules$micromark_factory_space$index"]],"~:properties",["^5",["factoryTitle","__esModule","value","contentType"]],"~:compiled-at",1676665867286,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_factory_title$index.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAsBAA,QAAqB,CAACC,OAAD,CAAUC,EAAV,CAAcC,GAAd,CAAmBC,IAAnB,CAAyBC,UAAzB,CAAqCC,UAArC,CAAiD,CAiBpEC,QAASA,kBAAiB,CAACC,IAAD,CAAO,CAC/B,GAAIA,IAAJ,GAAaC,MAAb,CAKE,MAJAR,QAAQS,CAAAA,KAAR,CAAcL,UAAd,CAIOH,CAHPD,OAAQU,CAAAA,OAAR,CAAgBH,IAAhB,CAGON,CAFPD,OAAQW,CAAAA,IAAR,CAAaP,UAAb,CAEOH,CADPD,OAAQW,CAAAA,IAAR,CAAaR,IAAb,CACOF,CAAAA,EAGTD,QAAQS,CAAAA,KAAR,CAAcJ,UAAd,CACA,OAAOO,aAAA,CAAaL,IAAb,CAVwB,CAejCK,QAASA,aAAY,CAACL,IAAD,CAAO,CAC1B,GAAIA,IAAJ,GAAaC,MAAb,CAEE,MADAR,QAAQW,CAAAA,IAAR,CAAaN,UAAb,CACO;AAAAC,iBAAA,CAAkBE,MAAlB,CAGT,IAAa,IAAb,GAAID,IAAJ,CACE,MAAOL,IAAA,CAAIK,IAAJ,CAIT,IAAI,GAAIM,uBAAwBC,CAAAA,kBAA5B,EAAgDP,IAAhD,CAAJ,CAIE,MAHAP,QAAQS,CAAAA,KAAR,CAAc,YAAd,CAGO,CAFPT,OAAQU,CAAAA,OAAR,CAAgBH,IAAhB,CAEO,CADPP,OAAQW,CAAAA,IAAR,CAAa,YAAb,CACO,CAAA,GAAII,sBAAuBC,CAAAA,YAA3B,EAAyChB,OAAzC,CAAkDY,YAAlD,CAAgE,YAAhE,CAGTZ,QAAQS,CAAAA,KAAR,CAAc,aAAd,CAA6B,CAC3BQ,YAAa,QADc,CAA7B,CAGA,OAAOC,MAAA,CAAMX,IAAN,CArBmB,CA0B5BW,QAASA,MAAK,CAACX,IAAD,CAAO,CACnB,GAAIA,IAAJ,GAAaC,MAAb,EAAgC,IAAhC,GAAuBD,IAAvB,EAAwC,GAAIM,uBAAwBC,CAAAA,kBAA5B,EAAgDP,IAAhD,CAAxC,CAEE,MADAP,QAAQW,CAAAA,IAAR,CAAa,aAAb,CACO,CAAAC,YAAA,CAAaL,IAAb,CAGTP;OAAQU,CAAAA,OAAR,CAAgBH,IAAhB,CACA,OAAgB,GAAT,GAAAA,IAAA,CAAcY,WAAd,CAA4BD,KAPhB,CAYrBC,QAASA,YAAW,CAACZ,IAAD,CAAO,CACzB,MAAIA,KAAJ,GAAaC,MAAb,EAAgC,EAAhC,GAAuBD,IAAvB,EACEP,OAAQU,CAAAA,OAAR,CAAgBH,IAAhB,CACOW,CAAAA,KAFT,EAKOA,KAAA,CAAMX,IAAN,CANkB,CApE3B,IAAIC,MACJ,OAGAY,SAAc,CAACb,IAAD,CAAO,CACnBP,OAAQS,CAAAA,KAAR,CAAcN,IAAd,CACAH,QAAQS,CAAAA,KAAR,CAAcL,UAAd,CACAJ,QAAQU,CAAAA,OAAR,CAAgBH,IAAhB,CACAP,QAAQW,CAAAA,IAAR,CAAaP,UAAb,CACAI,OAAA,CAAkB,EAAT,GAAAD,IAAA,CAAc,EAAd,CAAmBA,IAC5B,OAAOD,kBANY,CAN+C,CApBtE,KAAIS,uBAAyBtB,OAAA,CAAQ,mDAAR,CAA7B,CAEIoB,wBAA0BpB,OAAA,CAAQ,oDAAR,CAVgF;\",\n\"sources\":[\"node_modules/micromark-factory-title/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_factory_title$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.factoryTitle = factoryTitle;\\n\\nvar _micromarkFactorySpace = require(\\\"micromark-factory-space\\\");\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Effects} Effects\\n * @typedef {import('micromark-util-types').State} State\\n * @typedef {import('micromark-util-types').Code} Code\\n */\\n\\n/**\\n * @param {Effects} effects\\n * @param {State} ok\\n * @param {State} nok\\n * @param {string} type\\n * @param {string} markerType\\n * @param {string} stringType\\n * @returns {State}\\n */\\n// eslint-disable-next-line max-params\\nfunction factoryTitle(effects, ok, nok, type, markerType, stringType) {\\n  /** @type {NonNullable<Code>} */\\n  let marker;\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    effects.enter(type);\\n    effects.enter(markerType);\\n    effects.consume(code);\\n    effects.exit(markerType);\\n    marker = code === 40 ? 41 : code;\\n    return atFirstTitleBreak;\\n  }\\n  /** @type {State} */\\n\\n\\n  function atFirstTitleBreak(code) {\\n    if (code === marker) {\\n      effects.enter(markerType);\\n      effects.consume(code);\\n      effects.exit(markerType);\\n      effects.exit(type);\\n      return ok;\\n    }\\n\\n    effects.enter(stringType);\\n    return atTitleBreak(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function atTitleBreak(code) {\\n    if (code === marker) {\\n      effects.exit(stringType);\\n      return atFirstTitleBreak(marker);\\n    }\\n\\n    if (code === null) {\\n      return nok(code);\\n    } // Note: blank lines can\\u2019t exist in content.\\n\\n\\n    if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\\n      effects.enter('lineEnding');\\n      effects.consume(code);\\n      effects.exit('lineEnding');\\n      return (0, _micromarkFactorySpace.factorySpace)(effects, atTitleBreak, 'linePrefix');\\n    }\\n\\n    effects.enter('chunkString', {\\n      contentType: 'string'\\n    });\\n    return title(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function title(code) {\\n    if (code === marker || code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\\n      effects.exit('chunkString');\\n      return atTitleBreak(code);\\n    }\\n\\n    effects.consume(code);\\n    return code === 92 ? titleEscape : title;\\n  }\\n  /** @type {State} */\\n\\n\\n  function titleEscape(code) {\\n    if (code === marker || code === 92) {\\n      effects.consume(code);\\n      return title;\\n    }\\n\\n    return title(code);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"factoryTitle\",\"effects\",\"ok\",\"nok\",\"type\",\"markerType\",\"stringType\",\"atFirstTitleBreak\",\"code\",\"marker\",\"enter\",\"consume\",\"exit\",\"atTitleBreak\",\"_micromarkUtilCharacter\",\"markdownLineEnding\",\"_micromarkFactorySpace\",\"factorySpace\",\"contentType\",\"title\",\"titleEscape\",\"start\"]\n}\n"]