["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/parigp.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$parigp=function(global,require,module,exports){function parigp(Prism){Prism.languages.parigp={comment:/\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,string:{pattern:/\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,greedy:!0},keyword:function(){var keywords=\"breakpoint break dbg_down dbg_err dbg_up dbg_x forcomposite fordiv forell forpart forprime forstep forsubgroup forvec for iferr if local my next return until while\".split(\" \");keywords=keywords.map(function(keyword){return keyword.split(\"\").join(\" *\")}).join(\"|\");\nreturn RegExp(\"\\\\b(?:\"+keywords+\")\\\\b\")}(),function:/\\b\\w(?:[\\w ]*\\w)?(?= *\\()/,number:{pattern:/((?:\\. *\\. *)?)(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *(?:[+-] *)?\\d(?: *\\d)*)?/i,lookbehind:!0},operator:/\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,punctuation:/[\\[\\]{}().,:;|]/}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=\nparigp;parigp.displayName=\"parigp\";parigp.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$parigp\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parigp;\n// @ts-nocheck\nparigp.displayName = 'parigp';\nparigp.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction parigp(Prism) {\n  Prism.languages.parigp = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n      greedy: true\n    },\n    // PARI/GP does not care about white spaces at all\n    // so let's process the keywords to build an appropriate regexp\n    // (e.g. \"b *r *e *a *k\", etc.)\n    keyword: function () {\n      var keywords = ['breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x', 'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime', 'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if', 'local', 'my', 'next', 'return', 'until', 'while'];\n      keywords = keywords.map(function (keyword) {\n        return keyword.split('').join(' *');\n      }).join('|');\n      return RegExp('\\\\b(?:' + keywords + ')\\\\b');\n    }(),\n    function: /\\b\\w(?:[\\w ]*\\w)?(?= *\\()/,\n    number: {\n      // The lookbehind and the negative lookahead prevent from breaking the .. operator\n      pattern: /((?:\\. *\\. *)?)(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *(?:[+-] *)?\\d(?: *\\d)*)?/i,\n      lookbehind: true\n    },\n    operator: /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n    punctuation: /[\\[\\]{}().,:;|]/\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["punctuation","string","aliases","operator","displayName","__esModule","lookbehind","value","parigp","keyword","number","greedy","function","pattern","comment","default"]],"~:compiled-at",1676841365443,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$parigp.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYtGC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAMC,CAAAA,SAAUF,CAAAA,MAAhB,CAAyB,CACvBG,QAAS,yBADc,CAEvBC,OAAQ,CACNC,QAAS,uBADH,CAENC,OAAQ,CAAA,CAFF,CAFe,CASvBC,QAAS,QAAS,EAAG,CACnB,IAAIC,SAAW,qKAAA,CAAA,KAAA,CAAA,GAAA,CACfA,SAAA,CAAWA,QAASC,CAAAA,GAAT,CAAa,QAAS,CAACF,OAAD,CAAU,CACzC,MAAOA,QAAQG,CAAAA,KAAR,CAAc,EAAd,CAAkBC,CAAAA,IAAlB,CAAuB,IAAvB,CADkC,CAAhC,CAERA,CAAAA,IAFQ,CAEH,GAFG,CAGX;MAAOC,OAAA,CAAO,QAAP,CAAkBJ,QAAlB,CAA6B,MAA7B,CALY,CAAZ,EATc,CAgBvBK,SAAU,2BAhBa,CAiBvBC,OAAQ,CAENT,QAAS,+GAFH,CAGNU,WAAY,CAAA,CAHN,CAjBe,CAsBvBC,SAAU,qLAtBa,CAuBvBC,YAAa,iBAvBU,CADJ,CATvBC,MAAOC,CAAAA,cAAP,CAAsBpB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CqB,MAAO,CAAA,CADoC,CAA7C,CAGArB,QAAQsB,CAAAA,OAAR;AAAkBrB,MAElBA,OAAOsB,CAAAA,WAAP,CAAqB,QACrBtB,OAAOuB,CAAAA,OAAP,CAAiB,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/parigp.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$parigp\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = parigp;\\n// @ts-nocheck\\nparigp.displayName = 'parigp';\\nparigp.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction parigp(Prism) {\\n  Prism.languages.parigp = {\\n    comment: /\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/|\\\\\\\\\\\\\\\\.*/,\\n    string: {\\n      pattern: /\\\"(?:[^\\\"\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)*\\\"/,\\n      greedy: true\\n    },\\n    // PARI/GP does not care about white spaces at all\\n    // so let's process the keywords to build an appropriate regexp\\n    // (e.g. \\\"b *r *e *a *k\\\", etc.)\\n    keyword: function () {\\n      var keywords = ['breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x', 'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime', 'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if', 'local', 'my', 'next', 'return', 'until', 'while'];\\n      keywords = keywords.map(function (keyword) {\\n        return keyword.split('').join(' *');\\n      }).join('|');\\n      return RegExp('\\\\\\\\b(?:' + keywords + ')\\\\\\\\b');\\n    }(),\\n    function: /\\\\b\\\\w(?:[\\\\w ]*\\\\w)?(?= *\\\\()/,\\n    number: {\\n      // The lookbehind and the negative lookahead prevent from breaking the .. operator\\n      pattern: /((?:\\\\. *\\\\. *)?)(?:\\\\b\\\\d(?: *\\\\d)*(?: *(?!\\\\. *\\\\.)\\\\.(?: *\\\\d)*)?|\\\\. *\\\\d(?: *\\\\d)*)(?: *e *(?:[+-] *)?\\\\d(?: *\\\\d)*)?/i,\\n      lookbehind: true\\n    },\\n    operator: /\\\\. *\\\\.|[*\\\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\\\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\\\\\(?: *\\\\/)?(?: *=)?|&(?: *&)?|\\\\| *\\\\||['#~^]/,\\n    punctuation: /[\\\\[\\\\]{}().,:;|]/\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"parigp\",\"Prism\",\"languages\",\"comment\",\"string\",\"pattern\",\"greedy\",\"keyword\",\"keywords\",\"map\",\"split\",\"join\",\"RegExp\",\"function\",\"number\",\"lookbehind\",\"operator\",\"punctuation\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]