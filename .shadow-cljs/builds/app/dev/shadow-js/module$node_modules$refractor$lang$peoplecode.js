["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/peoplecode.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$peoplecode=function(global,require,module,exports){function peoplecode(Prism){Prism.languages.peoplecode={comment:RegExp([/\\/\\*[\\s\\S]*?\\*\\//.source,/\\bREM[^;]*;/.source,/<\\*(?:[^<*]|\\*(?!>)|<(?!\\*)|<\\*(?:(?!\\*>)[\\s\\S])*\\*>)*\\*>/.source,/\\/\\+[\\s\\S]*?\\+\\//.source].join(\"|\")),string:{pattern:/'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,greedy:!0},variable:/%\\w+/,\"function-definition\":{pattern:/((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,lookbehind:!0,\nalias:\"function\"},\"class-name\":{pattern:/((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,lookbehind:!0,inside:{punctuation:/:/}},keyword:/\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|if|implements|import|instance|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\n\"operator-keyword\":{pattern:/\\b(?:and|not|or)\\b/i,alias:\"operator\"},function:/[_a-z]\\w*(?=\\s*\\()/i,boolean:/\\b(?:false|true)\\b/i,number:/\\b\\d+(?:\\.\\d+)?\\b/,operator:/<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,punctuation:/[:.;,()[\\]]/};Prism.languages.pcode=Prism.languages.peoplecode}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=peoplecode;peoplecode.displayName=\"peoplecode\";peoplecode.aliases=[\"pcode\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$peoplecode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = peoplecode;\n// @ts-nocheck\npeoplecode.displayName = 'peoplecode';\npeoplecode.aliases = ['pcode'];\n/** @type {import('../core.js').Syntax} */\n\nfunction peoplecode(Prism) {\n  Prism.languages.peoplecode = {\n    comment: RegExp([// C-style multiline comments\n    /\\/\\*[\\s\\S]*?\\*\\//.source, // REM comments\n    /\\bREM[^;]*;/.source, // Nested <* *> comments\n    /<\\*(?:[^<*]|\\*(?!>)|<(?!\\*)|<\\*(?:(?!\\*>)[\\s\\S])*\\*>)*\\*>/.source, // /+ +/ comments\n    /\\/\\+[\\s\\S]*?\\+\\//.source].join('|')),\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n      greedy: true\n    },\n    variable: /%\\w+/,\n    'function-definition': {\n      pattern: /((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'class-name': {\n      pattern: /((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,\n      lookbehind: true,\n      inside: {\n        punctuation: /:/\n      }\n    },\n    keyword: /\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|if|implements|import|instance|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\n    'operator-keyword': {\n      pattern: /\\b(?:and|not|or)\\b/i,\n      alias: 'operator'\n    },\n    function: /[_a-z]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,\n    punctuation: /[:.;,()[\\]]/\n  };\n  Prism.languages.pcode = Prism.languages.peoplecode;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","punctuation","string","aliases","operator","displayName","__esModule","pcode","lookbehind","value","peoplecode","variable","keyword","number","greedy","function","pattern","inside","alias","comment","default"]],"~:compiled-at",1676841365445,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$peoplecode.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,6CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAY1GC,QAASA,WAAU,CAACC,KAAD,CAAQ,CACzBA,KAAMC,CAAAA,SAAUF,CAAAA,UAAhB,CAA6B,CAC3BG,QAASC,MAAA,CAAO,CAChB,kBAAmBC,CAAAA,MADH,CAEhB,aAAcA,CAAAA,MAFE,CAGhB,2DAA4DA,CAAAA,MAH5C,CAIhB,kBAAmBA,CAAAA,MAJH,CAIWC,CAAAA,IAJX,CAIgB,GAJhB,CAAP,CADkB,CAM3BC,OAAQ,CACNC,QAAS,iDADH,CAENC,OAAQ,CAAA,CAFF,CANmB,CAU3BC,SAAU,MAViB,CAW3B,sBAAuB,CACrBF,QAAS,0CADY,CAErBG,WAAY,CAAA,CAFS;AAGrBC,MAAO,UAHc,CAXI,CAgB3B,aAAc,CACZJ,QAAS,gIADG,CAEZG,WAAY,CAAA,CAFA,CAGZE,OAAQ,CACNC,YAAa,GADP,CAHI,CAhBa,CAuB3BC,QAAS,+XAvBkB;AAwB3B,mBAAoB,CAClBP,QAAS,qBADS,CAElBI,MAAO,UAFW,CAxBO,CA4B3BI,SAAU,qBA5BiB,CA6B3BC,QAAS,qBA7BkB,CA8B3BC,OAAQ,mBA9BmB,CA+B3BC,SAAU,6BA/BiB,CAgC3BL,YAAa,aAhCc,CAkC7Bb,MAAMC,CAAAA,SAAUkB,CAAAA,KAAhB,CAAwBnB,KAAMC,CAAAA,SAAUF,CAAAA,UAnCf,CAT3BqB,MAAOC,CAAAA,cAAP,CAAsBvB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CwB,MAAO,CAAA,CADoC,CAA7C,CAGAxB,QAAQyB,CAAAA,OAAR,CAAkBxB,UAElBA,WAAWyB,CAAAA,WAAX,CAAyB,YACzBzB,WAAW0B,CAAAA,OAAX,CAAqB,CAAC,OAAD,CATqF;\",\n\"sources\":[\"node_modules/refractor/lang/peoplecode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$peoplecode\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = peoplecode;\\n// @ts-nocheck\\npeoplecode.displayName = 'peoplecode';\\npeoplecode.aliases = ['pcode'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction peoplecode(Prism) {\\n  Prism.languages.peoplecode = {\\n    comment: RegExp([// C-style multiline comments\\n    /\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\//.source, // REM comments\\n    /\\\\bREM[^;]*;/.source, // Nested <* *> comments\\n    /<\\\\*(?:[^<*]|\\\\*(?!>)|<(?!\\\\*)|<\\\\*(?:(?!\\\\*>)[\\\\s\\\\S])*\\\\*>)*\\\\*>/.source, // /+ +/ comments\\n    /\\\\/\\\\+[\\\\s\\\\S]*?\\\\+\\\\//.source].join('|')),\\n    string: {\\n      pattern: /'(?:''|[^'\\\\r\\\\n])*'(?!')|\\\"(?:\\\"\\\"|[^\\\"\\\\r\\\\n])*\\\"(?!\\\")/,\\n      greedy: true\\n    },\\n    variable: /%\\\\w+/,\\n    'function-definition': {\\n      pattern: /((?:^|[^\\\\w-])(?:function|method)\\\\s+)\\\\w+/i,\\n      lookbehind: true,\\n      alias: 'function'\\n    },\\n    'class-name': {\\n      pattern: /((?:^|[^-\\\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\\\s+)\\\\w+(?::\\\\w+)*/i,\\n      lookbehind: true,\\n      inside: {\\n        punctuation: /:/\\n      }\\n    },\\n    keyword: /\\\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|if|implements|import|instance|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\\\b/i,\\n    'operator-keyword': {\\n      pattern: /\\\\b(?:and|not|or)\\\\b/i,\\n      alias: 'operator'\\n    },\\n    function: /[_a-z]\\\\w*(?=\\\\s*\\\\()/i,\\n    boolean: /\\\\b(?:false|true)\\\\b/i,\\n    number: /\\\\b\\\\d+(?:\\\\.\\\\d+)?\\\\b/,\\n    operator: /<>|[<>]=?|!=|\\\\*\\\\*|[-+*/|=@]/,\\n    punctuation: /[:.;,()[\\\\]]/\\n  };\\n  Prism.languages.pcode = Prism.languages.peoplecode;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"peoplecode\",\"Prism\",\"languages\",\"comment\",\"RegExp\",\"source\",\"join\",\"string\",\"pattern\",\"greedy\",\"variable\",\"lookbehind\",\"alias\",\"inside\",\"punctuation\",\"keyword\",\"function\",\"boolean\",\"number\",\"operator\",\"pcode\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]