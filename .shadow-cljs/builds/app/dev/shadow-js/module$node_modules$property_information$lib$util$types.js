["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/property-information/lib/util/types.js"],"~:js","shadow$provide.module$node_modules$property_information$lib$util$types=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.commaOrSpaceSeparated=exports.commaSeparated=exports.spaceSeparated=exports.overloadedBoolean=exports.booleanish=exports.boolean=void 0;global=0;require=2**++global;exports.boolean=require;require=2**++global;exports.booleanish=require;require=2**++global;exports.overloadedBoolean=require;require=2**++global;exports.number=require;\nrequire=2**++global;exports.spaceSeparated=require;require=2**++global;exports.commaSeparated=require;global=2**++global;exports.commaOrSpaceSeparated=global}","~:source","shadow$provide[\"module$node_modules$property_information$lib$util$types\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.commaOrSpaceSeparated = exports.commaSeparated = exports.spaceSeparated = exports.number = exports.overloadedBoolean = exports.booleanish = exports.boolean = void 0;\nlet powers = 0;\nconst boolean = increment();\nexports.boolean = boolean;\nconst booleanish = increment();\nexports.booleanish = booleanish;\nconst overloadedBoolean = increment();\nexports.overloadedBoolean = overloadedBoolean;\nconst number = increment();\nexports.number = number;\nconst spaceSeparated = increment();\nexports.spaceSeparated = spaceSeparated;\nconst commaSeparated = increment();\nexports.commaSeparated = commaSeparated;\nconst commaOrSpaceSeparated = increment();\nexports.commaOrSpaceSeparated = commaOrSpaceSeparated;\n\nfunction increment() {\n  return 2 ** ++powers;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","spaceSeparated","__esModule","booleanish","value","number","overloadedBoolean","commaSeparated","commaOrSpaceSeparated"]],"~:compiled-at",1676665867328,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$property_information$lib$util$types.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,qBAAR,CAAgCJ,OAAQK,CAAAA,cAAxC,CAAyDL,OAAQM,CAAAA,cAAjE,CAAmGN,OAAQO,CAAAA,iBAA3G,CAA+HP,OAAQQ,CAAAA,UAAvI,CAAoJR,OAAQS,CAAAA,OAA5J,CAAsK,IAAK,EACvKC,OAAAA,CAAS,CACPD,QAAAA,CAgBG,CAhBHA,EAgBQ,EAAEC,MAfhBV,QAAQS,CAAAA,OAAR,CAAkBA,OACZD,QAAAA,CAcG,CAdHA,EAcQ,EAAEE,MAbhBV,QAAQQ,CAAAA,UAAR,CAAqBA,OACfD,QAAAA,CAYG,CAZHA,EAYQ,EAAEG,MAXhBV,QAAQO,CAAAA,iBAAR,CAA4BA,OACtBI,QAAAA,CAUG,CAVHA,EAUQ,EAAED,MAThBV,QAAQW,CAAAA,MAAR,CAAiBA,OACXL;OAAAA,CAQG,CARHA,EAQQ,EAAEI,MAPhBV,QAAQM,CAAAA,cAAR,CAAyBA,OACnBD,QAAAA,CAMG,CANHA,EAMQ,EAAEK,MALhBV,QAAQK,CAAAA,cAAR,CAAyBA,OACnBD,OAAAA,CAIG,CAJHA,EAIQ,EAAEM,MAHhBV,QAAQI,CAAAA,qBAAR,CAAgCA,MArBoF;\",\n\"sources\":[\"node_modules/property-information/lib/util/types.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$property_information$lib$util$types\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.commaOrSpaceSeparated = exports.commaSeparated = exports.spaceSeparated = exports.number = exports.overloadedBoolean = exports.booleanish = exports.boolean = void 0;\\nlet powers = 0;\\nconst boolean = increment();\\nexports.boolean = boolean;\\nconst booleanish = increment();\\nexports.booleanish = booleanish;\\nconst overloadedBoolean = increment();\\nexports.overloadedBoolean = overloadedBoolean;\\nconst number = increment();\\nexports.number = number;\\nconst spaceSeparated = increment();\\nexports.spaceSeparated = spaceSeparated;\\nconst commaSeparated = increment();\\nexports.commaSeparated = commaSeparated;\\nconst commaOrSpaceSeparated = increment();\\nexports.commaOrSpaceSeparated = commaOrSpaceSeparated;\\n\\nfunction increment() {\\n  return 2 ** ++powers;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"commaOrSpaceSeparated\",\"commaSeparated\",\"spaceSeparated\",\"overloadedBoolean\",\"booleanish\",\"boolean\",\"powers\",\"number\"]\n}\n"]