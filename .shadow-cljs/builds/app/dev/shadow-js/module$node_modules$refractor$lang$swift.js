["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/swift.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$swift=function(global,require,module,exports){function swift(Prism){Prism.languages.swift={comment:{pattern:/(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,lookbehind:!0,greedy:!0},\"string-literal\":[{pattern:RegExp(/(^|[^\"#])/.source+\"(?:\"+/\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source+\"|\"+/\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source+\")\"+/(?![\"#])/.source),lookbehind:!0,\ngreedy:!0,inside:{interpolation:{pattern:/(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,lookbehind:!0,inside:null},\"interpolation-punctuation\":{pattern:/^\\)|\\\\\\($/,alias:\"punctuation\"},punctuation:/\\\\(?=[\\r\\n])/,string:/[\\s\\S]+/}},{pattern:RegExp(/(^|[^\"#])(#+)/.source+\"(?:\"+/\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source+\"|\"+/\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source+\")\\\\2\"),lookbehind:!0,greedy:!0,inside:{interpolation:{pattern:/(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\nlookbehind:!0,inside:null},\"interpolation-punctuation\":{pattern:/^\\)|\\\\#+\\($/,alias:\"punctuation\"},string:/[\\s\\S]+/}}],directive:{pattern:RegExp(/#/.source+\"(?:\"+(/(?:elseif|if)\\b/.source+\"(?:[ \\t]*\"+/(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source+\")+|\")+/(?:else|endif)\\b/.source+\")\"),alias:\"property\",inside:{\"directive-name\":/^#\\w+/,boolean:/\\b(?:false|true)\\b/,number:/\\b\\d+(?:\\.\\d+)*\\b/,operator:/!|&&|\\|\\||[<>]=?/,punctuation:/[(),]/}},\nliteral:{pattern:/#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,alias:\"constant\"},\"other-directive\":{pattern:/#\\w+\\b/,alias:\"property\"},attribute:{pattern:/@\\w+/,alias:\"atrule\"},\"function-definition\":{pattern:/(\\bfunc\\s+)\\w+/,lookbehind:!0,alias:\"function\"},label:{pattern:/\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,lookbehind:!0,alias:\"important\"},keyword:/\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\nboolean:/\\b(?:false|true)\\b/,nil:{pattern:/\\bnil\\b/,alias:\"constant\"},\"short-argument\":/\\$\\d+\\b/,omit:{pattern:/\\b_\\b/,alias:\"keyword\"},number:/\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\"class-name\":/\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,function:/\\b[a-z_]\\w*(?=\\s*\\()/i,constant:/\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,operator:/[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,punctuation:/[{}[\\]();,.:\\\\]/};Prism.languages.swift[\"string-literal\"].forEach(function(rule){rule.inside.interpolation.inside=\nPrism.languages.swift})}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=swift;swift.displayName=\"swift\";swift.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$swift\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = swift;\n// @ts-nocheck\nswift.displayName = 'swift';\nswift.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction swift(Prism) {\n  Prism.languages.swift = {\n    comment: {\n      // Nested comments are supported up to 2 levels\n      pattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'string-literal': [// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n    {\n      pattern: RegExp(/(^|[^\"#])/.source + '(?:' + // single-line string\n      /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source + '|' + // multi-line string\n      /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source + ')' + /(?![\"#])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n          lookbehind: true,\n          inside: null // see below\n\n        },\n        'interpolation-punctuation': {\n          pattern: /^\\)|\\\\\\($/,\n          alias: 'punctuation'\n        },\n        punctuation: /\\\\(?=[\\r\\n])/,\n        string: /[\\s\\S]+/\n      }\n    }, {\n      pattern: RegExp(/(^|[^\"#])(#+)/.source + '(?:' + // single-line string\n      /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source + '|' + // multi-line string\n      /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source + ')' + '\\\\2'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n          lookbehind: true,\n          inside: null // see below\n\n        },\n        'interpolation-punctuation': {\n          pattern: /^\\)|\\\\#+\\($/,\n          alias: 'punctuation'\n        },\n        string: /[\\s\\S]+/\n      }\n    }],\n    directive: {\n      // directives with conditions\n      pattern: RegExp(/#/.source + '(?:' + (/(?:elseif|if)\\b/.source + '(?:[ \\t]*' + // This regex is a little complex. It's equivalent to this:\n      //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n      // where <round> is a general parentheses expression.\n      /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source + ')+') + '|' + /(?:else|endif)\\b/.source + ')'),\n      alias: 'property',\n      inside: {\n        'directive-name': /^#\\w+/,\n        boolean: /\\b(?:false|true)\\b/,\n        number: /\\b\\d+(?:\\.\\d+)*\\b/,\n        operator: /!|&&|\\|\\||[<>]=?/,\n        punctuation: /[(),]/\n      }\n    },\n    literal: {\n      pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n      alias: 'constant'\n    },\n    'other-directive': {\n      pattern: /#\\w+\\b/,\n      alias: 'property'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'atrule'\n    },\n    'function-definition': {\n      pattern: /(\\bfunc\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    label: {\n      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n      pattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n      lookbehind: true,\n      alias: 'important'\n    },\n    keyword: /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    nil: {\n      pattern: /\\bnil\\b/,\n      alias: 'constant'\n    },\n    'short-argument': /\\$\\d+\\b/,\n    omit: {\n      pattern: /\\b_\\b/,\n      alias: 'keyword'\n    },\n    number: /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n    'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n    // This regex only supports ASCII operators.\n    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n    punctuation: /[{}[\\]();,.:\\\\]/\n  };\n  Prism.languages.swift['string-literal'].forEach(function (rule) {\n    rule.inside['interpolation'].inside = Prism.languages.swift;\n  });\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","punctuation","string","aliases","constant","directive","operator","displayName","label","__esModule","attribute","swift","lookbehind","value","keyword","omit","number","greedy","function","pattern","inside","alias","nil","comment","interpolation","default","literal"]],"~:compiled-at",1676841365377,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$swift.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/swift.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$swift\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = swift;\\n// @ts-nocheck\\nswift.displayName = 'swift';\\nswift.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction swift(Prism) {\\n  Prism.languages.swift = {\\n    comment: {\\n      // Nested comments are supported up to 2 levels\\n      pattern: /(^|[^\\\\\\\\:])(?:\\\\/\\\\/.*|\\\\/\\\\*(?:[^/*]|\\\\/(?!\\\\*)|\\\\*(?!\\\\/)|\\\\/\\\\*(?:[^*]|\\\\*(?!\\\\/))*\\\\*\\\\/)*\\\\*\\\\/)/,\\n      lookbehind: true,\\n      greedy: true\\n    },\\n    'string-literal': [// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\\n    {\\n      pattern: RegExp(/(^|[^\\\"#])/.source + '(?:' + // single-line string\\n      /\\\"(?:\\\\\\\\(?:\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|\\\\r\\\\n|[^(])|[^\\\\\\\\\\\\r\\\\n\\\"])*\\\"/.source + '|' + // multi-line string\\n      /\\\"\\\"\\\"(?:\\\\\\\\(?:\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|[^(])|[^\\\\\\\\\\\"]|\\\"(?!\\\"\\\"))*\\\"\\\"\\\"/.source + ')' + /(?![\\\"#])/.source),\\n      lookbehind: true,\\n      greedy: true,\\n      inside: {\\n        interpolation: {\\n          pattern: /(\\\\\\\\\\\\()(?:[^()]|\\\\([^()]*\\\\))*(?=\\\\))/,\\n          lookbehind: true,\\n          inside: null // see below\\n\\n        },\\n        'interpolation-punctuation': {\\n          pattern: /^\\\\)|\\\\\\\\\\\\($/,\\n          alias: 'punctuation'\\n        },\\n        punctuation: /\\\\\\\\(?=[\\\\r\\\\n])/,\\n        string: /[\\\\s\\\\S]+/\\n      }\\n    }, {\\n      pattern: RegExp(/(^|[^\\\"#])(#+)/.source + '(?:' + // single-line string\\n      /\\\"(?:\\\\\\\\(?:#+\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|\\\\r\\\\n|[^#])|[^\\\\\\\\\\\\r\\\\n])*?\\\"/.source + '|' + // multi-line string\\n      /\\\"\\\"\\\"(?:\\\\\\\\(?:#+\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|[^#])|[^\\\\\\\\])*?\\\"\\\"\\\"/.source + ')' + '\\\\\\\\2'),\\n      lookbehind: true,\\n      greedy: true,\\n      inside: {\\n        interpolation: {\\n          pattern: /(\\\\\\\\#+\\\\()(?:[^()]|\\\\([^()]*\\\\))*(?=\\\\))/,\\n          lookbehind: true,\\n          inside: null // see below\\n\\n        },\\n        'interpolation-punctuation': {\\n          pattern: /^\\\\)|\\\\\\\\#+\\\\($/,\\n          alias: 'punctuation'\\n        },\\n        string: /[\\\\s\\\\S]+/\\n      }\\n    }],\\n    directive: {\\n      // directives with conditions\\n      pattern: RegExp(/#/.source + '(?:' + (/(?:elseif|if)\\\\b/.source + '(?:[ \\\\t]*' + // This regex is a little complex. It's equivalent to this:\\n      //   (?:![ \\\\t]*)?(?:\\\\b\\\\w+\\\\b(?:[ \\\\t]*<round>)?|<round>)(?:[ \\\\t]*(?:&&|\\\\|\\\\|))?\\n      // where <round> is a general parentheses expression.\\n      /(?:![ \\\\t]*)?(?:\\\\b\\\\w+\\\\b(?:[ \\\\t]*\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\))?|\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\))(?:[ \\\\t]*(?:&&|\\\\|\\\\|))?/.source + ')+') + '|' + /(?:else|endif)\\\\b/.source + ')'),\\n      alias: 'property',\\n      inside: {\\n        'directive-name': /^#\\\\w+/,\\n        boolean: /\\\\b(?:false|true)\\\\b/,\\n        number: /\\\\b\\\\d+(?:\\\\.\\\\d+)*\\\\b/,\\n        operator: /!|&&|\\\\|\\\\||[<>]=?/,\\n        punctuation: /[(),]/\\n      }\\n    },\\n    literal: {\\n      pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\\\b/,\\n      alias: 'constant'\\n    },\\n    'other-directive': {\\n      pattern: /#\\\\w+\\\\b/,\\n      alias: 'property'\\n    },\\n    attribute: {\\n      pattern: /@\\\\w+/,\\n      alias: 'atrule'\\n    },\\n    'function-definition': {\\n      pattern: /(\\\\bfunc\\\\s+)\\\\w+/,\\n      lookbehind: true,\\n      alias: 'function'\\n    },\\n    label: {\\n      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\\n      pattern: /\\\\b(break|continue)\\\\s+\\\\w+|\\\\b[a-zA-Z_]\\\\w*(?=\\\\s*:\\\\s*(?:for|repeat|while)\\\\b)/,\\n      lookbehind: true,\\n      alias: 'important'\\n    },\\n    keyword: /\\\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\\\b/,\\n    boolean: /\\\\b(?:false|true)\\\\b/,\\n    nil: {\\n      pattern: /\\\\bnil\\\\b/,\\n      alias: 'constant'\\n    },\\n    'short-argument': /\\\\$\\\\d+\\\\b/,\\n    omit: {\\n      pattern: /\\\\b_\\\\b/,\\n      alias: 'keyword'\\n    },\\n    number: /\\\\b(?:[\\\\d_]+(?:\\\\.[\\\\de_]+)?|0x[a-f0-9_]+(?:\\\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\\\b/i,\\n    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\\n    'class-name': /\\\\b[A-Z](?:[A-Z_\\\\d]*[a-z]\\\\w*)?\\\\b/,\\n    function: /\\\\b[a-z_]\\\\w*(?=\\\\s*\\\\()/i,\\n    constant: /\\\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\\\b/,\\n    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\\n    // This regex only supports ASCII operators.\\n    operator: /[-+*/%=!<>&|^~?]+|\\\\.[.\\\\-+*/%=!<>&|^~?]+/,\\n    punctuation: /[{}[\\\\]();,.:\\\\\\\\]/\\n  };\\n  Prism.languages.swift['string-literal'].forEach(function (rule) {\\n    rule.inside['interpolation'].inside = Prism.languages.swift;\\n  });\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"swift\",\"Prism\",\"languages\",\"comment\",\"pattern\",\"lookbehind\",\"greedy\",\"RegExp\",\"source\",\"inside\",\"interpolation\",\"alias\",\"punctuation\",\"string\",\"directive\",\"boolean\",\"number\",\"operator\",\"literal\",\"attribute\",\"label\",\"keyword\",\"nil\",\"omit\",\"function\",\"constant\",\"forEach\",\"rule\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]