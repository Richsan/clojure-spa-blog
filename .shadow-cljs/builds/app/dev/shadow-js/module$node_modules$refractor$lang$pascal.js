["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/pascal.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$pascal=function(global,require,module,exports){function pascal(Prism){Prism.languages.pascal={directive:{pattern:/\\{\\$[\\s\\S]*?\\}/,greedy:!0,alias:[\"marco\",\"property\"]},comment:{pattern:/\\(\\*[\\s\\S]*?\\*\\)|\\{[\\s\\S]*?\\}|\\/\\/.*/,greedy:!0},string:{pattern:/(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,greedy:!0},asm:{pattern:/(\\basm\\b)[\\s\\S]+?(?=\\bend\\s*[;[])/i,lookbehind:!0,greedy:!0,inside:null},keyword:[{pattern:/(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\nlookbehind:!0},{pattern:/(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,lookbehind:!0},{pattern:/(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,lookbehind:!0},{pattern:/(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\nlookbehind:!0}],number:[/(?:[&%]\\d+|\\$[a-f\\d]+)/i,/\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i],operator:[/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/,{pattern:/(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,lookbehind:!0}],punctuation:/\\(\\.|\\.\\)|[()\\[\\]:;,.]/};Prism.languages.pascal.asm.inside=Prism.languages.extend(\"pascal\",{asm:void 0,keyword:void 0,operator:void 0});Prism.languages.objectpascal=Prism.languages.pascal}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=\npascal;pascal.displayName=\"pascal\";pascal.aliases=[\"objectpascal\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$pascal\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = pascal;\n// @ts-nocheck\npascal.displayName = 'pascal';\npascal.aliases = ['objectpascal'];\n/** @type {import('../core.js').Syntax} */\n\nfunction pascal(Prism) {\n  // Based on Free Pascal\n\n  /* TODO\n  Support inline asm ?\n  */\n  Prism.languages.pascal = {\n    directive: {\n      pattern: /\\{\\$[\\s\\S]*?\\}/,\n      greedy: true,\n      alias: ['marco', 'property']\n    },\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)|\\{[\\s\\S]*?\\}|\\/\\/.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n      greedy: true\n    },\n    asm: {\n      pattern: /(\\basm\\b)[\\s\\S]+?(?=\\bend\\s*[;[])/i,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    keyword: [{\n      // Turbo Pascal\n      pattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n      lookbehind: true\n    }, {\n      // Free Pascal\n      pattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n      lookbehind: true\n    }, {\n      // Object Pascal\n      pattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n      lookbehind: true\n    }, {\n      // Modifiers\n      pattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n      lookbehind: true\n    }],\n    number: [// Hexadecimal, octal and binary\n    /(?:[&%]\\d+|\\$[a-f\\d]+)/i, // Decimal\n    /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i],\n    operator: [/\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/, {\n      pattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n      lookbehind: true\n    }],\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n  };\n  Prism.languages.pascal.asm.inside = Prism.languages.extend('pascal', {\n    asm: undefined,\n    keyword: undefined,\n    operator: undefined\n  });\n  Prism.languages.objectpascal = Prism.languages.pascal;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["objectpascal","punctuation","string","aliases","pascal","directive","operator","displayName","asm","__esModule","lookbehind","value","keyword","number","greedy","pattern","inside","alias","comment","default"]],"~:compiled-at",1676841365444,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$pascal.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYtGC,QAASA,OAAM,CAACC,KAAD,CAAQ,CAMrBA,KAAMC,CAAAA,SAAUF,CAAAA,MAAhB,CAAyB,CACvBG,UAAW,CACTC,QAAS,gBADA,CAETC,OAAQ,CAAA,CAFC,CAGTC,MAAO,CAAC,OAAD,CAAU,UAAV,CAHE,CADY,CAMvBC,QAAS,CACPH,QAAS,sCADF,CAEPC,OAAQ,CAAA,CAFD,CANc,CAUvBG,OAAQ,CACNJ,QAAS,uDADH,CAENC,OAAQ,CAAA,CAFF,CAVe,CAcvBI,IAAK,CACHL,QAAS,oCADN,CAEHM,WAAY,CAAA,CAFT,CAGHL,OAAQ,CAAA,CAHL,CAIHM,OAAQ,IAJL,CAdkB,CAqBvBC,QAAS,CAAC,CAERR,QAAS,gTAFD;AAGRM,WAAY,CAAA,CAHJ,CAAD,CAIN,CAEDN,QAAS,8CAFR,CAGDM,WAAY,CAAA,CAHX,CAJM,CAQN,CAEDN,QAAS,kKAFR,CAGDM,WAAY,CAAA,CAHX,CARM,CAYN,CAEDN,QAAS,khBAFR;AAGDM,WAAY,CAAA,CAHX,CAZM,CArBc,CAsCvBG,OAAQ,CACR,yBADQ,CAER,gCAFQ,CAtCe,CAyCvBC,SAAU,CAAC,8CAAD,CAAiD,CACzDV,QAAS,yEADgD,CAEzDM,WAAY,CAAA,CAF6C,CAAjD,CAzCa,CA6CvBK,YAAa,wBA7CU,CA+CzBd,MAAMC,CAAAA,SAAUF,CAAAA,MAAOS,CAAAA,GAAIE,CAAAA,MAA3B,CAAoCV,KAAMC,CAAAA,SAAUc,CAAAA,MAAhB,CAAuB,QAAvB,CAAiC,CACnEP,IAAKQ,IAAAA,EAD8D,CAEnEL,QAASK,IAAAA,EAF0D,CAGnEH,SAAUG,IAAAA,EAHyD,CAAjC,CAKpChB,MAAMC,CAAAA,SAAUgB,CAAAA,YAAhB,CAA+BjB,KAAMC,CAAAA,SAAUF,CAAAA,MA1D1B,CATvBmB,MAAOC,CAAAA,cAAP,CAAsBrB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CsB,MAAO,CAAA,CADoC,CAA7C,CAGAtB,QAAQuB,CAAAA,OAAR;AAAkBtB,MAElBA,OAAOuB,CAAAA,WAAP,CAAqB,QACrBvB,OAAOwB,CAAAA,OAAP,CAAiB,CAAC,cAAD,CATqF;\",\n\"sources\":[\"node_modules/refractor/lang/pascal.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$pascal\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = pascal;\\n// @ts-nocheck\\npascal.displayName = 'pascal';\\npascal.aliases = ['objectpascal'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction pascal(Prism) {\\n  // Based on Free Pascal\\n\\n  /* TODO\\n  Support inline asm ?\\n  */\\n  Prism.languages.pascal = {\\n    directive: {\\n      pattern: /\\\\{\\\\$[\\\\s\\\\S]*?\\\\}/,\\n      greedy: true,\\n      alias: ['marco', 'property']\\n    },\\n    comment: {\\n      pattern: /\\\\(\\\\*[\\\\s\\\\S]*?\\\\*\\\\)|\\\\{[\\\\s\\\\S]*?\\\\}|\\\\/\\\\/.*/,\\n      greedy: true\\n    },\\n    string: {\\n      pattern: /(?:'(?:''|[^'\\\\r\\\\n])*'(?!')|#[&$%]?[a-f\\\\d]+)+|\\\\^[a-z]/i,\\n      greedy: true\\n    },\\n    asm: {\\n      pattern: /(\\\\basm\\\\b)[\\\\s\\\\S]+?(?=\\\\bend\\\\s*[;[])/i,\\n      lookbehind: true,\\n      greedy: true,\\n      inside: null // see below\\n\\n    },\\n    keyword: [{\\n      // Turbo Pascal\\n      pattern: /(^|[^&])\\\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\\\b/i,\\n      lookbehind: true\\n    }, {\\n      // Free Pascal\\n      pattern: /(^|[^&])\\\\b(?:dispose|exit|false|new|true)\\\\b/i,\\n      lookbehind: true\\n    }, {\\n      // Object Pascal\\n      pattern: /(^|[^&])\\\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\\\b/i,\\n      lookbehind: true\\n    }, {\\n      // Modifiers\\n      pattern: /(^|[^&])\\\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\\\b/i,\\n      lookbehind: true\\n    }],\\n    number: [// Hexadecimal, octal and binary\\n    /(?:[&%]\\\\d+|\\\\$[a-f\\\\d]+)/i, // Decimal\\n    /\\\\b\\\\d+(?:\\\\.\\\\d+)?(?:e[+-]?\\\\d+)?/i],\\n    operator: [/\\\\.\\\\.|\\\\*\\\\*|:=|<[<=>]?|>[>=]?|[+\\\\-*\\\\/]=?|[@^=]/, {\\n      pattern: /(^|[^&])\\\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\\\b/,\\n      lookbehind: true\\n    }],\\n    punctuation: /\\\\(\\\\.|\\\\.\\\\)|[()\\\\[\\\\]:;,.]/\\n  };\\n  Prism.languages.pascal.asm.inside = Prism.languages.extend('pascal', {\\n    asm: undefined,\\n    keyword: undefined,\\n    operator: undefined\\n  });\\n  Prism.languages.objectpascal = Prism.languages.pascal;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"pascal\",\"Prism\",\"languages\",\"directive\",\"pattern\",\"greedy\",\"alias\",\"comment\",\"string\",\"asm\",\"lookbehind\",\"inside\",\"keyword\",\"number\",\"operator\",\"punctuation\",\"extend\",\"undefined\",\"objectpascal\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]