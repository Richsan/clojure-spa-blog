["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-extension-gfm-tagfilter/index.js"],"~:js","shadow$provide.module$node_modules$micromark_extension_gfm_tagfilter$index=function(global,require,module,exports){function exitHtmlData(token,filter){token=this.sliceSerialize(token);this.options.allowDangerousHtml&&(token=token.replace(filter,\"\\x26lt;$1$2\"));this.raw(this.encode(token))}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.gfmTagfilterHtml=void 0;const reFlow=/<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi,reText=new RegExp(\"^\"+\nreFlow.source,\"i\");exports.gfmTagfilterHtml={exit:{htmlFlowData(token){exitHtmlData.call(this,token,reFlow)},htmlTextData(token){exitHtmlData.call(this,token,reText)}}}}","~:source","shadow$provide[\"module$node_modules$micromark_extension_gfm_tagfilter$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gfmTagfilterHtml = void 0;\n\n/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n */\n\n/**\n * An opening or closing tag, followed by a case-insensitive specific tag name,\n * followed by HTML whitespace, a greater than, or a slash.\n */\nconst reFlow = /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi;\n/**\n * As HTML (text) parses tags separately (and v. strictly), we donâ€™t need to be\n * global.\n */\n\nconst reText = new RegExp('^' + reFlow.source, 'i');\n/** @type {HtmlExtension} */\n\nconst gfmTagfilterHtml = {\n  exit: {\n    htmlFlowData(token) {\n      exitHtmlData.call(this, token, reFlow);\n    },\n\n    htmlTextData(token) {\n      exitHtmlData.call(this, token, reText);\n    }\n\n  }\n};\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n */\n\nexports.gfmTagfilterHtml = gfmTagfilterHtml;\n\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token);\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2');\n  }\n\n  this.raw(this.encode(value));\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["gfmTagfilterHtml","__esModule","value","exit"]],"~:compiled-at",1676841365330,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_extension_gfm_tagfilter$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA+CxHC,QAASA,aAAY,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAC/BC,KAAAA,CAAQ,IAAKC,CAAAA,cAAL,CAAoBH,KAApB,CAER,KAAKI,CAAAA,OAAQC,CAAAA,kBAAjB,GACEH,KADF,CACUA,KAAMI,CAAAA,OAAN,CAAcL,MAAd,CAAsB,aAAtB,CADV,CAIA,KAAKM,CAAAA,GAAL,CAAS,IAAKC,CAAAA,MAAL,CAAYN,KAAZ,CAAT,CAPmC,CA5CrCO,MAAOC,CAAAA,cAAP,CAAsBZ,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAQa,CAAAA,gBAAR,CAA2B,IAAK,EAYhC,OAAMC,OAAS,8FAAf,CAMMC,OAAS,IAAIC,MAAJ,CAAW,GAAX;AAAiBF,MAAOG,CAAAA,MAAxB,CAAgC,GAAhC,CAqBfjB,QAAQa,CAAAA,gBAAR,CAlByBA,CACvBK,KAAM,CACJC,YAAY,CAACjB,KAAD,CAAQ,CAClBD,YAAamB,CAAAA,IAAb,CAAkB,IAAlB,CAAwBlB,KAAxB,CAA+BY,MAA/B,CADkB,CADhB,CAKJO,YAAY,CAACnB,KAAD,CAAQ,CAClBD,YAAamB,CAAAA,IAAb,CAAkB,IAAlB,CAAwBlB,KAAxB,CAA+Ba,MAA/B,CADkB,CALhB,CADiBF,CA3B+F;\",\n\"sources\":[\"node_modules/micromark-extension-gfm-tagfilter/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_extension_gfm_tagfilter$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.gfmTagfilterHtml = void 0;\\n\\n/**\\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\\n * @typedef {import('micromark-util-types').Token} Token\\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\\n */\\n\\n/**\\n * An opening or closing tag, followed by a case-insensitive specific tag name,\\n * followed by HTML whitespace, a greater than, or a slash.\\n */\\nconst reFlow = /<(\\\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\\\t\\\\n\\\\f\\\\r />])/gi;\\n/**\\n * As HTML (text) parses tags separately (and v. strictly), we don\\u2019t need to be\\n * global.\\n */\\n\\nconst reText = new RegExp('^' + reFlow.source, 'i');\\n/** @type {HtmlExtension} */\\n\\nconst gfmTagfilterHtml = {\\n  exit: {\\n    htmlFlowData(token) {\\n      exitHtmlData.call(this, token, reFlow);\\n    },\\n\\n    htmlTextData(token) {\\n      exitHtmlData.call(this, token, reText);\\n    }\\n\\n  }\\n};\\n/**\\n * @this {CompileContext}\\n * @param {Token} token\\n * @param {RegExp} filter\\n */\\n\\nexports.gfmTagfilterHtml = gfmTagfilterHtml;\\n\\nfunction exitHtmlData(token, filter) {\\n  let value = this.sliceSerialize(token);\\n\\n  if (this.options.allowDangerousHtml) {\\n    value = value.replace(filter, '&lt;$1$2');\\n  }\\n\\n  this.raw(this.encode(value));\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"exitHtmlData\",\"token\",\"filter\",\"value\",\"sliceSerialize\",\"options\",\"allowDangerousHtml\",\"replace\",\"raw\",\"encode\",\"Object\",\"defineProperty\",\"gfmTagfilterHtml\",\"reFlow\",\"reText\",\"RegExp\",\"source\",\"exit\",\"htmlFlowData\",\"call\",\"htmlTextData\"]\n}\n"]