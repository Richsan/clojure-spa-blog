["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/wren.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$wren=function(global,require,module,exports){function wren(Prism){Prism.languages.wren={comment:[{pattern:/\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//,greedy:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],\"triple-quoted-string\":{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0,alias:\"string\"},\"string-literal\":null,hashbang:{pattern:/^#!\\/.+/,greedy:!0,alias:\"comment\"},attribute:{pattern:/#!?[ \\t\\u3000]*\\w+/,\nalias:\"keyword\"},\"class-name\":[{pattern:/(\\bclass\\s+)\\w+/,lookbehind:!0},/\\b[A-Z][a-z\\d_]*\\b/],constant:/\\b[A-Z][A-Z\\d_]*\\b/,null:{pattern:/\\bnull\\b/,alias:\"keyword\"},keyword:/\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\b/,boolean:/\\b(?:false|true)\\b/,number:/\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,function:/\\b[a-z_]\\w*(?=\\s*[({])/i,operator:/<<|>>|[=!<>]=?|&&|\\|\\||[-+*/%~^&|?:]|\\.{2,3}/,punctuation:/[\\[\\](){}.,;]/};Prism.languages.wren[\"string-literal\"]=\n{pattern:/(^|[^\\\\\"])\"(?:[^\\\\\"%]|\\\\[\\s\\S]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/,lookbehind:!0,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^\\\\])(?:\\\\{2})*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,lookbehind:!0,inside:{expression:{pattern:/^(%\\()[\\s\\S]+(?=\\)$)/,lookbehind:!0,inside:Prism.languages.wren},\"interpolation-punctuation\":{pattern:/^%\\(|\\)$/,alias:\"punctuation\"}}},string:/[\\s\\S]+/}}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=wren;wren.displayName=\n\"wren\";wren.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$wren\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = wren;\n// @ts-nocheck\nwren.displayName = 'wren';\nwren.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction wren(Prism) {\n  // https://wren.io/\n  Prism.languages.wren = {\n    // Multiline comments in Wren can have nested multiline comments\n    // Comments: // and /* */\n    comment: [{\n      // support 3 levels of nesting\n      // regex: \\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\/\n      pattern: /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//,\n      greedy: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    // Triple quoted strings are multiline but cannot have interpolation (raw strings)\n    // Based on prism-python.js\n    'triple-quoted-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    // see below\n    'string-literal': null,\n    // #!/usr/bin/env wren on the first line\n    hashbang: {\n      pattern: /^#!\\/.+/,\n      greedy: true,\n      alias: 'comment'\n    },\n    // Attributes are special keywords to add meta data to classes\n    attribute: {\n      // #! attributes are stored in class properties\n      // #!myvar = true\n      // #attributes are not stored and dismissed at compilation\n      pattern: /#!?[ \\t\\u3000]*\\w+/,\n      alias: 'keyword'\n    },\n    'class-name': [{\n      // class definition\n      // class Meta {}\n      pattern: /(\\bclass\\s+)\\w+/,\n      lookbehind: true\n    }, // A class must always start with an uppercase.\n    // File.read\n    /\\b[A-Z][a-z\\d_]*\\b/],\n    // A constant can be a variable, class, property or method. Just named in all uppercase letters\n    constant: /\\b[A-Z][A-Z\\d_]*\\b/,\n    null: {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    keyword: /\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    // Functions can be Class.method()\n    function: /\\b[a-z_]\\w*(?=\\s*[({])/i,\n    operator: /<<|>>|[=!<>]=?|&&|\\|\\||[-+*/%~^&|?:]|\\.{2,3}/,\n    punctuation: /[\\[\\](){}.,;]/\n  };\n  Prism.languages.wren['string-literal'] = {\n    // A single quote string is multiline and can have interpolation (similar to JS backticks ``)\n    pattern: /(^|[^\\\\\"])\"(?:[^\\\\\"%]|\\\\[\\s\\S]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      interpolation: {\n        // \"%(interpolation)\"\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,\n        lookbehind: true,\n        inside: {\n          expression: {\n            pattern: /^(%\\()[\\s\\S]+(?=\\)$)/,\n            lookbehind: true,\n            inside: Prism.languages.wren\n          },\n          'interpolation-punctuation': {\n            pattern: /^%\\(|\\)$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: /[\\s\\S]+/\n    }\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","punctuation","string","aliases","constant","operator","displayName","null","__esModule","attribute","expression","lookbehind","wren","value","keyword","number","greedy","function","pattern","inside","alias","comment","interpolation","default","hashbang"]],"~:compiled-at",1676841365475,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$wren.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYpGC,QAASA,KAAI,CAACC,KAAD,CAAQ,CAEnBA,KAAMC,CAAAA,SAAUF,CAAAA,IAAhB,CAAuB,CAGrBG,QAAS,CAAC,CAGRC,QAAS,gHAHD,CAIRC,OAAQ,CAAA,CAJA,CAAD,CAKN,CACDD,QAAS,kBADR,CAEDE,WAAY,CAAA,CAFX,CAGDD,OAAQ,CAAA,CAHP,CALM,CAHY,CAerB,uBAAwB,CACtBD,QAAS,gBADa,CAEtBC,OAAQ,CAAA,CAFc,CAGtBE,MAAO,QAHe,CAfH,CAqBrB,iBAAkB,IArBG,CAuBrBC,SAAU,CACRJ,QAAS,SADD,CAERC,OAAQ,CAAA,CAFA,CAGRE,MAAO,SAHC,CAvBW,CA6BrBE,UAAW,CAITL,QAAS,oBAJA;AAKTG,MAAO,SALE,CA7BU,CAoCrB,aAAc,CAAC,CAGbH,QAAS,iBAHI,CAIbE,WAAY,CAAA,CAJC,CAAD,CAOd,oBAPc,CApCO,CA6CrBI,SAAU,oBA7CW,CA8CrBC,KAAM,CACJP,QAAS,UADL,CAEJG,MAAO,SAFH,CA9Ce,CAkDrBK,QAAS,+GAlDY,CAmDrBC,QAAS,oBAnDY,CAoDrBC,OAAQ,iDApDa,CAsDrBC,SAAU,yBAtDW,CAuDrBC,SAAU,8CAvDW,CAwDrBC,YAAa,eAxDQ,CA0DvBhB,MAAMC,CAAAA,SAAUF,CAAAA,IAAhB,CAAqB,gBAArB,CAAA;AAAyC,CAEvCI,QAAS,oFAF8B,CAGvCE,WAAY,CAAA,CAH2B,CAIvCD,OAAQ,CAAA,CAJ+B,CAKvCa,OAAQ,CACNC,cAAe,CAEbf,QAAS,iEAFI,CAGbE,WAAY,CAAA,CAHC,CAIbY,OAAQ,CACNE,WAAY,CACVhB,QAAS,sBADC,CAEVE,WAAY,CAAA,CAFF,CAGVY,OAAQjB,KAAMC,CAAAA,SAAUF,CAAAA,IAHd,CADN,CAMN,4BAA6B,CAC3BI,QAAS,UADkB,CAE3BG,MAAO,aAFoB,CANvB,CAJK,CADT,CAiBNc,OAAQ,SAjBF,CAL+B,CA5DtB,CATrBC,MAAOC,CAAAA,cAAP,CAAsBxB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CyB,MAAO,CAAA,CADoC,CAA7C,CAGAzB,QAAQ0B,CAAAA,OAAR,CAAkBzB,IAElBA,KAAK0B,CAAAA,WAAL;AAAmB,MACnB1B,KAAK2B,CAAAA,OAAL,CAAe,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/wren.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$wren\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = wren;\\n// @ts-nocheck\\nwren.displayName = 'wren';\\nwren.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction wren(Prism) {\\n  // https://wren.io/\\n  Prism.languages.wren = {\\n    // Multiline comments in Wren can have nested multiline comments\\n    // Comments: // and /* */\\n    comment: [{\\n      // support 3 levels of nesting\\n      // regex: \\\\/\\\\*(?:[^*/]|\\\\*(?!\\\\/)|\\\\/(?!\\\\*)|<self>)*\\\\*\\\\/\\n      pattern: /\\\\/\\\\*(?:[^*/]|\\\\*(?!\\\\/)|\\\\/(?!\\\\*)|\\\\/\\\\*(?:[^*/]|\\\\*(?!\\\\/)|\\\\/(?!\\\\*)|\\\\/\\\\*(?:[^*/]|\\\\*(?!\\\\/)|\\\\/(?!\\\\*))*\\\\*\\\\/)*\\\\*\\\\/)*\\\\*\\\\//,\\n      greedy: true\\n    }, {\\n      pattern: /(^|[^\\\\\\\\:])\\\\/\\\\/.*/,\\n      lookbehind: true,\\n      greedy: true\\n    }],\\n    // Triple quoted strings are multiline but cannot have interpolation (raw strings)\\n    // Based on prism-python.js\\n    'triple-quoted-string': {\\n      pattern: /\\\"\\\"\\\"[\\\\s\\\\S]*?\\\"\\\"\\\"/,\\n      greedy: true,\\n      alias: 'string'\\n    },\\n    // see below\\n    'string-literal': null,\\n    // #!/usr/bin/env wren on the first line\\n    hashbang: {\\n      pattern: /^#!\\\\/.+/,\\n      greedy: true,\\n      alias: 'comment'\\n    },\\n    // Attributes are special keywords to add meta data to classes\\n    attribute: {\\n      // #! attributes are stored in class properties\\n      // #!myvar = true\\n      // #attributes are not stored and dismissed at compilation\\n      pattern: /#!?[ \\\\t\\\\u3000]*\\\\w+/,\\n      alias: 'keyword'\\n    },\\n    'class-name': [{\\n      // class definition\\n      // class Meta {}\\n      pattern: /(\\\\bclass\\\\s+)\\\\w+/,\\n      lookbehind: true\\n    }, // A class must always start with an uppercase.\\n    // File.read\\n    /\\\\b[A-Z][a-z\\\\d_]*\\\\b/],\\n    // A constant can be a variable, class, property or method. Just named in all uppercase letters\\n    constant: /\\\\b[A-Z][A-Z\\\\d_]*\\\\b/,\\n    null: {\\n      pattern: /\\\\bnull\\\\b/,\\n      alias: 'keyword'\\n    },\\n    keyword: /\\\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\\\b/,\\n    boolean: /\\\\b(?:false|true)\\\\b/,\\n    number: /\\\\b(?:0x[\\\\da-f]+|\\\\d+(?:\\\\.\\\\d+)?(?:e[+-]?\\\\d+)?)\\\\b/i,\\n    // Functions can be Class.method()\\n    function: /\\\\b[a-z_]\\\\w*(?=\\\\s*[({])/i,\\n    operator: /<<|>>|[=!<>]=?|&&|\\\\|\\\\||[-+*/%~^&|?:]|\\\\.{2,3}/,\\n    punctuation: /[\\\\[\\\\](){}.,;]/\\n  };\\n  Prism.languages.wren['string-literal'] = {\\n    // A single quote string is multiline and can have interpolation (similar to JS backticks ``)\\n    pattern: /(^|[^\\\\\\\\\\\"])\\\"(?:[^\\\\\\\\\\\"%]|\\\\\\\\[\\\\s\\\\S]|%(?!\\\\()|%\\\\((?:[^()]|\\\\((?:[^()]|\\\\([^)]*\\\\))*\\\\))*\\\\))*\\\"/,\\n    lookbehind: true,\\n    greedy: true,\\n    inside: {\\n      interpolation: {\\n        // \\\"%(interpolation)\\\"\\n        pattern: /((?:^|[^\\\\\\\\])(?:\\\\\\\\{2})*)%\\\\((?:[^()]|\\\\((?:[^()]|\\\\([^)]*\\\\))*\\\\))*\\\\)/,\\n        lookbehind: true,\\n        inside: {\\n          expression: {\\n            pattern: /^(%\\\\()[\\\\s\\\\S]+(?=\\\\)$)/,\\n            lookbehind: true,\\n            inside: Prism.languages.wren\\n          },\\n          'interpolation-punctuation': {\\n            pattern: /^%\\\\(|\\\\)$/,\\n            alias: 'punctuation'\\n          }\\n        }\\n      },\\n      string: /[\\\\s\\\\S]+/\\n    }\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"wren\",\"Prism\",\"languages\",\"comment\",\"pattern\",\"greedy\",\"lookbehind\",\"alias\",\"hashbang\",\"attribute\",\"constant\",\"null\",\"keyword\",\"boolean\",\"number\",\"function\",\"operator\",\"punctuation\",\"inside\",\"interpolation\",\"expression\",\"string\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]