["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/openqasm.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$openqasm=function(global,require,module,exports){function openqasm(Prism){Prism.languages.openqasm={comment:/\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,string:{pattern:/\"[^\"\\r\\n\\t]*\"|'[^'\\r\\n\\t]*'/,greedy:!0},keyword:/\\b(?:CX|OPENQASM|U|barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while)\\b|#pragma\\b/,\"class-name\":/\\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\\b/,\nfunction:/\\b(?:cos|exp|ln|popcount|rotl|rotr|sin|sqrt|tan)\\b(?=\\s*\\()/,constant:/\\b(?:euler|pi|tau)\\b|π|\\ud835\\udf0f|ℇ/,number:{pattern:/(^|[^.\\w$])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?(?:dt|ns|us|µs|ms|s)?/i,lookbehind:!0},operator:/->|>>=?|<<=?|&&|\\|\\||\\+\\+|--|[!=<>&|~^+\\-*/%]=?|@/,punctuation:/[(){}\\[\\];,:.]/};Prism.languages.qasm=Prism.languages.openqasm}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=openqasm;openqasm.displayName=\"openqasm\";openqasm.aliases=[\"qasm\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$openqasm\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = openqasm;\n// @ts-nocheck\nopenqasm.displayName = 'openqasm';\nopenqasm.aliases = ['qasm'];\n/** @type {import('../core.js').Syntax} */\n\nfunction openqasm(Prism) {\n  // https://qiskit.github.io/openqasm/grammar/index.html\n  Prism.languages.openqasm = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,\n    string: {\n      pattern: /\"[^\"\\r\\n\\t]*\"|'[^'\\r\\n\\t]*'/,\n      greedy: true\n    },\n    keyword: /\\b(?:CX|OPENQASM|U|barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while)\\b|#pragma\\b/,\n    'class-name': /\\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\\b/,\n    function: /\\b(?:cos|exp|ln|popcount|rotl|rotr|sin|sqrt|tan)\\b(?=\\s*\\()/,\n    constant: /\\b(?:euler|pi|tau)\\b|π|\uD835\uDF0F|ℇ/,\n    number: {\n      pattern: /(^|[^.\\w$])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?(?:dt|ns|us|µs|ms|s)?/i,\n      lookbehind: true\n    },\n    operator: /->|>>=?|<<=?|&&|\\|\\||\\+\\+|--|[!=<>&|~^+\\-*/%]=?|@/,\n    punctuation: /[(){}\\[\\];,:.]/\n  };\n  Prism.languages.qasm = Prism.languages.openqasm;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["punctuation","string","aliases","constant","operator","displayName","__esModule","lookbehind","value","keyword","number","greedy","function","pattern","qasm","comment","openqasm","default"]],"~:compiled-at",1676841365443,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$openqasm.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,2CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYxGC,QAASA,SAAQ,CAACC,KAAD,CAAQ,CAEvBA,KAAMC,CAAAA,SAAUF,CAAAA,QAAhB,CAA2B,CACzBG,QAAS,yBADgB,CAEzBC,OAAQ,CACNC,QAAS,6BADH,CAENC,OAAQ,CAAA,CAFF,CAFiB,CAMzBC,QAAS,8NANgB,CAOzB,aAAc,4EAPW;AAQzBC,SAAU,6DARe,CASzBC,SAAU,uCATe,CAUzBC,OAAQ,CACNL,QAAS,wEADH,CAENM,WAAY,CAAA,CAFN,CAViB,CAczBC,SAAU,mDAde,CAezBC,YAAa,gBAfY,CAiB3BZ,MAAMC,CAAAA,SAAUY,CAAAA,IAAhB,CAAuBb,KAAMC,CAAAA,SAAUF,CAAAA,QAnBhB,CATzBe,MAAOC,CAAAA,cAAP,CAAsBjB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CkB,MAAO,CAAA,CADoC,CAA7C,CAGAlB,QAAQmB,CAAAA,OAAR,CAAkBlB,QAElBA,SAASmB,CAAAA,WAAT,CAAuB,UACvBnB,SAASoB,CAAAA,OAAT,CAAmB,CAAC,MAAD,CATqF;\",\n\"sources\":[\"node_modules/refractor/lang/openqasm.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$openqasm\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = openqasm;\\n// @ts-nocheck\\nopenqasm.displayName = 'openqasm';\\nopenqasm.aliases = ['qasm'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction openqasm(Prism) {\\n  // https://qiskit.github.io/openqasm/grammar/index.html\\n  Prism.languages.openqasm = {\\n    comment: /\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/|\\\\/\\\\/.*/,\\n    string: {\\n      pattern: /\\\"[^\\\"\\\\r\\\\n\\\\t]*\\\"|'[^'\\\\r\\\\n\\\\t]*'/,\\n      greedy: true\\n    },\\n    keyword: /\\\\b(?:CX|OPENQASM|U|barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while)\\\\b|#pragma\\\\b/,\\n    'class-name': /\\\\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\\\\b/,\\n    function: /\\\\b(?:cos|exp|ln|popcount|rotl|rotr|sin|sqrt|tan)\\\\b(?=\\\\s*\\\\()/,\\n    constant: /\\\\b(?:euler|pi|tau)\\\\b|\\u03c0|\\ud835\\udf0f|\\u2107/,\\n    number: {\\n      pattern: /(^|[^.\\\\w$])(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?(?:dt|ns|us|\\u00b5s|ms|s)?/i,\\n      lookbehind: true\\n    },\\n    operator: /->|>>=?|<<=?|&&|\\\\|\\\\||\\\\+\\\\+|--|[!=<>&|~^+\\\\-*/%]=?|@/,\\n    punctuation: /[(){}\\\\[\\\\];,:.]/\\n  };\\n  Prism.languages.qasm = Prism.languages.openqasm;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"openqasm\",\"Prism\",\"languages\",\"comment\",\"string\",\"pattern\",\"greedy\",\"keyword\",\"function\",\"constant\",\"number\",\"lookbehind\",\"operator\",\"punctuation\",\"qasm\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]