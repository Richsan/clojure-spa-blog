["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-factory-space/index.js"],"~:js","shadow$provide.module$node_modules$micromark_factory_space$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.factorySpace=function(effects,ok,type,max){function prefix(code){if((0,_micromarkUtilCharacter.markdownSpace)(code)&&size++<limit)return effects.consume(code),prefix;effects.exit(type);return ok(code)}const limit=max?max-1:Number.POSITIVE_INFINITY;let size=0;return function(code){return(0,_micromarkUtilCharacter.markdownSpace)(code)?\n(effects.enter(type),prefix(code)):ok(code)}};var _micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\")}","~:source","shadow$provide[\"module$node_modules$micromark_factory_space$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.factorySpace = factorySpace;\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\nfunction factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n\n    return ok(code);\n  }\n  /** @type {State} */\n\n\n  function prefix(code) {\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n\n    effects.exit(type);\n    return ok(code);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js"]],"~:properties",["^5",["__esModule","value","factorySpace"]],"~:compiled-at",1676665867259,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_factory_space$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAgBAA,QAAqB,CAACC,OAAD,CAAUC,EAAV,CAAcC,IAAd,CAAoBC,GAApB,CAAyB,CAiB5CC,QAASA,OAAM,CAACC,IAAD,CAAO,CACpB,GAAI,GAAIC,uBAAwBC,CAAAA,aAA5B,EAA2CF,IAA3C,CAAJ,EAAwDG,IAAA,EAAxD,CAAiEC,KAAjE,CAEE,MADAT,QAAQU,CAAAA,OAAR,CAAgBL,IAAhB,CACOD,CAAAA,MAGTJ,QAAQW,CAAAA,IAAR,CAAaT,IAAb,CACA,OAAOD,GAAA,CAAGI,IAAH,CAPa,CAhBtB,MAAMI,MAAQN,GAAA,CAAMA,GAAN,CAAY,CAAZ,CAAgBS,MAAOC,CAAAA,iBACrC,KAAIL,KAAO,CACX,OAGAM,SAAc,CAACT,IAAD,CAAO,CACnB,MAAI,GAAIC,uBAAwBC,CAAAA,aAA5B,EAA2CF,IAA3C,CAAJ;CACEL,OAAQe,CAAAA,KAAR,CAAcb,IAAd,CACO,CAAAE,MAAA,CAAOC,IAAP,CAFT,EAKOJ,EAAA,CAAGI,IAAH,CANY,CANuB,CAd9C,KAAIC,wBAA0Bb,OAAA,CAAQ,oDAAR,CARgF;\",\n\"sources\":[\"node_modules/micromark-factory-space/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_factory_space$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.factorySpace = factorySpace;\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Effects} Effects\\n * @typedef {import('micromark-util-types').State} State\\n */\\n\\n/**\\n * @param {Effects} effects\\n * @param {State} ok\\n * @param {string} type\\n * @param {number} [max=Infinity]\\n * @returns {State}\\n */\\nfunction factorySpace(effects, ok, type, max) {\\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\\n  let size = 0;\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\\n      effects.enter(type);\\n      return prefix(code);\\n    }\\n\\n    return ok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function prefix(code) {\\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code) && size++ < limit) {\\n      effects.consume(code);\\n      return prefix;\\n    }\\n\\n    effects.exit(type);\\n    return ok(code);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"factorySpace\",\"effects\",\"ok\",\"type\",\"max\",\"prefix\",\"code\",\"_micromarkUtilCharacter\",\"markdownSpace\",\"size\",\"limit\",\"consume\",\"exit\",\"Number\",\"POSITIVE_INFINITY\",\"start\",\"enter\"]\n}\n"]