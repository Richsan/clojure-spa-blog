["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/prolog.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$prolog=function(global,require,module,exports){function prolog(Prism){Prism.languages.prolog={comment:{pattern:/\\/\\*[\\s\\S]*?\\*\\/|%.*/,greedy:!0},string:{pattern:/([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1(?!\\1)/,greedy:!0},builtin:/\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,function:/\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,number:/\\b\\d+(?:\\.\\d*)?/,operator:/[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,punctuation:/[(){}\\[\\],]/}}Object.defineProperty(exports,\"__esModule\",\n{value:!0});exports.default=prolog;prolog.displayName=\"prolog\";prolog.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$prolog\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = prolog;\n// @ts-nocheck\nprolog.displayName = 'prolog';\nprolog.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction prolog(Prism) {\n  Prism.languages.prolog = {\n    // Syntax depends on the implementation\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n      greedy: true\n    },\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\n    string: {\n      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1(?!\\1)/,\n      greedy: true\n    },\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n    number: /\\b\\d+(?:\\.\\d*)?/,\n    // Custom operators are allowed\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n    punctuation: /[(){}\\[\\],]/\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["punctuation","string","aliases","operator","displayName","__esModule","prolog","value","number","greedy","function","pattern","comment","builtin","default"]],"~:compiled-at",1676841365447,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$prolog.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYtGC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAMC,CAAAA,SAAUF,CAAAA,MAAhB,CAAyB,CAEvBG,QAAS,CACPC,QAAS,sBADF,CAEPC,OAAQ,CAAA,CAFD,CAFc,CAOvBC,OAAQ,CACNF,QAAS,2DADH,CAENC,OAAQ,CAAA,CAFF,CAPe,CAWvBE,QAAS,4BAXc,CAavBC,SAAU,4BAba,CAcvBC,OAAQ,iBAde,CAgBvBC,SAAU,gDAhBa,CAiBvBC,YAAa,aAjBU,CADJ,CATvBC,MAAOC,CAAAA,cAAP,CAAsBd,OAAtB,CAA+B,YAA/B;AAA6C,CAC3Ce,MAAO,CAAA,CADoC,CAA7C,CAGAf,QAAQgB,CAAAA,OAAR,CAAkBf,MAElBA,OAAOgB,CAAAA,WAAP,CAAqB,QACrBhB,OAAOiB,CAAAA,OAAP,CAAiB,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/prolog.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$prolog\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = prolog;\\n// @ts-nocheck\\nprolog.displayName = 'prolog';\\nprolog.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction prolog(Prism) {\\n  Prism.languages.prolog = {\\n    // Syntax depends on the implementation\\n    comment: {\\n      pattern: /\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/|%.*/,\\n      greedy: true\\n    },\\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\\n    string: {\\n      pattern: /([\\\"'])(?:\\\\1\\\\1|\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1(?!\\\\1)/,\\n      greedy: true\\n    },\\n    builtin: /\\\\b(?:fx|fy|xf[xy]?|yfx?)\\\\b/,\\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\\n    function: /\\\\b[a-z]\\\\w*(?:(?=\\\\()|\\\\/\\\\d+)/,\\n    number: /\\\\b\\\\d+(?:\\\\.\\\\d*)?/,\\n    // Custom operators are allowed\\n    operator: /[:\\\\\\\\=><\\\\-?*@\\\\/;+^|!$.]+|\\\\b(?:is|mod|not|xor)\\\\b/,\\n    punctuation: /[(){}\\\\[\\\\],]/\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"prolog\",\"Prism\",\"languages\",\"comment\",\"pattern\",\"greedy\",\"string\",\"builtin\",\"function\",\"number\",\"operator\",\"punctuation\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]