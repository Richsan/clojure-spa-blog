["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/remark-gfm/index.js"],"~:js","shadow$provide.module$node_modules$remark_gfm$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(options={}){function add(field,value){(data[field]?data[field]:data[field]=[]).push(value)}const data=this.data();add(\"micromarkExtensions\",(0,_micromarkExtensionGfm.gfm)(options));add(\"fromMarkdownExtensions\",(0,_mdastUtilGfm.gfmFromMarkdown)());add(\"toMarkdownExtensions\",(0,_mdastUtilGfm.gfmToMarkdown)(options))};var _micromarkExtensionGfm=\nrequire(\"module$node_modules$micromark_extension_gfm$index\"),_mdastUtilGfm=require(\"module$node_modules$mdast_util_gfm$index\")}","~:source","shadow$provide[\"module$node_modules$remark_gfm$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = remarkGfm;\n\nvar _micromarkExtensionGfm = require(\"micromark-extension-gfm\");\n\nvar _mdastUtilGfm = require(\"mdast-util-gfm\");\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nfunction remarkGfm(options = {}) {\n  const data = this.data();\n  add('micromarkExtensions', (0, _micromarkExtensionGfm.gfm)(options));\n  add('fromMarkdownExtensions', (0, _mdastUtilGfm.gfmFromMarkdown)());\n  add('toMarkdownExtensions', (0, _mdastUtilGfm.gfmToMarkdown)(options));\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n\n  function add(field, value) {\n    const list = // Other extensions\n\n    /* c8 ignore next 2 */\n    data[field] ? data[field] : data[field] = [];\n    list.push(value);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_extension_gfm$index","~$shadow.js","~$module$node_modules$mdast_util_gfm$index"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1676841365345,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$remark_gfm$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAgBAC,QAAkB,CAACC,OAAA,CAAU,EAAX,CAAe,CAU/BC,QAASA,IAAG,CAACC,KAAD,CAAQL,KAAR,CAAe,CAKpBM,CADLC,IAAA,CAAKF,KAAL,CAAAG,CAAcD,IAAA,CAAKF,KAAL,CAAdG,CAA4BD,IAAA,CAAKF,KAAL,CAA5BG,CAA0C,EACrCF,EAAAA,IAAL,CAAUN,KAAV,CALyB,CAT3B,MAAMO,KAAO,IAAKA,CAAAA,IAAL,EACbH,IAAA,CAAI,qBAAJ,CAA2B,GAAIK,sBAAuBC,CAAAA,GAA3B,EAAgCP,OAAhC,CAA3B,CACAC,IAAA,CAAI,wBAAJ,CAA8B,GAAIO,aAAcC,CAAAA,eAAlB,GAA9B,CACAR,IAAA,CAAI,sBAAJ,CAA4B,GAAIO,aAAcE,CAAAA,aAAlB,EAAiCV,OAAjC,CAA5B,CAJ+B,CAdjC,KAAIM;AAAyBd,OAAA,CAAQ,mDAAR,CAA7B,CAEIgB,cAAgBhB,OAAA,CAAQ,0CAAR,CAV6E;\",\n\"sources\":[\"node_modules/remark-gfm/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$remark_gfm$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = remarkGfm;\\n\\nvar _micromarkExtensionGfm = require(\\\"micromark-extension-gfm\\\");\\n\\nvar _mdastUtilGfm = require(\\\"mdast-util-gfm\\\");\\n\\n/**\\n * @typedef {import('mdast').Root} Root\\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\\n */\\n\\n/**\\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\\n *\\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\\n */\\nfunction remarkGfm(options = {}) {\\n  const data = this.data();\\n  add('micromarkExtensions', (0, _micromarkExtensionGfm.gfm)(options));\\n  add('fromMarkdownExtensions', (0, _mdastUtilGfm.gfmFromMarkdown)());\\n  add('toMarkdownExtensions', (0, _mdastUtilGfm.gfmToMarkdown)(options));\\n  /**\\n   * @param {string} field\\n   * @param {unknown} value\\n   */\\n\\n  function add(field, value) {\\n    const list = // Other extensions\\n\\n    /* c8 ignore next 2 */\\n    data[field] ? data[field] : data[field] = [];\\n    list.push(value);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"remarkGfm\",\"options\",\"add\",\"field\",\"push\",\"data\",\"list\",\"_micromarkExtensionGfm\",\"gfm\",\"_mdastUtilGfm\",\"gfmFromMarkdown\",\"gfmToMarkdown\"]\n}\n"]