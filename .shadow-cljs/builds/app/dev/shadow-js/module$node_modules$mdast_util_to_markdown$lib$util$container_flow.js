["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-markdown/lib/util/container-flow.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_markdown$lib$util$container_flow=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.containerFlow=function(parent$jscomp$0,state,info){const indexStack=state.indexStack,children=parent$jscomp$0.children||[];info=state.createTracker(info);const results=[];let index$jscomp$0=-1;for(indexStack.push(-1);++index$jscomp$0<children.length;){var child=children[index$jscomp$0];indexStack[indexStack.length-\n1]=index$jscomp$0;results.push(info.move(state.handle(child,parent$jscomp$0,state,{before:\"\\n\",after:\"\\n\",...info.current()})));\"list\"!==child.type&&(state.bulletLastUsed=void 0);if(index$jscomp$0<children.length-1){var JSCompiler_temp_const=results,JSCompiler_temp_const$jscomp$0=JSCompiler_temp_const.push,JSCompiler_temp_const$jscomp$1=info,JSCompiler_temp_const$jscomp$2=JSCompiler_temp_const$jscomp$1.move;a:{var right=children[index$jscomp$0+1],parent=parent$jscomp$0,state$jscomp$0=state;let index=\nstate$jscomp$0.join.length;for(;index--;){const result=state$jscomp$0.join[index](child,right,parent,state$jscomp$0);if(!0===result||1===result)break;if(\"number\"===typeof result){child=\"\\n\".repeat(1+result);break a}if(!1===result){child=\"\\n\\n\\x3c!----\\x3e\\n\\n\";break a}}child=\"\\n\\n\"}JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,JSCompiler_temp_const$jscomp$2.call(JSCompiler_temp_const$jscomp$1,child))}}indexStack.pop();return results.join(\"\")}}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_markdown$lib$util$container_flow\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.containerFlow = containerFlow;\n\n/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlow(parent, state, info) {\n  const indexStack = state.indexStack;\n  const children = parent.children || [];\n  const tracker = state.createTracker(info);\n  /** @type {Array<string>} */\n\n  const results = [];\n  let index = -1;\n  indexStack.push(-1);\n\n  while (++index < children.length) {\n    const child = children[index];\n    indexStack[indexStack.length - 1] = index;\n    results.push(tracker.move(state.handle(child, parent, state, {\n      before: '\\n',\n      after: '\\n',\n      ...tracker.current()\n    })));\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined;\n    }\n\n    if (index < children.length - 1) {\n      results.push(tracker.move(between(child, children[index + 1], parent, state)));\n    }\n  }\n\n  indexStack.pop();\n  return results.join('');\n}\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\n\n\nfunction between(left, right, parent, state) {\n  let index = state.join.length;\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state);\n\n    if (result === true || result === 1) {\n      break;\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result);\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n';\n    }\n  }\n\n  return '\\n\\n';\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["after","containerFlow","__esModule","value","bulletLastUsed","before"]],"~:compiled-at",1676841365337,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_markdown$lib$util$container_flow.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,kEAAA,CAAuF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAoBAA,QAAsB,CAACC,eAAD,CAASC,KAAT,CAAgBC,IAAhB,CAAsB,CAC1C,MAAMC,WAAaF,KAAME,CAAAA,UAAzB,CACMC,SAAWJ,eAAOI,CAAAA,QAAlBA,EAA8B,EAC9BC,KAAAA,CAAUJ,KAAMK,CAAAA,aAAN,CAAoBJ,IAApB,CAGhB,OAAMK,QAAU,EAChB,KAAIC,eAAQ,CAAC,CAGb,KAFAL,UAAWM,CAAAA,IAAX,CAAgB,CAAC,CAAjB,CAEA,CAAO,EAAED,cAAT,CAAiBJ,QAASM,CAAAA,MAA1B,CAAA,CAAkC,CAChC,IAAMC,MAAQP,QAAA,CAASI,cAAT,CACdL,WAAA,CAAWA,UAAWO,CAAAA,MAAtB;AAA+B,CAA/B,CAAA,CAAoCF,cACpCD,QAAQE,CAAAA,IAAR,CAAaJ,IAAQO,CAAAA,IAAR,CAAaX,KAAMY,CAAAA,MAAN,CAAaF,KAAb,CAAoBX,eAApB,CAA4BC,KAA5B,CAAmC,CAC3Da,OAAQ,IADmD,CAE3DC,MAAO,IAFoD,CAG3D,GAAGV,IAAQW,CAAAA,OAAR,EAHwD,CAAnC,CAAb,CAAb,CAMmB,OAAnB,GAAIL,KAAMM,CAAAA,IAAV,GACEhB,KAAMiB,CAAAA,cADR,CACyBC,IAAAA,EADzB,CAIA,IAAIX,cAAJ,CAAYJ,QAASM,CAAAA,MAArB,CAA8B,CAA9B,CAAiC,CAC/BH,IAAAA,sBAAAA,OAAAA,CAAQE,+BAARF,qBAAQE,CAAAA,IAARF,CAAaF,+BAAAA,IAAbE,CAAqBK,+BAARP,8BAAQO,CAAAA,IAgBkB,EAAA,CAAA,CAhBE,IAAA,MAAAR,QAAA,CAASI,cAAT,CAAiB,CAAjB,CAAA,CAAqBR,OAAAA,eAArB,CAA6BC,eAAAA,KAiB1E,KAAIO;AAAQP,cAAMmB,CAAAA,IAAKV,CAAAA,MAEvB,KAAA,CAAOF,KAAA,EAAP,CAAA,CAAgB,CACd,MAAMa,OAASpB,cAAMmB,CAAAA,IAAN,CAAWZ,KAAX,CAAA,CAAkBc,KAAlB,CAAwBC,KAAxB,CAA+BvB,MAA/B,CAAuCC,cAAvC,CAEf,IAAe,CAAA,CAAf,GAAIoB,MAAJ,EAAkC,CAAlC,GAAuBA,MAAvB,CACE,KAGF,IAAsB,QAAtB,GAAI,MAAOA,OAAX,CAAgC,CAC9B,KAAA,CAAO,IAAKG,CAAAA,MAAL,CAAY,CAAZ,CAAgBH,MAAhB,CAAP,OAAA,CAD8B,CAIhC,GAAe,CAAA,CAAf,GAAIA,MAAJ,CAAsB,CACpB,KAAA,CAAO,uBAAP,OAAA,CADoB,CAXR,CAgBhB,KAAA,CAAO,MAnBoC,CAhB/BZ,8BAAR,CAAA,IAAA,CAAAF,qBAAA,CAAqBK,8BAAR,CAAA,IAAA,CAAAP,8BAAA,CAAa,KAAb,CAAb,CAD+B,CAbD,CAkBlCF,UAAWsB,CAAAA,GAAX,EACA,OAAOlB,QAAQa,CAAAA,IAAR,CAAa,EAAb,CA7BmC,CA1BmF;\",\n\"sources\":[\"node_modules/mdast-util-to-markdown/lib/util/container-flow.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_markdown$lib$util$container_flow\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.containerFlow = containerFlow;\\n\\n/**\\n * @typedef {import('../types.js').FlowContent} FlowContent\\n * @typedef {import('../types.js').Node} Node\\n * @typedef {import('../types.js').Parent} Parent\\n * @typedef {import('../types.js').State} State\\n * @typedef {import('../types.js').TrackFields} TrackFields\\n */\\n\\n/**\\n * @param {Parent & {children: Array<FlowContent>}} parent\\n *   Parent of flow nodes.\\n * @param {State} state\\n *   Info passed around about the current state.\\n * @param {TrackFields} info\\n *   Info on where we are in the document we are generating.\\n * @returns {string}\\n *   Serialized children, joined by (blank) lines.\\n */\\nfunction containerFlow(parent, state, info) {\\n  const indexStack = state.indexStack;\\n  const children = parent.children || [];\\n  const tracker = state.createTracker(info);\\n  /** @type {Array<string>} */\\n\\n  const results = [];\\n  let index = -1;\\n  indexStack.push(-1);\\n\\n  while (++index < children.length) {\\n    const child = children[index];\\n    indexStack[indexStack.length - 1] = index;\\n    results.push(tracker.move(state.handle(child, parent, state, {\\n      before: '\\\\n',\\n      after: '\\\\n',\\n      ...tracker.current()\\n    })));\\n\\n    if (child.type !== 'list') {\\n      state.bulletLastUsed = undefined;\\n    }\\n\\n    if (index < children.length - 1) {\\n      results.push(tracker.move(between(child, children[index + 1], parent, state)));\\n    }\\n  }\\n\\n  indexStack.pop();\\n  return results.join('');\\n}\\n/**\\n * @param {Node} left\\n * @param {Node} right\\n * @param {Parent} parent\\n * @param {State} state\\n * @returns {string}\\n */\\n\\n\\nfunction between(left, right, parent, state) {\\n  let index = state.join.length;\\n\\n  while (index--) {\\n    const result = state.join[index](left, right, parent, state);\\n\\n    if (result === true || result === 1) {\\n      break;\\n    }\\n\\n    if (typeof result === 'number') {\\n      return '\\\\n'.repeat(1 + result);\\n    }\\n\\n    if (result === false) {\\n      return '\\\\n\\\\n\\u003c!----\\u003e\\\\n\\\\n';\\n    }\\n  }\\n\\n  return '\\\\n\\\\n';\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"containerFlow\",\"parent\",\"state\",\"info\",\"indexStack\",\"children\",\"tracker\",\"createTracker\",\"results\",\"index\",\"push\",\"length\",\"child\",\"move\",\"handle\",\"before\",\"after\",\"current\",\"type\",\"bulletLastUsed\",\"undefined\",\"join\",\"result\",\"left\",\"right\",\"repeat\",\"pop\"]\n}\n"]