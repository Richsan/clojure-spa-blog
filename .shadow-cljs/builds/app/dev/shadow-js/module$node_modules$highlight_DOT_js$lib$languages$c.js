["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/c.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$c=function(global,require,module,exports){module.exports=function(hljs){var regex=hljs.regex,C_LINE_COMMENT_MODE=hljs.COMMENT(\"//\",\"$\",{contains:[{begin:/\\\\\\n/}]});const FUNCTION_TYPE_RE=\"(decltype\\\\(auto\\\\)|\"+regex.optional(\"[a-zA-Z_]\\\\w*::\")+\"[a-zA-Z_]\\\\w*\"+regex.optional(\"\\x3c[^\\x3c\\x3e]+\\x3e\")+\")\",TYPES={className:\"type\",variants:[{begin:\"\\\\b[a-z\\\\d_]*_t\\\\b\"},{match:/\\batomic_[a-z]{3,6}\\b/}]},STRINGS={className:\"string\",variants:[{begin:'(u8?|U|L)?\"',\nend:'\"',illegal:\"\\\\n\",contains:[hljs.BACKSLASH_ESCAPE]},{begin:\"(u8?|U|L)?'(\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)|.)\",end:\"'\",illegal:\".\"},hljs.END_SAME_AS_BEGIN({begin:/(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,end:/\\)([^()\\\\ ]{0,16})\"/})]},NUMBERS={className:\"number\",variants:[{begin:\"\\\\b(0b[01']+)\"},{begin:\"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)\"},{begin:\"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"}],\nrelevance:0},PREPROCESSOR={className:\"meta\",begin:/#\\s*[a-z]+\\b/,end:/$/,keywords:{keyword:\"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include\"},contains:[{begin:/\\\\\\n/,relevance:0},hljs.inherit(STRINGS,{className:\"string\"}),{className:\"string\",begin:/<.*?>/},C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE]},TITLE_MODE={className:\"title\",begin:regex.optional(\"[a-zA-Z_]\\\\w*::\")+hljs.IDENT_RE,relevance:0},FUNCTION_TITLE=regex.optional(\"[a-zA-Z_]\\\\w*::\")+hljs.IDENT_RE+\n\"\\\\s*\\\\(\";regex={keyword:\"asm auto break case continue default do else enum extern for fortran goto if inline register restrict return sizeof struct switch typedef union volatile while _Alignas _Alignof _Atomic _Generic _Noreturn _Static_assert _Thread_local alignas alignof noreturn static_assert thread_local _Pragma\".split(\" \"),type:\"float double signed unsigned int short long char void _Bool _Complex _Imaginary _Decimal32 _Decimal64 _Decimal128 const static complex bool imaginary\".split(\" \"),literal:\"true false NULL\",\nbuilt_in:\"std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr\"};\nconst EXPRESSION_CONTAINS=[PREPROCESSOR,TYPES,C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,NUMBERS,STRINGS],EXPRESSION_CONTEXT={variants:[{begin:/=/,end:/;/},{begin:/\\(/,end:/\\)/},{beginKeywords:\"new throw return else\",end:/;/}],keywords:regex,contains:EXPRESSION_CONTAINS.concat([{begin:/\\(/,end:/\\)/,keywords:regex,contains:EXPRESSION_CONTAINS.concat([\"self\"]),relevance:0}]),relevance:0};C_LINE_COMMENT_MODE={begin:\"(\"+FUNCTION_TYPE_RE+\"[\\\\*\\x26\\\\s]+)+\"+FUNCTION_TITLE,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,\nkeywords:regex,illegal:/[^\\w\\s\\*&:<>.]/,contains:[{begin:\"decltype\\\\(auto\\\\)\",keywords:regex,relevance:0},{begin:FUNCTION_TITLE,returnBegin:!0,contains:[hljs.inherit(TITLE_MODE,{className:\"title.function\"})],relevance:0},{relevance:0,match:/,/},{className:\"params\",begin:/\\(/,end:/\\)/,keywords:regex,relevance:0,contains:[C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,STRINGS,NUMBERS,TYPES,{begin:/\\(/,end:/\\)/,keywords:regex,relevance:0,contains:[\"self\",C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,\nSTRINGS,NUMBERS,TYPES]}]},TYPES,C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,PREPROCESSOR]};return{name:\"C\",aliases:[\"h\"],keywords:regex,disableAutodetect:!0,illegal:\"\\x3c/\",contains:[].concat(EXPRESSION_CONTEXT,C_LINE_COMMENT_MODE,EXPRESSION_CONTAINS,[PREPROCESSOR,{begin:hljs.IDENT_RE+\"::\",keywords:regex},{className:\"class\",beginKeywords:\"enum class struct union\",end:/[{;:<>=]/,contains:[{beginKeywords:\"final class struct\"},hljs.TITLE_MODE]}]),exports:{preprocessor:PREPROCESSOR,strings:STRINGS,\nkeywords:regex}}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$c\"] = function(global,require,module,exports) {\n/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/\n\n/** @type LanguageFn */\nfunction c(hljs) {\n  const regex = hljs.regex;\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\\\\n/ } ] });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '('\n    + DECLTYPE_AUTO_RE + '|'\n    + regex.optional(NAMESPACE_RE)\n    + '[a-zA-Z_]\\\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)\n  + ')';\n\n\n  const TYPES = {\n    className: 'type',\n    variants: [\n      { begin: '\\\\b[a-z\\\\d_]*_t\\\\b' },\n      { match: /\\batomic_[a-z]{3,6}\\b/ }\n    ]\n\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: { keyword:\n        'if else elif endif define undef warning error line '\n        + 'pragma _Pragma ifdef ifndef include' },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, { className: 'string' }),\n      {\n        className: 'string',\n        begin: /<.*?>/\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  const C_KEYWORDS = [\n    \"asm\",\n    \"auto\",\n    \"break\",\n    \"case\",\n    \"continue\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"enum\",\n    \"extern\",\n    \"for\",\n    \"fortran\",\n    \"goto\",\n    \"if\",\n    \"inline\",\n    \"register\",\n    \"restrict\",\n    \"return\",\n    \"sizeof\",\n    \"struct\",\n    \"switch\",\n    \"typedef\",\n    \"union\",\n    \"volatile\",\n    \"while\",\n    \"_Alignas\",\n    \"_Alignof\",\n    \"_Atomic\",\n    \"_Generic\",\n    \"_Noreturn\",\n    \"_Static_assert\",\n    \"_Thread_local\",\n    // aliases\n    \"alignas\",\n    \"alignof\",\n    \"noreturn\",\n    \"static_assert\",\n    \"thread_local\",\n    // not a C keyword but is, for all intents and purposes, treated exactly like one.\n    \"_Pragma\"\n  ];\n\n  const C_TYPES = [\n    \"float\",\n    \"double\",\n    \"signed\",\n    \"unsigned\",\n    \"int\",\n    \"short\",\n    \"long\",\n    \"char\",\n    \"void\",\n    \"_Bool\",\n    \"_Complex\",\n    \"_Imaginary\",\n    \"_Decimal32\",\n    \"_Decimal64\",\n    \"_Decimal128\",\n    // modifiers\n    \"const\",\n    \"static\",\n    // aliases\n    \"complex\",\n    \"bool\",\n    \"imaginary\"\n  ];\n\n  const KEYWORDS = {\n    keyword: C_KEYWORDS,\n    type: C_TYPES,\n    literal: 'true false NULL',\n    // TODO: apply hinting work similar to what was done in cpp.js\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream '\n      + 'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set '\n      + 'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos '\n      + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp '\n      + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper '\n      + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow '\n      + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp '\n      + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan '\n      + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n  };\n\n  const EXPRESSION_CONTAINS = [\n    PREPROCESSOR,\n    TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [ hljs.inherit(TITLE_MODE, { className: \"title.function\" }) ],\n        relevance: 0\n      },\n      // allow for multiple declarations, e.g.:\n      // extern void f(int), g(char);\n      {\n        relevance: 0,\n        match: /,/\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              TYPES\n            ]\n          }\n        ]\n      },\n      TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: \"C\",\n    aliases: [ 'h' ],\n    keywords: KEYWORDS,\n    // Until differentiations are added between `c` and `cpp`, `c` will\n    // not be auto-detected to avoid auto-detect conflicts between C and C++\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: KEYWORDS\n        },\n        {\n          className: 'class',\n          beginKeywords: 'enum class struct union',\n          end: /[{;:<>=]/,\n          contains: [\n            { beginKeywords: \"final class struct\" },\n            hljs.TITLE_MODE\n          ]\n        }\n      ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: KEYWORDS\n    }\n  };\n}\n\nmodule.exports = c;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["variants","begin","aliases","strings","className","contains","relevance","preprocessor","returnBegin","name","built_in","keyword","keywords","beginKeywords","type","match","excludeEnd","illegal","literal","end","disableAutodetect"]],"~:compiled-at",1676671710124,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$c.js\",\n\"lineCount\":9,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/c.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$c\\\"] = function(global,require,module,exports) {\\n/*\\nLanguage: C\\nCategory: common, system\\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\\n*/\\n\\n/** @type LanguageFn */\\nfunction c(hljs) {\\n  const regex = hljs.regex;\\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\\n  // not include such support nor can we be sure all the grammars depending\\n  // on it would desire this behavior\\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\\\\\\\\\\n/ } ] });\\n  const DECLTYPE_AUTO_RE = 'decltype\\\\\\\\(auto\\\\\\\\)';\\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\\\\\w*::';\\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\\n  const FUNCTION_TYPE_RE = '('\\n    + DECLTYPE_AUTO_RE + '|'\\n    + regex.optional(NAMESPACE_RE)\\n    + '[a-zA-Z_]\\\\\\\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)\\n  + ')';\\n\\n\\n  const TYPES = {\\n    className: 'type',\\n    variants: [\\n      { begin: '\\\\\\\\b[a-z\\\\\\\\d_]*_t\\\\\\\\b' },\\n      { match: /\\\\batomic_[a-z]{3,6}\\\\b/ }\\n    ]\\n\\n  };\\n\\n  // https://en.cppreference.com/w/cpp/language/escape\\n  // \\\\\\\\ \\\\x \\\\xFF \\\\u2837 \\\\u00323747 \\\\374\\n  const CHARACTER_ESCAPES = '\\\\\\\\\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\\\\\S)';\\n  const STRINGS = {\\n    className: 'string',\\n    variants: [\\n      {\\n        begin: '(u8?|U|L)?\\\"',\\n        end: '\\\"',\\n        illegal: '\\\\\\\\n',\\n        contains: [ hljs.BACKSLASH_ESCAPE ]\\n      },\\n      {\\n        begin: '(u8?|U|L)?\\\\'(' + CHARACTER_ESCAPES + \\\"|.)\\\",\\n        end: '\\\\'',\\n        illegal: '.'\\n      },\\n      hljs.END_SAME_AS_BEGIN({\\n        begin: /(?:u8?|U|L)?R\\\"([^()\\\\\\\\ ]{0,16})\\\\(/,\\n        end: /\\\\)([^()\\\\\\\\ ]{0,16})\\\"/\\n      })\\n    ]\\n  };\\n\\n  const NUMBERS = {\\n    className: 'number',\\n    variants: [\\n      { begin: '\\\\\\\\b(0b[01\\\\']+)' },\\n      { begin: '(-?)\\\\\\\\b([\\\\\\\\d\\\\']+(\\\\\\\\.[\\\\\\\\d\\\\']*)?|\\\\\\\\.[\\\\\\\\d\\\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },\\n      { begin: '(-?)(\\\\\\\\b0[xX][a-fA-F0-9\\\\']+|(\\\\\\\\b[\\\\\\\\d\\\\']+(\\\\\\\\.[\\\\\\\\d\\\\']*)?|\\\\\\\\.[\\\\\\\\d\\\\']+)([eE][-+]?[\\\\\\\\d\\\\']+)?)' }\\n    ],\\n    relevance: 0\\n  };\\n\\n  const PREPROCESSOR = {\\n    className: 'meta',\\n    begin: /#\\\\s*[a-z]+\\\\b/,\\n    end: /$/,\\n    keywords: { keyword:\\n        'if else elif endif define undef warning error line '\\n        + 'pragma _Pragma ifdef ifndef include' },\\n    contains: [\\n      {\\n        begin: /\\\\\\\\\\\\n/,\\n        relevance: 0\\n      },\\n      hljs.inherit(STRINGS, { className: 'string' }),\\n      {\\n        className: 'string',\\n        begin: /<.*?>/\\n      },\\n      C_LINE_COMMENT_MODE,\\n      hljs.C_BLOCK_COMMENT_MODE\\n    ]\\n  };\\n\\n  const TITLE_MODE = {\\n    className: 'title',\\n    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\\n    relevance: 0\\n  };\\n\\n  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\\\\\s*\\\\\\\\(';\\n\\n  const C_KEYWORDS = [\\n    \\\"asm\\\",\\n    \\\"auto\\\",\\n    \\\"break\\\",\\n    \\\"case\\\",\\n    \\\"continue\\\",\\n    \\\"default\\\",\\n    \\\"do\\\",\\n    \\\"else\\\",\\n    \\\"enum\\\",\\n    \\\"extern\\\",\\n    \\\"for\\\",\\n    \\\"fortran\\\",\\n    \\\"goto\\\",\\n    \\\"if\\\",\\n    \\\"inline\\\",\\n    \\\"register\\\",\\n    \\\"restrict\\\",\\n    \\\"return\\\",\\n    \\\"sizeof\\\",\\n    \\\"struct\\\",\\n    \\\"switch\\\",\\n    \\\"typedef\\\",\\n    \\\"union\\\",\\n    \\\"volatile\\\",\\n    \\\"while\\\",\\n    \\\"_Alignas\\\",\\n    \\\"_Alignof\\\",\\n    \\\"_Atomic\\\",\\n    \\\"_Generic\\\",\\n    \\\"_Noreturn\\\",\\n    \\\"_Static_assert\\\",\\n    \\\"_Thread_local\\\",\\n    // aliases\\n    \\\"alignas\\\",\\n    \\\"alignof\\\",\\n    \\\"noreturn\\\",\\n    \\\"static_assert\\\",\\n    \\\"thread_local\\\",\\n    // not a C keyword but is, for all intents and purposes, treated exactly like one.\\n    \\\"_Pragma\\\"\\n  ];\\n\\n  const C_TYPES = [\\n    \\\"float\\\",\\n    \\\"double\\\",\\n    \\\"signed\\\",\\n    \\\"unsigned\\\",\\n    \\\"int\\\",\\n    \\\"short\\\",\\n    \\\"long\\\",\\n    \\\"char\\\",\\n    \\\"void\\\",\\n    \\\"_Bool\\\",\\n    \\\"_Complex\\\",\\n    \\\"_Imaginary\\\",\\n    \\\"_Decimal32\\\",\\n    \\\"_Decimal64\\\",\\n    \\\"_Decimal128\\\",\\n    // modifiers\\n    \\\"const\\\",\\n    \\\"static\\\",\\n    // aliases\\n    \\\"complex\\\",\\n    \\\"bool\\\",\\n    \\\"imaginary\\\"\\n  ];\\n\\n  const KEYWORDS = {\\n    keyword: C_KEYWORDS,\\n    type: C_TYPES,\\n    literal: 'true false NULL',\\n    // TODO: apply hinting work similar to what was done in cpp.js\\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream '\\n      + 'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set '\\n      + 'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos '\\n      + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp '\\n      + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper '\\n      + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow '\\n      + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp '\\n      + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan '\\n      + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\\n  };\\n\\n  const EXPRESSION_CONTAINS = [\\n    PREPROCESSOR,\\n    TYPES,\\n    C_LINE_COMMENT_MODE,\\n    hljs.C_BLOCK_COMMENT_MODE,\\n    NUMBERS,\\n    STRINGS\\n  ];\\n\\n  const EXPRESSION_CONTEXT = {\\n    // This mode covers expression context where we can't expect a function\\n    // definition and shouldn't highlight anything that looks like one:\\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\\n    variants: [\\n      {\\n        begin: /=/,\\n        end: /;/\\n      },\\n      {\\n        begin: /\\\\(/,\\n        end: /\\\\)/\\n      },\\n      {\\n        beginKeywords: 'new throw return else',\\n        end: /;/\\n      }\\n    ],\\n    keywords: KEYWORDS,\\n    contains: EXPRESSION_CONTAINS.concat([\\n      {\\n        begin: /\\\\(/,\\n        end: /\\\\)/,\\n        keywords: KEYWORDS,\\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\\n        relevance: 0\\n      }\\n    ]),\\n    relevance: 0\\n  };\\n\\n  const FUNCTION_DECLARATION = {\\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\\\\\*&\\\\\\\\s]+)+' + FUNCTION_TITLE,\\n    returnBegin: true,\\n    end: /[{;=]/,\\n    excludeEnd: true,\\n    keywords: KEYWORDS,\\n    illegal: /[^\\\\w\\\\s\\\\*&:<>.]/,\\n    contains: [\\n      { // to prevent it from being confused as the function title\\n        begin: DECLTYPE_AUTO_RE,\\n        keywords: KEYWORDS,\\n        relevance: 0\\n      },\\n      {\\n        begin: FUNCTION_TITLE,\\n        returnBegin: true,\\n        contains: [ hljs.inherit(TITLE_MODE, { className: \\\"title.function\\\" }) ],\\n        relevance: 0\\n      },\\n      // allow for multiple declarations, e.g.:\\n      // extern void f(int), g(char);\\n      {\\n        relevance: 0,\\n        match: /,/\\n      },\\n      {\\n        className: 'params',\\n        begin: /\\\\(/,\\n        end: /\\\\)/,\\n        keywords: KEYWORDS,\\n        relevance: 0,\\n        contains: [\\n          C_LINE_COMMENT_MODE,\\n          hljs.C_BLOCK_COMMENT_MODE,\\n          STRINGS,\\n          NUMBERS,\\n          TYPES,\\n          // Count matching parentheses.\\n          {\\n            begin: /\\\\(/,\\n            end: /\\\\)/,\\n            keywords: KEYWORDS,\\n            relevance: 0,\\n            contains: [\\n              'self',\\n              C_LINE_COMMENT_MODE,\\n              hljs.C_BLOCK_COMMENT_MODE,\\n              STRINGS,\\n              NUMBERS,\\n              TYPES\\n            ]\\n          }\\n        ]\\n      },\\n      TYPES,\\n      C_LINE_COMMENT_MODE,\\n      hljs.C_BLOCK_COMMENT_MODE,\\n      PREPROCESSOR\\n    ]\\n  };\\n\\n  return {\\n    name: \\\"C\\\",\\n    aliases: [ 'h' ],\\n    keywords: KEYWORDS,\\n    // Until differentiations are added between `c` and `cpp`, `c` will\\n    // not be auto-detected to avoid auto-detect conflicts between C and C++\\n    disableAutodetect: true,\\n    illegal: '</',\\n    contains: [].concat(\\n      EXPRESSION_CONTEXT,\\n      FUNCTION_DECLARATION,\\n      EXPRESSION_CONTAINS,\\n      [\\n        PREPROCESSOR,\\n        {\\n          begin: hljs.IDENT_RE + '::',\\n          keywords: KEYWORDS\\n        },\\n        {\\n          className: 'class',\\n          beginKeywords: 'enum class struct union',\\n          end: /[{;:<>=]/,\\n          contains: [\\n            { beginKeywords: \\\"final class struct\\\" },\\n            hljs.TITLE_MODE\\n          ]\\n        }\\n      ]),\\n    exports: {\\n      preprocessor: PREPROCESSOR,\\n      strings: STRINGS,\\n      keywords: KEYWORDS\\n    }\\n  };\\n}\\n\\nmodule.exports = c;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"c\",\"hljs\",\"regex\",\"C_LINE_COMMENT_MODE\",\"COMMENT\",\"contains\",\"begin\",\"FUNCTION_TYPE_RE\",\"optional\",\"NAMESPACE_RE\",\"TEMPLATE_ARGUMENT_RE\",\"TYPES\",\"className\",\"variants\",\"match\",\"STRINGS\",\"end\",\"illegal\",\"BACKSLASH_ESCAPE\",\"END_SAME_AS_BEGIN\",\"NUMBERS\",\"relevance\",\"PREPROCESSOR\",\"keywords\",\"keyword\",\"inherit\",\"C_BLOCK_COMMENT_MODE\",\"TITLE_MODE\",\"IDENT_RE\",\"FUNCTION_TITLE\",\"KEYWORDS\",\"C_KEYWORDS\",\"type\",\"C_TYPES\",\"literal\",\"built_in\",\"EXPRESSION_CONTAINS\",\"EXPRESSION_CONTEXT\",\"beginKeywords\",\"concat\",\"FUNCTION_DECLARATION\",\"returnBegin\",\"excludeEnd\",\"DECLTYPE_AUTO_RE\",\"name\",\"aliases\",\"disableAutodetect\",\"preprocessor\",\"strings\"]\n}\n"]