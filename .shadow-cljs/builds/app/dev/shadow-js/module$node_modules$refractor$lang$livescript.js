["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/livescript.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$livescript=function(global,require,module,exports){function livescript(Prism){Prism.languages.livescript={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\])#.*/,lookbehind:!0}],\"interpolated-string\":{pattern:/(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,lookbehind:!0,greedy:!0,inside:{variable:{pattern:/(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,lookbehind:!0},interpolation:{pattern:/(^|[^\\\\])#\\{[^}]+\\}/m,lookbehind:!0,\ninside:{\"interpolation-punctuation\":{pattern:/^#\\{|\\}$/,alias:\"variable\"}}},string:/[\\s\\S]+/}},string:[{pattern:/('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},{pattern:/<\\[[\\s\\S]*?\\]>/,greedy:!0},/\\\\[^\\s,;\\])}]+/],regex:[{pattern:/\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,greedy:!0,inside:{comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0}}},{pattern:/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,greedy:!0}],keyword:{pattern:/(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\nlookbehind:!0},\"keyword-operator\":{pattern:/(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,lookbehind:!0,alias:\"operator\"},boolean:{pattern:/(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,lookbehind:!0},argument:{pattern:/(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,lookbehind:!0,alias:\"variable\"},number:/\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,identifier:/[a-z_](?:-?[a-z]|[\\d_])*/i,operator:[{pattern:/( )\\.(?= )/,\nlookbehind:!0},/\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/],punctuation:/[(){}\\[\\]|.,:;`]/};Prism.languages.livescript[\"interpolated-string\"].inside.interpolation.inside.rest=Prism.languages.livescript}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=livescript;livescript.displayName=\"livescript\";livescript.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$livescript\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = livescript;\n// @ts-nocheck\nlivescript.displayName = 'livescript';\nlivescript.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction livescript(Prism) {\n  Prism.languages.livescript = {\n    comment: [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    }],\n    'interpolated-string': {\n      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\n       * forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */\n      pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        variable: {\n          pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n          lookbehind: true\n        },\n        interpolation: {\n          pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^#\\{|\\}$/,\n              alias: 'variable'\n            } // See rest below\n\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    string: [{\n      pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    }, {\n      pattern: /<\\[[\\s\\S]*?\\]>/,\n      greedy: true\n    }, /\\\\[^\\s,;\\])}]+/],\n    regex: [{\n      pattern: /\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,\n      greedy: true,\n      inside: {\n        comment: {\n          pattern: /(^|[^\\\\])#.*/,\n          lookbehind: true\n        }\n      }\n    }, {\n      pattern: /\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,\n      greedy: true\n    }],\n    keyword: {\n      pattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n      lookbehind: true\n    },\n    'keyword-operator': {\n      pattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    boolean: {\n      pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n      lookbehind: true\n    },\n    argument: {\n      // Don't match .&. nor &&\n      pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n    identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\n    operator: [// Spaced .\n    {\n      pattern: /( )\\.(?= )/,\n      lookbehind: true\n    }, // Full list, in order:\n    // .= .~ .. ...\n    // .&. .^. .<<. .>>. .>>>.\n    // := :: ::=\n    // &&\n    // || |>\n    // < << <<< <<<<\n    // <- <-- <-! <--!\n    // <~ <~~ <~! <~~!\n    // <| <= <?\n    // > >> >= >?\n    // - -- -> -->\n    // + ++\n    // @ @@\n    // % %%\n    // * **\n    // ! != !~=\n    // !~> !~~>\n    // !-> !-->\n    // ~ ~> ~~> ~=\n    // = ==\n    // ^ ^^\n    // / ?\n    /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/],\n    punctuation: /[(){}\\[\\]|.,:;`]/\n  };\n  Prism.languages.livescript['interpolated-string'].inside['interpolation'].inside.rest = Prism.languages.livescript;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","punctuation","string","aliases","operator","displayName","__esModule","regex","rest","lookbehind","value","identifier","variable","keyword","number","greedy","pattern","argument","inside","alias","comment","livescript","interpolation","default"]],"~:compiled-at",1676841365434,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$livescript.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,6CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAY1GC,QAASA,WAAU,CAACC,KAAD,CAAQ,CACzBA,KAAMC,CAAAA,SAAUF,CAAAA,UAAhB,CAA6B,CAC3BG,QAAS,CAAC,CACRC,QAAS,2BADD,CAERC,WAAY,CAAA,CAFJ,CAAD,CAGN,CACDD,QAAS,cADR,CAEDC,WAAY,CAAA,CAFX,CAHM,CADkB,CAQ3B,sBAAuB,CAGrBD,QAAS,iDAHY,CAIrBC,WAAY,CAAA,CAJS,CAKrBC,OAAQ,CAAA,CALa,CAMrBC,OAAQ,CACNC,SAAU,CACRJ,QAAS,qCADD,CAERC,WAAY,CAAA,CAFJ,CADJ,CAKNI,cAAe,CACbL,QAAS,sBADI,CAEbC,WAAY,CAAA,CAFC;AAGbE,OAAQ,CACN,4BAA6B,CAC3BH,QAAS,UADkB,CAE3BM,MAAO,UAFoB,CADvB,CAHK,CALT,CAgBNC,OAAQ,SAhBF,CANa,CARI,CAiC3BA,OAAQ,CAAC,CACPP,QAAS,oCADF,CAEPE,OAAQ,CAAA,CAFD,CAAD,CAGL,CACDF,QAAS,gBADR,CAEDE,OAAQ,CAAA,CAFP,CAHK,CAML,gBANK,CAjCmB,CAwC3BM,MAAO,CAAC,CACNR,QAAS,6DADH,CAENE,OAAQ,CAAA,CAFF,CAGNC,OAAQ,CACNJ,QAAS,CACPC,QAAS,cADF,CAEPC,WAAY,CAAA,CAFL,CADH,CAHF,CAAD,CASJ,CACDD,QAAS,sDADR,CAEDE,OAAQ,CAAA,CAFP,CATI,CAxCoB,CAqD3BO,QAAS,CACPT,QAAS,uQADF;AAEPC,WAAY,CAAA,CAFL,CArDkB,CAyD3B,mBAAoB,CAClBD,QAAS,8JADS,CAElBC,WAAY,CAAA,CAFM,CAGlBK,MAAO,UAHW,CAzDO,CA8D3BI,QAAS,CACPV,QAAS,gDADF,CAEPC,WAAY,CAAA,CAFL,CA9DkB,CAkE3BU,SAAU,CAERX,QAAS,6BAFD,CAGRC,WAAY,CAAA,CAHJ,CAIRK,MAAO,UAJC,CAlEiB,CAwE3BM,OAAQ,0DAxEmB,CAyE3BC,WAAY,2BAzEe,CA0E3BC,SAAU,CACV,CACEd,QAAS,YADX;AAEEC,WAAY,CAAA,CAFd,CADU,CA2BV,mLA3BU,CA1EiB,CAsG3Bc,YAAa,kBAtGc,CAwG7BlB,MAAMC,CAAAA,SAAUF,CAAAA,UAAhB,CAA2B,qBAA3B,CAAkDO,CAAAA,MAAlD,CAAA,aAA0EA,CAAAA,MAAOa,CAAAA,IAAjF,CAAwFnB,KAAMC,CAAAA,SAAUF,CAAAA,UAzG/E,CAT3BqB,MAAOC,CAAAA,cAAP,CAAsBvB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CwB,MAAO,CAAA,CADoC,CAA7C,CAGAxB,QAAQyB,CAAAA,OAAR,CAAkBxB,UAElBA,WAAWyB,CAAAA,WAAX,CAAyB,YACzBzB,WAAW0B,CAAAA,OAAX,CAAqB,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/livescript.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$livescript\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = livescript;\\n// @ts-nocheck\\nlivescript.displayName = 'livescript';\\nlivescript.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction livescript(Prism) {\\n  Prism.languages.livescript = {\\n    comment: [{\\n      pattern: /(^|[^\\\\\\\\])\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\//,\\n      lookbehind: true\\n    }, {\\n      pattern: /(^|[^\\\\\\\\])#.*/,\\n      lookbehind: true\\n    }],\\n    'interpolated-string': {\\n      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\\n       * forcing it to match \\\"\\\"\\\"-quoted string when it would otherwise match \\\"-quoted first. */\\n      pattern: /(^|[^\\\"])(\\\"\\\"\\\"|\\\")(?:\\\\\\\\[\\\\s\\\\S]|(?!\\\\2)[^\\\\\\\\])*\\\\2(?!\\\")/,\\n      lookbehind: true,\\n      greedy: true,\\n      inside: {\\n        variable: {\\n          pattern: /(^|[^\\\\\\\\])#[a-z_](?:-?[a-z]|[\\\\d_])*/m,\\n          lookbehind: true\\n        },\\n        interpolation: {\\n          pattern: /(^|[^\\\\\\\\])#\\\\{[^}]+\\\\}/m,\\n          lookbehind: true,\\n          inside: {\\n            'interpolation-punctuation': {\\n              pattern: /^#\\\\{|\\\\}$/,\\n              alias: 'variable'\\n            } // See rest below\\n\\n          }\\n        },\\n        string: /[\\\\s\\\\S]+/\\n      }\\n    },\\n    string: [{\\n      pattern: /('''|')(?:\\\\\\\\[\\\\s\\\\S]|(?!\\\\1)[^\\\\\\\\])*\\\\1/,\\n      greedy: true\\n    }, {\\n      pattern: /<\\\\[[\\\\s\\\\S]*?\\\\]>/,\\n      greedy: true\\n    }, /\\\\\\\\[^\\\\s,;\\\\])}]+/],\\n    regex: [{\\n      pattern: /\\\\/\\\\/(?:\\\\[[^\\\\r\\\\n\\\\]]*\\\\]|\\\\\\\\.|(?!\\\\/\\\\/)[^\\\\\\\\\\\\[])+\\\\/\\\\/[gimyu]{0,5}/,\\n      greedy: true,\\n      inside: {\\n        comment: {\\n          pattern: /(^|[^\\\\\\\\])#.*/,\\n          lookbehind: true\\n        }\\n      }\\n    }, {\\n      pattern: /\\\\/(?:\\\\[[^\\\\r\\\\n\\\\]]*\\\\]|\\\\\\\\.|[^/\\\\\\\\\\\\r\\\\n\\\\[])+\\\\/[gimyu]{0,5}/,\\n      greedy: true\\n    }],\\n    keyword: {\\n      pattern: /(^|(?!-).)\\\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\\\b/m,\\n      lookbehind: true\\n    },\\n    'keyword-operator': {\\n      pattern: /(^|[^-])\\\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\\\\b)/m,\\n      lookbehind: true,\\n      alias: 'operator'\\n    },\\n    boolean: {\\n      pattern: /(^|[^-])\\\\b(?:false|no|off|on|true|yes)(?!-)\\\\b/m,\\n      lookbehind: true\\n    },\\n    argument: {\\n      // Don't match .&. nor &&\\n      pattern: /(^|(?!\\\\.&\\\\.)[^&])&(?!&)\\\\d*/m,\\n      lookbehind: true,\\n      alias: 'variable'\\n    },\\n    number: /\\\\b(?:\\\\d+~[\\\\da-z]+|\\\\d[\\\\d_]*(?:\\\\.\\\\d[\\\\d_]*)?(?:[a-z]\\\\w*)?)/i,\\n    identifier: /[a-z_](?:-?[a-z]|[\\\\d_])*/i,\\n    operator: [// Spaced .\\n    {\\n      pattern: /( )\\\\.(?= )/,\\n      lookbehind: true\\n    }, // Full list, in order:\\n    // .= .~ .. ...\\n    // .&. .^. .<<. .>>. .>>>.\\n    // := :: ::=\\n    // &&\\n    // || |>\\n    // < << <<< <<<<\\n    // <- <-- <-! <--!\\n    // <~ <~~ <~! <~~!\\n    // <| <= <?\\n    // > >> >= >?\\n    // - -- -> --\\u003e\\n    // + ++\\n    // @ @@\\n    // % %%\\n    // * **\\n    // ! != !~=\\n    // !~> !~~>\\n    // !-> !--\\u003e\\n    // ~ ~> ~~> ~=\\n    // = ==\\n    // ^ ^^\\n    // / ?\\n    /\\\\.(?:[=~]|\\\\.\\\\.?)|\\\\.(?:[&|^]|<<|>>>?)\\\\.|:(?:=|:=?)|&&|\\\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\\\+\\\\+?|@@?|%%?|\\\\*\\\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\\\^\\\\^?|[\\\\/?]/],\\n    punctuation: /[(){}\\\\[\\\\]|.,:;`]/\\n  };\\n  Prism.languages.livescript['interpolated-string'].inside['interpolation'].inside.rest = Prism.languages.livescript;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"livescript\",\"Prism\",\"languages\",\"comment\",\"pattern\",\"lookbehind\",\"greedy\",\"inside\",\"variable\",\"interpolation\",\"alias\",\"string\",\"regex\",\"keyword\",\"boolean\",\"argument\",\"number\",\"identifier\",\"operator\",\"punctuation\",\"rest\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]