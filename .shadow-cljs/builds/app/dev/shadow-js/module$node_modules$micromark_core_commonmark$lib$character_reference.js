["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-core-commonmark/lib/character-reference.js"],"~:js","shadow$provide.module$node_modules$micromark_core_commonmark$lib$character_reference=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.characterReference=void 0;var _decodeNamedCharacterReference=require(\"module$node_modules$decode_named_character_reference$index\"),_micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\");exports.characterReference={name:\"characterReference\",tokenize:function(effects,ok,nok){function open(code){if(35===\ncode)return effects.enter(\"characterReferenceMarkerNumeric\"),effects.consume(code),effects.exit(\"characterReferenceMarkerNumeric\"),numeric;effects.enter(\"characterReferenceValue\");max=31;test=_micromarkUtilCharacter.asciiAlphanumeric;return value(code)}function numeric(code){if(88===code||120===code)return effects.enter(\"characterReferenceMarkerHexadecimal\"),effects.consume(code),effects.exit(\"characterReferenceMarkerHexadecimal\"),effects.enter(\"characterReferenceValue\"),max=6,test=_micromarkUtilCharacter.asciiHexDigit,\nvalue;effects.enter(\"characterReferenceValue\");max=7;test=_micromarkUtilCharacter.asciiDigit;return value(code)}function value(code){let token;if(59===code&&size){token=effects.exit(\"characterReferenceValue\");if(test===_micromarkUtilCharacter.asciiAlphanumeric&&!(0,_decodeNamedCharacterReference.decodeNamedCharacterReference)(self.sliceSerialize(token)))return nok(code);effects.enter(\"characterReferenceMarker\");effects.consume(code);effects.exit(\"characterReferenceMarker\");effects.exit(\"characterReference\");\nreturn ok}return test(code)&&size++<max?(effects.consume(code),value):nok(code)}const self=this;let size=0,max,test;return function(code){effects.enter(\"characterReference\");effects.enter(\"characterReferenceMarker\");effects.consume(code);effects.exit(\"characterReferenceMarker\");return open}}}}","~:source","shadow$provide[\"module$node_modules$micromark_core_commonmark$lib$character_reference\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.characterReference = void 0;\n\nvar _decodeNamedCharacterReference = require(\"decode-named-character-reference\");\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/** @type {Construct} */\nconst characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n/** @type {Tokenizer} */\n\nexports.characterReference = characterReference;\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n\n  let max;\n  /** @type {(code: Code) => code is number} */\n\n  let test;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference');\n    effects.enter('characterReferenceMarker');\n    effects.consume(code);\n    effects.exit('characterReferenceMarker');\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerNumeric');\n      return numeric;\n    }\n\n    effects.enter('characterReferenceValue');\n    max = 31;\n    test = _micromarkUtilCharacter.asciiAlphanumeric;\n    return value(code);\n  }\n  /** @type {State} */\n\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerHexadecimal');\n      effects.enter('characterReferenceValue');\n      max = 6;\n      test = _micromarkUtilCharacter.asciiHexDigit;\n      return value;\n    }\n\n    effects.enter('characterReferenceValue');\n    max = 7;\n    test = _micromarkUtilCharacter.asciiDigit;\n    return value(code);\n  }\n  /** @type {State} */\n\n\n  function value(code) {\n    /** @type {Token} */\n    let token;\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue');\n\n      if (test === _micromarkUtilCharacter.asciiAlphanumeric && !(0, _decodeNamedCharacterReference.decodeNamedCharacterReference)(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      effects.enter('characterReferenceMarker');\n      effects.consume(code);\n      effects.exit('characterReferenceMarker');\n      effects.exit('characterReference');\n      return ok;\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n\n    return nok(code);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js","~$module$node_modules$decode_named_character_reference$index"]],"~:properties",["^5",["tokenize","__esModule","characterReference","name","value"]],"~:compiled-at",1676665867278,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_core_commonmark$lib$character_reference.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/micromark-core-commonmark/lib/character-reference.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_core_commonmark$lib$character_reference\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.characterReference = void 0;\\n\\nvar _decodeNamedCharacterReference = require(\\\"decode-named-character-reference\\\");\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Construct} Construct\\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\\n * @typedef {import('micromark-util-types').Token} Token\\n * @typedef {import('micromark-util-types').State} State\\n * @typedef {import('micromark-util-types').Code} Code\\n */\\n\\n/** @type {Construct} */\\nconst characterReference = {\\n  name: 'characterReference',\\n  tokenize: tokenizeCharacterReference\\n};\\n/** @type {Tokenizer} */\\n\\nexports.characterReference = characterReference;\\n\\nfunction tokenizeCharacterReference(effects, ok, nok) {\\n  const self = this;\\n  let size = 0;\\n  /** @type {number} */\\n\\n  let max;\\n  /** @type {(code: Code) => code is number} */\\n\\n  let test;\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    effects.enter('characterReference');\\n    effects.enter('characterReferenceMarker');\\n    effects.consume(code);\\n    effects.exit('characterReferenceMarker');\\n    return open;\\n  }\\n  /** @type {State} */\\n\\n\\n  function open(code) {\\n    if (code === 35) {\\n      effects.enter('characterReferenceMarkerNumeric');\\n      effects.consume(code);\\n      effects.exit('characterReferenceMarkerNumeric');\\n      return numeric;\\n    }\\n\\n    effects.enter('characterReferenceValue');\\n    max = 31;\\n    test = _micromarkUtilCharacter.asciiAlphanumeric;\\n    return value(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function numeric(code) {\\n    if (code === 88 || code === 120) {\\n      effects.enter('characterReferenceMarkerHexadecimal');\\n      effects.consume(code);\\n      effects.exit('characterReferenceMarkerHexadecimal');\\n      effects.enter('characterReferenceValue');\\n      max = 6;\\n      test = _micromarkUtilCharacter.asciiHexDigit;\\n      return value;\\n    }\\n\\n    effects.enter('characterReferenceValue');\\n    max = 7;\\n    test = _micromarkUtilCharacter.asciiDigit;\\n    return value(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function value(code) {\\n    /** @type {Token} */\\n    let token;\\n\\n    if (code === 59 && size) {\\n      token = effects.exit('characterReferenceValue');\\n\\n      if (test === _micromarkUtilCharacter.asciiAlphanumeric && !(0, _decodeNamedCharacterReference.decodeNamedCharacterReference)(self.sliceSerialize(token))) {\\n        return nok(code);\\n      }\\n\\n      effects.enter('characterReferenceMarker');\\n      effects.consume(code);\\n      effects.exit('characterReferenceMarker');\\n      effects.exit('characterReference');\\n      return ok;\\n    }\\n\\n    if (test(code) && size++ < max) {\\n      effects.consume(code);\\n      return value;\\n    }\\n\\n    return nok(code);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"characterReference\",\"_decodeNamedCharacterReference\",\"_micromarkUtilCharacter\",\"name\",\"tokenize\",\"tokenizeCharacterReference\",\"effects\",\"ok\",\"nok\",\"open\",\"code\",\"enter\",\"numeric\",\"consume\",\"exit\",\"max\",\"test\",\"asciiAlphanumeric\",\"asciiHexDigit\",\"asciiDigit\",\"token\",\"size\",\"decodeNamedCharacterReference\",\"self\",\"sliceSerialize\",\"start\"]\n}\n"]