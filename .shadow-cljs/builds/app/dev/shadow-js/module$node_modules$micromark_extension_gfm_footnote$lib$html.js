["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-extension-gfm-footnote/lib/html.js"],"~:js","shadow$provide.module$node_modules$micromark_extension_gfm_footnote$lib$html=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.gfmFootnoteHtml=function(options={}){const label=options.label||\"Footnotes\",backLabel=options.backLabel||\"Back to content\",clobberPrefix=void 0===options.clobberPrefix||null===options.clobberPrefix?\"user-content-\":options.clobberPrefix;return{enter:{gfmFootnoteDefinition(){this.getData(\"tightStack\").push(!1)},gfmFootnoteDefinitionLabelString(){this.buffer()},\ngfmFootnoteCallString(){this.buffer()}},exit:{gfmFootnoteDefinition(){let definitions=this.getData(\"gfmFootnoteDefinitions\");var footnoteStack=this.getData(\"gfmFootnoteDefinitionStack\");const tightStack=this.getData(\"tightStack\");footnoteStack=footnoteStack.pop();const value=this.resume();definitions||this.setData(\"gfmFootnoteDefinitions\",definitions={});own.call(definitions,footnoteStack)||(definitions[footnoteStack]=value);tightStack.pop();this.setData(\"slurpOneLineEnding\",!0);this.setData(\"lastWasTag\")},\ngfmFootnoteDefinitionLabelString(token){let footnoteStack=this.getData(\"gfmFootnoteDefinitionStack\");footnoteStack||this.setData(\"gfmFootnoteDefinitionStack\",footnoteStack=[]);footnoteStack.push((0,_micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token)));this.resume();this.buffer()},gfmFootnoteCallString(token){var calls=this.getData(\"gfmFootnoteCallOrder\"),counts=this.getData(\"gfmFootnoteCallCounts\");const id=(0,_micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token));\nthis.resume();calls||this.setData(\"gfmFootnoteCallOrder\",calls=[]);counts||this.setData(\"gfmFootnoteCallCounts\",counts={});const index=calls.indexOf(id);token=(0,_micromarkUtilSanitizeUri.sanitizeUri)(id.toLowerCase());-1===index?(calls.push(id),counts[id]=1,calls=calls.length):(counts[id]++,calls=index+1);counts=counts[id];this.tag('\\x3csup\\x3e\\x3ca href\\x3d\"#'+clobberPrefix+\"fn-\"+token+'\" id\\x3d\"'+clobberPrefix+\"fnref-\"+token+(1<counts?\"-\"+counts:\"\")+'\" data-footnote-ref\\x3d\"\" aria-describedby\\x3d\"footnote-label\"\\x3e'+\nString(calls)+\"\\x3c/a\\x3e\\x3c/sup\\x3e\")},null(){const calls=this.getData(\"gfmFootnoteCallOrder\")||[],counts=this.getData(\"gfmFootnoteCallCounts\")||{},definitions=this.getData(\"gfmFootnoteDefinitions\")||{};let index=-1;0<calls.length&&(this.lineEndingIfNeeded(),this.tag('\\x3csection data-footnotes\\x3d\"\" class\\x3d\"footnotes\"\\x3e\\x3ch2 id\\x3d\"footnote-label\" class\\x3d\"sr-only\"\\x3e'),this.raw(this.encode(label)),this.tag(\"\\x3c/h2\\x3e\"),this.lineEndingIfNeeded(),this.tag(\"\\x3col\\x3e\"));for(;++index<calls.length;){const id=\ncalls[index],safeId=(0,_micromarkUtilSanitizeUri.sanitizeUri)(id.toLowerCase());let referenceIndex=0;const references=[];for(;++referenceIndex<=counts[id];)references.push('\\x3ca href\\x3d\"#'+clobberPrefix+\"fnref-\"+safeId+(1<referenceIndex?\"-\"+referenceIndex:\"\")+'\" data-footnote-backref\\x3d\"\" class\\x3d\"data-footnote-backref\" aria-label\\x3d\"'+this.encode(backLabel)+'\"\\x3e↩'+(1<referenceIndex?\"\\x3csup\\x3e\"+referenceIndex+\"\\x3c/sup\\x3e\":\"\")+\"\\x3c/a\\x3e\");const reference=references.join(\" \");let injected=\n!1;this.lineEndingIfNeeded();this.tag('\\x3cli id\\x3d\"'+clobberPrefix+\"fn-\"+safeId+'\"\\x3e');this.lineEndingIfNeeded();this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/,$0=>{injected=!0;return\" \"+reference+$0}));injected||(this.lineEndingIfNeeded(),this.tag(reference));this.lineEndingIfNeeded();this.tag(\"\\x3c/li\\x3e\")}0<calls.length&&(this.lineEndingIfNeeded(),this.tag(\"\\x3c/ol\\x3e\"),this.lineEndingIfNeeded(),this.tag(\"\\x3c/section\\x3e\"))}}}};var _micromarkUtilNormalizeIdentifier=require(\"module$node_modules$micromark_util_normalize_identifier$index\"),\n_micromarkUtilSanitizeUri=require(\"module$node_modules$micromark_util_sanitize_uri$index\");const own={}.hasOwnProperty}","~:source","shadow$provide[\"module$node_modules$micromark_extension_gfm_footnote$lib$html\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gfmFootnoteHtml = gfmFootnoteHtml;\n\nvar _micromarkUtilNormalizeIdentifier = require(\"micromark-util-normalize-identifier\");\n\nvar _micromarkUtilSanitizeUri = require(\"micromark-util-sanitize-uri\");\n\n/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n *\n * @typedef Options\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [label='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [backLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n */\nconst own = {}.hasOwnProperty;\n/**\n * @param {Options} [options={}]\n * @returns {HtmlExtension}\n */\n\nfunction gfmFootnoteHtml(options = {}) {\n  const label = options.label || 'Footnotes';\n  const backLabel = options.backLabel || 'Back to content';\n  const clobberPrefix = options.clobberPrefix === undefined || options.clobberPrefix === null ? 'user-content-' : options.clobberPrefix;\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack =\n        /** @type {Array<boolean>} */\n        this.getData('tightStack');\n        stack.push(false);\n      },\n\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer();\n      },\n\n      gfmFootnoteCallString() {\n        this.buffer();\n      }\n\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions =\n        /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions');\n        const footnoteStack =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n        const tightStack =\n        /** @type {Array<boolean>} */\n        this.getData('tightStack');\n        const current = footnoteStack.pop();\n        const value = this.resume();\n\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', definitions = {});\n        }\n\n        if (!own.call(definitions, current)) definitions[current] = value;\n        tightStack.pop();\n        this.setData('slurpOneLineEnding', true); // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n\n        this.setData('lastWasTag');\n      },\n\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\n        }\n\n        footnoteStack.push((0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token)));\n        this.resume(); // Drop the label.\n\n        this.buffer(); // Get ready for a value.\n      },\n\n      gfmFootnoteCallString(token) {\n        let calls =\n        /** @type {Array<string>|undefined} */\n        this.getData('gfmFootnoteCallOrder');\n        let counts =\n        /** @type {Record<string, number>|undefined} */\n        this.getData('gfmFootnoteCallCounts');\n        const id = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token));\n        /** @type {number} */\n\n        let counter;\n        this.resume();\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\n        const index = calls.indexOf(id);\n        const safeId = (0, _micromarkUtilSanitizeUri.sanitizeUri)(id.toLowerCase());\n\n        if (index === -1) {\n          calls.push(id);\n          counts[id] = 1;\n          counter = calls.length;\n        } else {\n          counts[id]++;\n          counter = index + 1;\n        }\n\n        const reuseCounter = counts[id];\n        this.tag('<sup><a href=\"#' + clobberPrefix + 'fn-' + safeId + '\" id=\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + '</a></sup>');\n      },\n\n      null() {\n        const calls =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteCallOrder') || [];\n        const counts =\n        /** @type {Record<string, number>} */\n        this.getData('gfmFootnoteCallCounts') || {};\n        const definitions =\n        /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions') || {};\n        let index = -1;\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">');\n          this.raw(this.encode(label));\n          this.tag('</h2>');\n          this.lineEndingIfNeeded();\n          this.tag('<ol>');\n        }\n\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index];\n          const safeId = (0, _micromarkUtilSanitizeUri.sanitizeUri)(id.toLowerCase());\n          let referenceIndex = 0;\n          /** @type {Array<string>} */\n\n          const references = [];\n\n          while (++referenceIndex <= counts[id]) {\n            references.push('<a href=\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"' + this.encode(backLabel) + '\">↩' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\n          }\n\n          const reference = references.join(' ');\n          let injected = false;\n          this.lineEndingIfNeeded();\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">');\n          this.lineEndingIfNeeded();\n          this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, (\n          /** @type {string} */\n          $0) => {\n            injected = true;\n            return ' ' + reference + $0;\n          }));\n\n          if (!injected) {\n            this.lineEndingIfNeeded();\n            this.tag(reference);\n          }\n\n          this.lineEndingIfNeeded();\n          this.tag('</li>');\n        }\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('</ol>');\n          this.lineEndingIfNeeded();\n          this.tag('</section>');\n        }\n      }\n\n    }\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_normalize_identifier$index","~$shadow.js","~$module$node_modules$micromark_util_sanitize_uri$index"]],"~:properties",["^5",["__esModule","value","exit","gfmFootnoteHtml","enter"]],"~:compiled-at",1676841365318,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_extension_gfm_footnote$lib$html.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/micromark-extension-gfm-footnote/lib/html.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_extension_gfm_footnote$lib$html\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.gfmFootnoteHtml = gfmFootnoteHtml;\\n\\nvar _micromarkUtilNormalizeIdentifier = require(\\\"micromark-util-normalize-identifier\\\");\\n\\nvar _micromarkUtilSanitizeUri = require(\\\"micromark-util-sanitize-uri\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\\n *\\n * @typedef Options\\n * @property {string} [clobberPrefix='user-content-']\\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\\n *   attributes.\\n *   DOM clobbering is this:\\n *\\n *   ```html\\n *   <p id=x></p>\\n *   <script>alert(x)\\u003c/script>\\n *   ```\\n *\\n *   Elements by their ID are made available in browsers on the `window` object.\\n *   Using a prefix prevents this from being a problem.\\n * @property {string} [label='Footnotes']\\n *   Label to use for the footnotes section.\\n *   Affects screen reader users.\\n *   Change it if you\\u2019re authoring in a different language.\\n * @property {string} [backLabel='Back to content']\\n *   Label to use from backreferences back to their footnote call.\\n *   Affects screen reader users.\\n *   Change it if you\\u2019re authoring in a different language.\\n */\\nconst own = {}.hasOwnProperty;\\n/**\\n * @param {Options} [options={}]\\n * @returns {HtmlExtension}\\n */\\n\\nfunction gfmFootnoteHtml(options = {}) {\\n  const label = options.label || 'Footnotes';\\n  const backLabel = options.backLabel || 'Back to content';\\n  const clobberPrefix = options.clobberPrefix === undefined || options.clobberPrefix === null ? 'user-content-' : options.clobberPrefix;\\n  return {\\n    enter: {\\n      gfmFootnoteDefinition() {\\n        const stack =\\n        /** @type {Array<boolean>} */\\n        this.getData('tightStack');\\n        stack.push(false);\\n      },\\n\\n      gfmFootnoteDefinitionLabelString() {\\n        this.buffer();\\n      },\\n\\n      gfmFootnoteCallString() {\\n        this.buffer();\\n      }\\n\\n    },\\n    exit: {\\n      gfmFootnoteDefinition() {\\n        let definitions =\\n        /** @type {Record<string, string>} */\\n        this.getData('gfmFootnoteDefinitions');\\n        const footnoteStack =\\n        /** @type {Array<string>} */\\n        this.getData('gfmFootnoteDefinitionStack');\\n        const tightStack =\\n        /** @type {Array<boolean>} */\\n        this.getData('tightStack');\\n        const current = footnoteStack.pop();\\n        const value = this.resume();\\n\\n        if (!definitions) {\\n          this.setData('gfmFootnoteDefinitions', definitions = {});\\n        }\\n\\n        if (!own.call(definitions, current)) definitions[current] = value;\\n        tightStack.pop();\\n        this.setData('slurpOneLineEnding', true); // \\u201cHack\\u201d to prevent a line ending from showing up if we\\u2019re in a definition in\\n        // an empty list item.\\n\\n        this.setData('lastWasTag');\\n      },\\n\\n      gfmFootnoteDefinitionLabelString(token) {\\n        let footnoteStack =\\n        /** @type {Array<string>} */\\n        this.getData('gfmFootnoteDefinitionStack');\\n\\n        if (!footnoteStack) {\\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\\n        }\\n\\n        footnoteStack.push((0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token)));\\n        this.resume(); // Drop the label.\\n\\n        this.buffer(); // Get ready for a value.\\n      },\\n\\n      gfmFootnoteCallString(token) {\\n        let calls =\\n        /** @type {Array<string>|undefined} */\\n        this.getData('gfmFootnoteCallOrder');\\n        let counts =\\n        /** @type {Record<string, number>|undefined} */\\n        this.getData('gfmFootnoteCallCounts');\\n        const id = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token));\\n        /** @type {number} */\\n\\n        let counter;\\n        this.resume();\\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\\n        const index = calls.indexOf(id);\\n        const safeId = (0, _micromarkUtilSanitizeUri.sanitizeUri)(id.toLowerCase());\\n\\n        if (index === -1) {\\n          calls.push(id);\\n          counts[id] = 1;\\n          counter = calls.length;\\n        } else {\\n          counts[id]++;\\n          counter = index + 1;\\n        }\\n\\n        const reuseCounter = counts[id];\\n        this.tag('<sup><a href=\\\"#' + clobberPrefix + 'fn-' + safeId + '\\\" id=\\\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\\\" data-footnote-ref=\\\"\\\" aria-describedby=\\\"footnote-label\\\">' + String(counter) + '</a></sup>');\\n      },\\n\\n      null() {\\n        const calls =\\n        /** @type {Array<string>} */\\n        this.getData('gfmFootnoteCallOrder') || [];\\n        const counts =\\n        /** @type {Record<string, number>} */\\n        this.getData('gfmFootnoteCallCounts') || {};\\n        const definitions =\\n        /** @type {Record<string, string>} */\\n        this.getData('gfmFootnoteDefinitions') || {};\\n        let index = -1;\\n\\n        if (calls.length > 0) {\\n          this.lineEndingIfNeeded();\\n          this.tag('<section data-footnotes=\\\"\\\" class=\\\"footnotes\\\"><h2 id=\\\"footnote-label\\\" class=\\\"sr-only\\\">');\\n          this.raw(this.encode(label));\\n          this.tag('</h2>');\\n          this.lineEndingIfNeeded();\\n          this.tag('<ol>');\\n        }\\n\\n        while (++index < calls.length) {\\n          // Called definitions are always defined.\\n          const id = calls[index];\\n          const safeId = (0, _micromarkUtilSanitizeUri.sanitizeUri)(id.toLowerCase());\\n          let referenceIndex = 0;\\n          /** @type {Array<string>} */\\n\\n          const references = [];\\n\\n          while (++referenceIndex <= counts[id]) {\\n            references.push('<a href=\\\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\\\" data-footnote-backref=\\\"\\\" class=\\\"data-footnote-backref\\\" aria-label=\\\"' + this.encode(backLabel) + '\\\">\\u21a9' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\\n          }\\n\\n          const reference = references.join(' ');\\n          let injected = false;\\n          this.lineEndingIfNeeded();\\n          this.tag('<li id=\\\"' + clobberPrefix + 'fn-' + safeId + '\\\">');\\n          this.lineEndingIfNeeded();\\n          this.tag(definitions[id].replace(/<\\\\/p>(?:\\\\r?\\\\n|\\\\r)?$/, (\\n          /** @type {string} */\\n          $0) => {\\n            injected = true;\\n            return ' ' + reference + $0;\\n          }));\\n\\n          if (!injected) {\\n            this.lineEndingIfNeeded();\\n            this.tag(reference);\\n          }\\n\\n          this.lineEndingIfNeeded();\\n          this.tag('</li>');\\n        }\\n\\n        if (calls.length > 0) {\\n          this.lineEndingIfNeeded();\\n          this.tag('</ol>');\\n          this.lineEndingIfNeeded();\\n          this.tag('</section>');\\n        }\\n      }\\n\\n    }\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"gfmFootnoteHtml\",\"options\",\"label\",\"backLabel\",\"clobberPrefix\",\"undefined\",\"enter\",\"gfmFootnoteDefinition\",\"getData\",\"stack\",\"push\",\"gfmFootnoteDefinitionLabelString\",\"buffer\",\"gfmFootnoteCallString\",\"exit\",\"definitions\",\"footnoteStack\",\"tightStack\",\"current\",\"pop\",\"resume\",\"setData\",\"own\",\"call\",\"token\",\"_micromarkUtilNormalizeIdentifier\",\"normalizeIdentifier\",\"sliceSerialize\",\"calls\",\"counts\",\"id\",\"index\",\"indexOf\",\"safeId\",\"_micromarkUtilSanitizeUri\",\"sanitizeUri\",\"toLowerCase\",\"counter\",\"length\",\"reuseCounter\",\"tag\",\"String\",\"null\",\"lineEndingIfNeeded\",\"raw\",\"encode\",\"referenceIndex\",\"references\",\"reference\",\"join\",\"injected\",\"replace\",\"$0\",\"hasOwnProperty\"]\n}\n"]