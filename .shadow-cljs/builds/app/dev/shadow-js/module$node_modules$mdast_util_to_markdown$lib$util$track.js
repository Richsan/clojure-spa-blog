["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-markdown/lib/util/track.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_markdown$lib$util$track=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.track=function(config){config=config||{};const now=config.now||{};let lineShift=config.lineShift||0,line=now.line||1,column=now.column||1;return{move:function(input){input=input||\"\";const chunks=input.split(/\\r?\\n|\\r/g),tail=chunks[chunks.length-1];line+=chunks.length-1;column=1===chunks.length?column+tail.length:1+tail.length+\nlineShift;return input},current:function(){return{now:{line,column},lineShift}},shift:function(value){lineShift+=value}}}}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_markdown$lib$util$track\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.track = track;\n\n/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nfunction track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n\n  /* c8 ignore next 5 */\n  const options = config || {};\n  const now = options.now || {};\n  let lineShift = options.lineShift || 0;\n  let line = now.line || 1;\n  let column = now.column || 1;\n  return {\n    move,\n    current,\n    shift\n  };\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n\n  function current() {\n    return {\n      now: {\n        line,\n        column\n      },\n      lineShift\n    };\n  }\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n\n\n  function shift(value) {\n    lineShift += value;\n  }\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n\n\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || '';\n    const chunks = value.split(/\\r?\\n|\\r/g);\n    const tail = chunks[chunks.length - 1];\n    line += chunks.length - 1;\n    column = chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;\n    return value;\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["track","__esModule","value","shift","current","line","column","lineShift","move","now"]],"~:compiled-at",1676667584527,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_markdown$lib$util$track.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,KAAR,CAcAA,QAAc,CAACC,MAAD,CAAS,CAKfC,MAAAA,CAAUD,MAAVC,EAAoB,EAC1B,OAAMC,IAAMD,MAAQC,CAAAA,GAAdA,EAAqB,EAC3B,KAAIC,UAAYF,MAAQE,CAAAA,SAApBA,EAAiC,CAArC,CACIC,KAAOF,GAAIE,CAAAA,IAAXA,EAAmB,CADvB,CAEIC,OAASH,GAAIG,CAAAA,MAAbA,EAAuB,CAC3B,OAAO,CACLC,KAoCFA,QAAa,CAACC,KAAD,CAAQ,CAEbT,KAAAA,CAAQS,KAART,EAAiB,EACvB,OAAMU,OAASV,KAAMW,CAAAA,KAAN,CAAY,WAAZ,CAAf,CACMC,KAAOF,MAAA,CAAOA,MAAOG,CAAAA,MAAd,CAAuB,CAAvB,CACbP,KAAA,EAAQI,MAAOG,CAAAA,MAAf,CAAwB,CACxBN,OAAA,CAA2B,CAAlB,GAAAG,MAAOG,CAAAA,MAAP,CAAsBN,MAAtB,CAA+BK,IAAKC,CAAAA,MAApC,CAA6C,CAA7C,CAAiDD,IAAKC,CAAAA,MAAtD;AAA+DR,SACxE,OAAOL,MAPY,CArCd,CAELc,QASFA,QAAgB,EAAG,CACjB,MAAO,CACLV,IAAK,CACHE,IADG,CAEHC,MAFG,CADA,CAKLF,SALK,CADU,CAXZ,CAGLU,MAwBFA,QAAc,CAACf,KAAD,CAAQ,CACpBK,SAAA,EAAaL,KADO,CA3Bf,CAVc,CApB+F;\",\n\"sources\":[\"node_modules/mdast-util-to-markdown/lib/util/track.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_markdown$lib$util$track\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.track = track;\\n\\n/**\\n * @typedef {import('../types.js').CreateTracker} CreateTracker\\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\\n * @typedef {import('../types.js').TrackMove} TrackMove\\n * @typedef {import('../types.js').TrackShift} TrackShift\\n */\\n\\n/**\\n * Track positional info in the output.\\n *\\n * @type {CreateTracker}\\n */\\nfunction track(config) {\\n  // Defaults are used to prevent crashes when older utilities somehow activate\\n  // this code.\\n\\n  /* c8 ignore next 5 */\\n  const options = config || {};\\n  const now = options.now || {};\\n  let lineShift = options.lineShift || 0;\\n  let line = now.line || 1;\\n  let column = now.column || 1;\\n  return {\\n    move,\\n    current,\\n    shift\\n  };\\n  /**\\n   * Get the current tracked info.\\n   *\\n   * @type {TrackCurrent}\\n   */\\n\\n  function current() {\\n    return {\\n      now: {\\n        line,\\n        column\\n      },\\n      lineShift\\n    };\\n  }\\n  /**\\n   * Define an increased line shift (the typical indent for lines).\\n   *\\n   * @type {TrackShift}\\n   */\\n\\n\\n  function shift(value) {\\n    lineShift += value;\\n  }\\n  /**\\n   * Move past some generated markdown.\\n   *\\n   * @type {TrackMove}\\n   */\\n\\n\\n  function move(input) {\\n    // eslint-disable-next-line unicorn/prefer-default-parameters\\n    const value = input || '';\\n    const chunks = value.split(/\\\\r?\\\\n|\\\\r/g);\\n    const tail = chunks[chunks.length - 1];\\n    line += chunks.length - 1;\\n    column = chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;\\n    return value;\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"track\",\"config\",\"options\",\"now\",\"lineShift\",\"line\",\"column\",\"move\",\"input\",\"chunks\",\"split\",\"tail\",\"length\",\"current\",\"shift\"]\n}\n"]