["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@uiw/react-md-editor/lib/utils/InsertTextAtPosition.js"],"~:js","shadow$provide.module$node_modules$$uiw$react_md_editor$lib$utils$InsertTextAtPosition=function(global,require,module,exports){function canManipulateViaTextNodes(input){if(\"TEXTAREA\"!==input.nodeName)return!1;\"undefined\"===typeof browserSupportsTextareaTextNodes&&(input=document.createElement(\"textarea\"),input.value=\"1\",browserSupportsTextareaTextNodes=!!input.firstChild);return browserSupportsTextareaTextNodes}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.insertAtLineStart=void 0;\nexports.insertTextAtPosition=function(input,text){input.focus();if(document.selection)input=document.selection.createRange(),input.text=text,input.collapse(!1),input.select();else if(!document.execCommand||!document.execCommand(\"insertText\",!1,text)){var start=input.selectionStart,end=input.selectionEnd;if(\"function\"===typeof input.setRangeText)input.setRangeText(text);else{var range=document.createRange(),textNode=document.createTextNode(text);if(canManipulateViaTextNodes(input)){var node=input.firstChild;\nif(node){for(var offset=0,startNode=null,endNode=null;node&&(null===startNode||null===endNode);){var nodeLength=node.nodeValue.length;start>=offset&&start<=offset+nodeLength&&range.setStart(startNode=node,start-offset);end>=offset&&end<=offset+nodeLength&&range.setEnd(endNode=node,end-offset);offset+=nodeLength;node=node.nextSibling}start!==end&&range.deleteContents()}else input.appendChild(textNode)}canManipulateViaTextNodes(input)&&\"#text\"===range.commonAncestorContainer.nodeName?range.insertNode(textNode):\n(range=input.value,input.value=range.slice(0,start)+text+range.slice(end))}input.setSelectionRange(start+text.length,start+text.length);text=document.createEvent(\"UIEvent\");text.initEvent(\"input\",!0,!1);input.dispatchEvent(text)}};var browserSupportsTextareaTextNodes;exports.insertAtLineStart=function(val,cursorIdx,input){for(var content=input.value,startIdx=0;cursorIdx--;)if(\"\\n\"===content[cursorIdx]){startIdx=cursorIdx+1;break}input.focus();input.setRangeText(val,startIdx,startIdx);input.dispatchEvent(new Event(\"input\",\n{bubbles:!0}))}}","~:source","shadow$provide[\"module$node_modules$$uiw$react_md_editor$lib$utils$InsertTextAtPosition\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.insertAtLineStart = void 0;\nexports.insertTextAtPosition = insertTextAtPosition;\n/**\n * The MIT License\n * Copyright (c) 2018 Dmitriy Kubyshkin\n * Copied from https://github.com/grassator/insert-text-at-cursor\n */\n\nvar browserSupportsTextareaTextNodes;\n\n/**\n * @param {HTMLElement} input\n * @return {boolean}\n */\nfunction canManipulateViaTextNodes(input) {\n  if (input.nodeName !== 'TEXTAREA') {\n    return false;\n  }\n  if (typeof browserSupportsTextareaTextNodes === 'undefined') {\n    var textarea = document.createElement('textarea');\n    textarea.value = '1';\n    browserSupportsTextareaTextNodes = !!textarea.firstChild;\n  }\n  return browserSupportsTextareaTextNodes;\n}\n\n/**\n * @param {string} val\n * @param {number} cursorIdx\n * @param {HTMLTextAreaElement|HTMLInputElement} input\n * @return {void}\n */\nvar insertAtLineStart = function insertAtLineStart(val, cursorIdx, input) {\n  var content = input.value;\n  var startIdx = 0;\n  while (cursorIdx--) {\n    var _char = content[cursorIdx];\n    if (_char === '\\n') {\n      startIdx = cursorIdx + 1;\n      break;\n    }\n  }\n  input.focus();\n  input.setRangeText(val, startIdx, startIdx);\n  input.dispatchEvent(new Event('input', {\n    bubbles: true\n  }));\n};\n\n/**\n * @param {HTMLTextAreaElement|HTMLInputElement} input\n * @param {string} text\n * @returns {void}\n */\nexports.insertAtLineStart = insertAtLineStart;\nfunction insertTextAtPosition(input, text) {\n  // Most of the used APIs only work with the field selected\n  input.focus();\n\n  // IE 8-10\n  if (document.selection) {\n    var ieRange = document.selection.createRange();\n    ieRange.text = text;\n\n    // Move cursor after the inserted text\n    ieRange.collapse(false /* to the end */);\n    ieRange.select();\n    return;\n  }\n\n  // Webkit + Edge\n  var isSuccess = document.execCommand && document.execCommand('insertText', false, text);\n  if (!isSuccess) {\n    var start = input.selectionStart;\n    var end = input.selectionEnd;\n    // Firefox (non-standard method)\n    if (typeof input.setRangeText === 'function') {\n      input.setRangeText(text);\n    } else {\n      // To make a change we just need a Range, not a Selection\n      var range = document.createRange();\n      var textNode = document.createTextNode(text);\n      if (canManipulateViaTextNodes(input)) {\n        var node = input.firstChild;\n\n        // If textarea is empty, just insert the text\n        if (!node) {\n          input.appendChild(textNode);\n        } else {\n          // Otherwise we need to find a nodes for start and end\n          var offset = 0;\n          var startNode = null;\n          var endNode = null;\n          while (node && (startNode === null || endNode === null)) {\n            var nodeLength = node.nodeValue.length;\n\n            // if start of the selection falls into current node\n            if (start >= offset && start <= offset + nodeLength) {\n              range.setStart(startNode = node, start - offset);\n            }\n\n            // if end of the selection falls into current node\n            if (end >= offset && end <= offset + nodeLength) {\n              range.setEnd(endNode = node, end - offset);\n            }\n            offset += nodeLength;\n            node = node.nextSibling;\n          }\n\n          // If there is some text selected, remove it as we should replace it\n          if (start !== end) {\n            range.deleteContents();\n          }\n        }\n      }\n\n      // If the node is a textarea and the range doesn't span outside the element\n      //\n      // Get the commonAncestorContainer of the selected range and test its type\n      // If the node is of type `#text` it means that we're still working with text nodes within our textarea element\n      // otherwise, if it's of type `#document` for example it means our selection spans outside the textarea.\n      if (canManipulateViaTextNodes(input) && range.commonAncestorContainer.nodeName === '#text') {\n        // Finally insert a new node. The browser will automatically split start and end nodes into two if necessary\n        range.insertNode(textNode);\n      } else {\n        // If the node is not a textarea or the range spans outside a textarea the only way is to replace the whole value\n        var value = input.value;\n        input.value = value.slice(0, start) + text + value.slice(end);\n      }\n    }\n\n    // Correct the cursor position to be at the end of the insertion\n    input.setSelectionRange(start + text.length, start + text.length);\n\n    // Notify any possible listeners of the change\n    var e = document.createEvent('UIEvent');\n    e.initEvent('input', true, false);\n    input.dispatchEvent(e);\n  }\n}\n//# sourceMappingURL=InsertTextAtPosition.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["insertTextAtPosition","__esModule","value","insertAtLineStart","text","bubbles"]],"~:compiled-at",1676841365508,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$uiw$react_md_editor$lib$utils$InsertTextAtPosition.js\",\n\"lineCount\":5,\n\"mappings\":\"AAAAA,cAAA,CAAA,uEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoBpIC,QAASA,0BAAyB,CAACC,KAAD,CAAQ,CACxC,GAAuB,UAAvB,GAAIA,KAAMC,CAAAA,QAAV,CACE,MAAO,CAAA,CAEuC,YAAhD,GAAI,MAAOC,iCAAX,GACMC,KAEJ,CAFeC,QAASC,CAAAA,aAAT,CAAuB,UAAvB,CAEf,CADAF,KAASG,CAAAA,KACT,CADiB,GACjB,CAAAJ,gCAAA,CAAmC,CAAC,CAACC,KAASI,CAAAA,UAHhD,CAKA,OAAOL,iCATiC,CAjB1CM,MAAOC,CAAAA,cAAP,CAAsBX,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CQ,MAAO,CAAA,CADoC,CAA7C,CAGAR,QAAQY,CAAAA,iBAAR,CAA4B,IAAK,EACjCZ;OAAQa,CAAAA,oBAAR,CAsDAA,QAA6B,CAACX,KAAD,CAAQY,IAAR,CAAc,CAEzCZ,KAAMa,CAAAA,KAAN,EAGA,IAAIT,QAASU,CAAAA,SAAb,CACMC,KAKJ,CALcX,QAASU,CAAAA,SAAUE,CAAAA,WAAnB,EAKd,CAJAD,KAAQH,CAAAA,IAIR,CAJeA,IAIf,CADAG,KAAQE,CAAAA,QAAR,CAAiB,CAAA,CAAjB,CACA,CAAAF,KAAQG,CAAAA,MAAR,EANF,KAYA,IADyBC,CAATf,QAASe,CAAAA,WACzB,EADwC,CAAAf,QAASe,CAAAA,WAAT,CAAqB,YAArB,CAAmC,CAAA,CAAnC,CAA0CP,IAA1C,CACxC,CAAgB,CACd,IAAIQ,MAAQpB,KAAMqB,CAAAA,cAAlB,CACIC,IAAMtB,KAAMuB,CAAAA,YAEhB,IAAkC,UAAlC,GAAI,MAAOvB,MAAMwB,CAAAA,YAAjB,CACExB,KAAMwB,CAAAA,YAAN,CAAmBZ,IAAnB,CADF,KAEO,CAEL,IAAIa,MAAQrB,QAASY,CAAAA,WAAT,EAAZ,CACIU,SAAWtB,QAASuB,CAAAA,cAAT,CAAwBf,IAAxB,CACf,IAAIb,yBAAA,CAA0BC,KAA1B,CAAJ,CAAsC,CACpC,IAAI4B,KAAO5B,KAAMO,CAAAA,UAGjB;GAAKqB,IAAL,CAEO,CAKL,IAHA,IAAIC,OAAS,CAAb,CACIC,UAAY,IADhB,CAEIC,QAAU,IACd,CAAOH,IAAP,GAA8B,IAA9B,GAAgBE,SAAhB,EAAkD,IAAlD,GAAsCC,OAAtC,EAAA,CAAyD,CACvD,IAAIC,WAAaJ,IAAKK,CAAAA,SAAUC,CAAAA,MAG5Bd,MAAJ,EAAaS,MAAb,EAAuBT,KAAvB,EAAgCS,MAAhC,CAAyCG,UAAzC,EACEP,KAAMU,CAAAA,QAAN,CAAeL,SAAf,CAA2BF,IAA3B,CAAiCR,KAAjC,CAAyCS,MAAzC,CAIEP,IAAJ,EAAWO,MAAX,EAAqBP,GAArB,EAA4BO,MAA5B,CAAqCG,UAArC,EACEP,KAAMW,CAAAA,MAAN,CAAaL,OAAb,CAAuBH,IAAvB,CAA6BN,GAA7B,CAAmCO,MAAnC,CAEFA,OAAA,EAAUG,UACVJ,KAAA,CAAOA,IAAKS,CAAAA,WAb2C,CAiBrDjB,KAAJ,GAAcE,GAAd,EACEG,KAAMa,CAAAA,cAAN,EAvBG,CAFP,IACEtC,MAAMuC,CAAAA,WAAN,CAAkBb,QAAlB,CALkC,CAuClC3B,yBAAA,CAA0BC,KAA1B,CAAJ,EAAmF,OAAnF,GAAwCyB,KAAMe,CAAAA,uBAAwBvC,CAAAA,QAAtE,CAEEwB,KAAMgB,CAAAA,UAAN,CAAiBf,QAAjB,CAFF;CAKMpB,KACJ,CADYN,KAAMM,CAAAA,KAClB,CAAAN,KAAMM,CAAAA,KAAN,CAAcA,KAAMoC,CAAAA,KAAN,CAAY,CAAZ,CAAetB,KAAf,CAAd,CAAsCR,IAAtC,CAA6CN,KAAMoC,CAAAA,KAAN,CAAYpB,GAAZ,CAN/C,CA3CK,CAsDPtB,KAAM2C,CAAAA,iBAAN,CAAwBvB,KAAxB,CAAgCR,IAAKsB,CAAAA,MAArC,CAA6Cd,KAA7C,CAAqDR,IAAKsB,CAAAA,MAA1D,CAGIU,KAAAA,CAAIxC,QAASyC,CAAAA,WAAT,CAAqB,SAArB,CACRD,KAAEE,CAAAA,SAAF,CAAY,OAAZ,CAAqB,CAAA,CAArB,CAA2B,CAAA,CAA3B,CACA9C,MAAM+C,CAAAA,aAAN,CAAoBH,IAApB,CAjEc,CAjByB,CA/C3C,KAAI1C,gCA8CJJ,QAAQY,CAAAA,iBAAR,CAtBwBA,QAA0B,CAACsC,GAAD,CAAMC,SAAN,CAAiBjD,KAAjB,CAAwB,CAGxE,IAFA,IAAIkD,QAAUlD,KAAMM,CAAAA,KAApB,CACI6C,SAAW,CACf,CAAOF,SAAA,EAAP,CAAA,CAEE,GAAc,IAAd,GADYC,OAAAE,CAAQH,SAARG,CACZ,CAAoB,CAClBD,QAAA,CAAWF,SAAX,CAAuB,CACvB,MAFkB,CAKtBjD,KAAMa,CAAAA,KAAN,EACAb,MAAMwB,CAAAA,YAAN,CAAmBwB,GAAnB,CAAwBG,QAAxB,CAAkCA,QAAlC,CACAnD,MAAM+C,CAAAA,aAAN,CAAoB,IAAIM,KAAJ,CAAU,OAAV;AAAmB,CACrCC,QAAS,CAAA,CAD4B,CAAnB,CAApB,CAZwE,CAtC0D;\",\n\"sources\":[\"node_modules/@uiw/react-md-editor/lib/utils/InsertTextAtPosition.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$uiw$react_md_editor$lib$utils$InsertTextAtPosition\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.insertAtLineStart = void 0;\\nexports.insertTextAtPosition = insertTextAtPosition;\\n/**\\n * The MIT License\\n * Copyright (c) 2018 Dmitriy Kubyshkin\\n * Copied from https://github.com/grassator/insert-text-at-cursor\\n */\\n\\nvar browserSupportsTextareaTextNodes;\\n\\n/**\\n * @param {HTMLElement} input\\n * @return {boolean}\\n */\\nfunction canManipulateViaTextNodes(input) {\\n  if (input.nodeName !== 'TEXTAREA') {\\n    return false;\\n  }\\n  if (typeof browserSupportsTextareaTextNodes === 'undefined') {\\n    var textarea = document.createElement('textarea');\\n    textarea.value = '1';\\n    browserSupportsTextareaTextNodes = !!textarea.firstChild;\\n  }\\n  return browserSupportsTextareaTextNodes;\\n}\\n\\n/**\\n * @param {string} val\\n * @param {number} cursorIdx\\n * @param {HTMLTextAreaElement|HTMLInputElement} input\\n * @return {void}\\n */\\nvar insertAtLineStart = function insertAtLineStart(val, cursorIdx, input) {\\n  var content = input.value;\\n  var startIdx = 0;\\n  while (cursorIdx--) {\\n    var _char = content[cursorIdx];\\n    if (_char === '\\\\n') {\\n      startIdx = cursorIdx + 1;\\n      break;\\n    }\\n  }\\n  input.focus();\\n  input.setRangeText(val, startIdx, startIdx);\\n  input.dispatchEvent(new Event('input', {\\n    bubbles: true\\n  }));\\n};\\n\\n/**\\n * @param {HTMLTextAreaElement|HTMLInputElement} input\\n * @param {string} text\\n * @returns {void}\\n */\\nexports.insertAtLineStart = insertAtLineStart;\\nfunction insertTextAtPosition(input, text) {\\n  // Most of the used APIs only work with the field selected\\n  input.focus();\\n\\n  // IE 8-10\\n  if (document.selection) {\\n    var ieRange = document.selection.createRange();\\n    ieRange.text = text;\\n\\n    // Move cursor after the inserted text\\n    ieRange.collapse(false /* to the end */);\\n    ieRange.select();\\n    return;\\n  }\\n\\n  // Webkit + Edge\\n  var isSuccess = document.execCommand && document.execCommand('insertText', false, text);\\n  if (!isSuccess) {\\n    var start = input.selectionStart;\\n    var end = input.selectionEnd;\\n    // Firefox (non-standard method)\\n    if (typeof input.setRangeText === 'function') {\\n      input.setRangeText(text);\\n    } else {\\n      // To make a change we just need a Range, not a Selection\\n      var range = document.createRange();\\n      var textNode = document.createTextNode(text);\\n      if (canManipulateViaTextNodes(input)) {\\n        var node = input.firstChild;\\n\\n        // If textarea is empty, just insert the text\\n        if (!node) {\\n          input.appendChild(textNode);\\n        } else {\\n          // Otherwise we need to find a nodes for start and end\\n          var offset = 0;\\n          var startNode = null;\\n          var endNode = null;\\n          while (node && (startNode === null || endNode === null)) {\\n            var nodeLength = node.nodeValue.length;\\n\\n            // if start of the selection falls into current node\\n            if (start >= offset && start <= offset + nodeLength) {\\n              range.setStart(startNode = node, start - offset);\\n            }\\n\\n            // if end of the selection falls into current node\\n            if (end >= offset && end <= offset + nodeLength) {\\n              range.setEnd(endNode = node, end - offset);\\n            }\\n            offset += nodeLength;\\n            node = node.nextSibling;\\n          }\\n\\n          // If there is some text selected, remove it as we should replace it\\n          if (start !== end) {\\n            range.deleteContents();\\n          }\\n        }\\n      }\\n\\n      // If the node is a textarea and the range doesn't span outside the element\\n      //\\n      // Get the commonAncestorContainer of the selected range and test its type\\n      // If the node is of type `#text` it means that we're still working with text nodes within our textarea element\\n      // otherwise, if it's of type `#document` for example it means our selection spans outside the textarea.\\n      if (canManipulateViaTextNodes(input) && range.commonAncestorContainer.nodeName === '#text') {\\n        // Finally insert a new node. The browser will automatically split start and end nodes into two if necessary\\n        range.insertNode(textNode);\\n      } else {\\n        // If the node is not a textarea or the range spans outside a textarea the only way is to replace the whole value\\n        var value = input.value;\\n        input.value = value.slice(0, start) + text + value.slice(end);\\n      }\\n    }\\n\\n    // Correct the cursor position to be at the end of the insertion\\n    input.setSelectionRange(start + text.length, start + text.length);\\n\\n    // Notify any possible listeners of the change\\n    var e = document.createEvent('UIEvent');\\n    e.initEvent('input', true, false);\\n    input.dispatchEvent(e);\\n  }\\n}\\n//# sourceMappingURL=InsertTextAtPosition.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"canManipulateViaTextNodes\",\"input\",\"nodeName\",\"browserSupportsTextareaTextNodes\",\"textarea\",\"document\",\"createElement\",\"value\",\"firstChild\",\"Object\",\"defineProperty\",\"insertAtLineStart\",\"insertTextAtPosition\",\"text\",\"focus\",\"selection\",\"ieRange\",\"createRange\",\"collapse\",\"select\",\"execCommand\",\"start\",\"selectionStart\",\"end\",\"selectionEnd\",\"setRangeText\",\"range\",\"textNode\",\"createTextNode\",\"node\",\"offset\",\"startNode\",\"endNode\",\"nodeLength\",\"nodeValue\",\"length\",\"setStart\",\"setEnd\",\"nextSibling\",\"deleteContents\",\"appendChild\",\"commonAncestorContainer\",\"insertNode\",\"slice\",\"setSelectionRange\",\"e\",\"createEvent\",\"initEvent\",\"dispatchEvent\",\"val\",\"cursorIdx\",\"content\",\"startIdx\",\"_char\",\"Event\",\"bubbles\"]\n}\n"]