["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/hast-util-to-html/lib/index.js"],"~:js","shadow$provide.module$node_modules$hast_util_to_html$lib$index=function(global,require,module,exports){function one(node,index,parent){return(0,_index.handle)(node,index,parent,this)}function all(parent){const results=[],children=parent&&parent.children||[];let index=-1;for(;++index<children.length;)results[index]=this.one(children[index],index,parent);return results.join(\"\")}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.toHtml=function(tree,options){options=options||{};const quote=\noptions.quote||'\"';if('\"'!==quote&&\"'\"!==quote)throw Error(\"Invalid quote `\"+quote+\"`, expected `'` or `\\\"`\");return{one,all,settings:{omitOptionalTags:options.omitOptionalTags||!1,allowParseErrors:options.allowParseErrors||!1,allowDangerousCharacters:options.allowDangerousCharacters||!1,quoteSmart:options.quoteSmart||!1,preferUnquoted:options.preferUnquoted||!1,tightAttributes:options.tightAttributes||!1,upperDoctype:options.upperDoctype||!1,tightDoctype:options.tightDoctype||!1,bogusComments:options.bogusComments||\n!1,tightCommaSeparatedLists:options.tightCommaSeparatedLists||!1,tightSelfClosing:options.tightSelfClosing||!1,collapseEmptyAttributes:options.collapseEmptyAttributes||!1,allowDangerousHtml:options.allowDangerousHtml||!1,voids:options.voids||_htmlVoidElements.htmlVoidElements,characterReferences:options.characterReferences||options.entities||{},closeSelfClosing:options.closeSelfClosing||!1,closeEmptyElements:options.closeEmptyElements||!1},schema:\"svg\"===options.space?_propertyInformation.svg:_propertyInformation.html,\nquote,alternative:'\"'===quote?\"'\":'\"'}.one(Array.isArray(tree)?{type:\"root\",children:tree}:tree,void 0,void 0)};exports.all=all;var _propertyInformation=require(\"module$node_modules$property_information$index\"),_htmlVoidElements=require(\"module$node_modules$html_void_elements$index\"),_index=require(\"module$node_modules$hast_util_to_html$lib$handle$index\")}","~:source","shadow$provide[\"module$node_modules$hast_util_to_html$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHtml = toHtml;\nexports.all = all;\n\nvar _propertyInformation = require(\"property-information\");\n\nvar _htmlVoidElements = require(\"html-void-elements\");\n\nvar _index = require(\"./handle/index.js\");\n\n/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Content} Content\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Node | Array<Content>} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Serialized HTML.\n */\n// eslint-disable-next-line complexity\nfunction toHtml(tree, options) {\n  const options_ = options || {};\n  const quote = options_.quote || '\"';\n  const alternative = quote === '\"' ? \"'\" : '\"';\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`');\n  }\n  /** @type {State} */\n\n\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || _htmlVoidElements.htmlVoidElements,\n      characterReferences: options_.characterReferences || options_.entities || {},\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? _propertyInformation.svg : _propertyInformation.html,\n    quote,\n    alternative\n  };\n  return state.one(Array.isArray(tree) ? {\n    type: 'root',\n    children: tree\n  } : tree, undefined, undefined);\n}\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Node} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\n\n\nfunction one(node, index, parent) {\n  return (0, _index.handle)(node, index, parent, this);\n}\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\n\n\nfunction all(parent) {\n  /** @type {Array<string>} */\n  const results = [];\n  const children = parent && parent.children || [];\n  let index = -1;\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent);\n  }\n\n  return results.join('');\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$property_information$index","~$module$node_modules$hast_util_to_html$lib$handle$index","~$shadow.js","~$module$node_modules$html_void_elements$index"]],"~:properties",["^5",["characterReferences","allowDangerousHtml","closeEmptyElements","settings","tightAttributes","quoteSmart","children","__esModule","schema","allowDangerousCharacters","value","omitOptionalTags","allowParseErrors","bogusComments","toHtml","tightCommaSeparatedLists","type","one","quote","tightSelfClosing","all","tightDoctype","upperDoctype","collapseEmptyAttributes","voids","alternative","preferUnquoted","closeSelfClosing"]],"~:compiled-at",1676686799677,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$hast_util_to_html$lib$index.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/hast-util-to-html/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$hast_util_to_html$lib$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.toHtml = toHtml;\\nexports.all = all;\\n\\nvar _propertyInformation = require(\\\"property-information\\\");\\n\\nvar _htmlVoidElements = require(\\\"html-void-elements\\\");\\n\\nvar _index = require(\\\"./handle/index.js\\\");\\n\\n/**\\n * @typedef {import('./types.js').Node} Node\\n * @typedef {import('./types.js').Parent} Parent\\n * @typedef {import('./types.js').Content} Content\\n * @typedef {import('./types.js').Options} Options\\n * @typedef {import('./types.js').State} State\\n */\\n\\n/**\\n * Serialize hast as HTML.\\n *\\n * @param {Node | Array<Content>} tree\\n *   Tree to serialize.\\n * @param {Options | null | undefined} [options]\\n *   Configuration.\\n * @returns {string}\\n *   Serialized HTML.\\n */\\n// eslint-disable-next-line complexity\\nfunction toHtml(tree, options) {\\n  const options_ = options || {};\\n  const quote = options_.quote || '\\\"';\\n  const alternative = quote === '\\\"' ? \\\"'\\\" : '\\\"';\\n\\n  if (quote !== '\\\"' && quote !== \\\"'\\\") {\\n    throw new Error('Invalid quote `' + quote + '`, expected `\\\\'` or `\\\"`');\\n  }\\n  /** @type {State} */\\n\\n\\n  const state = {\\n    one,\\n    all,\\n    settings: {\\n      omitOptionalTags: options_.omitOptionalTags || false,\\n      allowParseErrors: options_.allowParseErrors || false,\\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\\n      quoteSmart: options_.quoteSmart || false,\\n      preferUnquoted: options_.preferUnquoted || false,\\n      tightAttributes: options_.tightAttributes || false,\\n      upperDoctype: options_.upperDoctype || false,\\n      tightDoctype: options_.tightDoctype || false,\\n      bogusComments: options_.bogusComments || false,\\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\\n      tightSelfClosing: options_.tightSelfClosing || false,\\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\\n      allowDangerousHtml: options_.allowDangerousHtml || false,\\n      voids: options_.voids || _htmlVoidElements.htmlVoidElements,\\n      characterReferences: options_.characterReferences || options_.entities || {},\\n      closeSelfClosing: options_.closeSelfClosing || false,\\n      closeEmptyElements: options_.closeEmptyElements || false\\n    },\\n    schema: options_.space === 'svg' ? _propertyInformation.svg : _propertyInformation.html,\\n    quote,\\n    alternative\\n  };\\n  return state.one(Array.isArray(tree) ? {\\n    type: 'root',\\n    children: tree\\n  } : tree, undefined, undefined);\\n}\\n/**\\n * Serialize a node.\\n *\\n * @this {State}\\n *   Info passed around about the current state.\\n * @param {Node} node\\n *   Node to handle.\\n * @param {number | undefined} index\\n *   Index of `node` in `parent.\\n * @param {Parent | undefined} parent\\n *   Parent of `node`.\\n * @returns {string}\\n *   Serialized node.\\n */\\n\\n\\nfunction one(node, index, parent) {\\n  return (0, _index.handle)(node, index, parent, this);\\n}\\n/**\\n * Serialize all children of `parent`.\\n *\\n * @this {State}\\n *   Info passed around about the current state.\\n * @param {Parent | undefined} parent\\n *   Parent whose children to serialize.\\n * @returns {string}\\n */\\n\\n\\nfunction all(parent) {\\n  /** @type {Array<string>} */\\n  const results = [];\\n  const children = parent && parent.children || [];\\n  let index = -1;\\n\\n  while (++index < children.length) {\\n    results[index] = this.one(children[index], index, parent);\\n  }\\n\\n  return results.join('');\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"one\",\"node\",\"index\",\"parent\",\"_index\",\"handle\",\"all\",\"results\",\"children\",\"length\",\"join\",\"Object\",\"defineProperty\",\"value\",\"toHtml\",\"tree\",\"options\",\"options_\",\"quote\",\"Error\",\"state\",\"settings\",\"omitOptionalTags\",\"allowParseErrors\",\"allowDangerousCharacters\",\"quoteSmart\",\"preferUnquoted\",\"tightAttributes\",\"upperDoctype\",\"tightDoctype\",\"bogusComments\",\"tightCommaSeparatedLists\",\"tightSelfClosing\",\"collapseEmptyAttributes\",\"allowDangerousHtml\",\"voids\",\"_htmlVoidElements\",\"htmlVoidElements\",\"characterReferences\",\"entities\",\"closeSelfClosing\",\"closeEmptyElements\",\"schema\",\"space\",\"_propertyInformation\",\"svg\",\"html\",\"alternative\",\"Array\",\"isArray\",\"type\",\"undefined\"]\n}\n"]