["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/markup.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$markup=function(global,require,module,exports){function markup(Prism){Prism.languages.markup={comment:{pattern:/\\x3c!--(?:(?!\\x3c!--)[\\s\\S])*?--\\x3e/,greedy:!0},prolog:{pattern:/<\\?[\\s\\S]+?\\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|\\x3c!--(?:[^-]|-(?!->))*--\\x3e)*\\]\\s*)?>/i,greedy:!0,inside:{\"internal-subset\":{pattern:/(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,lookbehind:!0,greedy:!0,inside:null},\nstring:{pattern:/\"[^\"]*\"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\\]]/,\"doctype-tag\":/^DOCTYPE/i,name:/[^\\s<>'\"]+/}},cdata:{pattern:/<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,greedy:!0},tag:{pattern:/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,greedy:!0,inside:{tag:{pattern:/^<\\/?[^\\s>\\/]+/,inside:{punctuation:/^<\\/?/,namespace:/^[^\\s>\\/:]+:/}},\"special-attr\":[],\"attr-value\":{pattern:/=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,inside:{punctuation:[{pattern:/^=/,\nalias:\"attr-equals\"},{pattern:/^(\\s*)[\"']|[\"']$/,lookbehind:!0}]}},punctuation:/\\/?>/,\"attr-name\":{pattern:/[^\\s>\\/]+/,inside:{namespace:/^[^\\s>\\/:]+:/}}}},entity:[{pattern:/&[\\da-z]{1,8};/i,alias:\"named-entity\"},/&#x?[\\da-f]{1,8};/i]};Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity=Prism.languages.markup.entity;Prism.languages.markup.doctype.inside[\"internal-subset\"].inside=Prism.languages.markup;Prism.hooks.add(\"wrap\",function(env){\"entity\"===env.type&&(env.attributes.title=env.content.value.replace(/&amp;/,\n\"\\x26\"))});Object.defineProperty(Prism.languages.markup.tag,\"addInlined\",{value:function(tagName,lang){var includedCdataInside={};includedCdataInside[\"language-\"+lang]={pattern:/(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,lookbehind:!0,inside:Prism.languages[lang]};includedCdataInside.cdata=/^<!\\[CDATA\\[|\\]\\]>$/i;includedCdataInside={\"included-cdata\":{pattern:/<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,inside:includedCdataInside}};includedCdataInside[\"language-\"+lang]={pattern:/[\\s\\S]+/,inside:Prism.languages[lang]};lang=\n{};lang[tagName]={pattern:RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g,function(){return tagName}),\"i\"),lookbehind:!0,greedy:!0,inside:includedCdataInside};Prism.languages.insertBefore(\"markup\",\"cdata\",lang)}});Object.defineProperty(Prism.languages.markup.tag,\"addAttribute\",{value:function(attrName,lang){Prism.languages.markup.tag.inside[\"special-attr\"].push({pattern:RegExp(/(^|[\"'\\s])/.source+\"(?:\"+attrName+\")\"+/\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\"i\"),lookbehind:!0,inside:{\"attr-name\":/^[^\\s=]+/,\"attr-value\":{pattern:/=[\\s\\S]+/,inside:{value:{pattern:/(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,lookbehind:!0,alias:[lang,\"language-\"+lang],inside:Prism.languages[lang]},punctuation:[{pattern:/^=/,alias:\"attr-equals\"},/\"|'/]}}}})}});Prism.languages.html=Prism.languages.markup;Prism.languages.mathml=Prism.languages.markup;Prism.languages.svg=Prism.languages.markup;Prism.languages.xml=Prism.languages.extend(\"markup\",{});Prism.languages.ssml=Prism.languages.xml;\nPrism.languages.atom=Prism.languages.xml;Prism.languages.rss=Prism.languages.xml}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=markup;markup.displayName=\"markup\";markup.aliases=\"atom html mathml rss ssml svg xml\".split(\" \")}","~:source","shadow$provide[\"module$node_modules$refractor$lang$markup\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = markup;\n// @ts-nocheck\nmarkup.displayName = 'markup';\nmarkup.aliases = ['atom', 'html', 'mathml', 'rss', 'ssml', 'svg', 'xml'];\n/** @type {import('../core.js').Syntax} */\n\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: {\n      pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n      greedy: true\n    },\n    prolog: {\n      pattern: /<\\?[\\s\\S]+?\\?>/,\n      greedy: true\n    },\n    doctype: {\n      // https://www.w3.org/TR/xml/#NT-doctypedecl\n      pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n      greedy: true,\n      inside: {\n        'internal-subset': {\n          pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n          lookbehind: true,\n          greedy: true,\n          inside: null // see below\n\n        },\n        string: {\n          pattern: /\"[^\"]*\"|'[^']*'/,\n          greedy: true\n        },\n        punctuation: /^<!|>$|[[\\]]/,\n        'doctype-tag': /^DOCTYPE/i,\n        name: /[^\\s<>'\"]+/\n      }\n    },\n    cdata: {\n      pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n      greedy: true\n    },\n    tag: {\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'special-attr': [],\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n          inside: {\n            punctuation: [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, {\n              pattern: /^(\\s*)[\"']|[\"']$/,\n              lookbehind: true\n            }]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: [{\n      pattern: /&[\\da-z]{1,8};/i,\n      alias: 'named-entity'\n    }, /&#x?[\\da-f]{1,8};/i]\n  };\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\n  Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\n    }\n  });\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {};\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      };\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      };\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      };\n      var def = {};\n      def[tagName] = {\n        pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n          return tagName;\n        }), 'i'),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      };\n      Prism.languages.insertBefore('markup', 'cdata', def);\n    }\n  });\n  Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n    /**\n     * Adds an pattern to highlight languages embedded in HTML attributes.\n     *\n     * An example of an inlined language is CSS with `style` attributes.\n     *\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addAttribute('style', 'css');\n     */\n    value: function (attrName, lang) {\n      Prism.languages.markup.tag.inside['special-attr'].push({\n        pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n        lookbehind: true,\n        inside: {\n          'attr-name': /^[^\\s=]+/,\n          'attr-value': {\n            pattern: /=[\\s\\S]+/,\n            inside: {\n              value: {\n                pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                lookbehind: true,\n                alias: [lang, 'language-' + lang],\n                inside: Prism.languages[lang]\n              },\n              punctuation: [{\n                pattern: /^=/,\n                alias: 'attr-equals'\n              }, /\"|'/]\n            }\n          }\n        }\n      });\n    }\n  });\n  Prism.languages.html = Prism.languages.markup;\n  Prism.languages.mathml = Prism.languages.markup;\n  Prism.languages.svg = Prism.languages.markup;\n  Prism.languages.xml = Prism.languages.extend('markup', {});\n  Prism.languages.ssml = Prism.languages.xml;\n  Prism.languages.atom = Prism.languages.xml;\n  Prism.languages.rss = Prism.languages.xml;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["cdata","ssml","punctuation","string","xml","aliases","mathml","displayName","markup","__esModule","svg","prolog","lookbehind","name","tag","value","atom","greedy","addInlined","pattern","inside","alias","addAttribute","html","namespace","comment","entity","doctype","default","rss"]],"~:compiled-at",1676841365361,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$markup.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/markup.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$markup\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = markup;\\n// @ts-nocheck\\nmarkup.displayName = 'markup';\\nmarkup.aliases = ['atom', 'html', 'mathml', 'rss', 'ssml', 'svg', 'xml'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction markup(Prism) {\\n  Prism.languages.markup = {\\n    comment: {\\n      pattern: /\\u003c!--(?:(?!\\u003c!--)[\\\\s\\\\S])*?--\\u003e/,\\n      greedy: true\\n    },\\n    prolog: {\\n      pattern: /<\\\\?[\\\\s\\\\S]+?\\\\?>/,\\n      greedy: true\\n    },\\n    doctype: {\\n      // https://www.w3.org/TR/xml/#NT-doctypedecl\\n      pattern: /<!DOCTYPE(?:[^>\\\"'[\\\\]]|\\\"[^\\\"]*\\\"|'[^']*')+(?:\\\\[(?:[^<\\\"'\\\\]]|\\\"[^\\\"]*\\\"|'[^']*'|<(?!!--)|\\u003c!--(?:[^-]|-(?!->))*--\\u003e)*\\\\]\\\\s*)?>/i,\\n      greedy: true,\\n      inside: {\\n        'internal-subset': {\\n          pattern: /(^[^\\\\[]*\\\\[)[\\\\s\\\\S]+(?=\\\\]>$)/,\\n          lookbehind: true,\\n          greedy: true,\\n          inside: null // see below\\n\\n        },\\n        string: {\\n          pattern: /\\\"[^\\\"]*\\\"|'[^']*'/,\\n          greedy: true\\n        },\\n        punctuation: /^<!|>$|[[\\\\]]/,\\n        'doctype-tag': /^DOCTYPE/i,\\n        name: /[^\\\\s<>'\\\"]+/\\n      }\\n    },\\n    cdata: {\\n      pattern: /<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>/i,\\n      greedy: true\\n    },\\n    tag: {\\n      pattern: /<\\\\/?(?!\\\\d)[^\\\\s>\\\\/=$<%]+(?:\\\\s(?:\\\\s*[^\\\\s>\\\\/=]+(?:\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s'\\\">=]+(?=[\\\\s>]))|(?=[\\\\s/>])))+)?\\\\s*\\\\/?>/,\\n      greedy: true,\\n      inside: {\\n        tag: {\\n          pattern: /^<\\\\/?[^\\\\s>\\\\/]+/,\\n          inside: {\\n            punctuation: /^<\\\\/?/,\\n            namespace: /^[^\\\\s>\\\\/:]+:/\\n          }\\n        },\\n        'special-attr': [],\\n        'attr-value': {\\n          pattern: /=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s'\\\">=]+)/,\\n          inside: {\\n            punctuation: [{\\n              pattern: /^=/,\\n              alias: 'attr-equals'\\n            }, {\\n              pattern: /^(\\\\s*)[\\\"']|[\\\"']$/,\\n              lookbehind: true\\n            }]\\n          }\\n        },\\n        punctuation: /\\\\/?>/,\\n        'attr-name': {\\n          pattern: /[^\\\\s>\\\\/]+/,\\n          inside: {\\n            namespace: /^[^\\\\s>\\\\/:]+:/\\n          }\\n        }\\n      }\\n    },\\n    entity: [{\\n      pattern: /&[\\\\da-z]{1,8};/i,\\n      alias: 'named-entity'\\n    }, /&#x?[\\\\da-f]{1,8};/i]\\n  };\\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\\n  Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\\n\\n  Prism.hooks.add('wrap', function (env) {\\n    if (env.type === 'entity') {\\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\\n    }\\n  });\\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\\n    /**\\n     * Adds an inlined language to markup.\\n     *\\n     * An example of an inlined language is CSS with `<style>` tags.\\n     *\\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\\n     * case insensitive.\\n     * @param {string} lang The language key.\\n     * @example\\n     * addInlined('style', 'css');\\n     */\\n    value: function addInlined(tagName, lang) {\\n      var includedCdataInside = {};\\n      includedCdataInside['language-' + lang] = {\\n        pattern: /(^<!\\\\[CDATA\\\\[)[\\\\s\\\\S]+?(?=\\\\]\\\\]>$)/i,\\n        lookbehind: true,\\n        inside: Prism.languages[lang]\\n      };\\n      includedCdataInside['cdata'] = /^<!\\\\[CDATA\\\\[|\\\\]\\\\]>$/i;\\n      var inside = {\\n        'included-cdata': {\\n          pattern: /<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>/i,\\n          inside: includedCdataInside\\n        }\\n      };\\n      inside['language-' + lang] = {\\n        pattern: /[\\\\s\\\\S]+/,\\n        inside: Prism.languages[lang]\\n      };\\n      var def = {};\\n      def[tagName] = {\\n        pattern: RegExp(/(<__[^>]*>)(?:<!\\\\[CDATA\\\\[(?:[^\\\\]]|\\\\](?!\\\\]>))*\\\\]\\\\]>|(?!<!\\\\[CDATA\\\\[)[\\\\s\\\\S])*?(?=<\\\\/__>)/.source.replace(/__/g, function () {\\n          return tagName;\\n        }), 'i'),\\n        lookbehind: true,\\n        greedy: true,\\n        inside: inside\\n      };\\n      Prism.languages.insertBefore('markup', 'cdata', def);\\n    }\\n  });\\n  Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\\n    /**\\n     * Adds an pattern to highlight languages embedded in HTML attributes.\\n     *\\n     * An example of an inlined language is CSS with `style` attributes.\\n     *\\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\\n     * case insensitive.\\n     * @param {string} lang The language key.\\n     * @example\\n     * addAttribute('style', 'css');\\n     */\\n    value: function (attrName, lang) {\\n      Prism.languages.markup.tag.inside['special-attr'].push({\\n        pattern: RegExp(/(^|[\\\"'\\\\s])/.source + '(?:' + attrName + ')' + /\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s'\\\">=]+(?=[\\\\s>]))/.source, 'i'),\\n        lookbehind: true,\\n        inside: {\\n          'attr-name': /^[^\\\\s=]+/,\\n          'attr-value': {\\n            pattern: /=[\\\\s\\\\S]+/,\\n            inside: {\\n              value: {\\n                pattern: /(^=\\\\s*([\\\"']|(?![\\\"'])))\\\\S[\\\\s\\\\S]*(?=\\\\2$)/,\\n                lookbehind: true,\\n                alias: [lang, 'language-' + lang],\\n                inside: Prism.languages[lang]\\n              },\\n              punctuation: [{\\n                pattern: /^=/,\\n                alias: 'attr-equals'\\n              }, /\\\"|'/]\\n            }\\n          }\\n        }\\n      });\\n    }\\n  });\\n  Prism.languages.html = Prism.languages.markup;\\n  Prism.languages.mathml = Prism.languages.markup;\\n  Prism.languages.svg = Prism.languages.markup;\\n  Prism.languages.xml = Prism.languages.extend('markup', {});\\n  Prism.languages.ssml = Prism.languages.xml;\\n  Prism.languages.atom = Prism.languages.xml;\\n  Prism.languages.rss = Prism.languages.xml;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"markup\",\"Prism\",\"languages\",\"comment\",\"pattern\",\"greedy\",\"prolog\",\"doctype\",\"inside\",\"lookbehind\",\"string\",\"punctuation\",\"name\",\"cdata\",\"tag\",\"namespace\",\"alias\",\"entity\",\"hooks\",\"add\",\"env\",\"type\",\"attributes\",\"content\",\"value\",\"replace\",\"Object\",\"defineProperty\",\"addInlined\",\"tagName\",\"lang\",\"includedCdataInside\",\"def\",\"RegExp\",\"source\",\"insertBefore\",\"attrName\",\"push\",\"html\",\"mathml\",\"svg\",\"xml\",\"extend\",\"ssml\",\"atom\",\"rss\",\"default\",\"displayName\",\"aliases\"]\n}\n"]