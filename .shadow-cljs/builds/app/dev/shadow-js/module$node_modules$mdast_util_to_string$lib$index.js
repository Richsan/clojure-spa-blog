["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-string/lib/index.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_string$lib$index=function(global,require,module,exports){function one(value,includeImageAlt){return!(!value||\"object\"!==typeof value)&&(\"value\"in value&&value.value||includeImageAlt&&\"alt\"in value&&value.alt||\"children\"in value&&all(value.children,includeImageAlt))||Array.isArray(value)&&all(value,includeImageAlt)||\"\"}function all(values,includeImageAlt){const result=[];let index=-1;for(;++index<values.length;)result[index]=one(values[index],includeImageAlt);\nreturn result.join(\"\")}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.toString=function(value,options){options=(options||{}).includeImageAlt;return one(value,\"boolean\"===typeof options?options:!0)}}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_string$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toString = toString;\n\n/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n */\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the nodeâ€™s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nfunction toString(value, options) {\n  const includeImageAlt = (options || {}).includeImageAlt;\n  return one(value, typeof includeImageAlt === 'boolean' ? includeImageAlt : true);\n}\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized node.\n */\n\n\nfunction one(value, includeImageAlt) {\n  return node(value) && ('value' in value && value.value || includeImageAlt && 'alt' in value && value.alt || 'children' in value && all(value.children, includeImageAlt)) || Array.isArray(value) && all(value, includeImageAlt) || '';\n}\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized nodes.\n */\n\n\nfunction all(values, includeImageAlt) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt);\n  }\n\n  return result.join('');\n}\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\n\n\nfunction node(value) {\n  return Boolean(value && typeof value === 'object');\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","toString","value"]],"~:compiled-at",1676665867249,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_string$lib$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA8C/GC,QAASA,IAAG,CAACC,KAAD,CAAQC,eAAR,CAAyB,CACnC,MAoCO,EApCKD,CAAAA,KAoCL,EAAkC,QAAlC,GAAiB,MApCZA,MAoCL,CApCP,GAAuB,OAAvB,EAAkCA,MAAlC,EAA2CA,KAAMA,CAAAA,KAAjD,EAA0DC,eAA1D,EAA6E,KAA7E,EAAsFD,MAAtF,EAA+FA,KAAME,CAAAA,GAArG,EAA4G,UAA5G,EAA0HF,MAA1H,EAAmIG,GAAA,CAAIH,KAAMI,CAAAA,QAAV,CAAoBH,eAApB,CAAnI,GAA4KI,KAAMC,CAAAA,OAAN,CAAcN,KAAd,CAA5K,EAAoMG,GAAA,CAAIH,KAAJ,CAAWC,eAAX,CAApM,EAAmO,EADhM,CAerCE,QAASA,IAAG,CAACI,MAAD,CAASN,eAAT,CAA0B,CAEpC,MAAMO,OAAS,EACf,KAAIC,MAAQ,CAAC,CAEb,KAAA,CAAO,EAAEA,KAAT,CAAiBF,MAAOG,CAAAA,MAAxB,CAAA,CACEF,MAAA,CAAOC,KAAP,CAAA,CAAgBV,GAAA,CAAIQ,MAAA,CAAOE,KAAP,CAAJ,CAAmBR,eAAnB,CAGlB;MAAOO,OAAOG,CAAAA,IAAP,CAAY,EAAZ,CAT6B,CA1DtCC,MAAOC,CAAAA,cAAP,CAAsBf,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CE,MAAO,CAAA,CADoC,CAA7C,CAGAF,QAAQgB,CAAAA,QAAR,CAwBAA,QAAiB,CAACd,KAAD,CAAQe,OAAR,CAAiB,CAC1Bd,OAAAA,CAAkCA,CAAfc,OAAed,EAAJ,EAAIA,EAAAA,eACxC,OAAOF,IAAA,CAAIC,KAAJ,CAAsC,SAA3B,GAAA,MAAOC,QAAP,CAAuCA,OAAvC,CAAyD,CAAA,CAApE,CAFyB,CA9B6E;\",\n\"sources\":[\"node_modules/mdast-util-to-string/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_string$lib$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.toString = toString;\\n\\n/**\\n * @typedef {import('mdast').Root|import('mdast').Content} Node\\n *\\n * @typedef Options\\n *   Configuration (optional).\\n * @property {boolean | null | undefined} [includeImageAlt=true]\\n *   Whether to use `alt` for `image`s.\\n */\\n\\n/**\\n * Get the text content of a node or list of nodes.\\n *\\n * Prefers the node\\u2019s plain-text fields, otherwise serializes its children,\\n * and if the given value is an array, serialize the nodes in it.\\n *\\n * @param {unknown} value\\n *   Thing to serialize, typically `Node`.\\n * @param {Options | null | undefined} [options]\\n *   Configuration (optional).\\n * @returns {string}\\n *   Serialized `value`.\\n */\\nfunction toString(value, options) {\\n  const includeImageAlt = (options || {}).includeImageAlt;\\n  return one(value, typeof includeImageAlt === 'boolean' ? includeImageAlt : true);\\n}\\n/**\\n * One node or several nodes.\\n *\\n * @param {unknown} value\\n *   Thing to serialize.\\n * @param {boolean} includeImageAlt\\n *   Include image `alt`s.\\n * @returns {string}\\n *   Serialized node.\\n */\\n\\n\\nfunction one(value, includeImageAlt) {\\n  return node(value) && ('value' in value && value.value || includeImageAlt && 'alt' in value && value.alt || 'children' in value && all(value.children, includeImageAlt)) || Array.isArray(value) && all(value, includeImageAlt) || '';\\n}\\n/**\\n * Serialize a list of nodes.\\n *\\n * @param {Array<unknown>} values\\n *   Thing to serialize.\\n * @param {boolean} includeImageAlt\\n *   Include image `alt`s.\\n * @returns {string}\\n *   Serialized nodes.\\n */\\n\\n\\nfunction all(values, includeImageAlt) {\\n  /** @type {Array<string>} */\\n  const result = [];\\n  let index = -1;\\n\\n  while (++index < values.length) {\\n    result[index] = one(values[index], includeImageAlt);\\n  }\\n\\n  return result.join('');\\n}\\n/**\\n * Check if `value` looks like a node.\\n *\\n * @param {unknown} value\\n *   Thing.\\n * @returns {value is Node}\\n *   Whether `value` is a node.\\n */\\n\\n\\nfunction node(value) {\\n  return Boolean(value && typeof value === 'object');\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"one\",\"value\",\"includeImageAlt\",\"alt\",\"all\",\"children\",\"Array\",\"isArray\",\"values\",\"result\",\"index\",\"length\",\"join\",\"Object\",\"defineProperty\",\"toString\",\"options\"]\n}\n"]