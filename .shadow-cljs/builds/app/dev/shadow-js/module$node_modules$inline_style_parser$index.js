["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/inline-style-parser/index.js"],"~:js","shadow$provide.module$node_modules$inline_style_parser$index=function(global,require,module,exports){function trim(str){return str?str.replace(TRIM_REGEX,\"\"):\"\"}var COMMENT_REGEX=/\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g,NEWLINE_REGEX=/\\n/g,WHITESPACE_REGEX=/^\\s*/,PROPERTY_REGEX=/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/,COLON_REGEX=/^:\\s*/,VALUE_REGEX=/^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/,SEMICOLON_REGEX=/^[;\\s]*/,TRIM_REGEX=/^\\s+|\\s+$/g;module.exports=function(style,options){function updatePosition(str){var lines=\nstr.match(NEWLINE_REGEX);lines&&(lineno+=lines.length);lines=str.lastIndexOf(\"\\n\");column=~lines?str.length-lines:column+str.length}function position(){var start={line:lineno,column};return function(node){node.position=new Position(start);match(WHITESPACE_REGEX);return node}}function Position(start){this.start=start;this.end={line:lineno,column};this.source=options.source}function error(msg){var err=Error(options.source+\":\"+lineno+\":\"+column+\": \"+msg);err.reason=msg;err.filename=options.source;err.line=\nlineno;err.column=column;err.source=style;if(options.silent)errorsList.push(err);else throw err;}function match(re){if(re=re.exec(style)){var str=re[0];updatePosition(str);style=style.slice(str.length);return re}}function comments(rules){var c;for(rules=rules||[];c=comment();)!1!==c&&rules.push(c);return rules}function comment(){var pos=position();if(\"/\"==style.charAt(0)&&\"*\"==style.charAt(1)){for(var i=2;\"\"!=style.charAt(i)&&(\"*\"!=style.charAt(i)||\"/\"!=style.charAt(i+1));)++i;i+=2;if(\"\"===style.charAt(i-\n1))return error(\"End of comment missing\");var str=style.slice(2,i-2);column+=2;updatePosition(str);style=style.slice(i);column+=2;return pos({type:\"comment\",comment:str})}}function declaration(){var pos=position(),prop=match(PROPERTY_REGEX);if(prop){comment();if(!match(COLON_REGEX))return error(\"property missing ':'\");var val=match(VALUE_REGEX);pos=pos({type:\"declaration\",property:trim(prop[0].replace(COMMENT_REGEX,\"\")),value:val?trim(val[0].replace(COMMENT_REGEX,\"\")):\"\"});match(SEMICOLON_REGEX);\nreturn pos}}if(\"string\"!==typeof style)throw new TypeError(\"First argument must be a string\");if(!style)return[];options=options||{};var lineno=1,column=1;Position.prototype.content=style;var errorsList=[];match(WHITESPACE_REGEX);return function(){var decls=[];comments(decls);for(var decl;decl=declaration();)!1!==decl&&(decls.push(decl),comments(decls));return decls}()}}","~:source","shadow$provide[\"module$node_modules$inline_style_parser$index\"] = function(global,require,module,exports) {\n// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["position","value","start","content","property","line","column","source","type","reason","comment","end","filename"]],"~:compiled-at",1676665867336,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$inline_style_parser$index.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/inline-style-parser/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$inline_style_parser$index\\\"] = function(global,require,module,exports) {\\n// http://www.w3.org/TR/CSS21/grammar.html\\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\\nvar COMMENT_REGEX = /\\\\/\\\\*[^*]*\\\\*+([^/*][^*]*\\\\*+)*\\\\//g;\\n\\nvar NEWLINE_REGEX = /\\\\n/g;\\nvar WHITESPACE_REGEX = /^\\\\s*/;\\n\\n// declaration\\nvar PROPERTY_REGEX = /^(\\\\*?[-#/*\\\\\\\\\\\\w]+(\\\\[[0-9a-z_-]+\\\\])?)\\\\s*/;\\nvar COLON_REGEX = /^:\\\\s*/;\\nvar VALUE_REGEX = /^((?:'(?:\\\\\\\\'|.)*?'|\\\"(?:\\\\\\\\\\\"|.)*?\\\"|\\\\([^)]*?\\\\)|[^};])+)/;\\nvar SEMICOLON_REGEX = /^[;\\\\s]*/;\\n\\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\\nvar TRIM_REGEX = /^\\\\s+|\\\\s+$/g;\\n\\n// strings\\nvar NEWLINE = '\\\\n';\\nvar FORWARD_SLASH = '/';\\nvar ASTERISK = '*';\\nvar EMPTY_STRING = '';\\n\\n// types\\nvar TYPE_COMMENT = 'comment';\\nvar TYPE_DECLARATION = 'declaration';\\n\\n/**\\n * @param {String} style\\n * @param {Object} [options]\\n * @return {Object[]}\\n * @throws {TypeError}\\n * @throws {Error}\\n */\\nmodule.exports = function(style, options) {\\n  if (typeof style !== 'string') {\\n    throw new TypeError('First argument must be a string');\\n  }\\n\\n  if (!style) return [];\\n\\n  options = options || {};\\n\\n  /**\\n   * Positional.\\n   */\\n  var lineno = 1;\\n  var column = 1;\\n\\n  /**\\n   * Update lineno and column based on `str`.\\n   *\\n   * @param {String} str\\n   */\\n  function updatePosition(str) {\\n    var lines = str.match(NEWLINE_REGEX);\\n    if (lines) lineno += lines.length;\\n    var i = str.lastIndexOf(NEWLINE);\\n    column = ~i ? str.length - i : column + str.length;\\n  }\\n\\n  /**\\n   * Mark position and patch `node.position`.\\n   *\\n   * @return {Function}\\n   */\\n  function position() {\\n    var start = { line: lineno, column: column };\\n    return function(node) {\\n      node.position = new Position(start);\\n      whitespace();\\n      return node;\\n    };\\n  }\\n\\n  /**\\n   * Store position information for a node.\\n   *\\n   * @constructor\\n   * @property {Object} start\\n   * @property {Object} end\\n   * @property {undefined|String} source\\n   */\\n  function Position(start) {\\n    this.start = start;\\n    this.end = { line: lineno, column: column };\\n    this.source = options.source;\\n  }\\n\\n  /**\\n   * Non-enumerable source string.\\n   */\\n  Position.prototype.content = style;\\n\\n  var errorsList = [];\\n\\n  /**\\n   * Error `msg`.\\n   *\\n   * @param {String} msg\\n   * @throws {Error}\\n   */\\n  function error(msg) {\\n    var err = new Error(\\n      options.source + ':' + lineno + ':' + column + ': ' + msg\\n    );\\n    err.reason = msg;\\n    err.filename = options.source;\\n    err.line = lineno;\\n    err.column = column;\\n    err.source = style;\\n\\n    if (options.silent) {\\n      errorsList.push(err);\\n    } else {\\n      throw err;\\n    }\\n  }\\n\\n  /**\\n   * Match `re` and return captures.\\n   *\\n   * @param {RegExp} re\\n   * @return {undefined|Array}\\n   */\\n  function match(re) {\\n    var m = re.exec(style);\\n    if (!m) return;\\n    var str = m[0];\\n    updatePosition(str);\\n    style = style.slice(str.length);\\n    return m;\\n  }\\n\\n  /**\\n   * Parse whitespace.\\n   */\\n  function whitespace() {\\n    match(WHITESPACE_REGEX);\\n  }\\n\\n  /**\\n   * Parse comments.\\n   *\\n   * @param {Object[]} [rules]\\n   * @return {Object[]}\\n   */\\n  function comments(rules) {\\n    var c;\\n    rules = rules || [];\\n    while ((c = comment())) {\\n      if (c !== false) {\\n        rules.push(c);\\n      }\\n    }\\n    return rules;\\n  }\\n\\n  /**\\n   * Parse comment.\\n   *\\n   * @return {Object}\\n   * @throws {Error}\\n   */\\n  function comment() {\\n    var pos = position();\\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\\n\\n    var i = 2;\\n    while (\\n      EMPTY_STRING != style.charAt(i) &&\\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\\n    ) {\\n      ++i;\\n    }\\n    i += 2;\\n\\n    if (EMPTY_STRING === style.charAt(i - 1)) {\\n      return error('End of comment missing');\\n    }\\n\\n    var str = style.slice(2, i - 2);\\n    column += 2;\\n    updatePosition(str);\\n    style = style.slice(i);\\n    column += 2;\\n\\n    return pos({\\n      type: TYPE_COMMENT,\\n      comment: str\\n    });\\n  }\\n\\n  /**\\n   * Parse declaration.\\n   *\\n   * @return {Object}\\n   * @throws {Error}\\n   */\\n  function declaration() {\\n    var pos = position();\\n\\n    // prop\\n    var prop = match(PROPERTY_REGEX);\\n    if (!prop) return;\\n    comment();\\n\\n    // :\\n    if (!match(COLON_REGEX)) return error(\\\"property missing ':'\\\");\\n\\n    // val\\n    var val = match(VALUE_REGEX);\\n\\n    var ret = pos({\\n      type: TYPE_DECLARATION,\\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\\n      value: val\\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\\n        : EMPTY_STRING\\n    });\\n\\n    // ;\\n    match(SEMICOLON_REGEX);\\n\\n    return ret;\\n  }\\n\\n  /**\\n   * Parse declarations.\\n   *\\n   * @return {Object[]}\\n   */\\n  function declarations() {\\n    var decls = [];\\n\\n    comments(decls);\\n\\n    // declarations\\n    var decl;\\n    while ((decl = declaration())) {\\n      if (decl !== false) {\\n        decls.push(decl);\\n        comments(decls);\\n      }\\n    }\\n\\n    return decls;\\n  }\\n\\n  whitespace();\\n  return declarations();\\n};\\n\\n/**\\n * Trim `str`.\\n *\\n * @param {String} str\\n * @return {String}\\n */\\nfunction trim(str) {\\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"trim\",\"str\",\"replace\",\"TRIM_REGEX\",\"EMPTY_STRING\",\"COMMENT_REGEX\",\"NEWLINE_REGEX\",\"WHITESPACE_REGEX\",\"PROPERTY_REGEX\",\"COLON_REGEX\",\"VALUE_REGEX\",\"SEMICOLON_REGEX\",\"module.exports\",\"style\",\"options\",\"updatePosition\",\"lines\",\"match\",\"lineno\",\"length\",\"i\",\"lastIndexOf\",\"NEWLINE\",\"column\",\"position\",\"start\",\"line\",\"node\",\"Position\",\"end\",\"source\",\"error\",\"msg\",\"err\",\"Error\",\"reason\",\"filename\",\"silent\",\"errorsList\",\"push\",\"re\",\"m\",\"exec\",\"slice\",\"comments\",\"rules\",\"c\",\"comment\",\"pos\",\"FORWARD_SLASH\",\"charAt\",\"ASTERISK\",\"type\",\"TYPE_COMMENT\",\"declaration\",\"prop\",\"val\",\"ret\",\"TYPE_DECLARATION\",\"property\",\"value\",\"TypeError\",\"prototype\",\"content\",\"declarations\",\"decls\",\"decl\"]\n}\n"]