["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/racket.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$racket=function(global,require,module,exports){function racket(Prism){Prism.register(_scheme.default);Prism.languages.racket=Prism.languages.extend(\"scheme\",{\"lambda-parameter\":{pattern:/([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,lookbehind:!0}});Prism.languages.insertBefore(\"racket\",\"string\",{lang:{pattern:/^#lang.+/m,greedy:!0,alias:\"keyword\"}});Prism.languages.rkt=Prism.languages.racket}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=\nracket;var _scheme=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require(\"module$node_modules$refractor$lang$scheme\"));racket.displayName=\"racket\";racket.aliases=[\"rkt\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$racket\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = racket;\n\nvar _scheme = _interopRequireDefault(require(\"./scheme.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-nocheck\nracket.displayName = 'racket';\nracket.aliases = ['rkt'];\n/** @type {import('../core.js').Syntax} */\n\nfunction racket(Prism) {\n  Prism.register(_scheme.default);\n  Prism.languages.racket = Prism.languages.extend('scheme', {\n    'lambda-parameter': {\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n      // this will just prevent false positives of the `function` pattern\n      pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('racket', 'string', {\n    lang: {\n      pattern: /^#lang.+/m,\n      greedy: true,\n      alias: 'keyword'\n    }\n  });\n  Prism.languages.rkt = Prism.languages.racket;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$refractor$lang$scheme","~$shadow.js"]],"~:properties",["^5",["lang","aliases","displayName","__esModule","lookbehind","racket","value","rkt","greedy","pattern","alias","default"]],"~:compiled-at",1676841365453,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$racket.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBtGC,QAASA,OAAM,CAACC,KAAD,CAAQ,CACrBA,KAAMC,CAAAA,QAAN,CAAeC,OAAQC,CAAAA,OAAvB,CACAH,MAAMI,CAAAA,SAAUL,CAAAA,MAAhB,CAAyBC,KAAMI,CAAAA,SAAUC,CAAAA,MAAhB,CAAuB,QAAvB,CAAiC,CACxD,mBAAoB,CAGlBC,QAAS,oCAHS,CAIlBC,WAAY,CAAA,CAJM,CADoC,CAAjC,CAQzBP,MAAMI,CAAAA,SAAUI,CAAAA,YAAhB,CAA6B,QAA7B,CAAuC,QAAvC,CAAiD,CAC/CC,KAAM,CACJH,QAAS,WADL,CAEJI,OAAQ,CAAA,CAFJ,CAGJC,MAAO,SAHH,CADyC,CAAjD,CAOAX,MAAMI,CAAAA,SAAUQ,CAAAA,GAAhB,CAAsBZ,KAAMI,CAAAA,SAAUL,CAAAA,MAjBjB,CAdvBc,MAAOC,CAAAA,cAAP,CAAsBhB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CiB,MAAO,CAAA,CADoC,CAA7C,CAGAjB,QAAQK,CAAAA,OAAR;AAAkBJ,MAElB,KAAIG,QAEJc,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEd,QAASc,GAAX,CAAvC,CAFvB,CAAuBrB,OAAA,CAAQ,2CAAR,CAAvB,CAKdG,OAAOoB,CAAAA,WAAP,CAAqB,QACrBpB,OAAOqB,CAAAA,OAAP,CAAiB,CAAC,KAAD,CAdqF;\",\n\"sources\":[\"node_modules/refractor/lang/racket.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$racket\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = racket;\\n\\nvar _scheme = _interopRequireDefault(require(\\\"./scheme.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// @ts-nocheck\\nracket.displayName = 'racket';\\nracket.aliases = ['rkt'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction racket(Prism) {\\n  Prism.register(_scheme.default);\\n  Prism.languages.racket = Prism.languages.extend('scheme', {\\n    'lambda-parameter': {\\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\\n      // this will just prevent false positives of the `function` pattern\\n      pattern: /([(\\\\[]lambda\\\\s+[(\\\\[])[^()\\\\[\\\\]'\\\\s]+/,\\n      lookbehind: true\\n    }\\n  });\\n  Prism.languages.insertBefore('racket', 'string', {\\n    lang: {\\n      pattern: /^#lang.+/m,\\n      greedy: true,\\n      alias: 'keyword'\\n    }\\n  });\\n  Prism.languages.rkt = Prism.languages.racket;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"racket\",\"Prism\",\"register\",\"_scheme\",\"default\",\"languages\",\"extend\",\"pattern\",\"lookbehind\",\"insertBefore\",\"lang\",\"greedy\",\"alias\",\"rkt\",\"Object\",\"defineProperty\",\"value\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"displayName\",\"aliases\"]\n}\n"]