["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-core-commonmark/lib/hard-break-escape.js"],"~:js","shadow$provide.module$node_modules$micromark_core_commonmark$lib$hard_break_escape=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.hardBreakEscape=void 0;var _micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\");exports.hardBreakEscape={name:\"hardBreakEscape\",tokenize:function(effects,ok,nok){function open(code){return(0,_micromarkUtilCharacter.markdownLineEnding)(code)?(effects.exit(\"escapeMarker\"),effects.exit(\"hardBreakEscape\"),\nok(code)):nok(code)}return function(code){effects.enter(\"hardBreakEscape\");effects.enter(\"escapeMarker\");effects.consume(code);return open}}}}","~:source","shadow$provide[\"module$node_modules$micromark_core_commonmark$lib$hard_break_escape\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hardBreakEscape = void 0;\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\n/** @type {Construct} */\nconst hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n/** @type {Tokenizer} */\n\nexports.hardBreakEscape = hardBreakEscape;\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape');\n    effects.enter('escapeMarker');\n    effects.consume(code);\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n      effects.exit('escapeMarker');\n      effects.exit('hardBreakEscape');\n      return ok(code);\n    }\n\n    return nok(code);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js"]],"~:properties",["^5",["hardBreakEscape","tokenize","__esModule","name","value"]],"~:compiled-at",1676665867287,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_core_commonmark$lib$hard_break_escape.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,mEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAE/B,KAAIC,wBAA0BP,OAAA,CAAQ,oDAAR,CAe9BE,QAAQI,CAAAA,eAAR,CANwBA,CACtBE,KAAM,iBADgBF,CAEtBG,SAMFC,QAAgC,CAACC,OAAD,CAAUC,EAAV,CAAcC,GAAd,CAAmB,CAajDC,QAASA,KAAI,CAACC,IAAD,CAAO,CAClB,MAAI,GAAIR,uBAAwBS,CAAAA,kBAA5B,EAAgDD,IAAhD,CAAJ,EACEJ,OAAQM,CAAAA,IAAR,CAAa,cAAb,CAEO,CADPN,OAAQM,CAAAA,IAAR,CAAa,iBAAb,CACO;AAAAL,EAAA,CAAGG,IAAH,CAHT,EAMOF,GAAA,CAAIE,IAAJ,CAPW,CAZpB,MAGAG,SAAc,CAACH,IAAD,CAAO,CACnBJ,OAAQQ,CAAAA,KAAR,CAAc,iBAAd,CACAR,QAAQQ,CAAAA,KAAR,CAAc,cAAd,CACAR,QAAQS,CAAAA,OAAR,CAAgBL,IAAhB,CACA,OAAOD,KAJY,CAJ4B,CAR3BR,CAjBwG;\",\n\"sources\":[\"node_modules/micromark-core-commonmark/lib/hard-break-escape.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_core_commonmark$lib$hard_break_escape\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.hardBreakEscape = void 0;\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Construct} Construct\\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\\n * @typedef {import('micromark-util-types').State} State\\n */\\n\\n/** @type {Construct} */\\nconst hardBreakEscape = {\\n  name: 'hardBreakEscape',\\n  tokenize: tokenizeHardBreakEscape\\n};\\n/** @type {Tokenizer} */\\n\\nexports.hardBreakEscape = hardBreakEscape;\\n\\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    effects.enter('hardBreakEscape');\\n    effects.enter('escapeMarker');\\n    effects.consume(code);\\n    return open;\\n  }\\n  /** @type {State} */\\n\\n\\n  function open(code) {\\n    if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\\n      effects.exit('escapeMarker');\\n      effects.exit('hardBreakEscape');\\n      return ok(code);\\n    }\\n\\n    return nok(code);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"hardBreakEscape\",\"_micromarkUtilCharacter\",\"name\",\"tokenize\",\"tokenizeHardBreakEscape\",\"effects\",\"ok\",\"nok\",\"open\",\"code\",\"markdownLineEnding\",\"exit\",\"start\",\"enter\",\"consume\"]\n}\n"]