["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/hast-util-select/lib/class-name.js"],"~:js","shadow$provide.module$node_modules$hast_util_select$lib$class_name=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.className=function(query,element){element=element.properties.className||[];let index=-1;if(query.classNames)for(;++index<query.classNames.length;)if(!element.includes(query.classNames[index]))return!1;return!0}}","~:source","shadow$provide[\"module$node_modules$hast_util_select$lib$class_name\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.className = className;\n\n/**\n * @typedef {import('./types.js').Rule} Rule\n * @typedef {import('./types.js').Element} Element\n */\n\n/**\n * Check whether an element has all class names.\n *\n * @param {Rule} query\n * @param {Element} element\n * @returns {boolean}\n */\nfunction className(query, element) {\n  /** @type {readonly string[]} */\n  // @ts-expect-error Assume array.\n  const value = element.properties.className || [];\n  let index = -1;\n\n  if (query.classNames) {\n    while (++index < query.classNames.length) {\n      if (!value.includes(query.classNames[index])) return false;\n    }\n  }\n\n  return true;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["className","__esModule","value"]],"~:compiled-at",1676841365493,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$hast_util_select$lib$class_name.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAcAA,QAAkB,CAACC,KAAD,CAAQC,OAAR,CAAiB,CAG3BH,OAAAA,CAAQG,OAAQC,CAAAA,UAAWH,CAAAA,SAA3BD,EAAwC,EAC9C,KAAIK,MAAQ,CAAC,CAEb,IAAIH,KAAMI,CAAAA,UAAV,CACE,IAAA,CAAO,EAAED,KAAT,CAAiBH,KAAMI,CAAAA,UAAWC,CAAAA,MAAlC,CAAA,CACE,GAAI,CAACP,OAAMQ,CAAAA,QAAN,CAAeN,KAAMI,CAAAA,UAAN,CAAiBD,KAAjB,CAAf,CAAL,CAA8C,MAAO,CAAA,CAIzD,OAAO,CAAA,CAZ0B,CApB6E;\",\n\"sources\":[\"node_modules/hast-util-select/lib/class-name.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$hast_util_select$lib$class_name\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.className = className;\\n\\n/**\\n * @typedef {import('./types.js').Rule} Rule\\n * @typedef {import('./types.js').Element} Element\\n */\\n\\n/**\\n * Check whether an element has all class names.\\n *\\n * @param {Rule} query\\n * @param {Element} element\\n * @returns {boolean}\\n */\\nfunction className(query, element) {\\n  /** @type {readonly string[]} */\\n  // @ts-expect-error Assume array.\\n  const value = element.properties.className || [];\\n  let index = -1;\\n\\n  if (query.classNames) {\\n    while (++index < query.classNames.length) {\\n      if (!value.includes(query.classNames[index])) return false;\\n    }\\n  }\\n\\n  return true;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"className\",\"query\",\"element\",\"properties\",\"index\",\"classNames\",\"length\",\"includes\"]\n}\n"]