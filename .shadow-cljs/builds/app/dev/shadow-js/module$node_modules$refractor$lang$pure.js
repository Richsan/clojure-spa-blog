["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/pure.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$pure=function(global,require,module,exports){function pure(Prism$jscomp$0){(function(Prism){Prism.languages.pure={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0},/#!.+/],\"inline-lang\":{pattern:/%<[\\s\\S]+?%>/,greedy:!0,inside:{lang:{pattern:/(^%< *)-\\*-.+?-\\*-/,lookbehind:!0,alias:\"comment\"},delimiter:{pattern:/^%<.*|%>$/,alias:\"punctuation\"}}},string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,greedy:!0},\nnumber:{pattern:/((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,lookbehind:!0},keyword:/\\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,function:/\\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\nspecial:{pattern:/\\b__[a-z]+__\\b/i,alias:\"builtin\"},operator:/(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,punctuation:/[(){}\\[\\];,|]/};var inlineLanguageRe=/%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source;[\"c\",{lang:\"c++\",alias:\"cpp\"},\"fortran\"].forEach(function(lang){var alias=lang;\"string\"!==typeof lang&&(alias=lang.alias,lang=lang.lang);if(Prism.languages[alias]){var o={};o[\"inline-lang-\"+alias]={pattern:RegExp(inlineLanguageRe.replace(\"\\x3clang\\x3e\",\nlang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,\"\\\\$1\")),\"i\"),inside:Prism.util.clone(Prism.languages.pure[\"inline-lang\"].inside)};o[\"inline-lang-\"+alias].inside.rest=Prism.util.clone(Prism.languages[alias]);Prism.languages.insertBefore(\"pure\",\"inline-lang\",o)}});Prism.languages.c&&(Prism.languages.pure[\"inline-lang\"].inside.rest=Prism.util.clone(Prism.languages.c))})(Prism$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=pure;pure.displayName=\"pure\";pure.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$pure\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = pure;\n// @ts-nocheck\npure.displayName = 'pure';\npure.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction pure(Prism) {\n  ;\n\n  (function (Prism) {\n    // https://agraef.github.io/pure-docs/pure.html#lexical-matters\n    Prism.languages.pure = {\n      comment: [{\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true\n      }, {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true\n      }, /#!.+/],\n      'inline-lang': {\n        pattern: /%<[\\s\\S]+?%>/,\n        greedy: true,\n        inside: {\n          lang: {\n            pattern: /(^%< *)-\\*-.+?-\\*-/,\n            lookbehind: true,\n            alias: 'comment'\n          },\n          delimiter: {\n            pattern: /^%<.*|%>$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n      },\n      number: {\n        // The look-behind prevents wrong highlighting of the .. operator\n        pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n        lookbehind: true\n      },\n      keyword: /\\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n      function: /\\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n      special: {\n        pattern: /\\b__[a-z]+__\\b/i,\n        alias: 'builtin'\n      },\n      // Any combination of operator chars can be an operator\n      // eslint-disable-next-line no-misleading-character-class\n      operator: /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n      punctuation: /[(){}\\[\\];,|]/\n    };\n    var inlineLanguages = ['c', {\n      lang: 'c++',\n      alias: 'cpp'\n    }, 'fortran'];\n    var inlineLanguageRe = /%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source;\n    inlineLanguages.forEach(function (lang) {\n      var alias = lang;\n\n      if (typeof lang !== 'string') {\n        alias = lang.alias;\n        lang = lang.lang;\n      }\n\n      if (Prism.languages[alias]) {\n        var o = {};\n        o['inline-lang-' + alias] = {\n          pattern: RegExp(inlineLanguageRe.replace('<lang>', lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')), 'i'),\n          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n        };\n        o['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);\n        Prism.languages.insertBefore('pure', 'inline-lang', o);\n      }\n    }); // C is the default inline language\n\n    if (Prism.languages.c) {\n      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);\n    }\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["lang","punctuation","string","aliases","operator","displayName","__esModule","rest","lookbehind","value","pure","delimiter","special","keyword","number","greedy","function","pattern","inside","alias","comment","default"]],"~:compiled-at",1676841365450,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$pure.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/pure.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$pure\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = pure;\\n// @ts-nocheck\\npure.displayName = 'pure';\\npure.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction pure(Prism) {\\n  ;\\n\\n  (function (Prism) {\\n    // https://agraef.github.io/pure-docs/pure.html#lexical-matters\\n    Prism.languages.pure = {\\n      comment: [{\\n        pattern: /(^|[^\\\\\\\\])\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\//,\\n        lookbehind: true\\n      }, {\\n        pattern: /(^|[^\\\\\\\\:])\\\\/\\\\/.*/,\\n        lookbehind: true\\n      }, /#!.+/],\\n      'inline-lang': {\\n        pattern: /%<[\\\\s\\\\S]+?%>/,\\n        greedy: true,\\n        inside: {\\n          lang: {\\n            pattern: /(^%< *)-\\\\*-.+?-\\\\*-/,\\n            lookbehind: true,\\n            alias: 'comment'\\n          },\\n          delimiter: {\\n            pattern: /^%<.*|%>$/,\\n            alias: 'punctuation'\\n          }\\n        }\\n      },\\n      string: {\\n        pattern: /\\\"(?:\\\\\\\\.|[^\\\"\\\\\\\\\\\\r\\\\n])*\\\"/,\\n        greedy: true\\n      },\\n      number: {\\n        // The look-behind prevents wrong highlighting of the .. operator\\n        pattern: /((?:\\\\.\\\\.)?)(?:\\\\b(?:inf|nan)\\\\b|\\\\b0x[\\\\da-f]+|(?:\\\\b(?:0b)?\\\\d+(?:\\\\.\\\\d+)?|\\\\B\\\\.\\\\d+)(?:e[+-]?\\\\d+)?L?)/i,\\n        lookbehind: true\\n      },\\n      keyword: /\\\\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\\\b/,\\n      function: /\\\\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\\\b/,\\n      special: {\\n        pattern: /\\\\b__[a-z]+__\\\\b/i,\\n        alias: 'builtin'\\n      },\\n      // Any combination of operator chars can be an operator\\n      // eslint-disable-next-line no-misleading-character-class\\n      operator: /(?:[!\\\"#$%&'*+,\\\\-.\\\\/:<=>?@\\\\\\\\^`|~\\\\u00a1-\\\\u00bf\\\\u00d7-\\\\u00f7\\\\u20d0-\\\\u2bff]|\\\\b_+\\\\b)+|\\\\b(?:and|div|mod|not|or)\\\\b/,\\n      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\\n      punctuation: /[(){}\\\\[\\\\];,|]/\\n    };\\n    var inlineLanguages = ['c', {\\n      lang: 'c++',\\n      alias: 'cpp'\\n    }, 'fortran'];\\n    var inlineLanguageRe = /%< *-\\\\*- *<lang>\\\\d* *-\\\\*-[\\\\s\\\\S]+?%>/.source;\\n    inlineLanguages.forEach(function (lang) {\\n      var alias = lang;\\n\\n      if (typeof lang !== 'string') {\\n        alias = lang.alias;\\n        lang = lang.lang;\\n      }\\n\\n      if (Prism.languages[alias]) {\\n        var o = {};\\n        o['inline-lang-' + alias] = {\\n          pattern: RegExp(inlineLanguageRe.replace('<lang>', lang.replace(/([.+*?\\\\/\\\\\\\\(){}\\\\[\\\\]])/g, '\\\\\\\\$1')), 'i'),\\n          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\\n        };\\n        o['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);\\n        Prism.languages.insertBefore('pure', 'inline-lang', o);\\n      }\\n    }); // C is the default inline language\\n\\n    if (Prism.languages.c) {\\n      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);\\n    }\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"pure\",\"Prism\",\"languages\",\"comment\",\"pattern\",\"lookbehind\",\"greedy\",\"inside\",\"lang\",\"alias\",\"delimiter\",\"string\",\"number\",\"keyword\",\"function\",\"special\",\"operator\",\"punctuation\",\"inlineLanguageRe\",\"source\",\"inlineLanguages\",\"forEach\",\"o\",\"RegExp\",\"replace\",\"util\",\"clone\",\"rest\",\"insertBefore\",\"c\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]