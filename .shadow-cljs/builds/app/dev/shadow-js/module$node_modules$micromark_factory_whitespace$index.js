["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-factory-whitespace/index.js"],"~:js","shadow$provide.module$node_modules$micromark_factory_whitespace$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.factoryWhitespace=function(effects,ok){function start(code){return(0,_micromarkUtilCharacter.markdownLineEnding)(code)?(effects.enter(\"lineEnding\"),effects.consume(code),effects.exit(\"lineEnding\"),seen=!0,start):(0,_micromarkUtilCharacter.markdownSpace)(code)?(0,_micromarkFactorySpace.factorySpace)(effects,start,seen?\"linePrefix\":\n\"lineSuffix\")(code):ok(code)}let seen;return start};var _micromarkFactorySpace=require(\"module$node_modules$micromark_factory_space$index\"),_micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\")}","~:source","shadow$provide[\"module$node_modules$micromark_factory_whitespace$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.factoryWhitespace = factoryWhitespace;\n\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nfunction factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      seen = true;\n      return start;\n    }\n\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n      return (0, _micromarkFactorySpace.factorySpace)(effects, start, seen ? 'linePrefix' : 'lineSuffix')(code);\n    }\n\n    return ok(code);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js","~$module$node_modules$micromark_factory_space$index"]],"~:properties",["^5",["factoryWhitespace","__esModule","value"]],"~:compiled-at",1676665867286,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_factory_whitespace$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,iBAAR,CAeAA,QAA0B,CAACC,OAAD,CAAUC,EAAV,CAAc,CAMtCC,QAASA,MAAK,CAACC,IAAD,CAAO,CACnB,MAAI,GAAIC,uBAAwBC,CAAAA,kBAA5B,EAAgDF,IAAhD,CAAJ,EACEH,OAAQM,CAAAA,KAAR,CAAc,YAAd,CAIOJ,CAHPF,OAAQO,CAAAA,OAAR,CAAgBJ,IAAhB,CAGOD,CAFPF,OAAQQ,CAAAA,IAAR,CAAa,YAAb,CAEON,CADPO,IACOP,CADA,CAAA,CACAA,CAAAA,KALT,EAQI,GAAIE,uBAAwBM,CAAAA,aAA5B,EAA2CP,IAA3C,CAAJ,CACS,GAAIQ,sBAAuBC,CAAAA,YAA3B,EAAyCZ,OAAzC,CAAkDE,KAAlD,CAAyDO,IAAA,CAAO,YAAP;AAAsB,YAA/E,CAAA,CAA6FN,IAA7F,CADT,CAIOF,EAAA,CAAGE,IAAH,CAbY,CAJrB,IAAIM,IACJ,OAAOP,MAH+B,CAbxC,KAAIS,uBAAyBlB,OAAA,CAAQ,mDAAR,CAA7B,CAEIW,wBAA0BX,OAAA,CAAQ,oDAAR,CAVqF;\",\n\"sources\":[\"node_modules/micromark-factory-whitespace/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_factory_whitespace$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.factoryWhitespace = factoryWhitespace;\\n\\nvar _micromarkFactorySpace = require(\\\"micromark-factory-space\\\");\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Effects} Effects\\n * @typedef {import('micromark-util-types').State} State\\n */\\n\\n/**\\n * @param {Effects} effects\\n * @param {State} ok\\n */\\nfunction factoryWhitespace(effects, ok) {\\n  /** @type {boolean} */\\n  let seen;\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\\n      effects.enter('lineEnding');\\n      effects.consume(code);\\n      effects.exit('lineEnding');\\n      seen = true;\\n      return start;\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\\n      return (0, _micromarkFactorySpace.factorySpace)(effects, start, seen ? 'linePrefix' : 'lineSuffix')(code);\\n    }\\n\\n    return ok(code);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"factoryWhitespace\",\"effects\",\"ok\",\"start\",\"code\",\"_micromarkUtilCharacter\",\"markdownLineEnding\",\"enter\",\"consume\",\"exit\",\"seen\",\"markdownSpace\",\"_micromarkFactorySpace\",\"factorySpace\"]\n}\n"]