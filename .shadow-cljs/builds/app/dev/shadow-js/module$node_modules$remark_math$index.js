["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/remark-math/index.js"],"~:js","shadow$provide.module$node_modules$remark_math$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(options={}){function add(field,value){(data[field]?data[field]:data[field]=[]).push(value)}const data=this.data();add(\"micromarkExtensions\",(0,_micromarkExtensionMath.math)(options));add(\"fromMarkdownExtensions\",(0,_mdastUtilMath.mathFromMarkdown)());add(\"toMarkdownExtensions\",(0,_mdastUtilMath.mathToMarkdown)(options))};var _micromarkExtensionMath=\nrequire(\"module$node_modules$micromark_extension_math$index\"),_mdastUtilMath=require(\"module$node_modules$mdast_util_math$index\")}","~:source","shadow$provide[\"module$node_modules$remark_math$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = remarkMath;\n\nvar _micromarkExtensionMath = require(\"micromark-extension-math\");\n\nvar _mdastUtilMath = require(\"mdast-util-math\");\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-math').ToOptions} Options\n *\n * @typedef {import('mdast-util-math')} DoNotTouchAsThisImportIncludesMathInTree\n */\n\n/**\n * Plugin to support math.\n *\n * @type {import('unified').Plugin<[Options?] | void[], Root, Root>}\n */\nfunction remarkMath(options = {}) {\n  const data = this.data();\n  add('micromarkExtensions', (0, _micromarkExtensionMath.math)(options));\n  add('fromMarkdownExtensions', (0, _mdastUtilMath.mathFromMarkdown)());\n  add('toMarkdownExtensions', (0, _mdastUtilMath.mathToMarkdown)(options));\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n\n  function add(field, value) {\n    const list = // Other extensions\n\n    /* c8 ignore next 2 */\n    data[field] ? data[field] : data[field] = [];\n    list.push(value);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$micromark_extension_math$index","~$module$node_modules$mdast_util_math$index"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1676667584528,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$remark_math$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,qCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAkBAC,QAAmB,CAACC,OAAA,CAAU,EAAX,CAAe,CAUhCC,QAASA,IAAG,CAACC,KAAD,CAAQL,KAAR,CAAe,CAKpBM,CADLC,IAAA,CAAKF,KAAL,CAAAG,CAAcD,IAAA,CAAKF,KAAL,CAAdG,CAA4BD,IAAA,CAAKF,KAAL,CAA5BG,CAA0C,EACrCF,EAAAA,IAAL,CAAUN,KAAV,CALyB,CAT3B,MAAMO,KAAO,IAAKA,CAAAA,IAAL,EACbH,IAAA,CAAI,qBAAJ,CAA2B,GAAIK,uBAAwBC,CAAAA,IAA5B,EAAkCP,OAAlC,CAA3B,CACAC,IAAA,CAAI,wBAAJ,CAA8B,GAAIO,cAAeC,CAAAA,gBAAnB,GAA9B,CACAR,IAAA,CAAI,sBAAJ,CAA4B,GAAIO,cAAeE,CAAAA,cAAnB,EAAmCV,OAAnC,CAA5B,CAJgC,CAhBlC,KAAIM;AAA0Bd,OAAA,CAAQ,oDAAR,CAA9B,CAEIgB,eAAiBhB,OAAA,CAAQ,2CAAR,CAV6E;\",\n\"sources\":[\"node_modules/remark-math/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$remark_math$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = remarkMath;\\n\\nvar _micromarkExtensionMath = require(\\\"micromark-extension-math\\\");\\n\\nvar _mdastUtilMath = require(\\\"mdast-util-math\\\");\\n\\n/**\\n * @typedef {import('mdast').Root} Root\\n * @typedef {import('mdast-util-math').ToOptions} Options\\n *\\n * @typedef {import('mdast-util-math')} DoNotTouchAsThisImportIncludesMathInTree\\n */\\n\\n/**\\n * Plugin to support math.\\n *\\n * @type {import('unified').Plugin<[Options?] | void[], Root, Root>}\\n */\\nfunction remarkMath(options = {}) {\\n  const data = this.data();\\n  add('micromarkExtensions', (0, _micromarkExtensionMath.math)(options));\\n  add('fromMarkdownExtensions', (0, _mdastUtilMath.mathFromMarkdown)());\\n  add('toMarkdownExtensions', (0, _mdastUtilMath.mathToMarkdown)(options));\\n  /**\\n   * @param {string} field\\n   * @param {unknown} value\\n   */\\n\\n  function add(field, value) {\\n    const list = // Other extensions\\n\\n    /* c8 ignore next 2 */\\n    data[field] ? data[field] : data[field] = [];\\n    list.push(value);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"remarkMath\",\"options\",\"add\",\"field\",\"push\",\"data\",\"list\",\"_micromarkExtensionMath\",\"math\",\"_mdastUtilMath\",\"mathFromMarkdown\",\"mathToMarkdown\"]\n}\n"]