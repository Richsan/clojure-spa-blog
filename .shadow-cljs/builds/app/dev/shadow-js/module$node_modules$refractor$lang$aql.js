["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/aql.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$aql=function(global,require,module,exports){function aql(Prism){Prism.languages.aql={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,property:{pattern:/([{,]\\s*)(?:(?!\\d)\\w+|([\"'´`])(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2)(?=\\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,greedy:!0},identifier:{pattern:/([´`])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,greedy:!0},variable:/@@?\\w+/,keyword:[{pattern:/(\\bWITH\\s+)COUNT(?=\\s+INTO\\b)/i,lookbehind:!0},/\\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_PATHS|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WINDOW|WITH)\\b/i,\n{pattern:/(^|[^\\w.[])(?:KEEP|PRUNE|SEARCH|TO)\\b/i,lookbehind:!0},{pattern:/(^|[^\\w.[])(?:CURRENT|NEW|OLD)\\b/,lookbehind:!0},{pattern:/\\bOPTIONS(?=\\s*\\{)/i}],function:/\\b(?!\\d)\\w+(?=\\s*\\()/,boolean:/\\b(?:false|true)\\b/i,range:{pattern:/\\.\\./,alias:\"operator\"},number:[/\\b0b[01]+/i,/\\b0x[0-9a-f]+/i,/(?:\\B\\.\\d+|\\b(?:0|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?/i],operator:/\\*{2,}|[=!]~|[!=<>]=?|&&|\\|\\||[-+*/%]/,punctuation:/::|[?.:,;()[\\]{}]/}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=\naql;aql.displayName=\"aql\";aql.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$aql\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = aql;\n// @ts-nocheck\naql.displayName = 'aql';\naql.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction aql(Prism) {\n  Prism.languages.aql = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    property: {\n      pattern: /([{,]\\s*)(?:(?!\\d)\\w+|([\"'´`])(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2)(?=\\s*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,\n      greedy: true\n    },\n    identifier: {\n      pattern: /([´`])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,\n      greedy: true\n    },\n    variable: /@@?\\w+/,\n    keyword: [{\n      pattern: /(\\bWITH\\s+)COUNT(?=\\s+INTO\\b)/i,\n      lookbehind: true\n    }, /\\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_PATHS|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WINDOW|WITH)\\b/i, // pseudo keywords get a lookbehind to avoid false positives\n    {\n      pattern: /(^|[^\\w.[])(?:KEEP|PRUNE|SEARCH|TO)\\b/i,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\w.[])(?:CURRENT|NEW|OLD)\\b/,\n      lookbehind: true\n    }, {\n      pattern: /\\bOPTIONS(?=\\s*\\{)/i\n    }],\n    function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n    boolean: /\\b(?:false|true)\\b/i,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    number: [/\\b0b[01]+/i, /\\b0x[0-9a-f]+/i, /(?:\\B\\.\\d+|\\b(?:0|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?/i],\n    operator: /\\*{2,}|[=!]~|[!=<>]=?|&&|\\|\\||[-+*/%]/,\n    punctuation: /::|[?.:,;()[\\]{}]/\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","range","punctuation","string","aliases","operator","displayName","__esModule","lookbehind","value","identifier","variable","keyword","number","aql","greedy","property","function","pattern","alias","comment","default"]],"~:compiled-at",1676841365388,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$aql.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYnGC,QAASA,IAAG,CAACC,KAAD,CAAQ,CAClBA,KAAMC,CAAAA,SAAUF,CAAAA,GAAhB,CAAsB,CACpBG,QAAS,yBADW,CAEpBC,SAAU,CACRC,QAAS,mEADD,CAERC,WAAY,CAAA,CAFJ,CAGRC,OAAQ,CAAA,CAHA,CAFU,CAOpBC,OAAQ,CACNH,QAAS,kCADH,CAENE,OAAQ,CAAA,CAFF,CAPY,CAWpBE,WAAY,CACVJ,QAAS,kCADC,CAEVE,OAAQ,CAAA,CAFE,CAXQ,CAepBG,SAAU,QAfU,CAgBpBC,QAAS,CAAC,CACRN,QAAS,gCADD,CAERC,WAAY,CAAA,CAFJ,CAAD,CAGN,uOAHM;AAIT,CACED,QAAS,wCADX,CAEEC,WAAY,CAAA,CAFd,CAJS,CAON,CACDD,QAAS,kCADR,CAEDC,WAAY,CAAA,CAFX,CAPM,CAUN,CACDD,QAAS,qBADR,CAVM,CAhBW,CA6BpBO,SAAU,sBA7BU,CA8BpBC,QAAS,qBA9BW,CA+BpBC,MAAO,CACLT,QAAS,MADJ,CAELU,MAAO,UAFF,CA/Ba,CAmCpBC,OAAQ,CAAC,YAAD,CAAe,gBAAf,CAAiC,uDAAjC,CAnCY,CAoCpBC,SAAU,uCApCU,CAqCpBC,YAAa,mBArCO,CADJ,CATpBC,MAAOC,CAAAA,cAAP,CAAsBrB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CsB,MAAO,CAAA,CADoC,CAA7C,CAGAtB,QAAQuB,CAAAA,OAAR;AAAkBtB,GAElBA,IAAIuB,CAAAA,WAAJ,CAAkB,KAClBvB,IAAIwB,CAAAA,OAAJ,CAAc,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/aql.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$aql\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = aql;\\n// @ts-nocheck\\naql.displayName = 'aql';\\naql.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction aql(Prism) {\\n  Prism.languages.aql = {\\n    comment: /\\\\/\\\\/.*|\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\//,\\n    property: {\\n      pattern: /([{,]\\\\s*)(?:(?!\\\\d)\\\\w+|([\\\"'\\u00b4`])(?:(?!\\\\2)[^\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)*\\\\2)(?=\\\\s*:)/,\\n      lookbehind: true,\\n      greedy: true\\n    },\\n    string: {\\n      pattern: /([\\\"'])(?:(?!\\\\1)[^\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)*\\\\1/,\\n      greedy: true\\n    },\\n    identifier: {\\n      pattern: /([\\u00b4`])(?:(?!\\\\1)[^\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)*\\\\1/,\\n      greedy: true\\n    },\\n    variable: /@@?\\\\w+/,\\n    keyword: [{\\n      pattern: /(\\\\bWITH\\\\s+)COUNT(?=\\\\s+INTO\\\\b)/i,\\n      lookbehind: true\\n    }, /\\\\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_PATHS|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WINDOW|WITH)\\\\b/i, // pseudo keywords get a lookbehind to avoid false positives\\n    {\\n      pattern: /(^|[^\\\\w.[])(?:KEEP|PRUNE|SEARCH|TO)\\\\b/i,\\n      lookbehind: true\\n    }, {\\n      pattern: /(^|[^\\\\w.[])(?:CURRENT|NEW|OLD)\\\\b/,\\n      lookbehind: true\\n    }, {\\n      pattern: /\\\\bOPTIONS(?=\\\\s*\\\\{)/i\\n    }],\\n    function: /\\\\b(?!\\\\d)\\\\w+(?=\\\\s*\\\\()/,\\n    boolean: /\\\\b(?:false|true)\\\\b/i,\\n    range: {\\n      pattern: /\\\\.\\\\./,\\n      alias: 'operator'\\n    },\\n    number: [/\\\\b0b[01]+/i, /\\\\b0x[0-9a-f]+/i, /(?:\\\\B\\\\.\\\\d+|\\\\b(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?)(?:e[+-]?\\\\d+)?/i],\\n    operator: /\\\\*{2,}|[=!]~|[!=<>]=?|&&|\\\\|\\\\||[-+*/%]/,\\n    punctuation: /::|[?.:,;()[\\\\]{}]/\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"aql\",\"Prism\",\"languages\",\"comment\",\"property\",\"pattern\",\"lookbehind\",\"greedy\",\"string\",\"identifier\",\"variable\",\"keyword\",\"function\",\"boolean\",\"range\",\"alias\",\"number\",\"operator\",\"punctuation\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]