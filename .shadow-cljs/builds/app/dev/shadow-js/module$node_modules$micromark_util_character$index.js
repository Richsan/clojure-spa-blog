["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-util-character/index.js"],"~:js","shadow$provide.module$node_modules$micromark_util_character$index=function(global,require,module,exports){function regexCheck(regex){return function(code){return null!==code&&regex.test(String.fromCharCode(code))}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.asciiControl=function(code){return null!==code&&(32>code||127===code)};exports.markdownLineEndingOrSpace=function(code){return null!==code&&(0>code||32===code)};exports.markdownLineEnding=function(code){return null!==code&&-2>\ncode};exports.markdownSpace=function(code){return-2===code||-1===code||32===code};exports.unicodePunctuation=exports.unicodeWhitespace=exports.asciiAtext=exports.asciiPunctuation=exports.asciiAlphanumeric=exports.asciiHexDigit=exports.asciiDigit=exports.asciiAlpha=void 0;global=require(\"module$node_modules$micromark_util_character$lib$unicode_punctuation_regex\");require=regexCheck(/[A-Za-z]/);exports.asciiAlpha=require;require=regexCheck(/\\d/);exports.asciiDigit=require;require=regexCheck(/[\\dA-Fa-f]/);\nexports.asciiHexDigit=require;require=regexCheck(/[\\dA-Za-z]/);exports.asciiAlphanumeric=require;require=regexCheck(/[!-/:-@[-`{-~]/);exports.asciiPunctuation=require;require=regexCheck(/[#-'*+\\--9=?A-Z^-~]/);exports.asciiAtext=require;require=regexCheck(/\\s/);exports.unicodeWhitespace=require;global=regexCheck(global.unicodePunctuationRegex);exports.unicodePunctuation=global}","~:source","shadow$provide[\"module$node_modules$micromark_util_character$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.asciiControl = asciiControl;\nexports.markdownLineEndingOrSpace = markdownLineEndingOrSpace;\nexports.markdownLineEnding = markdownLineEnding;\nexports.markdownSpace = markdownSpace;\nexports.unicodePunctuation = exports.unicodeWhitespace = exports.asciiAtext = exports.asciiPunctuation = exports.asciiAlphanumeric = exports.asciiHexDigit = exports.asciiDigit = exports.asciiAlpha = void 0;\n\nvar _unicodePunctuationRegex = require(\"./lib/unicode-punctuation-regex.js\");\n\n/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\nconst asciiAlpha = regexCheck(/[A-Za-z]/);\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexports.asciiAlpha = asciiAlpha;\nconst asciiDigit = regexCheck(/\\d/);\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexports.asciiDigit = asciiDigit;\nconst asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexports.asciiHexDigit = asciiHexDigit;\nconst asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexports.asciiAlphanumeric = asciiAlphanumeric;\nconst asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexports.asciiPunctuation = asciiPunctuation;\nconst asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexports.asciiAtext = asciiAtext;\n\nfunction asciiControl(code) {\n  return (// Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\n\nfunction markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\n\nfunction markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\n\nfunction markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\n\nconst unicodeWhitespace = regexCheck(/\\s/);\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexports.unicodeWhitespace = unicodeWhitespace;\nconst unicodePunctuation = regexCheck(_unicodePunctuationRegex.unicodePunctuationRegex);\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nexports.unicodePunctuation = unicodePunctuation;\n\nfunction regexCheck(regex) {\n  return check;\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code));\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$micromark_util_character$lib$unicode_punctuation_regex"]],"~:properties",["^5",["asciiHexDigit","asciiAlphanumeric","unicodePunctuation","__esModule","markdownSpace","unicodeWhitespace","value","asciiPunctuation","markdownLineEnding","asciiDigit","markdownLineEndingOrSpace","asciiAlpha","asciiAtext","asciiControl"]],"~:compiled-at",1676665867259,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_util_character$index.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgN/GC,QAASA,WAAU,CAACC,KAAD,CAAQ,CACzB,MAQAC,SAAc,CAACC,IAAD,CAAO,CACnB,MAAgB,KAAhB,GAAOA,IAAP,EAAwBF,KAAMG,CAAAA,IAAN,CAAWC,MAAOC,CAAAA,YAAP,CAAoBH,IAApB,CAAX,CADL,CATI,CA7M3BI,MAAOC,CAAAA,cAAP,CAAsBT,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CU,MAAO,CAAA,CADoC,CAA7C,CAGAV,QAAQW,CAAAA,YAAR,CAsGAA,QAAqB,CAACP,IAAD,CAAO,CAC1B,MAEW,KAFX,GAEEA,IAFF,GAE2B,EAF3B,CAEoBA,IAFpB,EAE0C,GAF1C,GAEiCA,IAFjC,CAD0B,CArG5BJ,QAAQY,CAAAA,yBAAR,CAoHAA,QAAkC,CAACR,IAAD,CAAO,CACvC,MAAgB,KAAhB,GAAOA,IAAP,GAAgC,CAAhC,CAAyBA,IAAzB,EAA8C,EAA9C,GAAqCA,IAArC,CADuC,CAnHzCJ,QAAQa,CAAAA,kBAAR,CAqIAA,QAA2B,CAACT,IAAD,CAAO,CAChC,MAAgB,KAAhB,GAAOA,IAAP,EAA+B,CAAC,CAAhC;AAAwBA,IADQ,CApIlCJ,QAAQc,CAAAA,aAAR,CAsJAA,QAAsB,CAACV,IAAD,CAAO,CAC3B,MAAgB,CAAC,CAAjB,GAAOA,IAAP,EAA+B,CAAC,CAAhC,GAAsBA,IAAtB,EAA8C,EAA9C,GAAqCA,IADV,CArJ7BJ,QAAQe,CAAAA,kBAAR,CAA6Bf,OAAQgB,CAAAA,iBAArC,CAAyDhB,OAAQiB,CAAAA,UAAjE,CAA8EjB,OAAQkB,CAAAA,gBAAtF,CAAyGlB,OAAQmB,CAAAA,iBAAjH,CAAqInB,OAAQoB,CAAAA,aAA7I,CAA6JpB,OAAQqB,CAAAA,UAArK,CAAkLrB,OAAQsB,CAAAA,UAA1L,CAAuM,IAAK,EAExMC,OAAAA,CAA2BzB,OAAA,CAAQ,4EAAR,CAkBzBwB,QAAAA,CAAarB,UAAA,CAAW,UAAX,CAQnBD,QAAQsB,CAAAA,UAAR,CAAqBA,OACfD,QAAAA,CAAapB,UAAA,CAAW,IAAX,CAenBD,QAAQqB,CAAAA,UAAR,CAAqBA,OACfD,QAAAA,CAAgBnB,UAAA,CAAW,YAAX,CAStBD;OAAQoB,CAAAA,aAAR,CAAwBA,OAClBD,QAAAA,CAAoBlB,UAAA,CAAW,YAAX,CAU1BD,QAAQmB,CAAAA,iBAAR,CAA4BA,OACtBD,QAAAA,CAAmBjB,UAAA,CAAW,gBAAX,CAkBzBD,QAAQkB,CAAAA,gBAAR,CAA2BA,OACrBD,QAAAA,CAAahB,UAAA,CAAW,qBAAX,CAWnBD,QAAQiB,CAAAA,UAAR,CAAqBA,OAyEfD,QAAAA,CAAoBf,UAAA,CAAW,IAAX,CAkB1BD,QAAQgB,CAAAA,iBAAR,CAA4BA,OACtBD,OAAAA,CAAqBd,UAAA,CAAWsB,MAAyBC,CAAAA,uBAApC,CAQ3BxB,QAAQe,CAAAA,kBAAR,CAA6BA,MA9MkF;\",\n\"sources\":[\"node_modules/micromark-util-character/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_util_character$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.asciiControl = asciiControl;\\nexports.markdownLineEndingOrSpace = markdownLineEndingOrSpace;\\nexports.markdownLineEnding = markdownLineEnding;\\nexports.markdownSpace = markdownSpace;\\nexports.unicodePunctuation = exports.unicodeWhitespace = exports.asciiAtext = exports.asciiPunctuation = exports.asciiAlphanumeric = exports.asciiHexDigit = exports.asciiDigit = exports.asciiAlpha = void 0;\\n\\nvar _unicodePunctuationRegex = require(\\\"./lib/unicode-punctuation-regex.js\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Code} Code\\n */\\n\\n/**\\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\\n * case insensitive).\\n *\\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\\n *\\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\\n * to U+005A (`Z`).\\n *\\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\\n * to U+007A (`z`).\\n */\\nconst asciiAlpha = regexCheck(/[A-Za-z]/);\\n/**\\n * Check whether the character code represents an ASCII digit (`0` through `9`).\\n *\\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\\n * U+0039 (`9`).\\n */\\n\\nexports.asciiAlpha = asciiAlpha;\\nconst asciiDigit = regexCheck(/\\\\d/);\\n/**\\n * Check whether the character code represents an ASCII hex digit (`a` through\\n * `f`, case insensitive, or `0` through `9`).\\n *\\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\\n * digit, or an ASCII lower hex digit.\\n *\\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\\n * (`A`) to U+0046 (`F`).\\n *\\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\\n * (`a`) to U+0066 (`f`).\\n */\\n\\nexports.asciiDigit = asciiDigit;\\nconst asciiHexDigit = regexCheck(/[\\\\dA-Fa-f]/);\\n/**\\n * Check whether the character code represents an ASCII alphanumeric (`a`\\n * through `z`, case insensitive, or `0` through `9`).\\n *\\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\\n * (see `asciiAlpha`).\\n */\\n\\nexports.asciiHexDigit = asciiHexDigit;\\nconst asciiAlphanumeric = regexCheck(/[\\\\dA-Za-z]/);\\n/**\\n * Check whether the character code represents ASCII punctuation.\\n *\\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\\n */\\n\\nexports.asciiAlphanumeric = asciiAlphanumeric;\\nconst asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\\n/**\\n * Check whether the character code represents an ASCII atext.\\n *\\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\\n * (`{`) to U+007E TILDE (`~`).\\n *\\n * See:\\n * **\\\\[RFC5322]**:\\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\\n * P. Resnick.\\n * IETF.\\n */\\n\\nexports.asciiPunctuation = asciiPunctuation;\\nconst asciiAtext = regexCheck(/[#-'*+\\\\--9=?A-Z^-~]/);\\n/**\\n * Check whether a character code is an ASCII control character.\\n *\\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\\n * to U+001F (US), or U+007F (DEL).\\n *\\n * @param {Code} code\\n * @returns {code is number}\\n */\\n\\nexports.asciiAtext = asciiAtext;\\n\\nfunction asciiControl(code) {\\n  return (// Special whitespace codes (which have negative values), C0 and Control\\n    // character DEL\\n    code !== null && (code < 32 || code === 127)\\n  );\\n}\\n/**\\n * Check whether a character code is a markdown line ending (see\\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\\n *\\n * @param {Code} code\\n * @returns {code is number}\\n */\\n\\n\\nfunction markdownLineEndingOrSpace(code) {\\n  return code !== null && (code < 0 || code === 32);\\n}\\n/**\\n * Check whether a character code is a markdown line ending.\\n *\\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\\n *\\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\\n * RETURN (CR) are replaced by these virtual characters depending on whether\\n * they occurred together.\\n *\\n * @param {Code} code\\n * @returns {code is number}\\n */\\n\\n\\nfunction markdownLineEnding(code) {\\n  return code !== null && code < -2;\\n}\\n/**\\n * Check whether a character code is a markdown space.\\n *\\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\\n *\\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\\n * SPACE (VS) characters, depending on the column at which the tab occurred.\\n *\\n * @param {Code} code\\n * @returns {code is number}\\n */\\n\\n\\nfunction markdownSpace(code) {\\n  return code === -2 || code === -1 || code === 32;\\n}\\n/**\\n * Check whether the character code represents Unicode whitespace.\\n *\\n * Note that this does handle micromark specific markdown whitespace characters.\\n * See `markdownLineEndingOrSpace` to check that.\\n *\\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\\\[UNICODE]**).\\n *\\n * See:\\n * **\\\\[UNICODE]**:\\n * [The Unicode Standard](https://www.unicode.org/versions/).\\n * Unicode Consortium.\\n */\\n\\n\\nconst unicodeWhitespace = regexCheck(/\\\\s/);\\n/**\\n * Check whether the character code represents Unicode punctuation.\\n *\\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\\n * punctuation (see `asciiPunctuation`).\\n *\\n * See:\\n * **\\\\[UNICODE]**:\\n * [The Unicode Standard](https://www.unicode.org/versions/).\\n * Unicode Consortium.\\n */\\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\\n// In fact adds to the bundle size.\\n\\nexports.unicodeWhitespace = unicodeWhitespace;\\nconst unicodePunctuation = regexCheck(_unicodePunctuationRegex.unicodePunctuationRegex);\\n/**\\n * Create a code check from a regex.\\n *\\n * @param {RegExp} regex\\n * @returns {(code: Code) => code is number}\\n */\\n\\nexports.unicodePunctuation = unicodePunctuation;\\n\\nfunction regexCheck(regex) {\\n  return check;\\n  /**\\n   * Check whether a code matches the bound regex.\\n   *\\n   * @param {Code} code Character code\\n   * @returns {code is number} Whether the character code matches the bound regex\\n   */\\n\\n  function check(code) {\\n    return code !== null && regex.test(String.fromCharCode(code));\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"regexCheck\",\"regex\",\"check\",\"code\",\"test\",\"String\",\"fromCharCode\",\"Object\",\"defineProperty\",\"value\",\"asciiControl\",\"markdownLineEndingOrSpace\",\"markdownLineEnding\",\"markdownSpace\",\"unicodePunctuation\",\"unicodeWhitespace\",\"asciiAtext\",\"asciiPunctuation\",\"asciiAlphanumeric\",\"asciiHexDigit\",\"asciiDigit\",\"asciiAlpha\",\"_unicodePunctuationRegex\",\"unicodePunctuationRegex\"]\n}\n"]