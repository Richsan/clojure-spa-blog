["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-core-commonmark/lib/thematic-break.js"],"~:js","shadow$provide.module$node_modules$micromark_core_commonmark$lib$thematic_break=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.thematicBreak=void 0;var _micromarkFactorySpace=require(\"module$node_modules$micromark_factory_space$index\"),_micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\");exports.thematicBreak={name:\"thematicBreak\",tokenize:function(effects,ok,nok){function atBreak(code){if(code===marker)return effects.enter(\"thematicBreakSequence\"),\nsequence(code);if((0,_micromarkUtilCharacter.markdownSpace)(code))return(0,_micromarkFactorySpace.factorySpace)(effects,atBreak,\"whitespace\")(code);if(3>size||null!==code&&!(0,_micromarkUtilCharacter.markdownLineEnding)(code))return nok(code);effects.exit(\"thematicBreak\");return ok(code)}function sequence(code){if(code===marker)return effects.consume(code),size++,sequence;effects.exit(\"thematicBreakSequence\");return atBreak(code)}let size=0,marker;return function(code){effects.enter(\"thematicBreak\");\nmarker=code;return atBreak(code)}}}}","~:source","shadow$provide[\"module$node_modules$micromark_core_commonmark$lib$thematic_break\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.thematicBreak = void 0;\n\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/** @type {Construct} */\nconst thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n/** @type {Tokenizer} */\n\nexports.thematicBreak = thematicBreak;\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n\n  let marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak');\n    marker = code;\n    return atBreak(code);\n  }\n  /** @type {State} */\n\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence');\n      return sequence(code);\n    }\n\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n      return (0, _micromarkFactorySpace.factorySpace)(effects, atBreak, 'whitespace')(code);\n    }\n\n    if (size < 3 || code !== null && !(0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n      return nok(code);\n    }\n\n    effects.exit('thematicBreak');\n    return ok(code);\n  }\n  /** @type {State} */\n\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n\n    effects.exit('thematicBreakSequence');\n    return atBreak(code);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js","~$module$node_modules$micromark_factory_space$index"]],"~:properties",["^5",["tokenize","__esModule","name","value","thematicBreak"]],"~:compiled-at",1676665867295,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_core_commonmark$lib$thematic_break.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,uBAAyBP,OAAA,CAAQ,mDAAR,CAA7B,CAEIQ,wBAA0BR,OAAA,CAAQ,oDAAR,CAgB9BE,QAAQI,CAAAA,aAAR,CANsBA,CACpBG,KAAM,eADcH,CAEpBI,SAMFC,QAA8B,CAACC,OAAD,CAAUC,EAAV,CAAcC,GAAd,CAAmB,CAgB/CC,QAASA,QAAO,CAACC,IAAD,CAAO,CACrB,GAAIA,IAAJ,GAAaC,MAAb,CAEE,MADAL,QAAQM,CAAAA,KAAR,CAAc,uBAAd,CACO;AAAAC,QAAA,CAASH,IAAT,CAGT,IAAI,GAAIR,uBAAwBY,CAAAA,aAA5B,EAA2CJ,IAA3C,CAAJ,CACE,MAAO,GAAIT,sBAAuBc,CAAAA,YAA3B,EAAyCT,OAAzC,CAAkDG,OAAlD,CAA2D,YAA3D,CAAA,CAAyEC,IAAzE,CAGT,IAAW,CAAX,CAAIM,IAAJ,EAAyB,IAAzB,GAAgBN,IAAhB,EAAiC,CAAC,GAAIR,uBAAwBe,CAAAA,kBAA5B,EAAgDP,IAAhD,CAAlC,CACE,MAAOF,IAAA,CAAIE,IAAJ,CAGTJ,QAAQY,CAAAA,IAAR,CAAa,eAAb,CACA,OAAOX,GAAA,CAAGG,IAAH,CAfc,CAoBvBG,QAASA,SAAQ,CAACH,IAAD,CAAO,CACtB,GAAIA,IAAJ,GAAaC,MAAb,CAGE,MAFAL,QAAQa,CAAAA,OAAR,CAAgBT,IAAhB,CAEOG,CADPG,IAAA,EACOH,CAAAA,QAGTP,QAAQY,CAAAA,IAAR,CAAa,uBAAb,CACA,OAAOT,QAAA,CAAQC,IAAR,CARe,CAnCxB,IAAIM,KAAO,CAAX,CAGIL,MACJ,OAGAS,SAAc,CAACV,IAAD,CAAO,CACnBJ,OAAQM,CAAAA,KAAR,CAAc,eAAd,CACAD;MAAA,CAASD,IACT,OAAOD,QAAA,CAAQC,IAAR,CAHY,CAR0B,CAR3BV,CApBuG;\",\n\"sources\":[\"node_modules/micromark-core-commonmark/lib/thematic-break.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_core_commonmark$lib$thematic_break\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.thematicBreak = void 0;\\n\\nvar _micromarkFactorySpace = require(\\\"micromark-factory-space\\\");\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Construct} Construct\\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\\n * @typedef {import('micromark-util-types').State} State\\n * @typedef {import('micromark-util-types').Code} Code\\n */\\n\\n/** @type {Construct} */\\nconst thematicBreak = {\\n  name: 'thematicBreak',\\n  tokenize: tokenizeThematicBreak\\n};\\n/** @type {Tokenizer} */\\n\\nexports.thematicBreak = thematicBreak;\\n\\nfunction tokenizeThematicBreak(effects, ok, nok) {\\n  let size = 0;\\n  /** @type {NonNullable<Code>} */\\n\\n  let marker;\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    effects.enter('thematicBreak');\\n    marker = code;\\n    return atBreak(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function atBreak(code) {\\n    if (code === marker) {\\n      effects.enter('thematicBreakSequence');\\n      return sequence(code);\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\\n      return (0, _micromarkFactorySpace.factorySpace)(effects, atBreak, 'whitespace')(code);\\n    }\\n\\n    if (size < 3 || code !== null && !(0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\\n      return nok(code);\\n    }\\n\\n    effects.exit('thematicBreak');\\n    return ok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function sequence(code) {\\n    if (code === marker) {\\n      effects.consume(code);\\n      size++;\\n      return sequence;\\n    }\\n\\n    effects.exit('thematicBreakSequence');\\n    return atBreak(code);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"thematicBreak\",\"_micromarkFactorySpace\",\"_micromarkUtilCharacter\",\"name\",\"tokenize\",\"tokenizeThematicBreak\",\"effects\",\"ok\",\"nok\",\"atBreak\",\"code\",\"marker\",\"enter\",\"sequence\",\"markdownSpace\",\"factorySpace\",\"size\",\"markdownLineEnding\",\"exit\",\"consume\",\"start\"]\n}\n"]