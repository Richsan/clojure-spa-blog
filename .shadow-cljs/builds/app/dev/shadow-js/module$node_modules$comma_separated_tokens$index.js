["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/comma-separated-tokens/index.js"],"~:js","shadow$provide.module$node_modules$comma_separated_tokens$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.parse=function(value){const tokens=[];value=String(value||\"\");let index=value.indexOf(\",\");var start=0;let end=!1;for(;!end;)-1===index&&(index=value.length,end=!0),start=value.slice(start,index).trim(),!start&&end||tokens.push(start),start=index+1,index=value.indexOf(\",\",start);return tokens};exports.stringify=function(values,options){options=\noptions||{};return(\"\"===values[values.length-1]?[...values,\"\"]:values).join((options.padRight?\" \":\"\")+\",\"+(!1===options.padLeft?\"\":\" \")).trim()}}","~:source","shadow$provide[\"module$node_modules$comma_separated_tokens$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nexports.stringify = stringify;\n\n/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nfunction parse(value) {\n  /** @type {Array<string>} */\n  const tokens = [];\n  const input = String(value || '');\n  let index = input.indexOf(',');\n  let start = 0;\n  /** @type {boolean} */\n\n  let end = false;\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length;\n      end = true;\n    }\n\n    const token = input.slice(start, index).trim();\n\n    if (token || !end) {\n      tokens.push(token);\n    }\n\n    start = index + 1;\n    index = input.indexOf(',', start);\n  }\n\n  return tokens;\n}\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\n\n\nfunction stringify(values, options) {\n  const settings = options || {}; // Ensure the last empty entry is seen.\n\n  const input = values[values.length - 1] === '' ? [...values, ''] : values;\n  return input.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","stringify","parse"]],"~:compiled-at",1676665867335,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$comma_separated_tokens$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,KAAR,CAyBAA,QAAc,CAACD,KAAD,CAAQ,CAEpB,MAAME,OAAS,EACTC,MAAAA,CAAQC,MAAA,CAAOJ,KAAP,EAAgB,EAAhB,CACd,KAAIK,MAAQF,KAAMG,CAAAA,OAAN,CAAc,GAAd,CACZ,KAAIC,MAAQ,CAGZ,KAAIC,IAAM,CAAA,CAEV,KAAA,CAAO,CAACA,GAAR,CAAA,CACgB,CAAC,CAYf,GAZIH,KAYJ,GAXEA,KACA,CADQF,KAAMM,CAAAA,MACd,CAAAD,GAAA,CAAM,CAAA,CAUR,EAPME,KAON,CAPcP,KAAMQ,CAAAA,KAAN,CAAYJ,KAAZ,CAAmBF,KAAnB,CAA0BO,CAAAA,IAA1B,EAOd,CALIF,CAAAA,KAKJ,EALcF,GAKd,EAJEN,MAAOW,CAAAA,IAAP,CAAYH,KAAZ,CAIF,CADAH,KACA,CADQF,KACR,CADgB,CAChB,CAAAA,KAAA,CAAQF,KAAMG,CAAAA,OAAN,CAAc,GAAd,CAAmBC,KAAnB,CAGV,OAAOL,OA1Ba,CAxBtBL,QAAQiB,CAAAA,SAAR,CAgEAA,QAAkB,CAACC,MAAD,CAASC,OAAT,CAAkB,CAC5BC,OAAAA;AAAWD,OAAXC,EAAsB,EAG5B,OAAaC,CAD+B,EAA9Bf,GAAAY,MAAA,CAAOA,MAAON,CAAAA,MAAd,CAAuB,CAAvB,CAAAN,CAAmC,CAAC,GAAGY,MAAJ,CAAY,EAAZ,CAAnCZ,CAAqDY,MACtDG,EAAAA,IAAN,EAAYD,OAASE,CAAAA,QAAT,CAAoB,GAApB,CAA0B,EAAtC,EAA4C,GAA5C,EAAwE,CAAA,CAArB,GAAAF,OAASG,CAAAA,OAAT,CAA6B,EAA7B,CAAkC,GAArF,EAA2FR,CAAAA,IAA3F,EAJ2B,CAvEyE;\",\n\"sources\":[\"node_modules/comma-separated-tokens/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$comma_separated_tokens$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.parse = parse;\\nexports.stringify = stringify;\\n\\n/**\\n * @typedef Options\\n *   Configuration for `stringify`.\\n * @property {boolean} [padLeft=true]\\n *   Whether to pad a space before a token.\\n * @property {boolean} [padRight=false]\\n *   Whether to pad a space after a token.\\n */\\n\\n/**\\n * @typedef {Options} StringifyOptions\\n *   Please use `StringifyOptions` instead.\\n */\\n\\n/**\\n * Parse comma-separated tokens to an array.\\n *\\n * @param {string} value\\n *   Comma-separated tokens.\\n * @returns {Array<string>}\\n *   List of tokens.\\n */\\nfunction parse(value) {\\n  /** @type {Array<string>} */\\n  const tokens = [];\\n  const input = String(value || '');\\n  let index = input.indexOf(',');\\n  let start = 0;\\n  /** @type {boolean} */\\n\\n  let end = false;\\n\\n  while (!end) {\\n    if (index === -1) {\\n      index = input.length;\\n      end = true;\\n    }\\n\\n    const token = input.slice(start, index).trim();\\n\\n    if (token || !end) {\\n      tokens.push(token);\\n    }\\n\\n    start = index + 1;\\n    index = input.indexOf(',', start);\\n  }\\n\\n  return tokens;\\n}\\n/**\\n * Serialize an array of strings or numbers to comma-separated tokens.\\n *\\n * @param {Array<string|number>} values\\n *   List of tokens.\\n * @param {Options} [options]\\n *   Configuration for `stringify` (optional).\\n * @returns {string}\\n *   Comma-separated tokens.\\n */\\n\\n\\nfunction stringify(values, options) {\\n  const settings = options || {}; // Ensure the last empty entry is seen.\\n\\n  const input = values[values.length - 1] === '' ? [...values, ''] : values;\\n  return input.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"parse\",\"tokens\",\"input\",\"String\",\"index\",\"indexOf\",\"start\",\"end\",\"length\",\"token\",\"slice\",\"trim\",\"push\",\"stringify\",\"values\",\"options\",\"settings\",\"join\",\"padRight\",\"padLeft\"]\n}\n"]