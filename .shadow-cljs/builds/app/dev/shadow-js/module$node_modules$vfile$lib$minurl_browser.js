["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/vfile/lib/minurl.browser.js"],"~:js","shadow$provide.module$node_modules$vfile$lib$minurl_browser=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.urlToPath=function(path){if(\"string\"===typeof path)path=new URL(path);else if(!(0,_minurlShared.isUrl)(path))throw path=new TypeError('The \"path\" argument must be of type string or an instance of URL. Received `'+path+\"`\"),path.code=\"ERR_INVALID_ARG_TYPE\",path;if(\"file:\"!==path.protocol)throw path=new TypeError(\"The URL must be of scheme file\"),\npath.code=\"ERR_INVALID_URL_SCHEME\",path;if(\"\"!==path.hostname)throw path=new TypeError('File URL host must be \"localhost\" or empty on darwin'),path.code=\"ERR_INVALID_FILE_URL_HOST\",path;path=path.pathname;let index=-1;for(;++index<path.length;)if(37===path.charCodeAt(index)&&50===path.charCodeAt(index+1)){const third=path.charCodeAt(index+2);if(70===third||102===third)throw path=new TypeError(\"File URL path must not include encoded / characters\"),path.code=\"ERR_INVALID_FILE_URL_PATH\",path;}return decodeURIComponent(path)};\nObject.defineProperty(exports,\"isUrl\",{enumerable:!0,get:function(){return _minurlShared.isUrl}});var _minurlShared=require(\"module$node_modules$vfile$lib$minurl_shared\")}","~:source","shadow$provide[\"module$node_modules$vfile$lib$minurl_browser\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.urlToPath = urlToPath;\nObject.defineProperty(exports, \"isUrl\", {\n  enumerable: true,\n  get: function () {\n    return _minurlShared.isUrl;\n  }\n});\n\nvar _minurlShared = require(\"./minurl.shared.js\");\n\n/// <reference lib=\"dom\" />\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nfunction urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path);\n  } else if (!(0, _minurlShared.isUrl)(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The \"path\" argument must be of type string or an instance of URL. Received `' + path + '`');\n    error.code = 'ERR_INVALID_ARG_TYPE';\n    throw error;\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file');\n    error.code = 'ERR_INVALID_URL_SCHEME';\n    throw error;\n  }\n\n  return getPathFromURLPosix(path);\n}\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\n\n\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('File URL host must be \"localhost\" or empty on darwin');\n    error.code = 'ERR_INVALID_FILE_URL_HOST';\n    throw error;\n  }\n\n  const pathname = url.pathname;\n  let index = -1;\n\n  while (++index < pathname.length) {\n    if (pathname.charCodeAt(index) === 37\n    /* `%` */\n    && pathname.charCodeAt(index + 1) === 50\n    /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2);\n\n      if (third === 70\n      /* `F` */\n      || third === 102\n      /* `f` */\n      ) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError('File URL path must not include encoded / characters');\n        error.code = 'ERR_INVALID_FILE_URL_PATH';\n        throw error;\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$vfile$lib$minurl_shared"]],"~:properties",["^5",["__esModule","value","enumerable","isUrl","urlToPath","get","code"]],"~:compiled-at",1676665867240,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$vfile$lib$minurl_browser.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,4CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAmBAA,QAAkB,CAACC,IAAD,CAAO,CACvB,GAAoB,QAApB,GAAI,MAAOA,KAAX,CACEA,IAAA,CAAO,IAAIC,GAAJ,CAAQD,IAAR,CADT,KAEO,IAAI,CAAC,GAAIE,aAAcC,CAAAA,KAAlB,EAAyBH,IAAzB,CAAL,CAIL,KAFMI,KAEAA,CAFQ,IAAIC,SAAJ,CAAc,8EAAd,CAA+FL,IAA/F,CAAsG,GAAtG,CAERI,CADNA,IAAME,CAAAA,IACAF,CADO,sBACPA,CAAAA,IAAN,CAGF,GAAsB,OAAtB,GAAIJ,IAAKO,CAAAA,QAAT,CAIE,KAFMH,KAEAA,CAFQ,IAAIC,SAAJ,CAAc,gCAAd,CAERD;AADNA,IAAME,CAAAA,IACAF,CADO,wBACPA,CAAAA,IAAN,CAgBF,GAAqB,EAArB,GAAII,IAAIC,CAAAA,QAAR,CAIE,KAFML,KAEAA,CAFQ,IAAIC,SAAJ,CAAc,sDAAd,CAERD,CADNA,IAAME,CAAAA,IACAF,CADO,2BACPA,CAAAA,IAAN,CAGIM,IAAAA,CAAWF,IAAIE,CAAAA,QACrB,KAAIC,MAAQ,CAAC,CAEb,KAAA,CAAO,EAAEA,KAAT,CAAiBD,IAASE,CAAAA,MAA1B,CAAA,CACE,GAAmC,EAAnC,GAAIF,IAASG,CAAAA,UAAT,CAAoBF,KAApB,CAAJ,EAEsC,EAFtC,GAEGD,IAASG,CAAAA,UAAT,CAAoBF,KAApB,CAA4B,CAA5B,CAFH,CAIE,CACA,MAAMG,MAAQJ,IAASG,CAAAA,UAAT,CAAoBF,KAApB,CAA4B,CAA5B,CAEd,IAAc,EAAd,GAAIG,KAAJ,EAEa,GAFb,GAEGA,KAFH,CAQE,KAFMV,KAEAA,CAFQ,IAAIC,SAAJ,CAAc,qDAAd,CAERD,CADNA,IAAME,CAAAA,IACAF,CADO,2BACPA,CAAAA,IAAN,CAXF,CA5BJ,MA4COW,mBAAA,CAAmBL,IAAnB,CA7DgB,CAlBzBd;MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,OAA/B,CAAwC,CACtCqB,WAAY,CAAA,CAD0B,CAEtCC,IAAKA,QAAS,EAAG,CACf,MAAOf,cAAcC,CAAAA,KADN,CAFqB,CAAxC,CAOA,KAAID,cAAgBT,OAAA,CAAQ,6CAAR,CAdqF;\",\n\"sources\":[\"node_modules/vfile/lib/minurl.browser.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$vfile$lib$minurl_browser\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.urlToPath = urlToPath;\\nObject.defineProperty(exports, \\\"isUrl\\\", {\\n  enumerable: true,\\n  get: function () {\\n    return _minurlShared.isUrl;\\n  }\\n});\\n\\nvar _minurlShared = require(\\\"./minurl.shared.js\\\");\\n\\n/// <reference lib=\\\"dom\\\" />\\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\\n\\n/**\\n * @param {string | URL} path\\n *   File URL.\\n * @returns {string}\\n *   File URL.\\n */\\nfunction urlToPath(path) {\\n  if (typeof path === 'string') {\\n    path = new URL(path);\\n  } else if (!(0, _minurlShared.isUrl)(path)) {\\n    /** @type {NodeJS.ErrnoException} */\\n    const error = new TypeError('The \\\"path\\\" argument must be of type string or an instance of URL. Received `' + path + '`');\\n    error.code = 'ERR_INVALID_ARG_TYPE';\\n    throw error;\\n  }\\n\\n  if (path.protocol !== 'file:') {\\n    /** @type {NodeJS.ErrnoException} */\\n    const error = new TypeError('The URL must be of scheme file');\\n    error.code = 'ERR_INVALID_URL_SCHEME';\\n    throw error;\\n  }\\n\\n  return getPathFromURLPosix(path);\\n}\\n/**\\n * Get a path from a POSIX URL.\\n *\\n * @param {URL} url\\n *   URL.\\n * @returns {string}\\n *   File path.\\n */\\n\\n\\nfunction getPathFromURLPosix(url) {\\n  if (url.hostname !== '') {\\n    /** @type {NodeJS.ErrnoException} */\\n    const error = new TypeError('File URL host must be \\\"localhost\\\" or empty on darwin');\\n    error.code = 'ERR_INVALID_FILE_URL_HOST';\\n    throw error;\\n  }\\n\\n  const pathname = url.pathname;\\n  let index = -1;\\n\\n  while (++index < pathname.length) {\\n    if (pathname.charCodeAt(index) === 37\\n    /* `%` */\\n    && pathname.charCodeAt(index + 1) === 50\\n    /* `2` */\\n    ) {\\n      const third = pathname.charCodeAt(index + 2);\\n\\n      if (third === 70\\n      /* `F` */\\n      || third === 102\\n      /* `f` */\\n      ) {\\n        /** @type {NodeJS.ErrnoException} */\\n        const error = new TypeError('File URL path must not include encoded / characters');\\n        error.code = 'ERR_INVALID_FILE_URL_PATH';\\n        throw error;\\n      }\\n    }\\n  }\\n\\n  return decodeURIComponent(pathname);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"urlToPath\",\"path\",\"URL\",\"_minurlShared\",\"isUrl\",\"error\",\"TypeError\",\"code\",\"protocol\",\"url\",\"hostname\",\"pathname\",\"index\",\"length\",\"charCodeAt\",\"third\",\"decodeURIComponent\",\"enumerable\",\"get\"]\n}\n"]