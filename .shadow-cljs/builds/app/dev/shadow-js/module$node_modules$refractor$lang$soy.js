["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/soy.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$soy=function(global,require,module,exports){function soy(Prism$jscomp$0){Prism$jscomp$0.register(_markupTemplating.default);(function(Prism){var stringPattern=/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,numberPattern=/\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;Prism.languages.soy={comment:[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(\\s)\\/\\/.*/,lookbehind:!0,greedy:!0}],\"command-arg\":{pattern:/(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\nlookbehind:!0,alias:\"string\",inside:{punctuation:/\\./}},parameter:{pattern:/(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,lookbehind:!0,alias:\"variable\"},keyword:[{pattern:/(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,lookbehind:!0},/\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/],delimiter:{pattern:/^\\{+\\/?|\\/?\\}+$/,\nalias:\"punctuation\"},property:/\\w+(?==)/,variable:{pattern:/\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,inside:{string:{pattern:stringPattern,greedy:!0},number:numberPattern,punctuation:/[\\[\\].?]/}},string:{pattern:stringPattern,greedy:!0},function:[/\\w+(?=\\()/,{pattern:/(\\|[^\\S\\r\\n]*)\\w+/,lookbehind:!0}],boolean:/\\b(?:false|true)\\b/,number:numberPattern,operator:/\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,punctuation:/[{}()\\[\\]|.,:]/};Prism.hooks.add(\"before-tokenize\",function(env){var soyLitteralMode=\n!1;Prism.languages[\"markup-templating\"].buildPlaceholders(env,\"soy\",/\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g,function(match){\"{/literal}\"===match&&(soyLitteralMode=!1);return soyLitteralMode?!1:(\"{literal}\"===match&&(soyLitteralMode=!0),!0)})});Prism.hooks.add(\"after-tokenize\",function(env){Prism.languages[\"markup-templating\"].tokenizePlaceholders(env,\"soy\")})})(Prism$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=soy;var _markupTemplating=function(obj){return obj&&\nobj.__esModule?obj:{default:obj}}(require(\"module$node_modules$refractor$lang$markup_templating\"));soy.displayName=\"soy\";soy.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$soy\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = soy;\n\nvar _markupTemplating = _interopRequireDefault(require(\"./markup-templating.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-nocheck\nsoy.displayName = 'soy';\nsoy.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction soy(Prism) {\n  Prism.register(_markupTemplating.default);\n\n  (function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n    Prism.languages.soy = {\n      comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n        pattern: /(\\s)\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      'command-arg': {\n        pattern: /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [{\n        pattern: /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n        lookbehind: true\n      }, /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/],\n      delimiter: {\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [/\\w+(?=\\()/, {\n        pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n        lookbehind: true\n      }],\n      boolean: /\\b(?:false|true)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    }; // Tokenize all inline Soy expressions\n\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n      var soyLitteralStart = '{literal}';\n      var soyLitteralEnd = '{/literal}';\n      var soyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n        // Soy tags inside {literal} block are ignored\n        if (match === soyLitteralEnd) {\n          soyLitteralMode = false;\n        }\n\n        if (!soyLitteralMode) {\n          if (match === soyLitteralStart) {\n            soyLitteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n    });\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$refractor$lang$markup_templating"]],"~:properties",["^5",["boolean","punctuation","string","parameter","aliases","operator","displayName","__esModule","lookbehind","value","delimiter","variable","keyword","number","greedy","property","function","pattern","inside","alias","comment","soy","default"]],"~:compiled-at",1676841365462,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$soy.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/soy.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$soy\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = soy;\\n\\nvar _markupTemplating = _interopRequireDefault(require(\\\"./markup-templating.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// @ts-nocheck\\nsoy.displayName = 'soy';\\nsoy.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction soy(Prism) {\\n  Prism.register(_markupTemplating.default);\\n\\n  (function (Prism) {\\n    var stringPattern = /([\\\"'])(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1/;\\n    var numberPattern = /\\\\b\\\\d+(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\\\\b|\\\\b0x[\\\\dA-F]+\\\\b/;\\n    Prism.languages.soy = {\\n      comment: [/\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\//, {\\n        pattern: /(\\\\s)\\\\/\\\\/.*/,\\n        lookbehind: true,\\n        greedy: true\\n      }],\\n      'command-arg': {\\n        pattern: /(\\\\{+\\\\/?\\\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\\\s+)\\\\.?[\\\\w.]+/,\\n        lookbehind: true,\\n        alias: 'string',\\n        inside: {\\n          punctuation: /\\\\./\\n        }\\n      },\\n      parameter: {\\n        pattern: /(\\\\{+\\\\/?\\\\s*@?param\\\\??\\\\s+)\\\\.?[\\\\w.]+/,\\n        lookbehind: true,\\n        alias: 'variable'\\n      },\\n      keyword: [{\\n        pattern: /(\\\\{+\\\\/?[^\\\\S\\\\r\\\\n]*)(?:\\\\\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\\\??|rb|sp|switch|template|xid)/,\\n        lookbehind: true\\n      }, /\\\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\\\b/],\\n      delimiter: {\\n        pattern: /^\\\\{+\\\\/?|\\\\/?\\\\}+$/,\\n        alias: 'punctuation'\\n      },\\n      property: /\\\\w+(?==)/,\\n      variable: {\\n        pattern: /\\\\$[^\\\\W\\\\d]\\\\w*(?:\\\\??(?:\\\\.\\\\w+|\\\\[[^\\\\]]+\\\\]))*/,\\n        inside: {\\n          string: {\\n            pattern: stringPattern,\\n            greedy: true\\n          },\\n          number: numberPattern,\\n          punctuation: /[\\\\[\\\\].?]/\\n        }\\n      },\\n      string: {\\n        pattern: stringPattern,\\n        greedy: true\\n      },\\n      function: [/\\\\w+(?=\\\\()/, {\\n        pattern: /(\\\\|[^\\\\S\\\\r\\\\n]*)\\\\w+/,\\n        lookbehind: true\\n      }],\\n      boolean: /\\\\b(?:false|true)\\\\b/,\\n      number: numberPattern,\\n      operator: /\\\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\\\b(?:and|not|or)\\\\b/,\\n      punctuation: /[{}()\\\\[\\\\]|.,:]/\\n    }; // Tokenize all inline Soy expressions\\n\\n    Prism.hooks.add('before-tokenize', function (env) {\\n      var soyPattern = /\\\\{\\\\{.+?\\\\}\\\\}|\\\\{.+?\\\\}|\\\\s\\\\/\\\\/.*|\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\//g;\\n      var soyLitteralStart = '{literal}';\\n      var soyLitteralEnd = '{/literal}';\\n      var soyLitteralMode = false;\\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\\n        // Soy tags inside {literal} block are ignored\\n        if (match === soyLitteralEnd) {\\n          soyLitteralMode = false;\\n        }\\n\\n        if (!soyLitteralMode) {\\n          if (match === soyLitteralStart) {\\n            soyLitteralMode = true;\\n          }\\n\\n          return true;\\n        }\\n\\n        return false;\\n      });\\n    }); // Re-insert the tokens after tokenizing\\n\\n    Prism.hooks.add('after-tokenize', function (env) {\\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\\n    });\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"soy\",\"Prism\",\"register\",\"_markupTemplating\",\"default\",\"stringPattern\",\"numberPattern\",\"languages\",\"comment\",\"pattern\",\"lookbehind\",\"greedy\",\"alias\",\"inside\",\"punctuation\",\"parameter\",\"keyword\",\"delimiter\",\"property\",\"variable\",\"string\",\"number\",\"function\",\"boolean\",\"operator\",\"hooks\",\"add\",\"env\",\"soyLitteralMode\",\"buildPlaceholders\",\"soyPattern\",\"match\",\"soyLitteralEnd\",\"soyLitteralStart\",\"tokenizePlaceholders\",\"Object\",\"defineProperty\",\"value\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"displayName\",\"aliases\"]\n}\n"]