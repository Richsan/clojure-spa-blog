["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/markdown.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$markdown=function(global,require,module,exports){function markdown(Prism$jscomp$0){Prism$jscomp$0.register(_markup.default);(function(Prism){function createInline(pattern){pattern=pattern.replace(/<inner>/g,function(){return inner});return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source+\"(?:\"+pattern+\")\")}function textContent(html){html=html.replace(tagPattern,\"\");return html=html.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi,function(m,code){code=code.toLowerCase();\nreturn\"#\"===code[0]?(m=\"x\"===code[1]?parseInt(code.slice(2),16):Number(code.slice(1)),fromCodePoint(m)):(code=KNOWN_ENTITY_NAMES[code])?code:m})}var inner=/(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source,tableCell=/(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source,tableRow=/\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g,function(){return tableCell}),tableLine=/\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;Prism.languages.markdown=\nPrism.languages.extend(\"markup\",{});Prism.languages.insertBefore(\"markdown\",\"prolog\",{\"front-matter-block\":{pattern:/(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,lookbehind:!0,greedy:!0,inside:{punctuation:/^---|---$/,\"front-matter\":{pattern:/\\S+(?:\\s+\\S+)*/,alias:[\"yaml\",\"language-yaml\"],inside:Prism.languages.yaml}}},blockquote:{pattern:/^>(?:[\\t ]*>)*/m,alias:\"punctuation\"},table:{pattern:RegExp(\"^\"+tableRow+tableLine+\"(?:\"+tableRow+\")*\",\"m\"),inside:{\"table-data-rows\":{pattern:RegExp(\"^(\"+\ntableRow+tableLine+\")(?:\"+tableRow+\")*$\"),lookbehind:!0,inside:{\"table-data\":{pattern:RegExp(tableCell),inside:Prism.languages.markdown},punctuation:/\\|/}},\"table-line\":{pattern:RegExp(\"^(\"+tableRow+\")\"+tableLine+\"$\"),lookbehind:!0,inside:{punctuation:/\\||:?-{3,}:?/}},\"table-header-row\":{pattern:RegExp(\"^\"+tableRow+\"$\"),inside:{\"table-header\":{pattern:RegExp(tableCell),alias:\"important\",inside:Prism.languages.markdown},punctuation:/\\|/}}}},code:[{pattern:/((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\nlookbehind:!0,alias:\"keyword\"},{pattern:/^```[\\s\\S]*?^```$/m,greedy:!0,inside:{\"code-block\":{pattern:/^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,lookbehind:!0},\"code-language\":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,alias:\"important\",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\\s*)#.+/m,lookbehind:!0,alias:\"important\",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,lookbehind:!0,\nalias:\"punctuation\"},list:{pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,lookbehind:!0,alias:\"punctuation\"},\"url-reference\":{pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,inside:{variable:{pattern:/^(!?\\[)[^\\]]+/,lookbehind:!0},string:/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,punctuation:/^[\\[\\]!:]|[<>]/},alias:\"url\"},bold:{pattern:createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\nlookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\\s\\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\\*\\*|__/}},italic:{pattern:createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\\s\\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\\s\\S]+(?=\\1$)/,\nlookbehind:!0,inside:{}},punctuation:/~~?/}},\"code-snippet\":{pattern:/(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,lookbehind:!0,greedy:!0,alias:[\"code\",\"keyword\"]},url:{pattern:createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),lookbehind:!0,greedy:!0,inside:{operator:/^!/,content:{pattern:/(^\\[)[^\\]]+(?=\\])/,lookbehind:!0,inside:{}},variable:{pattern:/(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,lookbehind:!0},url:{pattern:/(^\\]\\()[^\\s)]+/,\nlookbehind:!0},string:{pattern:/(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,lookbehind:!0}}}});[\"url\",\"bold\",\"italic\",\"strike\"].forEach(function(token){[\"url\",\"bold\",\"italic\",\"strike\",\"code-snippet\"].forEach(function(inside){token!==inside&&(Prism.languages.markdown[token].inside.content.inside[inside]=Prism.languages.markdown[inside])})});Prism.hooks.add(\"after-tokenize\",function(env){function walkTokens(tokens){if(tokens&&\"string\"!==typeof tokens)for(var i=0,l=tokens.length;i<l;i++){var token=tokens[i];\nif(\"code\"!==token.type)walkTokens(token.content);else{var codeLang=token.content[1];token=token.content[3];codeLang&&token&&\"code-language\"===codeLang.type&&\"code-block\"===token.type&&\"string\"===typeof codeLang.content&&(codeLang=codeLang.content.replace(/\\b#/g,\"sharp\").replace(/\\b\\+\\+/g,\"pp\"),codeLang=(/[a-z][\\w-]*/i.exec(codeLang)||[\"\"])[0].toLowerCase(),codeLang=\"language-\"+codeLang,token.alias?\"string\"===typeof token.alias?token.alias=[token.alias,codeLang]:token.alias.push(codeLang):token.alias=\n[codeLang])}}}\"markdown\"!==env.language&&\"md\"!==env.language||walkTokens(env.tokens)});Prism.hooks.add(\"wrap\",function(env){if(\"code-block\"===env.type){for(var codeLang=\"\",i=0,l=env.classes.length;i<l;i++){var match=/language-(.+)/.exec(env.classes[i]);if(match){codeLang=match[1];break}}if(i=Prism.languages[codeLang])env.content=Prism.highlight(textContent(env.content.value),i,codeLang);else if(codeLang&&\"none\"!==codeLang&&Prism.plugins.autoloader){var id=\"md-\"+(new Date).valueOf()+\"-\"+Math.floor(1E16*\nMath.random());env.attributes.id=id;Prism.plugins.autoloader.loadLanguages(codeLang,function(){var ele=document.getElementById(id);ele&&(ele.innerHTML=Prism.highlight(ele.textContent,Prism.languages[codeLang],codeLang))})}}});var tagPattern=RegExp(Prism.languages.markup.tag.pattern.source,\"gi\"),KNOWN_ENTITY_NAMES={amp:\"\\x26\",lt:\"\\x3c\",gt:\"\\x3e\",quot:'\"'},fromCodePoint=String.fromCodePoint||String.fromCharCode;Prism.languages.md=Prism.languages.markdown})(Prism$jscomp$0)}Object.defineProperty(exports,\n\"__esModule\",{value:!0});exports.default=markdown;var _markup=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require(\"module$node_modules$refractor$lang$markup\"));markdown.displayName=\"markdown\";markdown.aliases=[\"md\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$markdown\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = markdown;\n\nvar _markup = _interopRequireDefault(require(\"./markup.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-nocheck\nmarkdown.displayName = 'markdown';\nmarkdown.aliases = ['md'];\n/** @type {import('../core.js').Syntax} */\n\nfunction markdown(Prism) {\n  Prism.register(_markup.default);\n\n  (function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner;\n      });\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n    }\n\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n      return tableCell;\n    });\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n    Prism.languages.markdown = Prism.languages.extend('markup', {});\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      'front-matter-block': {\n        pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^---|---$/,\n          'front-matter': {\n            pattern: /\\S+(?:\\s+\\S+)*/,\n            alias: ['yaml', 'language-yaml'],\n            inside: Prism.languages.yaml\n          }\n        }\n      },\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [{\n        // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n        pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n        lookbehind: true,\n        alias: 'keyword'\n      }, {\n        // ```optional language\n        // code block\n        // ```\n        pattern: /^```[\\s\\S]*?^```$/m,\n        greedy: true,\n        inside: {\n          'code-block': {\n            pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n            lookbehind: true\n          },\n          'code-language': {\n            pattern: /^(```).+/,\n            lookbehind: true\n          },\n          punctuation: /```/\n        }\n      }],\n      title: [{\n        // title 1\n        // =======\n        // title 2\n        // -------\n        pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n        alias: 'important',\n        inside: {\n          punctuation: /==+$|--+$/\n        }\n      }, {\n        // # title 1\n        // ###### title 6\n        pattern: /(^\\s*)#.+/m,\n        lookbehind: true,\n        alias: 'important',\n        inside: {\n          punctuation: /^#+|#+$/\n        }\n      }],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        // eslint-disable-next-line regexp/strict\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /~~?/\n        }\n      },\n      'code-snippet': {\n        // `code`\n        // ``code``\n        pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n        lookbehind: true,\n        greedy: true,\n        alias: ['code', 'keyword']\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          operator: /^!/,\n          content: {\n            pattern: /(^\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          variable: {\n            pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          url: {\n            pattern: /(^\\]\\()[^\\s)]+/,\n            lookbehind: true\n          },\n          string: {\n            pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n            lookbehind: true\n          }\n        }\n      }\n    });\n    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;\n      ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n        }\n      });\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return;\n      }\n\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return;\n        }\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n\n          if (token.type !== 'code') {\n            walkTokens(token.content);\n            continue;\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n\n\n          var codeLang = token.content[1];\n          var codeBlock = token.content[3];\n\n          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n            var alias = 'language-' + lang; // add alias\n\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias];\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias];\n            } else {\n              codeBlock.alias.push(alias);\n            }\n          }\n        }\n      }\n\n      walkTokens(env.tokens);\n    });\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return;\n      }\n\n      var codeLang = '';\n\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i];\n        var match = /language-(.+)/.exec(cls);\n\n        if (match) {\n          codeLang = match[1];\n          break;\n        }\n      }\n\n      var grammar = Prism.languages[codeLang];\n\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n          env.attributes['id'] = id;\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id);\n\n            if (ele) {\n              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n            }\n          });\n        }\n      } else {\n        env.content = Prism.highlight(textContent(env.content.value), grammar, codeLang);\n      }\n    });\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n    /**\n     * A list of known entity names.\n     *\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n     *\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n     */\n\n    var KNOWN_ENTITY_NAMES = {\n      amp: '&',\n      lt: '<',\n      gt: '>',\n      quot: '\"'\n    }; // IE 11 doesn't support `String.fromCodePoint`\n\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n    /**\n     * Returns the text content of a given HTML source code string.\n     *\n     * @param {string} html\n     * @returns {string}\n     */\n\n    function textContent(html) {\n      // remove all tags\n      var text = html.replace(tagPattern, ''); // decode known entities\n\n      text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n        code = code.toLowerCase();\n\n        if (code[0] === '#') {\n          var value;\n\n          if (code[1] === 'x') {\n            value = parseInt(code.slice(2), 16);\n          } else {\n            value = Number(code.slice(1));\n          }\n\n          return fromCodePoint(value);\n        } else {\n          var known = KNOWN_ENTITY_NAMES[code];\n\n          if (known) {\n            return known;\n          } // unable to decode\n\n\n          return m;\n        }\n      });\n      return text;\n    }\n\n    Prism.languages.md = Prism.languages.markdown;\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$refractor$lang$markup","~$shadow.js"]],"~:properties",["^5",["table","list","url","punctuation","md","string","lt","aliases","innerHTML","operator","displayName","__esModule","strike","gt","lookbehind","hr","value","variable","content","amp","greedy","title","pattern","italic","blockquote","inside","markdown","alias","quot","bold","default","code"]],"~:compiled-at",1676841365370,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$markdown.js\",\n\"lineCount\":13,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/markdown.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$markdown\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = markdown;\\n\\nvar _markup = _interopRequireDefault(require(\\\"./markup.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// @ts-nocheck\\nmarkdown.displayName = 'markdown';\\nmarkdown.aliases = ['md'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction markdown(Prism) {\\n  Prism.register(_markup.default);\\n\\n  (function (Prism) {\\n    // Allow only one line break\\n    var inner = /(?:\\\\\\\\.|[^\\\\\\\\\\\\n\\\\r]|(?:\\\\n|\\\\r\\\\n?)(?![\\\\r\\\\n]))/.source;\\n    /**\\n     * This function is intended for the creation of the bold or italic pattern.\\n     *\\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\\n     *\\n     * _Note:_ Keep in mind that this adds a capturing group.\\n     *\\n     * @param {string} pattern\\n     * @returns {RegExp}\\n     */\\n\\n    function createInline(pattern) {\\n      pattern = pattern.replace(/<inner>/g, function () {\\n        return inner;\\n      });\\n      return RegExp(/((?:^|[^\\\\\\\\])(?:\\\\\\\\{2})*)/.source + '(?:' + pattern + ')');\\n    }\\n\\n    var tableCell = /(?:\\\\\\\\.|``(?:[^`\\\\r\\\\n]|`(?!`))+``|`[^`\\\\r\\\\n]+`|[^\\\\\\\\|\\\\r\\\\n`])+/.source;\\n    var tableRow = /\\\\|?__(?:\\\\|__)+\\\\|?(?:(?:\\\\n|\\\\r\\\\n?)|(?![\\\\s\\\\S]))/.source.replace(/__/g, function () {\\n      return tableCell;\\n    });\\n    var tableLine = /\\\\|?[ \\\\t]*:?-{3,}:?[ \\\\t]*(?:\\\\|[ \\\\t]*:?-{3,}:?[ \\\\t]*)+\\\\|?(?:\\\\n|\\\\r\\\\n?)/.source;\\n    Prism.languages.markdown = Prism.languages.extend('markup', {});\\n    Prism.languages.insertBefore('markdown', 'prolog', {\\n      'front-matter-block': {\\n        pattern: /(^(?:\\\\s*[\\\\r\\\\n])?)---(?!.)[\\\\s\\\\S]*?[\\\\r\\\\n]---(?!.)/,\\n        lookbehind: true,\\n        greedy: true,\\n        inside: {\\n          punctuation: /^---|---$/,\\n          'front-matter': {\\n            pattern: /\\\\S+(?:\\\\s+\\\\S+)*/,\\n            alias: ['yaml', 'language-yaml'],\\n            inside: Prism.languages.yaml\\n          }\\n        }\\n      },\\n      blockquote: {\\n        // > ...\\n        pattern: /^>(?:[\\\\t ]*>)*/m,\\n        alias: 'punctuation'\\n      },\\n      table: {\\n        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\\n        inside: {\\n          'table-data-rows': {\\n            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\\n            lookbehind: true,\\n            inside: {\\n              'table-data': {\\n                pattern: RegExp(tableCell),\\n                inside: Prism.languages.markdown\\n              },\\n              punctuation: /\\\\|/\\n            }\\n          },\\n          'table-line': {\\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\\n            lookbehind: true,\\n            inside: {\\n              punctuation: /\\\\||:?-{3,}:?/\\n            }\\n          },\\n          'table-header-row': {\\n            pattern: RegExp('^' + tableRow + '$'),\\n            inside: {\\n              'table-header': {\\n                pattern: RegExp(tableCell),\\n                alias: 'important',\\n                inside: Prism.languages.markdown\\n              },\\n              punctuation: /\\\\|/\\n            }\\n          }\\n        }\\n      },\\n      code: [{\\n        // Prefixed by 4 spaces or 1 tab and preceded by an empty line\\n        pattern: /((?:^|\\\\n)[ \\\\t]*\\\\n|(?:^|\\\\r\\\\n?)[ \\\\t]*\\\\r\\\\n?)(?: {4}|\\\\t).+(?:(?:\\\\n|\\\\r\\\\n?)(?: {4}|\\\\t).+)*/,\\n        lookbehind: true,\\n        alias: 'keyword'\\n      }, {\\n        // ```optional language\\n        // code block\\n        // ```\\n        pattern: /^```[\\\\s\\\\S]*?^```$/m,\\n        greedy: true,\\n        inside: {\\n          'code-block': {\\n            pattern: /^(```.*(?:\\\\n|\\\\r\\\\n?))[\\\\s\\\\S]+?(?=(?:\\\\n|\\\\r\\\\n?)^```$)/m,\\n            lookbehind: true\\n          },\\n          'code-language': {\\n            pattern: /^(```).+/,\\n            lookbehind: true\\n          },\\n          punctuation: /```/\\n        }\\n      }],\\n      title: [{\\n        // title 1\\n        // =======\\n        // title 2\\n        // -------\\n        pattern: /\\\\S.*(?:\\\\n|\\\\r\\\\n?)(?:==+|--+)(?=[ \\\\t]*$)/m,\\n        alias: 'important',\\n        inside: {\\n          punctuation: /==+$|--+$/\\n        }\\n      }, {\\n        // # title 1\\n        // ###### title 6\\n        pattern: /(^\\\\s*)#.+/m,\\n        lookbehind: true,\\n        alias: 'important',\\n        inside: {\\n          punctuation: /^#+|#+$/\\n        }\\n      }],\\n      hr: {\\n        // ***\\n        // ---\\n        // * * *\\n        // -----------\\n        pattern: /(^\\\\s*)([*-])(?:[\\\\t ]*\\\\2){2,}(?=\\\\s*$)/m,\\n        lookbehind: true,\\n        alias: 'punctuation'\\n      },\\n      list: {\\n        // * item\\n        // + item\\n        // - item\\n        // 1. item\\n        pattern: /(^\\\\s*)(?:[*+-]|\\\\d+\\\\.)(?=[\\\\t ].)/m,\\n        lookbehind: true,\\n        alias: 'punctuation'\\n      },\\n      'url-reference': {\\n        // [id]: http://example.com \\\"Optional title\\\"\\n        // [id]: http://example.com 'Optional title'\\n        // [id]: http://example.com (Optional title)\\n        // [id]: <http://example.com> \\\"Optional title\\\"\\n        pattern: /!?\\\\[[^\\\\]]+\\\\]:[\\\\t ]+(?:\\\\S+|<(?:\\\\\\\\.|[^>\\\\\\\\])+>)(?:[\\\\t ]+(?:\\\"(?:\\\\\\\\.|[^\\\"\\\\\\\\])*\\\"|'(?:\\\\\\\\.|[^'\\\\\\\\])*'|\\\\((?:\\\\\\\\.|[^)\\\\\\\\])*\\\\)))?/,\\n        inside: {\\n          variable: {\\n            pattern: /^(!?\\\\[)[^\\\\]]+/,\\n            lookbehind: true\\n          },\\n          string: /(?:\\\"(?:\\\\\\\\.|[^\\\"\\\\\\\\])*\\\"|'(?:\\\\\\\\.|[^'\\\\\\\\])*'|\\\\((?:\\\\\\\\.|[^)\\\\\\\\])*\\\\))$/,\\n          punctuation: /^[\\\\[\\\\]!:]|[<>]/\\n        },\\n        alias: 'url'\\n      },\\n      bold: {\\n        // **strong**\\n        // __strong__\\n        // allow one nested instance of italic text using the same delimiter\\n        pattern: createInline(/\\\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\\\b|\\\\*\\\\*(?:(?!\\\\*)<inner>|\\\\*(?:(?!\\\\*)<inner>)+\\\\*)+\\\\*\\\\*/.source),\\n        lookbehind: true,\\n        greedy: true,\\n        inside: {\\n          content: {\\n            pattern: /(^..)[\\\\s\\\\S]+(?=..$)/,\\n            lookbehind: true,\\n            inside: {} // see below\\n\\n          },\\n          punctuation: /\\\\*\\\\*|__/\\n        }\\n      },\\n      italic: {\\n        // *em*\\n        // _em_\\n        // allow one nested instance of bold text using the same delimiter\\n        pattern: createInline(/\\\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\\\b|\\\\*(?:(?!\\\\*)<inner>|\\\\*\\\\*(?:(?!\\\\*)<inner>)+\\\\*\\\\*)+\\\\*/.source),\\n        lookbehind: true,\\n        greedy: true,\\n        inside: {\\n          content: {\\n            pattern: /(^.)[\\\\s\\\\S]+(?=.$)/,\\n            lookbehind: true,\\n            inside: {} // see below\\n\\n          },\\n          punctuation: /[*_]/\\n        }\\n      },\\n      strike: {\\n        // ~~strike through~~\\n        // ~strike~\\n        // eslint-disable-next-line regexp/strict\\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\\\2/.source),\\n        lookbehind: true,\\n        greedy: true,\\n        inside: {\\n          content: {\\n            pattern: /(^~~?)[\\\\s\\\\S]+(?=\\\\1$)/,\\n            lookbehind: true,\\n            inside: {} // see below\\n\\n          },\\n          punctuation: /~~?/\\n        }\\n      },\\n      'code-snippet': {\\n        // `code`\\n        // ``code``\\n        pattern: /(^|[^\\\\\\\\`])(?:``[^`\\\\r\\\\n]+(?:`[^`\\\\r\\\\n]+)*``(?!`)|`[^`\\\\r\\\\n]+`(?!`))/,\\n        lookbehind: true,\\n        greedy: true,\\n        alias: ['code', 'keyword']\\n      },\\n      url: {\\n        // [example](http://example.com \\\"Optional title\\\")\\n        // [example][id]\\n        // [example] [id]\\n        pattern: createInline(/!?\\\\[(?:(?!\\\\])<inner>)+\\\\](?:\\\\([^\\\\s)]+(?:[\\\\t ]+\\\"(?:\\\\\\\\.|[^\\\"\\\\\\\\])*\\\")?\\\\)|[ \\\\t]?\\\\[(?:(?!\\\\])<inner>)+\\\\])/.source),\\n        lookbehind: true,\\n        greedy: true,\\n        inside: {\\n          operator: /^!/,\\n          content: {\\n            pattern: /(^\\\\[)[^\\\\]]+(?=\\\\])/,\\n            lookbehind: true,\\n            inside: {} // see below\\n\\n          },\\n          variable: {\\n            pattern: /(^\\\\][ \\\\t]?\\\\[)[^\\\\]]+(?=\\\\]$)/,\\n            lookbehind: true\\n          },\\n          url: {\\n            pattern: /(^\\\\]\\\\()[^\\\\s)]+/,\\n            lookbehind: true\\n          },\\n          string: {\\n            pattern: /(^[ \\\\t]+)\\\"(?:\\\\\\\\.|[^\\\"\\\\\\\\])*\\\"(?=\\\\)$)/,\\n            lookbehind: true\\n          }\\n        }\\n      }\\n    });\\n    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\\n      ;\\n      ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\\n        if (token !== inside) {\\n          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\\n        }\\n      });\\n    });\\n    Prism.hooks.add('after-tokenize', function (env) {\\n      if (env.language !== 'markdown' && env.language !== 'md') {\\n        return;\\n      }\\n\\n      function walkTokens(tokens) {\\n        if (!tokens || typeof tokens === 'string') {\\n          return;\\n        }\\n\\n        for (var i = 0, l = tokens.length; i < l; i++) {\\n          var token = tokens[i];\\n\\n          if (token.type !== 'code') {\\n            walkTokens(token.content);\\n            continue;\\n          }\\n          /*\\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\\n           *\\n           * token.content = [\\n           *     <span class=\\\"punctuation\\\">```</span>,\\n           *     <span class=\\\"code-language\\\">xxxx</span>,\\n           *     '\\\\n', // exactly one new lines (\\\\r or \\\\n or \\\\r\\\\n)\\n           *     <span class=\\\"code-block\\\">...</span>,\\n           *     '\\\\n', // exactly one new lines again\\n           *     <span class=\\\"punctuation\\\">```</span>\\n           * ];\\n           */\\n\\n\\n          var codeLang = token.content[1];\\n          var codeBlock = token.content[3];\\n\\n          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\\n            // this might be a language that Prism does not support\\n            // do some replacements to support C++, C#, and F#\\n            var lang = codeLang.content.replace(/\\\\b#/g, 'sharp').replace(/\\\\b\\\\+\\\\+/g, 'pp'); // only use the first word\\n\\n            lang = (/[a-z][\\\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\\n            var alias = 'language-' + lang; // add alias\\n\\n            if (!codeBlock.alias) {\\n              codeBlock.alias = [alias];\\n            } else if (typeof codeBlock.alias === 'string') {\\n              codeBlock.alias = [codeBlock.alias, alias];\\n            } else {\\n              codeBlock.alias.push(alias);\\n            }\\n          }\\n        }\\n      }\\n\\n      walkTokens(env.tokens);\\n    });\\n    Prism.hooks.add('wrap', function (env) {\\n      if (env.type !== 'code-block') {\\n        return;\\n      }\\n\\n      var codeLang = '';\\n\\n      for (var i = 0, l = env.classes.length; i < l; i++) {\\n        var cls = env.classes[i];\\n        var match = /language-(.+)/.exec(cls);\\n\\n        if (match) {\\n          codeLang = match[1];\\n          break;\\n        }\\n      }\\n\\n      var grammar = Prism.languages[codeLang];\\n\\n      if (!grammar) {\\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\\n          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\\n          env.attributes['id'] = id;\\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\\n            var ele = document.getElementById(id);\\n\\n            if (ele) {\\n              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\\n            }\\n          });\\n        }\\n      } else {\\n        env.content = Prism.highlight(textContent(env.content.value), grammar, codeLang);\\n      }\\n    });\\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\\n    /**\\n     * A list of known entity names.\\n     *\\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\\n     *\\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\\n     */\\n\\n    var KNOWN_ENTITY_NAMES = {\\n      amp: '&',\\n      lt: '<',\\n      gt: '>',\\n      quot: '\\\"'\\n    }; // IE 11 doesn't support `String.fromCodePoint`\\n\\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode;\\n    /**\\n     * Returns the text content of a given HTML source code string.\\n     *\\n     * @param {string} html\\n     * @returns {string}\\n     */\\n\\n    function textContent(html) {\\n      // remove all tags\\n      var text = html.replace(tagPattern, ''); // decode known entities\\n\\n      text = text.replace(/&(\\\\w{1,8}|#x?[\\\\da-f]{1,8});/gi, function (m, code) {\\n        code = code.toLowerCase();\\n\\n        if (code[0] === '#') {\\n          var value;\\n\\n          if (code[1] === 'x') {\\n            value = parseInt(code.slice(2), 16);\\n          } else {\\n            value = Number(code.slice(1));\\n          }\\n\\n          return fromCodePoint(value);\\n        } else {\\n          var known = KNOWN_ENTITY_NAMES[code];\\n\\n          if (known) {\\n            return known;\\n          } // unable to decode\\n\\n\\n          return m;\\n        }\\n      });\\n      return text;\\n    }\\n\\n    Prism.languages.md = Prism.languages.markdown;\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"markdown\",\"Prism\",\"register\",\"_markup\",\"default\",\"createInline\",\"pattern\",\"replace\",\"inner\",\"RegExp\",\"source\",\"textContent\",\"html\",\"text\",\"tagPattern\",\"m\",\"code\",\"toLowerCase\",\"value\",\"parseInt\",\"slice\",\"Number\",\"fromCodePoint\",\"known\",\"KNOWN_ENTITY_NAMES\",\"tableCell\",\"tableRow\",\"tableLine\",\"languages\",\"extend\",\"insertBefore\",\"lookbehind\",\"greedy\",\"inside\",\"punctuation\",\"alias\",\"yaml\",\"blockquote\",\"table\",\"title\",\"hr\",\"list\",\"variable\",\"string\",\"bold\",\"content\",\"italic\",\"strike\",\"url\",\"operator\",\"forEach\",\"token\",\"hooks\",\"add\",\"env\",\"walkTokens\",\"tokens\",\"i\",\"l\",\"length\",\"type\",\"codeLang\",\"codeBlock\",\"lang\",\"exec\",\"push\",\"language\",\"classes\",\"match\",\"cls\",\"grammar\",\"highlight\",\"plugins\",\"autoloader\",\"id\",\"valueOf\",\"Date\",\"Math\",\"floor\",\"random\",\"attributes\",\"loadLanguages\",\"ele\",\"document\",\"getElementById\",\"innerHTML\",\"markup\",\"tag\",\"amp\",\"lt\",\"gt\",\"quot\",\"String\",\"fromCharCode\",\"md\",\"Object\",\"defineProperty\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"displayName\",\"aliases\"]\n}\n"]