["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-core-commonmark/lib/html-flow.js"],"~:js","shadow$provide.module$node_modules$micromark_core_commonmark$lib$html_flow=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.htmlFlow=void 0;var _micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\"),_micromarkUtilHtmlTagName=require(\"module$node_modules$micromark_util_html_tag_name$index\"),_blankLine=require(\"module$node_modules$micromark_core_commonmark$lib$blank_line\");exports.htmlFlow={name:\"htmlFlow\",tokenize:function(effects$jscomp$0,\nok$jscomp$0,nok$jscomp$0){function open(code){return 33===code?(effects$jscomp$0.consume(code),declarationStart):47===code?(effects$jscomp$0.consume(code),tagCloseStart):63===code?(effects$jscomp$0.consume(code),kind=3,self.interrupt?ok$jscomp$0:continuationDeclarationInside):(0,_micromarkUtilCharacter.asciiAlpha)(code)?(effects$jscomp$0.consume(code),buffer=String.fromCharCode(code),startTag=!0,tagName):nok$jscomp$0(code)}function declarationStart(code){return 45===code?(effects$jscomp$0.consume(code),\nkind=2,commentOpenInside):91===code?(effects$jscomp$0.consume(code),kind=5,buffer=\"CDATA[\",index=0,cdataOpenInside):(0,_micromarkUtilCharacter.asciiAlpha)(code)?(effects$jscomp$0.consume(code),kind=4,self.interrupt?ok$jscomp$0:continuationDeclarationInside):nok$jscomp$0(code)}function commentOpenInside(code){return 45===code?(effects$jscomp$0.consume(code),self.interrupt?ok$jscomp$0:continuationDeclarationInside):nok$jscomp$0(code)}function cdataOpenInside(code){return code===buffer.charCodeAt(index++)?\n(effects$jscomp$0.consume(code),index===buffer.length?self.interrupt?ok$jscomp$0:continuation:cdataOpenInside):nok$jscomp$0(code)}function tagCloseStart(code){return(0,_micromarkUtilCharacter.asciiAlpha)(code)?(effects$jscomp$0.consume(code),buffer=String.fromCharCode(code),tagName):nok$jscomp$0(code)}function tagName(code){if(null===code||47===code||62===code||(0,_micromarkUtilCharacter.markdownLineEndingOrSpace)(code)){if(47!==code&&startTag&&_micromarkUtilHtmlTagName.htmlRawNames.includes(buffer.toLowerCase()))return kind=\n1,self.interrupt?ok$jscomp$0(code):continuation(code);if(_micromarkUtilHtmlTagName.htmlBlockNames.includes(buffer.toLowerCase()))return kind=6,47===code?(effects$jscomp$0.consume(code),basicSelfClosing):self.interrupt?ok$jscomp$0(code):continuation(code);kind=7;return self.interrupt&&!self.parser.lazy[self.now().line]?nok$jscomp$0(code):startTag?completeAttributeNameBefore(code):completeClosingTagAfter(code)}return 45===code||(0,_micromarkUtilCharacter.asciiAlphanumeric)(code)?(effects$jscomp$0.consume(code),\nbuffer+=String.fromCharCode(code),tagName):nok$jscomp$0(code)}function basicSelfClosing(code){return 62===code?(effects$jscomp$0.consume(code),self.interrupt?ok$jscomp$0:continuation):nok$jscomp$0(code)}function completeClosingTagAfter(code){return(0,_micromarkUtilCharacter.markdownSpace)(code)?(effects$jscomp$0.consume(code),completeClosingTagAfter):completeEnd(code)}function completeAttributeNameBefore(code){return 47===code?(effects$jscomp$0.consume(code),completeEnd):58===code||95===code||(0,_micromarkUtilCharacter.asciiAlpha)(code)?\n(effects$jscomp$0.consume(code),completeAttributeName):(0,_micromarkUtilCharacter.markdownSpace)(code)?(effects$jscomp$0.consume(code),completeAttributeNameBefore):completeEnd(code)}function completeAttributeName(code){return 45===code||46===code||58===code||95===code||(0,_micromarkUtilCharacter.asciiAlphanumeric)(code)?(effects$jscomp$0.consume(code),completeAttributeName):completeAttributeNameAfter(code)}function completeAttributeNameAfter(code){return 61===code?(effects$jscomp$0.consume(code),\ncompleteAttributeValueBefore):(0,_micromarkUtilCharacter.markdownSpace)(code)?(effects$jscomp$0.consume(code),completeAttributeNameAfter):completeAttributeNameBefore(code)}function completeAttributeValueBefore(code){if(null===code||60===code||61===code||62===code||96===code)return nok$jscomp$0(code);if(34===code||39===code)return effects$jscomp$0.consume(code),marker=code,completeAttributeValueQuoted;if((0,_micromarkUtilCharacter.markdownSpace)(code))return effects$jscomp$0.consume(code),completeAttributeValueBefore;\nmarker=null;return completeAttributeValueUnquoted(code)}function completeAttributeValueQuoted(code){if(null===code||(0,_micromarkUtilCharacter.markdownLineEnding)(code))return nok$jscomp$0(code);if(code===marker)return effects$jscomp$0.consume(code),completeAttributeValueQuotedAfter;effects$jscomp$0.consume(code);return completeAttributeValueQuoted}function completeAttributeValueUnquoted(code){if(null===code||34===code||39===code||60===code||61===code||62===code||96===code||(0,_micromarkUtilCharacter.markdownLineEndingOrSpace)(code))return completeAttributeNameAfter(code);\neffects$jscomp$0.consume(code);return completeAttributeValueUnquoted}function completeAttributeValueQuotedAfter(code){return 47===code||62===code||(0,_micromarkUtilCharacter.markdownSpace)(code)?completeAttributeNameBefore(code):nok$jscomp$0(code)}function completeEnd(code){return 62===code?(effects$jscomp$0.consume(code),completeAfter):nok$jscomp$0(code)}function completeAfter(code){return(0,_micromarkUtilCharacter.markdownSpace)(code)?(effects$jscomp$0.consume(code),completeAfter):null===code||\n(0,_micromarkUtilCharacter.markdownLineEnding)(code)?continuation(code):nok$jscomp$0(code)}function continuation(code){if(45===code&&2===kind)return effects$jscomp$0.consume(code),continuationCommentInside;if(60===code&&1===kind)return effects$jscomp$0.consume(code),continuationRawTagOpen;if(62===code&&4===kind)return effects$jscomp$0.consume(code),continuationClose;if(63===code&&3===kind)return effects$jscomp$0.consume(code),continuationDeclarationInside;if(93===code&&5===kind)return effects$jscomp$0.consume(code),\ncontinuationCharacterDataInside;if((0,_micromarkUtilCharacter.markdownLineEnding)(code)&&(6===kind||7===kind))return effects$jscomp$0.check(nextBlankConstruct,continuationClose,continuationAtLineEnding)(code);if(null===code||(0,_micromarkUtilCharacter.markdownLineEnding)(code))return continuationAtLineEnding(code);effects$jscomp$0.consume(code);return continuation}function continuationAtLineEnding(code){effects$jscomp$0.exit(\"htmlFlowData\");return htmlContinueStart(code)}function htmlContinueStart(code){if(null===\ncode)return done(code);if((0,_micromarkUtilCharacter.markdownLineEnding)(code))return effects$jscomp$0.attempt({tokenize:htmlLineEnd,partial:!0},htmlContinueStart,done)(code);effects$jscomp$0.enter(\"htmlFlowData\");return continuation(code)}function htmlLineEnd(effects,ok,nok){function lineStart(code){return self.parser.lazy[self.now().line]?nok(code):ok(code)}return function(code){effects.enter(\"lineEnding\");effects.consume(code);effects.exit(\"lineEnding\");return lineStart}}function continuationCommentInside(code){return 45===\ncode?(effects$jscomp$0.consume(code),continuationDeclarationInside):continuation(code)}function continuationRawTagOpen(code){return 47===code?(effects$jscomp$0.consume(code),buffer=\"\",continuationRawEndTag):continuation(code)}function continuationRawEndTag(code){return 62===code&&_micromarkUtilHtmlTagName.htmlRawNames.includes(buffer.toLowerCase())?(effects$jscomp$0.consume(code),continuationClose):(0,_micromarkUtilCharacter.asciiAlpha)(code)&&8>buffer.length?(effects$jscomp$0.consume(code),buffer+=\nString.fromCharCode(code),continuationRawEndTag):continuation(code)}function continuationCharacterDataInside(code){return 93===code?(effects$jscomp$0.consume(code),continuationDeclarationInside):continuation(code)}function continuationDeclarationInside(code){return 62===code?(effects$jscomp$0.consume(code),continuationClose):45===code&&2===kind?(effects$jscomp$0.consume(code),continuationDeclarationInside):continuation(code)}function continuationClose(code){if(null===code||(0,_micromarkUtilCharacter.markdownLineEnding)(code))return effects$jscomp$0.exit(\"htmlFlowData\"),\ndone(code);effects$jscomp$0.consume(code);return continuationClose}function done(code){effects$jscomp$0.exit(\"htmlFlow\");return ok$jscomp$0(code)}const self=this;let kind,startTag,buffer,index,marker;return function(code){effects$jscomp$0.enter(\"htmlFlow\");effects$jscomp$0.enter(\"htmlFlowData\");effects$jscomp$0.consume(code);return open}},resolveTo:function(events){let index=events.length;for(;index--&&(\"enter\"!==events[index][0]||\"htmlFlow\"!==events[index][1].type););1<index&&\"linePrefix\"===events[index-\n2][1].type&&(events[index][1].start=events[index-2][1].start,events[index+1][1].start=events[index-2][1].start,events.splice(index-2,2));return events},concrete:!0};const nextBlankConstruct={tokenize:function(effects,ok,nok){return function(code){effects.exit(\"htmlFlowData\");effects.enter(\"lineEndingBlank\");effects.consume(code);effects.exit(\"lineEndingBlank\");return effects.attempt(_blankLine.blankLine,ok,nok)}},partial:!0}}","~:source","shadow$provide[\"module$node_modules$micromark_core_commonmark$lib$html_flow\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.htmlFlow = void 0;\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\nvar _micromarkUtilHtmlTagName = require(\"micromark-util-html-tag-name\");\n\nvar _blankLine = require(\"./blank-line.js\");\n\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/** @type {Construct} */\nconst htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n/** @type {Construct} */\n\nexports.htmlFlow = htmlFlow;\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n};\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break;\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start; // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start; // Remove the line prefix.\n\n    events.splice(index - 2, 2);\n  }\n\n  return events;\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n\n  let kind;\n  /** @type {boolean} */\n\n  let startTag;\n  /** @type {string} */\n\n  let buffer;\n  /** @type {number} */\n\n  let index;\n  /** @type {Code} */\n\n  let marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow');\n    effects.enter('htmlFlowData');\n    effects.consume(code);\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationStart;\n    }\n\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n\n    if (code === 63) {\n      effects.consume(code);\n      kind = 3; // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      startTag = true;\n      return tagName;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code);\n      kind = 2;\n      return commentOpenInside;\n    }\n\n    if (code === 91) {\n      effects.consume(code);\n      kind = 5;\n      buffer = 'CDATA[';\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n      effects.consume(code);\n      kind = 4;\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === buffer.length ? self.interrupt ? ok : continuation : cdataOpenInside;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function tagCloseStart(code) {\n    if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) {\n      if (code !== 47 && startTag && _micromarkUtilHtmlTagName.htmlRawNames.includes(buffer.toLowerCase())) {\n        kind = 1;\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n\n      if (_micromarkUtilHtmlTagName.htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6;\n\n        if (code === 47) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n\n      kind = 7; // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : startTag ? completeAttributeNameBefore(code) : completeClosingTagAfter(code);\n    }\n\n    if (code === 45 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return self.interrupt ? ok : continuation;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function completeClosingTagAfter(code) {\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n\n    return completeEnd(code);\n  }\n  /** @type {State} */\n\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    if (code === 58 || code === 95 || (0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n\n    return completeEnd(code);\n  }\n  /** @type {State} */\n\n\n  function completeAttributeName(code) {\n    if (code === 45 || code === 46 || code === 58 || code === 95 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n\n    return completeAttributeNameAfter(code);\n  }\n  /** @type {State} */\n\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n\n    return completeAttributeNameBefore(code);\n  }\n  /** @type {State} */\n\n\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return completeAttributeValueQuoted;\n    }\n\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n\n    marker = null;\n    return completeAttributeValueUnquoted(code);\n  }\n  /** @type {State} */\n\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n      return nok(code);\n    }\n\n    if (code === marker) {\n      effects.consume(code);\n      return completeAttributeValueQuotedAfter;\n    }\n\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n  /** @type {State} */\n\n\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 62 || code === 96 || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) {\n      return completeAttributeNameAfter(code);\n    }\n\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n  /** @type {State} */\n\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || (0, _micromarkUtilCharacter.markdownSpace)(code)) {\n      return completeAttributeNameBefore(code);\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function completeAfter(code) {\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n\n    return code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code) ? continuation(code) : nok(code);\n  }\n  /** @type {State} */\n\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code);\n      return continuationCharacterDataInside;\n    }\n\n    if ((0, _micromarkUtilCharacter.markdownLineEnding)(code) && (kind === 6 || kind === 7)) {\n      return effects.check(nextBlankConstruct, continuationClose, continuationAtLineEnding)(code);\n    }\n\n    if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n      return continuationAtLineEnding(code);\n    }\n\n    effects.consume(code);\n    return continuation;\n  }\n  /** @type {State} */\n\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData');\n    return htmlContinueStart(code);\n  }\n  /** @type {State} */\n\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code);\n    }\n\n    if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n      return effects.attempt({\n        tokenize: htmlLineEnd,\n        partial: true\n      }, htmlContinueStart, done)(code);\n    }\n\n    effects.enter('htmlFlowData');\n    return continuation(code);\n  }\n  /** @type {Tokenizer} */\n\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start;\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return lineStart;\n    }\n    /** @type {State} */\n\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n    }\n  }\n  /** @type {State} */\n\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n\n    return continuation(code);\n  }\n  /** @type {State} */\n\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n\n    return continuation(code);\n  }\n  /** @type {State} */\n\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && _micromarkUtilHtmlTagName.htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    if ((0, _micromarkUtilCharacter.asciiAlpha)(code) && buffer.length < 8) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n\n    return continuation(code);\n  }\n  /** @type {State} */\n\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n\n    return continuation(code);\n  }\n  /** @type {State} */\n\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    } // More dashes.\n\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n\n    return continuation(code);\n  }\n  /** @type {State} */\n\n\n  function continuationClose(code) {\n    if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n      effects.exit('htmlFlowData');\n      return done(code);\n    }\n\n    effects.consume(code);\n    return continuationClose;\n  }\n  /** @type {State} */\n\n\n  function done(code) {\n    effects.exit('htmlFlow');\n    return ok(code);\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData');\n    effects.enter('lineEndingBlank');\n    effects.consume(code);\n    effects.exit('lineEndingBlank');\n    return effects.attempt(_blankLine.blankLine, ok, nok);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js","~$module$node_modules$micromark_core_commonmark$lib$blank_line","~$module$node_modules$micromark_util_html_tag_name$index"]],"~:properties",["^5",["partial","resolveTo","tokenize","htmlFlow","concrete","__esModule","name","value","start"]],"~:compiled-at",1676665867290,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_core_commonmark$lib$html_flow.js\",\n\"lineCount\":17,\n\"mappings\":\"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,QAAR,CAAmB,IAAK,EAExB,KAAIC,wBAA0BP,OAAA,CAAQ,oDAAR,CAA9B,CAEIQ,0BAA4BR,OAAA,CAAQ,wDAAR,CAFhC,CAIIS,WAAaT,OAAA,CAAQ,8DAAR,CAmBjBE,QAAQI,CAAAA,QAAR,CARiBA,CACfI,KAAM,UADSJ,CAEfK,SAoCFC,QAAyB,CAACC,gBAAD;AAAUC,WAAV,CAAcC,YAAd,CAAmB,CA6B1CC,QAASA,KAAI,CAACC,IAAD,CAAO,CAClB,MAAa,GAAb,GAAIA,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOE,CAAAA,gBAFT,EAKa,EAAb,GAAIF,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOG,CAAAA,aAFT,EAKa,EAAb,GAAIH,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CAIO,CAHPI,IAGO,CAHA,CAGA,CAAAC,IAAKC,CAAAA,SAAL,CAAiBT,WAAjB,CAAsBU,6BAL/B,EAQI,GAAIjB,uBAAwBkB,CAAAA,UAA5B,EAAwCR,IAAxC,CAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CAGOS,CAFPC,MAEOD,CAFEE,MAAOC,CAAAA,YAAP,CAAoBZ,IAApB,CAEFS,CADPI,QACOJ,CADI,CAAA,CACJA,CAAAA,OAJT,EAOOX,YAAA,CAAIE,IAAJ,CA1BW,CA+BpBE,QAASA,iBAAgB,CAACF,IAAD,CAAO,CAC9B,MAAa,GAAb,GAAIA,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CAEOc;AADPV,IACOU,CADA,CACAA,CAAAA,iBAHT,EAMa,EAAb,GAAId,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CAIOe,CAHPX,IAGOW,CAHA,CAGAA,CAFPL,MAEOK,CAFE,QAEFA,CADPC,KACOD,CADC,CACDA,CAAAA,eALT,EAQI,GAAIzB,uBAAwBkB,CAAAA,UAA5B,EAAwCR,IAAxC,CAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CAEO,CADPI,IACO,CADA,CACA,CAAAC,IAAKC,CAAAA,SAAL,CAAiBT,WAAjB,CAAsBU,6BAH/B,EAMOT,YAAA,CAAIE,IAAJ,CArBuB,CA0BhCc,QAASA,kBAAiB,CAACd,IAAD,CAAO,CAC/B,MAAa,GAAb,GAAIA,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO,CAAAK,IAAKC,CAAAA,SAAL,CAAiBT,WAAjB,CAAsBU,6BAF/B,EAKOT,YAAA,CAAIE,IAAJ,CANwB,CAWjCe,QAASA,gBAAe,CAACf,IAAD,CAAO,CAC7B,MAAIA,KAAJ,GAAaU,MAAOO,CAAAA,UAAP,CAAkBD,KAAA,EAAlB,CAAb;CACEpB,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO,CAAAgB,KAAA,GAAUN,MAAOQ,CAAAA,MAAjB,CAA0Bb,IAAKC,CAAAA,SAAL,CAAiBT,WAAjB,CAAsBsB,YAAhD,CAA+DJ,eAFxE,EAKOjB,YAAA,CAAIE,IAAJ,CANsB,CAW/BG,QAASA,cAAa,CAACH,IAAD,CAAO,CAC3B,MAAI,GAAIV,uBAAwBkB,CAAAA,UAA5B,EAAwCR,IAAxC,CAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CAEOS,CADPC,MACOD,CADEE,MAAOC,CAAAA,YAAP,CAAoBZ,IAApB,CACFS,CAAAA,OAHT,EAMOX,YAAA,CAAIE,IAAJ,CAPoB,CAY7BS,QAASA,QAAO,CAACT,IAAD,CAAO,CACrB,GAAa,IAAb,GAAIA,IAAJ,EAA8B,EAA9B,GAAqBA,IAArB,EAA6C,EAA7C,GAAoCA,IAApC,EAAmD,GAAIV,uBAAwB8B,CAAAA,yBAA5B,EAAuDpB,IAAvD,CAAnD,CAAiH,CAC/G,GAAa,EAAb,GAAIA,IAAJ,EAAmBa,QAAnB,EAA+BtB,yBAA0B8B,CAAAA,YAAaC,CAAAA,QAAvC,CAAgDZ,MAAOa,CAAAA,WAAP,EAAhD,CAA/B,CAEE,MADAnB,KACO;AADA,CACA,CAAAC,IAAKC,CAAAA,SAAL,CAAiBT,WAAA,CAAGG,IAAH,CAAjB,CAA4BmB,YAAA,CAAanB,IAAb,CAGrC,IAAIT,yBAA0BiC,CAAAA,cAAeF,CAAAA,QAAzC,CAAkDZ,MAAOa,CAAAA,WAAP,EAAlD,CAAJ,CAGE,MAFAnB,KAEA,CAFO,CAEP,CAAa,EAAb,GAAIJ,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOyB,CAAAA,gBAFT,EAKOpB,IAAKC,CAAAA,SAAL,CAAiBT,WAAA,CAAGG,IAAH,CAAjB,CAA4BmB,YAAA,CAAanB,IAAb,CAGrCI,KAAA,CAAO,CAEP,OAAOC,KAAKC,CAAAA,SAAL,EAAkB,CAACD,IAAKqB,CAAAA,MAAOC,CAAAA,IAAZ,CAAiBtB,IAAKuB,CAAAA,GAAL,EAAWC,CAAAA,IAA5B,CAAnB,CAAuD/B,YAAA,CAAIE,IAAJ,CAAvD,CAAmEa,QAAA,CAAWiB,2BAAA,CAA4B9B,IAA5B,CAAX,CAA+C+B,uBAAA,CAAwB/B,IAAxB,CAnBV,CAsBjH,MAAa,GAAb,GAAIA,IAAJ,EAAmB,GAAIV,uBAAwB0C,CAAAA,iBAA5B,EAA+ChC,IAA/C,CAAnB,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CAEOS;AADPC,MACOD,EADGE,MAAOC,CAAAA,YAAP,CAAoBZ,IAApB,CACHS,CAAAA,OAHT,EAMOX,YAAA,CAAIE,IAAJ,CA7Bc,CAkCvByB,QAASA,iBAAgB,CAACzB,IAAD,CAAO,CAC9B,MAAa,GAAb,GAAIA,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO,CAAAK,IAAKC,CAAAA,SAAL,CAAiBT,WAAjB,CAAsBsB,YAF/B,EAKOrB,YAAA,CAAIE,IAAJ,CANuB,CAWhC+B,QAASA,wBAAuB,CAAC/B,IAAD,CAAO,CACrC,MAAI,GAAIV,uBAAwB2C,CAAAA,aAA5B,EAA2CjC,IAA3C,CAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO+B,CAAAA,uBAFT,EAKOG,WAAA,CAAYlC,IAAZ,CAN8B,CAWvC8B,QAASA,4BAA2B,CAAC9B,IAAD,CAAO,CACzC,MAAa,GAAb,GAAIA,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOkC,CAAAA,WAFT,EAKa,EAAb,GAAIlC,IAAJ,EAA4B,EAA5B,GAAmBA,IAAnB,EAAkC,GAAIV,uBAAwBkB,CAAAA,UAA5B,EAAwCR,IAAxC,CAAlC;CACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOmC,CAAAA,qBAFT,EAKI,GAAI7C,uBAAwB2C,CAAAA,aAA5B,EAA2CjC,IAA3C,CAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO8B,CAAAA,2BAFT,EAKOI,WAAA,CAAYlC,IAAZ,CAhBkC,CAqB3CmC,QAASA,sBAAqB,CAACnC,IAAD,CAAO,CACnC,MAAa,GAAb,GAAIA,IAAJ,EAA4B,EAA5B,GAAmBA,IAAnB,EAA2C,EAA3C,GAAkCA,IAAlC,EAA0D,EAA1D,GAAiDA,IAAjD,EAAgE,GAAIV,uBAAwB0C,CAAAA,iBAA5B,EAA+ChC,IAA/C,CAAhE,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOmC,CAAAA,qBAFT,EAKOC,0BAAA,CAA2BpC,IAA3B,CAN4B,CAWrCoC,QAASA,2BAA0B,CAACpC,IAAD,CAAO,CACxC,MAAa,GAAb,GAAIA,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOqC;AAAAA,4BAFT,EAKI,GAAI/C,uBAAwB2C,CAAAA,aAA5B,EAA2CjC,IAA3C,CAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOoC,CAAAA,0BAFT,EAKON,2BAAA,CAA4B9B,IAA5B,CAXiC,CAgB1CqC,QAASA,6BAA4B,CAACrC,IAAD,CAAO,CAC1C,GAAa,IAAb,GAAIA,IAAJ,EAA8B,EAA9B,GAAqBA,IAArB,EAA6C,EAA7C,GAAoCA,IAApC,EAA4D,EAA5D,GAAmDA,IAAnD,EAA2E,EAA3E,GAAkEA,IAAlE,CACE,MAAOF,aAAA,CAAIE,IAAJ,CAGT,IAAa,EAAb,GAAIA,IAAJ,EAA4B,EAA5B,GAAmBA,IAAnB,CAGE,MAFAJ,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CAEOsC,CADPC,MACOD,CADEtC,IACFsC,CAAAA,4BAGT,IAAI,GAAIhD,uBAAwB2C,CAAAA,aAA5B,EAA2CjC,IAA3C,CAAJ,CAEE,MADAJ,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOqC,CAAAA,4BAGTE;MAAA,CAAS,IACT,OAAOC,+BAAA,CAA+BxC,IAA/B,CAjBmC,CAsB5CsC,QAASA,6BAA4B,CAACtC,IAAD,CAAO,CAC1C,GAAa,IAAb,GAAIA,IAAJ,EAAqB,GAAIV,uBAAwBmD,CAAAA,kBAA5B,EAAgDzC,IAAhD,CAArB,CACE,MAAOF,aAAA,CAAIE,IAAJ,CAGT,IAAIA,IAAJ,GAAauC,MAAb,CAEE,MADA3C,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO0C,CAAAA,iCAGT9C,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACA,OAAOsC,6BAXmC,CAgB5CE,QAASA,+BAA8B,CAACxC,IAAD,CAAO,CAC5C,GAAa,IAAb,GAAIA,IAAJ,EAA8B,EAA9B,GAAqBA,IAArB,EAA6C,EAA7C,GAAoCA,IAApC,EAA4D,EAA5D,GAAmDA,IAAnD,EAA2E,EAA3E,GAAkEA,IAAlE,EAA0F,EAA1F,GAAiFA,IAAjF,EAAyG,EAAzG,GAAgGA,IAAhG,EAA+G,GAAIV,uBAAwB8B,CAAAA,yBAA5B,EAAuDpB,IAAvD,CAA/G,CACE,MAAOoC,2BAAA,CAA2BpC,IAA3B,CAGTJ;gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACA,OAAOwC,+BANqC,CAW9CE,QAASA,kCAAiC,CAAC1C,IAAD,CAAO,CAC/C,MAAa,GAAb,GAAIA,IAAJ,EAA4B,EAA5B,GAAmBA,IAAnB,EAAkC,GAAIV,uBAAwB2C,CAAAA,aAA5B,EAA2CjC,IAA3C,CAAlC,CACS8B,2BAAA,CAA4B9B,IAA5B,CADT,CAIOF,YAAA,CAAIE,IAAJ,CALwC,CAUjDkC,QAASA,YAAW,CAAClC,IAAD,CAAO,CACzB,MAAa,GAAb,GAAIA,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO2C,CAAAA,aAFT,EAKO7C,YAAA,CAAIE,IAAJ,CANkB,CAW3B2C,QAASA,cAAa,CAAC3C,IAAD,CAAO,CAC3B,MAAI,GAAIV,uBAAwB2C,CAAAA,aAA5B,EAA2CjC,IAA3C,CAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO2C,CAAAA,aAFT,EAKgB,IAAT,GAAA3C,IAAA;AAAiB,GAAIV,uBAAwBmD,CAAAA,kBAA5B,EAAgDzC,IAAhD,CAAjB,CAAyEmB,YAAA,CAAanB,IAAb,CAAzE,CAA8FF,YAAA,CAAIE,IAAJ,CAN1E,CAW7BmB,QAASA,aAAY,CAACnB,IAAD,CAAO,CAC1B,GAAa,EAAb,GAAIA,IAAJ,EAA4B,CAA5B,GAAmBI,IAAnB,CAEE,MADAR,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO4C,CAAAA,yBAGT,IAAa,EAAb,GAAI5C,IAAJ,EAA4B,CAA5B,GAAmBI,IAAnB,CAEE,MADAR,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO6C,CAAAA,sBAGT,IAAa,EAAb,GAAI7C,IAAJ,EAA4B,CAA5B,GAAmBI,IAAnB,CAEE,MADAR,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO8C,CAAAA,iBAGT,IAAa,EAAb,GAAI9C,IAAJ,EAA4B,CAA5B,GAAmBI,IAAnB,CAEE,MADAR,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOO,CAAAA,6BAGT,IAAa,EAAb,GAAIP,IAAJ,EAA4B,CAA5B,GAAmBI,IAAnB,CAEE,MADAR,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO+C;AAAAA,+BAGT,IAAI,GAAIzD,uBAAwBmD,CAAAA,kBAA5B,EAAgDzC,IAAhD,CAAJ,GAAuE,CAAvE,GAA8DI,IAA9D,EAAqF,CAArF,GAA4EA,IAA5E,EACE,MAAOR,iBAAQoD,CAAAA,KAAR,CAAcC,kBAAd,CAAkCH,iBAAlC,CAAqDI,wBAArD,CAAA,CAA+ElD,IAA/E,CAGT,IAAa,IAAb,GAAIA,IAAJ,EAAqB,GAAIV,uBAAwBmD,CAAAA,kBAA5B,EAAgDzC,IAAhD,CAArB,CACE,MAAOkD,yBAAA,CAAyBlD,IAAzB,CAGTJ,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACA,OAAOmB,aAnCmB,CAwC5B+B,QAASA,yBAAwB,CAAClD,IAAD,CAAO,CACtCJ,gBAAQuD,CAAAA,IAAR,CAAa,cAAb,CACA,OAAOC,kBAAA,CAAkBpD,IAAlB,CAF+B,CAOxCoD,QAASA,kBAAiB,CAACpD,IAAD,CAAO,CAC/B,GAAa,IAAb;AAAIA,IAAJ,CACE,MAAOqD,KAAA,CAAKrD,IAAL,CAGT,IAAI,GAAIV,uBAAwBmD,CAAAA,kBAA5B,EAAgDzC,IAAhD,CAAJ,CACE,MAAOJ,iBAAQ0D,CAAAA,OAAR,CAAgB,CACrB5D,SAAU6D,WADW,CAErBC,QAAS,CAAA,CAFY,CAAhB,CAGJJ,iBAHI,CAGeC,IAHf,CAAA,CAGqBrD,IAHrB,CAMTJ,iBAAQ6D,CAAAA,KAAR,CAAc,cAAd,CACA,OAAOtC,aAAA,CAAanB,IAAb,CAbwB,CAkBjCuD,QAASA,YAAW,CAAC3D,OAAD,CAAUC,EAAV,CAAcC,GAAd,CAAmB,CAarC4D,QAASA,UAAS,CAAC1D,IAAD,CAAO,CACvB,MAAOK,KAAKqB,CAAAA,MAAOC,CAAAA,IAAZ,CAAiBtB,IAAKuB,CAAAA,GAAL,EAAWC,CAAAA,IAA5B,CAAA,CAAoC/B,GAAA,CAAIE,IAAJ,CAApC,CAAgDH,EAAA,CAAGG,IAAH,CADhC,CAZzB,MAGA2D,SAAc,CAAC3D,IAAD,CAAO,CACnBJ,OAAQ6D,CAAAA,KAAR,CAAc,YAAd,CACA7D,QAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACAJ,QAAQuD,CAAAA,IAAR,CAAa,YAAb,CACA,OAAOO,UAJY,CAJgB,CAoBvCd,QAASA,0BAAyB,CAAC5C,IAAD,CAAO,CACvC,MAAa,GAAb;AAAIA,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOO,CAAAA,6BAFT,EAKOY,YAAA,CAAanB,IAAb,CANgC,CAWzC6C,QAASA,uBAAsB,CAAC7C,IAAD,CAAO,CACpC,MAAa,GAAb,GAAIA,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CAEO4D,CADPlD,MACOkD,CADE,EACFA,CAAAA,qBAHT,EAMOzC,YAAA,CAAanB,IAAb,CAP6B,CAYtC4D,QAASA,sBAAqB,CAAC5D,IAAD,CAAO,CACnC,MAAa,GAAb,GAAIA,IAAJ,EAAmBT,yBAA0B8B,CAAAA,YAAaC,CAAAA,QAAvC,CAAgDZ,MAAOa,CAAAA,WAAP,EAAhD,CAAnB,EACE3B,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO8C,CAAAA,iBAFT,EAKI,GAAIxD,uBAAwBkB,CAAAA,UAA5B,EAAwCR,IAAxC,CAAJ,EAAqE,CAArE,CAAqDU,MAAOQ,CAAAA,MAA5D,EACEtB,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CAEO4D,CADPlD,MACOkD;AADGjD,MAAOC,CAAAA,YAAP,CAAoBZ,IAApB,CACH4D,CAAAA,qBAHT,EAMOzC,YAAA,CAAanB,IAAb,CAZ4B,CAiBrC+C,QAASA,gCAA+B,CAAC/C,IAAD,CAAO,CAC7C,MAAa,GAAb,GAAIA,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOO,CAAAA,6BAFT,EAKOY,YAAA,CAAanB,IAAb,CANsC,CAW/CO,QAASA,8BAA6B,CAACP,IAAD,CAAO,CAC3C,MAAa,GAAb,GAAIA,IAAJ,EACEJ,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACO8C,CAAAA,iBAFT,EAMa,EAAb,GAAI9C,IAAJ,EAA4B,CAA5B,GAAmBI,IAAnB,EACER,gBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACOO,CAAAA,6BAFT,EAKOY,YAAA,CAAanB,IAAb,CAZoC,CAiB7C8C,QAASA,kBAAiB,CAAC9C,IAAD,CAAO,CAC/B,GAAa,IAAb,GAAIA,IAAJ,EAAqB,GAAIV,uBAAwBmD,CAAAA,kBAA5B,EAAgDzC,IAAhD,CAArB,CAEE,MADAJ,iBAAQuD,CAAAA,IAAR,CAAa,cAAb,CACO;AAAAE,IAAA,CAAKrD,IAAL,CAGTJ,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACA,OAAO8C,kBAPwB,CAYjCO,QAASA,KAAI,CAACrD,IAAD,CAAO,CAClBJ,gBAAQuD,CAAAA,IAAR,CAAa,UAAb,CACA,OAAOtD,YAAA,CAAGG,IAAH,CAFW,CArdpB,MAAMK,KAAO,IAGb,KAAID,IAAJ,CAGIS,QAHJ,CAMIH,MANJ,CASIM,KATJ,CAYIuB,MACJ,OAGAoB,SAAc,CAAC3D,IAAD,CAAO,CACnBJ,gBAAQ6D,CAAAA,KAAR,CAAc,UAAd,CACA7D,iBAAQ6D,CAAAA,KAAR,CAAc,cAAd,CACA7D,iBAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACA,OAAOD,KAJY,CApBqB,CAtC3BV,CAGfwE,UAYFC,QAA0B,CAACC,MAAD,CAAS,CACjC,IAAI/C,MAAQ+C,MAAO7C,CAAAA,MAEnB,KAAA,CAAOF,KAAA,EAAP,GAC2B,OAD3B,GACM+C,MAAA,CAAO/C,KAAP,CAAA,CAAc,CAAd,CADN,EACgE,UADhE,GACsC+C,MAAA,CAAO/C,KAAP,CAAA,CAAc,CAAd,CAAiBgD,CAAAA,IADvD,EAAA,EAMY,CAAZ,CAAIhD,KAAJ,EAA+C,YAA/C,GAAiB+C,MAAA,CAAO/C,KAAP;AAAe,CAAf,CAAA,CAAkB,CAAlB,CAAqBgD,CAAAA,IAAtC,GAEED,MAAA,CAAO/C,KAAP,CAAA,CAAc,CAAd,CAAiB2C,CAAAA,KAIjB,CAJyBI,MAAA,CAAO/C,KAAP,CAAe,CAAf,CAAA,CAAkB,CAAlB,CAAqB2C,CAAAA,KAI9C,CAFAI,MAAA,CAAO/C,KAAP,CAAe,CAAf,CAAA,CAAkB,CAAlB,CAAqB2C,CAAAA,KAErB,CAF6BI,MAAA,CAAO/C,KAAP,CAAe,CAAf,CAAA,CAAkB,CAAlB,CAAqB2C,CAAAA,KAElD,CAAAI,MAAOE,CAAAA,MAAP,CAAcjD,KAAd,CAAsB,CAAtB,CAAyB,CAAzB,CANF,CASA,OAAO+C,OAlB0B,CAflB1E,CAIf6E,SAAU,CAAA,CAJK7E,CASjB,OAAM4D,mBAAqB,CACzBvD,SA0fFyE,QAA0B,CAACvE,OAAD,CAAUC,EAAV,CAAcC,GAAd,CAAmB,CAC3C,MAGA6D,SAAc,CAAC3D,IAAD,CAAO,CACnBJ,OAAQuD,CAAAA,IAAR,CAAa,cAAb,CACAvD,QAAQ6D,CAAAA,KAAR,CAAc,iBAAd,CACA7D,QAAQK,CAAAA,OAAR,CAAgBD,IAAhB,CACAJ,QAAQuD,CAAAA,IAAR,CAAa,iBAAb,CACA,OAAOvD,QAAQ0D,CAAAA,OAAR,CAAgB9D,UAAW4E,CAAAA,SAA3B,CAAsCvE,EAAtC,CAA0CC,GAA1C,CALY,CAJsB,CA3flB,CAEzB0D,QAAS,CAAA,CAFgB,CAhC6F;\",\n\"sources\":[\"node_modules/micromark-core-commonmark/lib/html-flow.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_core_commonmark$lib$html_flow\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.htmlFlow = void 0;\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\nvar _micromarkUtilHtmlTagName = require(\\\"micromark-util-html-tag-name\\\");\\n\\nvar _blankLine = require(\\\"./blank-line.js\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Construct} Construct\\n * @typedef {import('micromark-util-types').Resolver} Resolver\\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\\n * @typedef {import('micromark-util-types').State} State\\n * @typedef {import('micromark-util-types').Code} Code\\n */\\n\\n/** @type {Construct} */\\nconst htmlFlow = {\\n  name: 'htmlFlow',\\n  tokenize: tokenizeHtmlFlow,\\n  resolveTo: resolveToHtmlFlow,\\n  concrete: true\\n};\\n/** @type {Construct} */\\n\\nexports.htmlFlow = htmlFlow;\\nconst nextBlankConstruct = {\\n  tokenize: tokenizeNextBlank,\\n  partial: true\\n};\\n/** @type {Resolver} */\\n\\nfunction resolveToHtmlFlow(events) {\\n  let index = events.length;\\n\\n  while (index--) {\\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\\n      break;\\n    }\\n  }\\n\\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\\n    // Add the prefix start to the HTML token.\\n    events[index][1].start = events[index - 2][1].start; // Add the prefix start to the HTML line token.\\n\\n    events[index + 1][1].start = events[index - 2][1].start; // Remove the line prefix.\\n\\n    events.splice(index - 2, 2);\\n  }\\n\\n  return events;\\n}\\n/** @type {Tokenizer} */\\n\\n\\nfunction tokenizeHtmlFlow(effects, ok, nok) {\\n  const self = this;\\n  /** @type {number} */\\n\\n  let kind;\\n  /** @type {boolean} */\\n\\n  let startTag;\\n  /** @type {string} */\\n\\n  let buffer;\\n  /** @type {number} */\\n\\n  let index;\\n  /** @type {Code} */\\n\\n  let marker;\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    effects.enter('htmlFlow');\\n    effects.enter('htmlFlowData');\\n    effects.consume(code);\\n    return open;\\n  }\\n  /** @type {State} */\\n\\n\\n  function open(code) {\\n    if (code === 33) {\\n      effects.consume(code);\\n      return declarationStart;\\n    }\\n\\n    if (code === 47) {\\n      effects.consume(code);\\n      return tagCloseStart;\\n    }\\n\\n    if (code === 63) {\\n      effects.consume(code);\\n      kind = 3; // While we\\u2019re in an instruction instead of a declaration, we\\u2019re on a `?`\\n      // right now, so we do need to search for `>`, similar to declarations.\\n\\n      return self.interrupt ? ok : continuationDeclarationInside;\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\\n      effects.consume(code);\\n      buffer = String.fromCharCode(code);\\n      startTag = true;\\n      return tagName;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function declarationStart(code) {\\n    if (code === 45) {\\n      effects.consume(code);\\n      kind = 2;\\n      return commentOpenInside;\\n    }\\n\\n    if (code === 91) {\\n      effects.consume(code);\\n      kind = 5;\\n      buffer = 'CDATA[';\\n      index = 0;\\n      return cdataOpenInside;\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\\n      effects.consume(code);\\n      kind = 4;\\n      return self.interrupt ? ok : continuationDeclarationInside;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function commentOpenInside(code) {\\n    if (code === 45) {\\n      effects.consume(code);\\n      return self.interrupt ? ok : continuationDeclarationInside;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function cdataOpenInside(code) {\\n    if (code === buffer.charCodeAt(index++)) {\\n      effects.consume(code);\\n      return index === buffer.length ? self.interrupt ? ok : continuation : cdataOpenInside;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function tagCloseStart(code) {\\n    if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\\n      effects.consume(code);\\n      buffer = String.fromCharCode(code);\\n      return tagName;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function tagName(code) {\\n    if (code === null || code === 47 || code === 62 || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) {\\n      if (code !== 47 && startTag && _micromarkUtilHtmlTagName.htmlRawNames.includes(buffer.toLowerCase())) {\\n        kind = 1;\\n        return self.interrupt ? ok(code) : continuation(code);\\n      }\\n\\n      if (_micromarkUtilHtmlTagName.htmlBlockNames.includes(buffer.toLowerCase())) {\\n        kind = 6;\\n\\n        if (code === 47) {\\n          effects.consume(code);\\n          return basicSelfClosing;\\n        }\\n\\n        return self.interrupt ? ok(code) : continuation(code);\\n      }\\n\\n      kind = 7; // Do not support complete HTML when interrupting\\n\\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : startTag ? completeAttributeNameBefore(code) : completeClosingTagAfter(code);\\n    }\\n\\n    if (code === 45 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) {\\n      effects.consume(code);\\n      buffer += String.fromCharCode(code);\\n      return tagName;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function basicSelfClosing(code) {\\n    if (code === 62) {\\n      effects.consume(code);\\n      return self.interrupt ? ok : continuation;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function completeClosingTagAfter(code) {\\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\\n      effects.consume(code);\\n      return completeClosingTagAfter;\\n    }\\n\\n    return completeEnd(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function completeAttributeNameBefore(code) {\\n    if (code === 47) {\\n      effects.consume(code);\\n      return completeEnd;\\n    }\\n\\n    if (code === 58 || code === 95 || (0, _micromarkUtilCharacter.asciiAlpha)(code)) {\\n      effects.consume(code);\\n      return completeAttributeName;\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\\n      effects.consume(code);\\n      return completeAttributeNameBefore;\\n    }\\n\\n    return completeEnd(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function completeAttributeName(code) {\\n    if (code === 45 || code === 46 || code === 58 || code === 95 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) {\\n      effects.consume(code);\\n      return completeAttributeName;\\n    }\\n\\n    return completeAttributeNameAfter(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function completeAttributeNameAfter(code) {\\n    if (code === 61) {\\n      effects.consume(code);\\n      return completeAttributeValueBefore;\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\\n      effects.consume(code);\\n      return completeAttributeNameAfter;\\n    }\\n\\n    return completeAttributeNameBefore(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function completeAttributeValueBefore(code) {\\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\\n      return nok(code);\\n    }\\n\\n    if (code === 34 || code === 39) {\\n      effects.consume(code);\\n      marker = code;\\n      return completeAttributeValueQuoted;\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\\n      effects.consume(code);\\n      return completeAttributeValueBefore;\\n    }\\n\\n    marker = null;\\n    return completeAttributeValueUnquoted(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function completeAttributeValueQuoted(code) {\\n    if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\\n      return nok(code);\\n    }\\n\\n    if (code === marker) {\\n      effects.consume(code);\\n      return completeAttributeValueQuotedAfter;\\n    }\\n\\n    effects.consume(code);\\n    return completeAttributeValueQuoted;\\n  }\\n  /** @type {State} */\\n\\n\\n  function completeAttributeValueUnquoted(code) {\\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 62 || code === 96 || (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code)) {\\n      return completeAttributeNameAfter(code);\\n    }\\n\\n    effects.consume(code);\\n    return completeAttributeValueUnquoted;\\n  }\\n  /** @type {State} */\\n\\n\\n  function completeAttributeValueQuotedAfter(code) {\\n    if (code === 47 || code === 62 || (0, _micromarkUtilCharacter.markdownSpace)(code)) {\\n      return completeAttributeNameBefore(code);\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function completeEnd(code) {\\n    if (code === 62) {\\n      effects.consume(code);\\n      return completeAfter;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function completeAfter(code) {\\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\\n      effects.consume(code);\\n      return completeAfter;\\n    }\\n\\n    return code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code) ? continuation(code) : nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function continuation(code) {\\n    if (code === 45 && kind === 2) {\\n      effects.consume(code);\\n      return continuationCommentInside;\\n    }\\n\\n    if (code === 60 && kind === 1) {\\n      effects.consume(code);\\n      return continuationRawTagOpen;\\n    }\\n\\n    if (code === 62 && kind === 4) {\\n      effects.consume(code);\\n      return continuationClose;\\n    }\\n\\n    if (code === 63 && kind === 3) {\\n      effects.consume(code);\\n      return continuationDeclarationInside;\\n    }\\n\\n    if (code === 93 && kind === 5) {\\n      effects.consume(code);\\n      return continuationCharacterDataInside;\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.markdownLineEnding)(code) && (kind === 6 || kind === 7)) {\\n      return effects.check(nextBlankConstruct, continuationClose, continuationAtLineEnding)(code);\\n    }\\n\\n    if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\\n      return continuationAtLineEnding(code);\\n    }\\n\\n    effects.consume(code);\\n    return continuation;\\n  }\\n  /** @type {State} */\\n\\n\\n  function continuationAtLineEnding(code) {\\n    effects.exit('htmlFlowData');\\n    return htmlContinueStart(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function htmlContinueStart(code) {\\n    if (code === null) {\\n      return done(code);\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\\n      return effects.attempt({\\n        tokenize: htmlLineEnd,\\n        partial: true\\n      }, htmlContinueStart, done)(code);\\n    }\\n\\n    effects.enter('htmlFlowData');\\n    return continuation(code);\\n  }\\n  /** @type {Tokenizer} */\\n\\n\\n  function htmlLineEnd(effects, ok, nok) {\\n    return start;\\n    /** @type {State} */\\n\\n    function start(code) {\\n      effects.enter('lineEnding');\\n      effects.consume(code);\\n      effects.exit('lineEnding');\\n      return lineStart;\\n    }\\n    /** @type {State} */\\n\\n\\n    function lineStart(code) {\\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\\n    }\\n  }\\n  /** @type {State} */\\n\\n\\n  function continuationCommentInside(code) {\\n    if (code === 45) {\\n      effects.consume(code);\\n      return continuationDeclarationInside;\\n    }\\n\\n    return continuation(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function continuationRawTagOpen(code) {\\n    if (code === 47) {\\n      effects.consume(code);\\n      buffer = '';\\n      return continuationRawEndTag;\\n    }\\n\\n    return continuation(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function continuationRawEndTag(code) {\\n    if (code === 62 && _micromarkUtilHtmlTagName.htmlRawNames.includes(buffer.toLowerCase())) {\\n      effects.consume(code);\\n      return continuationClose;\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.asciiAlpha)(code) && buffer.length < 8) {\\n      effects.consume(code);\\n      buffer += String.fromCharCode(code);\\n      return continuationRawEndTag;\\n    }\\n\\n    return continuation(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function continuationCharacterDataInside(code) {\\n    if (code === 93) {\\n      effects.consume(code);\\n      return continuationDeclarationInside;\\n    }\\n\\n    return continuation(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function continuationDeclarationInside(code) {\\n    if (code === 62) {\\n      effects.consume(code);\\n      return continuationClose;\\n    } // More dashes.\\n\\n\\n    if (code === 45 && kind === 2) {\\n      effects.consume(code);\\n      return continuationDeclarationInside;\\n    }\\n\\n    return continuation(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function continuationClose(code) {\\n    if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\\n      effects.exit('htmlFlowData');\\n      return done(code);\\n    }\\n\\n    effects.consume(code);\\n    return continuationClose;\\n  }\\n  /** @type {State} */\\n\\n\\n  function done(code) {\\n    effects.exit('htmlFlow');\\n    return ok(code);\\n  }\\n}\\n/** @type {Tokenizer} */\\n\\n\\nfunction tokenizeNextBlank(effects, ok, nok) {\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    effects.exit('htmlFlowData');\\n    effects.enter('lineEndingBlank');\\n    effects.consume(code);\\n    effects.exit('lineEndingBlank');\\n    return effects.attempt(_blankLine.blankLine, ok, nok);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"htmlFlow\",\"_micromarkUtilCharacter\",\"_micromarkUtilHtmlTagName\",\"_blankLine\",\"name\",\"tokenize\",\"tokenizeHtmlFlow\",\"effects\",\"ok\",\"nok\",\"open\",\"code\",\"consume\",\"declarationStart\",\"tagCloseStart\",\"kind\",\"self\",\"interrupt\",\"continuationDeclarationInside\",\"asciiAlpha\",\"tagName\",\"buffer\",\"String\",\"fromCharCode\",\"startTag\",\"commentOpenInside\",\"cdataOpenInside\",\"index\",\"charCodeAt\",\"length\",\"continuation\",\"markdownLineEndingOrSpace\",\"htmlRawNames\",\"includes\",\"toLowerCase\",\"htmlBlockNames\",\"basicSelfClosing\",\"parser\",\"lazy\",\"now\",\"line\",\"completeAttributeNameBefore\",\"completeClosingTagAfter\",\"asciiAlphanumeric\",\"markdownSpace\",\"completeEnd\",\"completeAttributeName\",\"completeAttributeNameAfter\",\"completeAttributeValueBefore\",\"completeAttributeValueQuoted\",\"marker\",\"completeAttributeValueUnquoted\",\"markdownLineEnding\",\"completeAttributeValueQuotedAfter\",\"completeAfter\",\"continuationCommentInside\",\"continuationRawTagOpen\",\"continuationClose\",\"continuationCharacterDataInside\",\"check\",\"nextBlankConstruct\",\"continuationAtLineEnding\",\"exit\",\"htmlContinueStart\",\"done\",\"attempt\",\"htmlLineEnd\",\"partial\",\"enter\",\"lineStart\",\"start\",\"continuationRawEndTag\",\"resolveTo\",\"resolveToHtmlFlow\",\"events\",\"type\",\"splice\",\"concrete\",\"tokenizeNextBlank\",\"blankLine\"]\n}\n"]