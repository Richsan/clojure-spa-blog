["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/scheme.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$scheme=function(global,require,module,exports){function scheme(Prism$jscomp$0){(function(Prism){Prism.languages.scheme={comment:/;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0},symbol:{pattern:/'[^()\\[\\]#'\\s]+/,greedy:!0},char:{pattern:/#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,greedy:!0},\n\"lambda-parameter\":[{pattern:/((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,lookbehind:!0},{pattern:/((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,lookbehind:!0}],keyword:{pattern:/((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|except|export|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,\nlookbehind:!0},builtin:{pattern:/((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,\nlookbehind:!0},operator:{pattern:/((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},number:{pattern:RegExp(function(grammar){for(var key$jscomp$0 in grammar)grammar[key$jscomp$0]=grammar[key$jscomp$0].replace(/<[\\w\\s]+>/g,function(key){return\"(?:\"+grammar[key].trim()+\")\"});return grammar[key$jscomp$0]}({\"\\x3cureal dec\\x3e\":/\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[esfdl][+-]?\\d+)?/.source,\"\\x3creal dec\\x3e\":/[+-]?<ureal dec>|[+-](?:inf|nan)\\.0/.source,\"\\x3cimaginary dec\\x3e\":/[+-](?:<ureal dec>|(?:inf|nan)\\.0)?i/.source,\n\"\\x3ccomplex dec\\x3e\":/<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,\"\\x3cnum dec\\x3e\":/(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,\"\\x3cureal box\\x3e\":/[0-9a-f]+(?:\\/[0-9a-f]+)?/.source,\"\\x3creal box\\x3e\":/[+-]?<ureal box>|[+-](?:inf|nan)\\.0/.source,\"\\x3cimaginary box\\x3e\":/[+-](?:<ureal box>|(?:inf|nan)\\.0)?i/.source,\"\\x3ccomplex box\\x3e\":/<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,\"\\x3cnum box\\x3e\":/#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,\n\"\\x3cnumber\\x3e\":/(^|[()\\[\\]\\s])(?:<num dec>|<num box>)(?=[()\\[\\]\\s]|$)/.source}),\"i\"),lookbehind:!0},boolean:{pattern:/(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},function:{pattern:/((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},identifier:{pattern:/(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,lookbehind:!0,greedy:!0},punctuation:/[()\\[\\]']/}})(Prism$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=\nscheme;scheme.displayName=\"scheme\";scheme.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$scheme\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = scheme;\n// @ts-nocheck\nscheme.displayName = 'scheme';\nscheme.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction scheme(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.scheme = {\n      // this supports \"normal\" single-line comments:\n      //   ; comment\n      // and (potentially nested) multiline comments:\n      //   #| comment #| nested |# still comment |#\n      // (only 1 level of nesting is supported)\n      comment: /;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      symbol: {\n        pattern: /'[^()\\[\\]#'\\s]+/,\n        greedy: true\n      },\n      char: {\n        pattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,\n        greedy: true\n      },\n      'lambda-parameter': [// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n      {\n        pattern: /((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n        lookbehind: true\n      }, {\n        pattern: /((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,\n        lookbehind: true\n      }],\n      keyword: {\n        pattern: /((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|except|export|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      builtin: {\n        // all functions of the base library of R7RS plus some of built-ins of R5Rs\n        pattern: /((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      operator: {\n        pattern: /((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      number: {\n        // The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).\n        //\n        // <number>      := <num 2>|<num 8>|<num 10>|<num 16>\n        // <num R>       := <prefix R><complex R>\n        // <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>\n        // <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\\.0)?i\n        // <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\\.0\n        // <ureal R>     := <uint R>(?:\\/<uint R>)?\n        //                | <decimal R>\n        //\n        // <decimal 10>  := (?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?\n        // <uint R>      := <digit R>+\n        // <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>\n        // <radix 2>     := #b\n        // <radix 8>     := #o\n        // <radix 10>    := (?:#d)?\n        // <radix 16>    := #x\n        // <digit 2>     := [01]\n        // <digit 8>     := [0-7]\n        // <digit 10>    := \\d\n        // <digit 16>    := [0-9a-f]\n        //\n        // The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all\n        // non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)\n        // pattern:\n        pattern: RegExp(SortedBNF({\n          '<ureal dec>': /\\d+(?:\\/\\d+)|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[esfdl][+-]?\\d+)?/.source,\n          '<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\\.0/.source,\n          '<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\\.0)?i/.source,\n          '<complex dec>': /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,\n          '<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,\n          '<ureal box>': /[0-9a-f]+(?:\\/[0-9a-f]+)?/.source,\n          '<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\\.0/.source,\n          '<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\\.0)?i/.source,\n          '<complex box>': /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,\n          '<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,\n          '<number>': /(^|[()\\[\\]\\s])(?:<num dec>|<num box>)(?=[()\\[\\]\\s]|$)/.source\n        }), 'i'),\n        lookbehind: true\n      },\n      boolean: {\n        pattern: /(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      function: {\n        pattern: /((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true\n      },\n      identifier: {\n        pattern: /(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,\n        lookbehind: true,\n        greedy: true\n      },\n      punctuation: /[()\\[\\]']/\n    };\n    /**\n     * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.\n     *\n     * @param {Record<string, string>} grammar\n     * @returns {string}\n     */\n\n    function SortedBNF(grammar) {\n      for (var key in grammar) {\n        grammar[key] = grammar[key].replace(/<[\\w\\s]+>/g, function (key) {\n          return '(?:' + grammar[key].trim() + ')';\n        });\n      } // return the last item\n\n\n      return grammar[key];\n    }\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","punctuation","string","aliases","operator","displayName","__esModule","lookbehind","value","char","identifier","keyword","number","greedy","symbol","function","pattern","comment","builtin","scheme","default"]],"~:compiled-at",1676841365432,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$scheme.js\",\n\"lineCount\":7,\n\"mappings\":\"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYtGC,QAASA,OAAM,CAACC,cAAD,CAAQ,CAGpB,SAAS,CAACA,KAAD,CAAQ,CAChBA,KAAMC,CAAAA,SAAUF,CAAAA,MAAhB,CAAyB,CAMvBG,QAAS,wIANc,CAOvBC,OAAQ,CACNC,QAAS,mBADH,CAENC,OAAQ,CAAA,CAFF,CAPe,CAWvBC,OAAQ,CACNF,QAAS,iBADH,CAENC,OAAQ,CAAA,CAFF,CAXe,CAevBE,KAAM,CACJH,QAAS,yEADL,CAEJC,OAAQ,CAAA,CAFJ,CAfiB;AAmBvB,mBAAoB,CACpB,CACED,QAAS,oEADX,CAEEI,WAAY,CAAA,CAFd,CADoB,CAIjB,CACDJ,QAAS,8CADR,CAEDI,WAAY,CAAA,CAFX,CAJiB,CAnBG,CA2BvBC,QAAS,CACPL,QAAS,oZADF;AAEPI,WAAY,CAAA,CAFL,CA3Bc,CA+BvBE,QAAS,CAEPN,QAAS,yoDAFF;AAGPI,WAAY,CAAA,CAHL,CA/Bc,CAoCvBG,SAAU,CACRP,QAAS,2DADD,CAERI,WAAY,CAAA,CAFJ,CApCa,CAwCvBI,OAAQ,CA0BNR,QAASS,MAAA,CAqCbC,QAAkB,CAACC,OAAD,CAAU,CAC1B,IAAKC,IAAIA,YAAT,GAAgBD,QAAhB,CACEA,OAAA,CAAQC,YAAR,CAAA,CAAeD,OAAA,CAAQC,YAAR,CAAaC,CAAAA,OAAb,CAAqB,YAArB,CAAmC,QAAS,CAACD,GAAD,CAAM,CAC/D,MAAO,KAAP,CAAeD,OAAA,CAAQC,GAAR,CAAaE,CAAAA,IAAb,EAAf,CAAqC,GAD0B,CAAlD,CAMjB,OAAOH,QAAA,CAAQC,YAAR,CARmB,CArCR,CAAU,CACxB,oBAAe,0DAA2DG,CAAAA,MADlD,CAExB,mBAAc,qCAAsCA,CAAAA,MAF5B,CAGxB,wBAAmB,sCAAuCA,CAAAA,MAHlC;AAIxB,sBAAiB,4DAA6DA,CAAAA,MAJtD,CAKxB,kBAAa,6CAA8CA,CAAAA,MALnC,CAMxB,oBAAe,2BAA4BA,CAAAA,MANnB,CAOxB,mBAAc,qCAAsCA,CAAAA,MAP5B,CAQxB,wBAAmB,sCAAuCA,CAAAA,MARlC,CASxB,sBAAiB,4DAA6DA,CAAAA,MATtD,CAUxB,kBAAa,gDAAiDA,CAAAA,MAVtC;AAWxB,iBAAY,uDAAwDA,CAAAA,MAX5C,CAAV,CAAP,CAYL,GAZK,CA1BH,CAuCNX,WAAY,CAAA,CAvCN,CAxCe,CAiFvBY,QAAS,CACPhB,QAAS,oDADF,CAEPI,WAAY,CAAA,CAFL,CAjFc,CAqFvBa,SAAU,CACRjB,QAAS,2EADD,CAERI,WAAY,CAAA,CAFJ,CArFa,CAyFvBc,WAAY,CACVlB,QAAS,mDADC,CAEVI,WAAY,CAAA,CAFF,CAGVH,OAAQ,CAAA,CAHE,CAzFW,CA8FvBkB,YAAa,WA9FU,CADT,CAAjB,CAAD,CAkHGvB,cAlHH,CAHqB,CATvBwB,MAAOC,CAAAA,cAAP,CAAsB3B,OAAtB,CAA+B,YAA/B,CAA6C,CAC3C4B,MAAO,CAAA,CADoC,CAA7C,CAGA5B,QAAQ6B,CAAAA,OAAR;AAAkB5B,MAElBA,OAAO6B,CAAAA,WAAP,CAAqB,QACrB7B,OAAO8B,CAAAA,OAAP,CAAiB,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/scheme.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$scheme\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = scheme;\\n// @ts-nocheck\\nscheme.displayName = 'scheme';\\nscheme.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction scheme(Prism) {\\n  ;\\n\\n  (function (Prism) {\\n    Prism.languages.scheme = {\\n      // this supports \\\"normal\\\" single-line comments:\\n      //   ; comment\\n      // and (potentially nested) multiline comments:\\n      //   #| comment #| nested |# still comment |#\\n      // (only 1 level of nesting is supported)\\n      comment: /;.*|#;\\\\s*(?:\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|\\\\[(?:[^\\\\[\\\\]]|\\\\[[^\\\\[\\\\]]*\\\\])*\\\\])|#\\\\|(?:[^#|]|#(?!\\\\|)|\\\\|(?!#)|#\\\\|(?:[^#|]|#(?!\\\\|)|\\\\|(?!#))*\\\\|#)*\\\\|#/,\\n      string: {\\n        pattern: /\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"/,\\n        greedy: true\\n      },\\n      symbol: {\\n        pattern: /'[^()\\\\[\\\\]#'\\\\s]+/,\\n        greedy: true\\n      },\\n      char: {\\n        pattern: /#\\\\\\\\(?:[ux][a-fA-F\\\\d]+\\\\b|[-a-zA-Z]+\\\\b|[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|\\\\S)/,\\n        greedy: true\\n      },\\n      'lambda-parameter': [// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\\n      {\\n        pattern: /((?:^|[^'`#])[(\\\\[]lambda\\\\s+)(?:[^|()\\\\[\\\\]'\\\\s]+|\\\\|(?:[^\\\\\\\\|]|\\\\\\\\.)*\\\\|)/,\\n        lookbehind: true\\n      }, {\\n        pattern: /((?:^|[^'`#])[(\\\\[]lambda\\\\s+[(\\\\[])[^()\\\\[\\\\]']+/,\\n        lookbehind: true\\n      }],\\n      keyword: {\\n        pattern: /((?:^|[^'`#])[(\\\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|except|export|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\\\*)?|let\\\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\\\[\\\\]\\\\s]|$)/,\\n        lookbehind: true\\n      },\\n      builtin: {\\n        // all functions of the base library of R7RS plus some of built-ins of R5Rs\\n        pattern: /((?:^|[^'`#])[(\\\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\\\?|boolean=?\\\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\\\?|\\\\?|<\\\\?|<=\\\\?|=\\\\?|>\\\\?|>=\\\\?)|close-(?:input-port|output-port|port)|complex\\\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\\\??|eq\\\\?|equal\\\\?|eqv\\\\?|error|error-object(?:-irritants|-message|\\\\?)|eval|even\\\\?|exact(?:-integer-sqrt|-integer\\\\?|\\\\?)?|expt|features|file-error\\\\?|floor(?:-quotient|-remainder|\\\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\\\??|input-port(?:-open\\\\?|\\\\?)|integer(?:->char|\\\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\\\?|newline|not|null\\\\?|number(?:->string|\\\\?)|numerator|odd\\\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\\\?|\\\\?)|pair\\\\?|peek-char|peek-u8|port\\\\?|positive\\\\?|procedure\\\\?|quotient|raise|raise-continuable|rational\\\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\\\?|line|string|u8)|real\\\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\\\?|<\\\\?|<=\\\\?|=\\\\?|>\\\\?|>=\\\\?)?|substring|symbol(?:->string|\\\\?|=\\\\?)|syntax-error|textual-port\\\\?|truncate(?:-quotient|-remainder|\\\\/)?|u8-ready\\\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\\\?)(?=[()\\\\[\\\\]\\\\s]|$)/,\\n        lookbehind: true\\n      },\\n      operator: {\\n        pattern: /((?:^|[^'`#])[(\\\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\\\[\\\\]\\\\s]|$)/,\\n        lookbehind: true\\n      },\\n      number: {\\n        // The number pattern from [the R7RS spec](https://small.r7rs.org/attachment/r7rs.pdf).\\n        //\\n        // <number>      := <num 2>|<num 8>|<num 10>|<num 16>\\n        // <num R>       := <prefix R><complex R>\\n        // <complex R>   := <real R>(?:@<real R>|<imaginary R>)?|<imaginary R>\\n        // <imaginary R> := [+-](?:<ureal R>|(?:inf|nan)\\\\.0)?i\\n        // <real R>      := [+-]?<ureal R>|[+-](?:inf|nan)\\\\.0\\n        // <ureal R>     := <uint R>(?:\\\\/<uint R>)?\\n        //                | <decimal R>\\n        //\\n        // <decimal 10>  := (?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\\n        // <uint R>      := <digit R>+\\n        // <prefix R>    := <radix R>(?:#[ei])?|(?:#[ei])?<radix R>\\n        // <radix 2>     := #b\\n        // <radix 8>     := #o\\n        // <radix 10>    := (?:#d)?\\n        // <radix 16>    := #x\\n        // <digit 2>     := [01]\\n        // <digit 8>     := [0-7]\\n        // <digit 10>    := \\\\d\\n        // <digit 16>    := [0-9a-f]\\n        //\\n        // The problem with this grammar is that the resulting regex is way to complex, so we simplify by grouping all\\n        // non-decimal bases together. This results in a decimal (dec) and combined binary, octal, and hexadecimal (box)\\n        // pattern:\\n        pattern: RegExp(SortedBNF({\\n          '<ureal dec>': /\\\\d+(?:\\\\/\\\\d+)|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:[esfdl][+-]?\\\\d+)?/.source,\\n          '<real dec>': /[+-]?<ureal dec>|[+-](?:inf|nan)\\\\.0/.source,\\n          '<imaginary dec>': /[+-](?:<ureal dec>|(?:inf|nan)\\\\.0)?i/.source,\\n          '<complex dec>': /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,\\n          '<num dec>': /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,\\n          '<ureal box>': /[0-9a-f]+(?:\\\\/[0-9a-f]+)?/.source,\\n          '<real box>': /[+-]?<ureal box>|[+-](?:inf|nan)\\\\.0/.source,\\n          '<imaginary box>': /[+-](?:<ureal box>|(?:inf|nan)\\\\.0)?i/.source,\\n          '<complex box>': /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,\\n          '<num box>': /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,\\n          '<number>': /(^|[()\\\\[\\\\]\\\\s])(?:<num dec>|<num box>)(?=[()\\\\[\\\\]\\\\s]|$)/.source\\n        }), 'i'),\\n        lookbehind: true\\n      },\\n      boolean: {\\n        pattern: /(^|[()\\\\[\\\\]\\\\s])#(?:[ft]|false|true)(?=[()\\\\[\\\\]\\\\s]|$)/,\\n        lookbehind: true\\n      },\\n      function: {\\n        pattern: /((?:^|[^'`#])[(\\\\[])(?:[^|()\\\\[\\\\]'\\\\s]+|\\\\|(?:[^\\\\\\\\|]|\\\\\\\\.)*\\\\|)(?=[()\\\\[\\\\]\\\\s]|$)/,\\n        lookbehind: true\\n      },\\n      identifier: {\\n        pattern: /(^|[()\\\\[\\\\]\\\\s])\\\\|(?:[^\\\\\\\\|]|\\\\\\\\.)*\\\\|(?=[()\\\\[\\\\]\\\\s]|$)/,\\n        lookbehind: true,\\n        greedy: true\\n      },\\n      punctuation: /[()\\\\[\\\\]']/\\n    };\\n    /**\\n     * Given a topologically sorted BNF grammar, this will return the RegExp source of last rule of the grammar.\\n     *\\n     * @param {Record<string, string>} grammar\\n     * @returns {string}\\n     */\\n\\n    function SortedBNF(grammar) {\\n      for (var key in grammar) {\\n        grammar[key] = grammar[key].replace(/<[\\\\w\\\\s]+>/g, function (key) {\\n          return '(?:' + grammar[key].trim() + ')';\\n        });\\n      } // return the last item\\n\\n\\n      return grammar[key];\\n    }\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"scheme\",\"Prism\",\"languages\",\"comment\",\"string\",\"pattern\",\"greedy\",\"symbol\",\"char\",\"lookbehind\",\"keyword\",\"builtin\",\"operator\",\"number\",\"RegExp\",\"SortedBNF\",\"grammar\",\"key\",\"replace\",\"trim\",\"source\",\"boolean\",\"function\",\"identifier\",\"punctuation\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]