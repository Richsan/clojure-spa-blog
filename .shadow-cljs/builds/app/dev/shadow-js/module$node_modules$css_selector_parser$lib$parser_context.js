["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/css-selector-parser/lib/parser-context.js"],"~:js","shadow$provide.module$node_modules$css_selector_parser$lib$parser_context=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});var utils_1=require(\"module$node_modules$css_selector_parser$lib$utils\");exports.parseCssSelector=function(str,pos,pseudos,attrEqualityMods,ruleNestingOperators,substitutesEnabled){function getStr(quote,escapeTable){var result=\"\";pos++;for(chr=str.charAt(pos);pos<l;){if(chr===quote){pos++;break}else if(\"\\\\\"===chr){pos++;chr=str.charAt(pos);\nvar esc;if(chr===quote)result+=quote;else if(void 0!==(esc=escapeTable[chr]))result+=esc;else if(utils_1.isHex(chr)){esc=chr;pos++;for(chr=str.charAt(pos);utils_1.isHex(chr);)esc+=chr,pos++,chr=str.charAt(pos);\" \"===chr&&(pos++,chr=str.charAt(pos));result+=String.fromCharCode(parseInt(esc,16));continue}else result+=chr}else result+=chr;pos++;chr=str.charAt(pos)}return result}function getIdent(){var result=\"\";for(chr=str.charAt(pos);pos<l;){if(utils_1.isIdent(chr))result+=chr;else if(\"\\\\\"===chr){pos++;\nif(pos>=l)throw Error(\"Expected symbol but end of file reached.\");chr=str.charAt(pos);if(utils_1.identSpecialChars[chr])result+=chr;else if(utils_1.isHex(chr)){var hex=chr;pos++;for(chr=str.charAt(pos);utils_1.isHex(chr);)hex+=chr,pos++,chr=str.charAt(pos);\" \"===chr&&(pos++,chr=str.charAt(pos));result+=String.fromCharCode(parseInt(hex,16));continue}else result+=chr}else break;pos++;chr=str.charAt(pos)}return result}function skipWhitespace(){chr=str.charAt(pos);for(var result=!1;\" \"===chr||\"\\t\"===\nchr||\"\\n\"===chr||\"\\r\"===chr||\"\\f\"===chr;)result=!0,pos++,chr=str.charAt(pos);return result}function parseSelector(){var selector=parseSingleSelector();if(!selector)return null;var res=selector;for(chr=str.charAt(pos);\",\"===chr;){pos++;skipWhitespace();\"selectors\"!==res.type&&(res={type:\"selectors\",selectors:[selector]});selector=parseSingleSelector();if(!selector)throw Error('Rule expected after \",\".');res.selectors.push(selector)}return res}function parseSingleSelector(){skipWhitespace();var selector=\n{type:\"ruleSet\"},rule=parseRule();if(!rule)return null;for(var currentRule=selector;rule;){rule.type=\"rule\";currentRule=currentRule.rule=rule;skipWhitespace();chr=str.charAt(pos);if(pos>=l||\",\"===chr||\")\"===chr)break;if(ruleNestingOperators[chr]){var op=chr;pos++;skipWhitespace();rule=parseRule();if(!rule)throw Error('Rule expected after \"'+op+'\".');rule.nestingOperator=op}else if(rule=parseRule())rule.nestingOperator=null}return selector}function parseRule(){for(var rule=null;pos<l;)if(chr=str.charAt(pos),\n\"*\"===chr)pos++,(rule=rule||{}).tagName=\"*\";else if(utils_1.isIdentStart(chr)||\"\\\\\"===chr)(rule=rule||{}).tagName=getIdent();else if(\".\"===chr)pos++,rule=rule||{},(rule.classNames=rule.classNames||[]).push(getIdent());else if(\"#\"===chr)pos++,(rule=rule||{}).id=getIdent();else if(\"[\"===chr){pos++;skipWhitespace();var attr={name:getIdent()};skipWhitespace();if(\"]\"===chr)pos++;else{var operator=\"\";attrEqualityMods[chr]&&(operator=chr,pos++,chr=str.charAt(pos));if(pos>=l)throw Error('Expected \"\\x3d\" but end of file reached.');\nif(\"\\x3d\"!==chr)throw Error('Expected \"\\x3d\" but \"'+chr+'\" found.');attr.operator=operator+\"\\x3d\";pos++;skipWhitespace();operator=\"\";attr.valueType=\"string\";if('\"'===chr)operator=getStr('\"',utils_1.doubleQuotesEscapeChars);else if(\"'\"===chr)operator=getStr(\"'\",utils_1.singleQuoteEscapeChars);else if(substitutesEnabled&&\"$\"===chr)pos++,operator=getIdent(),attr.valueType=\"substitute\";else{for(;pos<l&&\"]\"!==chr;)operator+=chr,pos++,chr=str.charAt(pos);operator=operator.trim()}skipWhitespace();if(pos>=\nl)throw Error('Expected \"]\" but end of file reached.');if(\"]\"!==chr)throw Error('Expected \"]\" but \"'+chr+'\" found.');pos++;attr.value=operator}rule=rule||{};(rule.attrs=rule.attrs||[]).push(attr)}else if(\":\"===chr){pos++;attr=getIdent();operator={name:attr};if(\"(\"===chr){pos++;var value=\"\";skipWhitespace();if(\"selector\"===pseudos[attr])operator.valueType=\"selector\",value=parseSelector();else{operator.valueType=pseudos[attr]||\"string\";if('\"'===chr)value=getStr('\"',utils_1.doubleQuotesEscapeChars);\nelse if(\"'\"===chr)value=getStr(\"'\",utils_1.singleQuoteEscapeChars);else if(substitutesEnabled&&\"$\"===chr)pos++,value=getIdent(),operator.valueType=\"substitute\";else{for(;pos<l&&\")\"!==chr;)value+=chr,pos++,chr=str.charAt(pos);value=value.trim()}skipWhitespace()}if(pos>=l)throw Error('Expected \")\" but end of file reached.');if(\")\"!==chr)throw Error('Expected \")\" but \"'+chr+'\" found.');pos++;operator.value=value}rule=rule||{};(rule.pseudos=rule.pseudos||[]).push(operator)}else break;return rule}var l=\nstr.length,chr=\"\";return function(){var res=parseSelector();if(pos<l)throw Error('Rule expected but \"'+str.charAt(pos)+'\" found.');return res}()}}","~:source","shadow$provide[\"module$node_modules$css_selector_parser$lib$parser_context\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nfunction parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {\n    var l = str.length;\n    var chr = '';\n    function getStr(quote, escapeTable) {\n        var result = '';\n        pos++;\n        chr = str.charAt(pos);\n        while (pos < l) {\n            if (chr === quote) {\n                pos++;\n                return result;\n            }\n            else if (chr === '\\\\') {\n                pos++;\n                chr = str.charAt(pos);\n                var esc = void 0;\n                if (chr === quote) {\n                    result += quote;\n                }\n                else if ((esc = escapeTable[chr]) !== undefined) {\n                    result += esc;\n                }\n                else if (utils_1.isHex(chr)) {\n                    var hex = chr;\n                    pos++;\n                    chr = str.charAt(pos);\n                    while (utils_1.isHex(chr)) {\n                        hex += chr;\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    if (chr === ' ') {\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    result += String.fromCharCode(parseInt(hex, 16));\n                    continue;\n                }\n                else {\n                    result += chr;\n                }\n            }\n            else {\n                result += chr;\n            }\n            pos++;\n            chr = str.charAt(pos);\n        }\n        return result;\n    }\n    function getIdent() {\n        var result = '';\n        chr = str.charAt(pos);\n        while (pos < l) {\n            if (utils_1.isIdent(chr)) {\n                result += chr;\n            }\n            else if (chr === '\\\\') {\n                pos++;\n                if (pos >= l) {\n                    throw Error('Expected symbol but end of file reached.');\n                }\n                chr = str.charAt(pos);\n                if (utils_1.identSpecialChars[chr]) {\n                    result += chr;\n                }\n                else if (utils_1.isHex(chr)) {\n                    var hex = chr;\n                    pos++;\n                    chr = str.charAt(pos);\n                    while (utils_1.isHex(chr)) {\n                        hex += chr;\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    if (chr === ' ') {\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    result += String.fromCharCode(parseInt(hex, 16));\n                    continue;\n                }\n                else {\n                    result += chr;\n                }\n            }\n            else {\n                return result;\n            }\n            pos++;\n            chr = str.charAt(pos);\n        }\n        return result;\n    }\n    function skipWhitespace() {\n        chr = str.charAt(pos);\n        var result = false;\n        while (chr === ' ' || chr === \"\\t\" || chr === \"\\n\" || chr === \"\\r\" || chr === \"\\f\") {\n            result = true;\n            pos++;\n            chr = str.charAt(pos);\n        }\n        return result;\n    }\n    function parse() {\n        var res = parseSelector();\n        if (pos < l) {\n            throw Error('Rule expected but \"' + str.charAt(pos) + '\" found.');\n        }\n        return res;\n    }\n    function parseSelector() {\n        var selector = parseSingleSelector();\n        if (!selector) {\n            return null;\n        }\n        var res = selector;\n        chr = str.charAt(pos);\n        while (chr === ',') {\n            pos++;\n            skipWhitespace();\n            if (res.type !== 'selectors') {\n                res = {\n                    type: 'selectors',\n                    selectors: [selector]\n                };\n            }\n            selector = parseSingleSelector();\n            if (!selector) {\n                throw Error('Rule expected after \",\".');\n            }\n            res.selectors.push(selector);\n        }\n        return res;\n    }\n    function parseSingleSelector() {\n        skipWhitespace();\n        var selector = {\n            type: 'ruleSet'\n        };\n        var rule = parseRule();\n        if (!rule) {\n            return null;\n        }\n        var currentRule = selector;\n        while (rule) {\n            rule.type = 'rule';\n            currentRule.rule = rule;\n            currentRule = rule;\n            skipWhitespace();\n            chr = str.charAt(pos);\n            if (pos >= l || chr === ',' || chr === ')') {\n                break;\n            }\n            if (ruleNestingOperators[chr]) {\n                var op = chr;\n                pos++;\n                skipWhitespace();\n                rule = parseRule();\n                if (!rule) {\n                    throw Error('Rule expected after \"' + op + '\".');\n                }\n                rule.nestingOperator = op;\n            }\n            else {\n                rule = parseRule();\n                if (rule) {\n                    rule.nestingOperator = null;\n                }\n            }\n        }\n        return selector;\n    }\n    // @ts-ignore no-overlap\n    function parseRule() {\n        var rule = null;\n        while (pos < l) {\n            chr = str.charAt(pos);\n            if (chr === '*') {\n                pos++;\n                (rule = rule || {}).tagName = '*';\n            }\n            else if (utils_1.isIdentStart(chr) || chr === '\\\\') {\n                (rule = rule || {}).tagName = getIdent();\n            }\n            else if (chr === '.') {\n                pos++;\n                rule = rule || {};\n                (rule.classNames = rule.classNames || []).push(getIdent());\n            }\n            else if (chr === '#') {\n                pos++;\n                (rule = rule || {}).id = getIdent();\n            }\n            else if (chr === '[') {\n                pos++;\n                skipWhitespace();\n                var attr = {\n                    name: getIdent()\n                };\n                skipWhitespace();\n                // @ts-ignore\n                if (chr === ']') {\n                    pos++;\n                }\n                else {\n                    var operator = '';\n                    if (attrEqualityMods[chr]) {\n                        operator = chr;\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    if (pos >= l) {\n                        throw Error('Expected \"=\" but end of file reached.');\n                    }\n                    if (chr !== '=') {\n                        throw Error('Expected \"=\" but \"' + chr + '\" found.');\n                    }\n                    attr.operator = operator + '=';\n                    pos++;\n                    skipWhitespace();\n                    var attrValue = '';\n                    attr.valueType = 'string';\n                    // @ts-ignore\n                    if (chr === '\"') {\n                        attrValue = getStr('\"', utils_1.doubleQuotesEscapeChars);\n                        // @ts-ignore\n                    }\n                    else if (chr === '\\'') {\n                        attrValue = getStr('\\'', utils_1.singleQuoteEscapeChars);\n                        // @ts-ignore\n                    }\n                    else if (substitutesEnabled && chr === '$') {\n                        pos++;\n                        attrValue = getIdent();\n                        attr.valueType = 'substitute';\n                    }\n                    else {\n                        while (pos < l) {\n                            if (chr === ']') {\n                                break;\n                            }\n                            attrValue += chr;\n                            pos++;\n                            chr = str.charAt(pos);\n                        }\n                        attrValue = attrValue.trim();\n                    }\n                    skipWhitespace();\n                    if (pos >= l) {\n                        throw Error('Expected \"]\" but end of file reached.');\n                    }\n                    if (chr !== ']') {\n                        throw Error('Expected \"]\" but \"' + chr + '\" found.');\n                    }\n                    pos++;\n                    attr.value = attrValue;\n                }\n                rule = rule || {};\n                (rule.attrs = rule.attrs || []).push(attr);\n            }\n            else if (chr === ':') {\n                pos++;\n                var pseudoName = getIdent();\n                var pseudo = {\n                    name: pseudoName\n                };\n                // @ts-ignore\n                if (chr === '(') {\n                    pos++;\n                    var value = '';\n                    skipWhitespace();\n                    if (pseudos[pseudoName] === 'selector') {\n                        pseudo.valueType = 'selector';\n                        value = parseSelector();\n                    }\n                    else {\n                        pseudo.valueType = pseudos[pseudoName] || 'string';\n                        // @ts-ignore\n                        if (chr === '\"') {\n                            value = getStr('\"', utils_1.doubleQuotesEscapeChars);\n                            // @ts-ignore\n                        }\n                        else if (chr === '\\'') {\n                            value = getStr('\\'', utils_1.singleQuoteEscapeChars);\n                            // @ts-ignore\n                        }\n                        else if (substitutesEnabled && chr === '$') {\n                            pos++;\n                            value = getIdent();\n                            pseudo.valueType = 'substitute';\n                        }\n                        else {\n                            while (pos < l) {\n                                if (chr === ')') {\n                                    break;\n                                }\n                                value += chr;\n                                pos++;\n                                chr = str.charAt(pos);\n                            }\n                            value = value.trim();\n                        }\n                        skipWhitespace();\n                    }\n                    if (pos >= l) {\n                        throw Error('Expected \")\" but end of file reached.');\n                    }\n                    if (chr !== ')') {\n                        throw Error('Expected \")\" but \"' + chr + '\" found.');\n                    }\n                    pos++;\n                    pseudo.value = value;\n                }\n                rule = rule || {};\n                (rule.pseudos = rule.pseudos || []).push(pseudo);\n            }\n            else {\n                break;\n            }\n        }\n        return rule;\n    }\n    return parse();\n}\nexports.parseCssSelector = parseCssSelector;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$css_selector_parser$lib$utils"]],"~:properties",["^5",["attrs","classNames","rule","operator","pseudos","__esModule","id","selectors","name","value","parseCssSelector","type","tagName","valueType","nestingOperator"]],"~:compiled-at",1676841365501,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$css_selector_parser$lib$parser_context.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/css-selector-parser/lib/parser-context.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$css_selector_parser$lib$parser_context\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nvar utils_1 = require(\\\"./utils\\\");\\nfunction parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {\\n    var l = str.length;\\n    var chr = '';\\n    function getStr(quote, escapeTable) {\\n        var result = '';\\n        pos++;\\n        chr = str.charAt(pos);\\n        while (pos < l) {\\n            if (chr === quote) {\\n                pos++;\\n                return result;\\n            }\\n            else if (chr === '\\\\\\\\') {\\n                pos++;\\n                chr = str.charAt(pos);\\n                var esc = void 0;\\n                if (chr === quote) {\\n                    result += quote;\\n                }\\n                else if ((esc = escapeTable[chr]) !== undefined) {\\n                    result += esc;\\n                }\\n                else if (utils_1.isHex(chr)) {\\n                    var hex = chr;\\n                    pos++;\\n                    chr = str.charAt(pos);\\n                    while (utils_1.isHex(chr)) {\\n                        hex += chr;\\n                        pos++;\\n                        chr = str.charAt(pos);\\n                    }\\n                    if (chr === ' ') {\\n                        pos++;\\n                        chr = str.charAt(pos);\\n                    }\\n                    result += String.fromCharCode(parseInt(hex, 16));\\n                    continue;\\n                }\\n                else {\\n                    result += chr;\\n                }\\n            }\\n            else {\\n                result += chr;\\n            }\\n            pos++;\\n            chr = str.charAt(pos);\\n        }\\n        return result;\\n    }\\n    function getIdent() {\\n        var result = '';\\n        chr = str.charAt(pos);\\n        while (pos < l) {\\n            if (utils_1.isIdent(chr)) {\\n                result += chr;\\n            }\\n            else if (chr === '\\\\\\\\') {\\n                pos++;\\n                if (pos >= l) {\\n                    throw Error('Expected symbol but end of file reached.');\\n                }\\n                chr = str.charAt(pos);\\n                if (utils_1.identSpecialChars[chr]) {\\n                    result += chr;\\n                }\\n                else if (utils_1.isHex(chr)) {\\n                    var hex = chr;\\n                    pos++;\\n                    chr = str.charAt(pos);\\n                    while (utils_1.isHex(chr)) {\\n                        hex += chr;\\n                        pos++;\\n                        chr = str.charAt(pos);\\n                    }\\n                    if (chr === ' ') {\\n                        pos++;\\n                        chr = str.charAt(pos);\\n                    }\\n                    result += String.fromCharCode(parseInt(hex, 16));\\n                    continue;\\n                }\\n                else {\\n                    result += chr;\\n                }\\n            }\\n            else {\\n                return result;\\n            }\\n            pos++;\\n            chr = str.charAt(pos);\\n        }\\n        return result;\\n    }\\n    function skipWhitespace() {\\n        chr = str.charAt(pos);\\n        var result = false;\\n        while (chr === ' ' || chr === \\\"\\\\t\\\" || chr === \\\"\\\\n\\\" || chr === \\\"\\\\r\\\" || chr === \\\"\\\\f\\\") {\\n            result = true;\\n            pos++;\\n            chr = str.charAt(pos);\\n        }\\n        return result;\\n    }\\n    function parse() {\\n        var res = parseSelector();\\n        if (pos < l) {\\n            throw Error('Rule expected but \\\"' + str.charAt(pos) + '\\\" found.');\\n        }\\n        return res;\\n    }\\n    function parseSelector() {\\n        var selector = parseSingleSelector();\\n        if (!selector) {\\n            return null;\\n        }\\n        var res = selector;\\n        chr = str.charAt(pos);\\n        while (chr === ',') {\\n            pos++;\\n            skipWhitespace();\\n            if (res.type !== 'selectors') {\\n                res = {\\n                    type: 'selectors',\\n                    selectors: [selector]\\n                };\\n            }\\n            selector = parseSingleSelector();\\n            if (!selector) {\\n                throw Error('Rule expected after \\\",\\\".');\\n            }\\n            res.selectors.push(selector);\\n        }\\n        return res;\\n    }\\n    function parseSingleSelector() {\\n        skipWhitespace();\\n        var selector = {\\n            type: 'ruleSet'\\n        };\\n        var rule = parseRule();\\n        if (!rule) {\\n            return null;\\n        }\\n        var currentRule = selector;\\n        while (rule) {\\n            rule.type = 'rule';\\n            currentRule.rule = rule;\\n            currentRule = rule;\\n            skipWhitespace();\\n            chr = str.charAt(pos);\\n            if (pos >= l || chr === ',' || chr === ')') {\\n                break;\\n            }\\n            if (ruleNestingOperators[chr]) {\\n                var op = chr;\\n                pos++;\\n                skipWhitespace();\\n                rule = parseRule();\\n                if (!rule) {\\n                    throw Error('Rule expected after \\\"' + op + '\\\".');\\n                }\\n                rule.nestingOperator = op;\\n            }\\n            else {\\n                rule = parseRule();\\n                if (rule) {\\n                    rule.nestingOperator = null;\\n                }\\n            }\\n        }\\n        return selector;\\n    }\\n    // @ts-ignore no-overlap\\n    function parseRule() {\\n        var rule = null;\\n        while (pos < l) {\\n            chr = str.charAt(pos);\\n            if (chr === '*') {\\n                pos++;\\n                (rule = rule || {}).tagName = '*';\\n            }\\n            else if (utils_1.isIdentStart(chr) || chr === '\\\\\\\\') {\\n                (rule = rule || {}).tagName = getIdent();\\n            }\\n            else if (chr === '.') {\\n                pos++;\\n                rule = rule || {};\\n                (rule.classNames = rule.classNames || []).push(getIdent());\\n            }\\n            else if (chr === '#') {\\n                pos++;\\n                (rule = rule || {}).id = getIdent();\\n            }\\n            else if (chr === '[') {\\n                pos++;\\n                skipWhitespace();\\n                var attr = {\\n                    name: getIdent()\\n                };\\n                skipWhitespace();\\n                // @ts-ignore\\n                if (chr === ']') {\\n                    pos++;\\n                }\\n                else {\\n                    var operator = '';\\n                    if (attrEqualityMods[chr]) {\\n                        operator = chr;\\n                        pos++;\\n                        chr = str.charAt(pos);\\n                    }\\n                    if (pos >= l) {\\n                        throw Error('Expected \\\"=\\\" but end of file reached.');\\n                    }\\n                    if (chr !== '=') {\\n                        throw Error('Expected \\\"=\\\" but \\\"' + chr + '\\\" found.');\\n                    }\\n                    attr.operator = operator + '=';\\n                    pos++;\\n                    skipWhitespace();\\n                    var attrValue = '';\\n                    attr.valueType = 'string';\\n                    // @ts-ignore\\n                    if (chr === '\\\"') {\\n                        attrValue = getStr('\\\"', utils_1.doubleQuotesEscapeChars);\\n                        // @ts-ignore\\n                    }\\n                    else if (chr === '\\\\'') {\\n                        attrValue = getStr('\\\\'', utils_1.singleQuoteEscapeChars);\\n                        // @ts-ignore\\n                    }\\n                    else if (substitutesEnabled && chr === '$') {\\n                        pos++;\\n                        attrValue = getIdent();\\n                        attr.valueType = 'substitute';\\n                    }\\n                    else {\\n                        while (pos < l) {\\n                            if (chr === ']') {\\n                                break;\\n                            }\\n                            attrValue += chr;\\n                            pos++;\\n                            chr = str.charAt(pos);\\n                        }\\n                        attrValue = attrValue.trim();\\n                    }\\n                    skipWhitespace();\\n                    if (pos >= l) {\\n                        throw Error('Expected \\\"]\\\" but end of file reached.');\\n                    }\\n                    if (chr !== ']') {\\n                        throw Error('Expected \\\"]\\\" but \\\"' + chr + '\\\" found.');\\n                    }\\n                    pos++;\\n                    attr.value = attrValue;\\n                }\\n                rule = rule || {};\\n                (rule.attrs = rule.attrs || []).push(attr);\\n            }\\n            else if (chr === ':') {\\n                pos++;\\n                var pseudoName = getIdent();\\n                var pseudo = {\\n                    name: pseudoName\\n                };\\n                // @ts-ignore\\n                if (chr === '(') {\\n                    pos++;\\n                    var value = '';\\n                    skipWhitespace();\\n                    if (pseudos[pseudoName] === 'selector') {\\n                        pseudo.valueType = 'selector';\\n                        value = parseSelector();\\n                    }\\n                    else {\\n                        pseudo.valueType = pseudos[pseudoName] || 'string';\\n                        // @ts-ignore\\n                        if (chr === '\\\"') {\\n                            value = getStr('\\\"', utils_1.doubleQuotesEscapeChars);\\n                            // @ts-ignore\\n                        }\\n                        else if (chr === '\\\\'') {\\n                            value = getStr('\\\\'', utils_1.singleQuoteEscapeChars);\\n                            // @ts-ignore\\n                        }\\n                        else if (substitutesEnabled && chr === '$') {\\n                            pos++;\\n                            value = getIdent();\\n                            pseudo.valueType = 'substitute';\\n                        }\\n                        else {\\n                            while (pos < l) {\\n                                if (chr === ')') {\\n                                    break;\\n                                }\\n                                value += chr;\\n                                pos++;\\n                                chr = str.charAt(pos);\\n                            }\\n                            value = value.trim();\\n                        }\\n                        skipWhitespace();\\n                    }\\n                    if (pos >= l) {\\n                        throw Error('Expected \\\")\\\" but end of file reached.');\\n                    }\\n                    if (chr !== ')') {\\n                        throw Error('Expected \\\")\\\" but \\\"' + chr + '\\\" found.');\\n                    }\\n                    pos++;\\n                    pseudo.value = value;\\n                }\\n                rule = rule || {};\\n                (rule.pseudos = rule.pseudos || []).push(pseudo);\\n            }\\n            else {\\n                break;\\n            }\\n        }\\n        return rule;\\n    }\\n    return parse();\\n}\\nexports.parseCssSelector = parseCssSelector;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"utils_1\",\"parseCssSelector\",\"str\",\"pos\",\"pseudos\",\"attrEqualityMods\",\"ruleNestingOperators\",\"substitutesEnabled\",\"getStr\",\"quote\",\"escapeTable\",\"result\",\"chr\",\"charAt\",\"l\",\"esc\",\"undefined\",\"isHex\",\"hex\",\"String\",\"fromCharCode\",\"parseInt\",\"getIdent\",\"isIdent\",\"Error\",\"identSpecialChars\",\"skipWhitespace\",\"parseSelector\",\"selector\",\"parseSingleSelector\",\"res\",\"type\",\"selectors\",\"push\",\"rule\",\"parseRule\",\"currentRule\",\"op\",\"nestingOperator\",\"tagName\",\"isIdentStart\",\"classNames\",\"id\",\"attr\",\"name\",\"operator\",\"attrValue\",\"valueType\",\"doubleQuotesEscapeChars\",\"singleQuoteEscapeChars\",\"trim\",\"attrs\",\"pseudoName\",\"pseudo\",\"length\",\"parse\"]\n}\n"]