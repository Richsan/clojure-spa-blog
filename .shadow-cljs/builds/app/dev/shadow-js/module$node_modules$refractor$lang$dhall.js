["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/dhall.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$dhall=function(global,require,module,exports){function dhall(Prism){Prism.languages.dhall={comment:/--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,greedy:!0,inside:{interpolation:{pattern:/\\$\\{[^{}]*\\}/,inside:{expression:{pattern:/(^\\$\\{)[\\s\\S]+(?=\\}$)/,lookbehind:!0,alias:\"language-dhall\",inside:null},punctuation:/\\$\\{|\\}/}}}},label:{pattern:/`[^`]*`/,\ngreedy:!0},url:{pattern:/\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,greedy:!0},env:{pattern:/\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,greedy:!0,inside:{function:/^env/,operator:/^:/,variable:/[\\s\\S]+/}},hash:{pattern:/\\bsha256:[\\da-fA-F]{64}\\b/,inside:{function:/sha256/,operator:/:/,number:/[\\da-fA-F]{64}/}},keyword:/\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,builtin:/\\b(?:None|Some)\\b/,boolean:/\\b(?:False|True)\\b/,\nnumber:/\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,operator:/\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,punctuation:/\\.\\.|[{}\\[\\](),./]/,\"class-name\":/\\b[A-Z]\\w*\\b/};Prism.languages.dhall.string.inside.interpolation.inside.expression.inside=Prism.languages.dhall}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=dhall;dhall.displayName=\"dhall\";dhall.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$dhall\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = dhall;\n// @ts-nocheck\ndhall.displayName = 'dhall';\ndhall.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction dhall(Prism) {\n  // ABNF grammar:\n  // https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\n  Prism.languages.dhall = {\n    // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\n    // The multi-line pattern is essentially this:\n    //   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\n    comment: /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$\\{[^{}]*\\}/,\n          inside: {\n            expression: {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              alias: 'language-dhall',\n              inside: null // see blow\n\n            },\n            punctuation: /\\$\\{|\\}/\n          }\n        }\n      }\n    },\n    label: {\n      pattern: /`[^`]*`/,\n      greedy: true\n    },\n    url: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\n      pattern: /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n      greedy: true\n    },\n    env: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\n      pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n      greedy: true,\n      inside: {\n        function: /^env/,\n        operator: /^:/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    hash: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\n      pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n      inside: {\n        function: /sha256/,\n        operator: /:/,\n        number: /[\\da-fA-F]{64}/\n      }\n    },\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\n    keyword: /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n    builtin: /\\b(?:None|Some)\\b/,\n    boolean: /\\b(?:False|True)\\b/,\n    number: /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n    operator: /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n    punctuation: /\\.\\.|[{}\\[\\](),./]/,\n    // we'll just assume that every capital word left is a type name\n    'class-name': /\\b[A-Z]\\w*\\b/\n  };\n  Prism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","url","punctuation","string","aliases","operator","hash","displayName","label","__esModule","expression","lookbehind","value","variable","keyword","number","greedy","function","dhall","env","pattern","inside","alias","comment","builtin","interpolation","default"]],"~:compiled-at",1676841365405,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$dhall.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,wCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYrGC,QAASA,MAAK,CAACC,KAAD,CAAQ,CAGpBA,KAAMC,CAAAA,SAAUF,CAAAA,KAAhB,CAAwB,CAItBG,QAAS,wEAJa,CAKtBC,OAAQ,CACNC,QAAS,2DADH,CAENC,OAAQ,CAAA,CAFF,CAGNC,OAAQ,CACNC,cAAe,CACbH,QAAS,cADI,CAEbE,OAAQ,CACNE,WAAY,CACVJ,QAAS,uBADC,CAEVK,WAAY,CAAA,CAFF,CAGVC,MAAO,gBAHG,CAIVJ,OAAQ,IAJE,CADN,CAQNK,YAAa,SARP,CAFK,CADT,CAHF,CALc,CAwBtBC,MAAO,CACLR,QAAS,SADJ;AAELC,OAAQ,CAAA,CAFH,CAxBe,CA4BtBQ,IAAK,CAEHT,QAAS,wFAFN,CAGHC,OAAQ,CAAA,CAHL,CA5BiB,CAiCtBS,IAAK,CAEHV,QAAS,wCAFN,CAGHC,OAAQ,CAAA,CAHL,CAIHC,OAAQ,CACNS,SAAU,MADJ,CAENC,SAAU,IAFJ,CAGNC,SAAU,SAHJ,CAJL,CAjCiB,CA2CtBC,KAAM,CAEJd,QAAS,2BAFL,CAGJE,OAAQ,CACNS,SAAU,QADJ,CAENC,SAAU,GAFJ,CAGNG,OAAQ,gBAHF,CAHJ,CA3CgB,CAqDtBC,QAAS,oFArDa,CAsDtBC,QAAS,mBAtDa,CAuDtBC,QAAS,oBAvDa;AAwDtBH,OAAQ,+EAxDc,CAyDtBH,SAAU,oGAzDY,CA0DtBL,YAAa,oBA1DS,CA4DtB,aAAc,cA5DQ,CA8DxBX,MAAMC,CAAAA,SAAUF,CAAAA,KAAMI,CAAAA,MAAOG,CAAAA,MAAOC,CAAAA,aAAcD,CAAAA,MAAOE,CAAAA,UAAWF,CAAAA,MAApE,CAA6EN,KAAMC,CAAAA,SAAUF,CAAAA,KAjEzE,CATtBwB,MAAOC,CAAAA,cAAP,CAAsB1B,OAAtB,CAA+B,YAA/B,CAA6C,CAC3C2B,MAAO,CAAA,CADoC,CAA7C,CAGA3B,QAAQ4B,CAAAA,OAAR,CAAkB3B,KAElBA,MAAM4B,CAAAA,WAAN,CAAoB,OACpB5B,MAAM6B,CAAAA,OAAN,CAAgB,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/dhall.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$dhall\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = dhall;\\n// @ts-nocheck\\ndhall.displayName = 'dhall';\\ndhall.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction dhall(Prism) {\\n  // ABNF grammar:\\n  // https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\\n  Prism.languages.dhall = {\\n    // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\\n    // The multi-line pattern is essentially this:\\n    //   \\\\{-(?:[^-{]|-(?!\\\\})|\\\\{(?!-)|<SELF>)*-\\\\}\\n    comment: /--.*|\\\\{-(?:[^-{]|-(?!\\\\})|\\\\{(?!-)|\\\\{-(?:[^-{]|-(?!\\\\})|\\\\{(?!-))*-\\\\})*-\\\\}/,\\n    string: {\\n      pattern: /\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"|''(?:[^']|'(?!')|'''|''\\\\$\\\\{)*''(?!'|\\\\$)/,\\n      greedy: true,\\n      inside: {\\n        interpolation: {\\n          pattern: /\\\\$\\\\{[^{}]*\\\\}/,\\n          inside: {\\n            expression: {\\n              pattern: /(^\\\\$\\\\{)[\\\\s\\\\S]+(?=\\\\}$)/,\\n              lookbehind: true,\\n              alias: 'language-dhall',\\n              inside: null // see blow\\n\\n            },\\n            punctuation: /\\\\$\\\\{|\\\\}/\\n          }\\n        }\\n      }\\n    },\\n    label: {\\n      pattern: /`[^`]*`/,\\n      greedy: true\\n    },\\n    url: {\\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\\n      pattern: /\\\\bhttps?:\\\\/\\\\/[\\\\w.:%!$&'*+;=@~-]+(?:\\\\/[\\\\w.:%!$&'*+;=@~-]*)*(?:\\\\?[/?\\\\w.:%!$&'*+;=@~-]*)?/,\\n      greedy: true\\n    },\\n    env: {\\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\\n      pattern: /\\\\benv:(?:(?!\\\\d)\\\\w+|\\\"(?:[^\\\"\\\\\\\\=]|\\\\\\\\.)*\\\")/,\\n      greedy: true,\\n      inside: {\\n        function: /^env/,\\n        operator: /^:/,\\n        variable: /[\\\\s\\\\S]+/\\n      }\\n    },\\n    hash: {\\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\\n      pattern: /\\\\bsha256:[\\\\da-fA-F]{64}\\\\b/,\\n      inside: {\\n        function: /sha256/,\\n        operator: /:/,\\n        number: /[\\\\da-fA-F]{64}/\\n      }\\n    },\\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\\n    keyword: /\\\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\\\b|\\\\u2200/,\\n    builtin: /\\\\b(?:None|Some)\\\\b/,\\n    boolean: /\\\\b(?:False|True)\\\\b/,\\n    number: /\\\\bNaN\\\\b|-?\\\\bInfinity\\\\b|[+-]?\\\\b(?:0x[\\\\da-fA-F]+|\\\\d+(?:\\\\.\\\\d+)?(?:e[+-]?\\\\d+)?)\\\\b/,\\n    operator: /\\\\/\\\\\\\\|\\\\/\\\\/\\\\\\\\\\\\\\\\|&&|\\\\|\\\\||===|[!=]=|\\\\/\\\\/|->|\\\\+\\\\+|::|[+*#@=:?<>|\\\\\\\\\\\\u2227\\\\u2a53\\\\u2261\\\\u2afd\\\\u03bb\\\\u2192]/,\\n    punctuation: /\\\\.\\\\.|[{}\\\\[\\\\](),./]/,\\n    // we'll just assume that every capital word left is a type name\\n    'class-name': /\\\\b[A-Z]\\\\w*\\\\b/\\n  };\\n  Prism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"dhall\",\"Prism\",\"languages\",\"comment\",\"string\",\"pattern\",\"greedy\",\"inside\",\"interpolation\",\"expression\",\"lookbehind\",\"alias\",\"punctuation\",\"label\",\"url\",\"env\",\"function\",\"operator\",\"variable\",\"hash\",\"number\",\"keyword\",\"builtin\",\"boolean\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]