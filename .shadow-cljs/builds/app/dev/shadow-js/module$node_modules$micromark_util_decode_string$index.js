["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-util-decode-string/index.js"],"~:js","shadow$provide.module$node_modules$micromark_util_decode_string$index=function(global,require,module,exports){function decode($0,$1,$2){return $1?$1:35===$2.charCodeAt(0)?($0=$2.charCodeAt(1),$0=120===$0||88===$0,(0,_micromarkUtilDecodeNumericCharacterReference.decodeNumericCharacterReference)($2.slice($0?2:1),$0?16:10)):(0,_decodeNamedCharacterReference.decodeNamedCharacterReference)($2)||$0}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.decodeString=function(value){return value.replace(characterEscapeOrReference,\ndecode)};var _decodeNamedCharacterReference=require(\"module$node_modules$decode_named_character_reference$index\"),_micromarkUtilDecodeNumericCharacterReference=require(\"module$node_modules$micromark_util_decode_numeric_character_reference$index\");const characterEscapeOrReference=/\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi}","~:source","shadow$provide[\"module$node_modules$micromark_util_decode_string$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeString = decodeString;\n\nvar _decodeNamedCharacterReference = require(\"decode-named-character-reference\");\n\nvar _micromarkUtilDecodeNumericCharacterReference = require(\"micromark-util-decode-numeric-character-reference\");\n\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nfunction decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  } // Reference.\n\n\n  const head = $2.charCodeAt(0);\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return (0, _micromarkUtilDecodeNumericCharacterReference.decodeNumericCharacterReference)($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n\n  return (0, _decodeNamedCharacterReference.decodeNamedCharacterReference)($2) || $0;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_decode_numeric_character_reference$index","~$shadow.js","~$module$node_modules$decode_named_character_reference$index"]],"~:properties",["^5",["__esModule","decodeString","value"]],"~:compiled-at",1676665867304,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_util_decode_string$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkCnHC,QAASA,OAAM,CAACC,EAAD,CAAKC,EAAL,CAASC,EAAT,CAAa,CAC1B,MAAID,GAAJ,CAESA,EAFT,CAQa,EAAb,GAFaC,EAAGC,CAAAA,UAAHC,CAAc,CAAdA,CAEb,EACQA,EAEC,CAFMF,EAAGC,CAAAA,UAAH,CAAc,CAAd,CAEN,CADDE,EACC,CADc,GACd,GADKD,EACL,EAD8B,EAC9B,GADqBA,EACrB,CAAA,GAAIE,6CAA8CC,CAAAA,+BAAlD,EAAmFL,EAAGM,CAAAA,KAAH,CAASH,EAAA,CAAM,CAAN,CAAU,CAAnB,CAAnF,CAA0GA,EAAA,CAAM,EAAN,CAAW,EAArH,CAHT,EAMO,GAAII,8BAA+BC,CAAAA,6BAAnC,EAAkER,EAAlE,CANP,EAMgFF,EAftD,CA/B5BW,MAAOC,CAAAA,cAAP,CAAsBd,OAAtB,CAA+B,YAA/B,CAA6C,CAC3Ce,MAAO,CAAA,CADoC,CAA7C,CAGAf,QAAQgB,CAAAA,YAAR,CAiBAA,QAAqB,CAACD,KAAD,CAAQ,CAC3B,MAAOA,MAAME,CAAAA,OAAN,CAAcC,0BAAd;AAA0CjB,MAA1C,CADoB,CAf7B,KAAIU,+BAAiCb,OAAA,CAAQ,4DAAR,CAArC,CAEIU,8CAAgDV,OAAA,CAAQ,6EAAR,CAEpD,OAAMoB,2BAA6B,mEAZgF;\",\n\"sources\":[\"node_modules/micromark-util-decode-string/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_util_decode_string$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.decodeString = decodeString;\\n\\nvar _decodeNamedCharacterReference = require(\\\"decode-named-character-reference\\\");\\n\\nvar _micromarkUtilDecodeNumericCharacterReference = require(\\\"micromark-util-decode-numeric-character-reference\\\");\\n\\nconst characterEscapeOrReference = /\\\\\\\\([!-/:-@[-`{-~])|&(#(?:\\\\d{1,7}|x[\\\\da-f]{1,6})|[\\\\da-z]{1,31});/gi;\\n/**\\n * Utility to decode markdown strings (which occur in places such as fenced\\n * code info strings, destinations, labels, and titles).\\n * The \\u201cstring\\u201d content type allows character escapes and -references.\\n * This decodes those.\\n *\\n * @param {string} value\\n * @returns {string}\\n */\\n\\nfunction decodeString(value) {\\n  return value.replace(characterEscapeOrReference, decode);\\n}\\n/**\\n * @param {string} $0\\n * @param {string} $1\\n * @param {string} $2\\n * @returns {string}\\n */\\n\\n\\nfunction decode($0, $1, $2) {\\n  if ($1) {\\n    // Escape.\\n    return $1;\\n  } // Reference.\\n\\n\\n  const head = $2.charCodeAt(0);\\n\\n  if (head === 35) {\\n    const head = $2.charCodeAt(1);\\n    const hex = head === 120 || head === 88;\\n    return (0, _micromarkUtilDecodeNumericCharacterReference.decodeNumericCharacterReference)($2.slice(hex ? 2 : 1), hex ? 16 : 10);\\n  }\\n\\n  return (0, _decodeNamedCharacterReference.decodeNamedCharacterReference)($2) || $0;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"decode\",\"$0\",\"$1\",\"$2\",\"charCodeAt\",\"head\",\"hex\",\"_micromarkUtilDecodeNumericCharacterReference\",\"decodeNumericCharacterReference\",\"slice\",\"_decodeNamedCharacterReference\",\"decodeNamedCharacterReference\",\"Object\",\"defineProperty\",\"value\",\"decodeString\",\"replace\",\"characterEscapeOrReference\"]\n}\n"]