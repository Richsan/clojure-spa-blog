["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/elm.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$elm=function(global,require,module,exports){function elm(Prism){Prism.languages.elm={comment:/--.*|\\{-[\\s\\S]*?-\\}/,char:{pattern:/'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+|u\\{[0-9a-fA-F]+\\}))'/,greedy:!0},string:[{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0},{pattern:/\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,greedy:!0}],\"import-statement\":{pattern:/(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,lookbehind:!0,inside:{keyword:/\\b(?:as|exposing|import)\\b/}},\nkeyword:/\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,builtin:/\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,number:/\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,operator:/\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,hvariable:/\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\nconstant:/\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,punctuation:/[{}[\\]|(),.:]/}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=elm;elm.displayName=\"elm\";elm.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$elm\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = elm;\n// @ts-nocheck\nelm.displayName = 'elm';\nelm.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction elm(Prism) {\n  Prism.languages.elm = {\n    comment: /--.*|\\{-[\\s\\S]*?-\\}/,\n    char: {\n      pattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+|u\\{[0-9a-fA-F]+\\}))'/,\n      greedy: true\n    },\n    string: [{\n      // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true\n    }, {\n      pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n      greedy: true\n    }],\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern: /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|exposing|import)\\b/\n      }\n    },\n    keyword: /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin: /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n    // decimal integers and floating point numbers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n    // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n    operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n    // In Elm, nearly everything is a variable, do not highlight these.\n    hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n    constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n    punctuation: /[{}[\\]|(),.:]/\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["punctuation","string","aliases","constant","operator","displayName","__esModule","elm","lookbehind","value","char","keyword","number","greedy","pattern","inside","hvariable","comment","builtin","default"]],"~:compiled-at",1676841365407,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$elm.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYnGC,QAASA,IAAG,CAACC,KAAD,CAAQ,CAClBA,KAAMC,CAAAA,SAAUF,CAAAA,GAAhB,CAAsB,CACpBG,QAAS,qBADW,CAEpBC,KAAM,CACJC,QAAS,yEADL,CAEJC,OAAQ,CAAA,CAFJ,CAFc,CAMpBC,OAAQ,CAAC,CAEPF,QAAS,gBAFF,CAGPC,OAAQ,CAAA,CAHD,CAAD,CAIL,CACDD,QAAS,uBADR,CAEDC,OAAQ,CAAA,CAFP,CAJK,CANY,CAcpB,mBAAoB,CAIlBD,QAAS,uGAJS,CAKlBG,WAAY,CAAA,CALM,CAMlBC,OAAQ,CACNC,QAAS,4BADH,CANU,CAdA;AAwBpBA,QAAS,iFAxBW,CA0BpBC,QAAS,yPA1BW,CA4BpBC,OAAQ,kDA5BY,CAoCpBC,SAAU,yDApCU,CAsCpBC,UAAW,6BAtCS;AAuCpBC,SAAU,6BAvCU,CAwCpBC,YAAa,eAxCO,CADJ,CATpBC,MAAOC,CAAAA,cAAP,CAAsBnB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CoB,MAAO,CAAA,CADoC,CAA7C,CAGApB,QAAQqB,CAAAA,OAAR,CAAkBpB,GAElBA,IAAIqB,CAAAA,WAAJ,CAAkB,KAClBrB,IAAIsB,CAAAA,OAAJ,CAAc,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/elm.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$elm\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = elm;\\n// @ts-nocheck\\nelm.displayName = 'elm';\\nelm.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction elm(Prism) {\\n  Prism.languages.elm = {\\n    comment: /--.*|\\\\{-[\\\\s\\\\S]*?-\\\\}/,\\n    char: {\\n      pattern: /'(?:[^\\\\\\\\'\\\\r\\\\n]|\\\\\\\\(?:[abfnrtv\\\\\\\\']|\\\\d+|x[0-9a-fA-F]+|u\\\\{[0-9a-fA-F]+\\\\}))'/,\\n      greedy: true\\n    },\\n    string: [{\\n      // Multiline strings are wrapped in triple \\\". Quotes may appear unescaped.\\n      pattern: /\\\"\\\"\\\"[\\\\s\\\\S]*?\\\"\\\"\\\"/,\\n      greedy: true\\n    }, {\\n      pattern: /\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\n]|\\\\\\\\.)*\\\"/,\\n      greedy: true\\n    }],\\n    'import-statement': {\\n      // The imported or hidden names are not included in this import\\n      // statement. This is because we want to highlight those exactly like\\n      // we do for the names in the program.\\n      pattern: /(^[\\\\t ]*)import\\\\s+[A-Z]\\\\w*(?:\\\\.[A-Z]\\\\w*)*(?:\\\\s+as\\\\s+(?:[A-Z]\\\\w*)(?:\\\\.[A-Z]\\\\w*)*)?(?:\\\\s+exposing\\\\s+)?/m,\\n      lookbehind: true,\\n      inside: {\\n        keyword: /\\\\b(?:as|exposing|import)\\\\b/\\n      }\\n    },\\n    keyword: /\\\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\\\b/,\\n    // These are builtin variables only. Constructors are highlighted later as a constant.\\n    builtin: /\\\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\\\b/,\\n    // decimal integers and floating point numbers | hexadecimal integers\\n    number: /\\\\b(?:\\\\d+(?:\\\\.\\\\d+)?(?:e[+-]?\\\\d+)?|0x[0-9a-f]+)\\\\b/i,\\n    // Most of this is needed because of the meaning of a single '.'.\\n    // If it stands alone freely, it is the function composition.\\n    // It may also be a separator between a module name and an identifier => no\\n    // operator. If it comes together with other special characters it is an\\n    // operator too.\\n    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\\n    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\\n    operator: /\\\\s\\\\.\\\\s|[+\\\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\\\-/*=$<>:&|^?%#@~!]/,\\n    // In Elm, nearly everything is a variable, do not highlight these.\\n    hvariable: /\\\\b(?:[A-Z]\\\\w*\\\\.)*[a-z]\\\\w*\\\\b/,\\n    constant: /\\\\b(?:[A-Z]\\\\w*\\\\.)*[A-Z]\\\\w*\\\\b/,\\n    punctuation: /[{}[\\\\]|(),.:]/\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"elm\",\"Prism\",\"languages\",\"comment\",\"char\",\"pattern\",\"greedy\",\"string\",\"lookbehind\",\"inside\",\"keyword\",\"builtin\",\"number\",\"operator\",\"hvariable\",\"constant\",\"punctuation\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]