["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/stringify-entities/lib/util/to-hexadecimal.js"],"~:js","shadow$provide.module$node_modules$stringify_entities$lib$util$to_hexadecimal=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.toHexadecimal=function(code,next,omit){code=\"\\x26#x\"+code.toString(16).toUpperCase();return omit&&next&&!/[\\dA-Fa-f]/.test(String.fromCharCode(next))?code:code+\";\"}}","~:source","shadow$provide[\"module$node_modules$stringify_entities$lib$util$to_hexadecimal\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHexadecimal = toHexadecimal;\n\n/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nfunction toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase();\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next)) ? value : value + ';';\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["toHexadecimal","__esModule","value"]],"~:compiled-at",1676686799589,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$stringify_entities$lib$util$to_hexadecimal.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAUAA,QAAsB,CAACC,IAAD,CAAOC,IAAP,CAAaC,IAAb,CAAmB,CACjCJ,IAAAA,CAAQ,QAARA,CAAgBE,IAAKG,CAAAA,QAAL,CAAc,EAAd,CAAkBC,CAAAA,WAAlB,EACtB,OAAOF,KAAA,EAAQD,IAAR,EAAgB,CAAC,YAAaI,CAAAA,IAAb,CAAkBC,MAAOC,CAAAA,YAAP,CAAoBN,IAApB,CAAlB,CAAjB,CAAgEH,IAAhE,CAAwEA,IAAxE,CAAgF,GAFhD,CAhBkF;\",\n\"sources\":[\"node_modules/stringify-entities/lib/util/to-hexadecimal.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$stringify_entities$lib$util$to_hexadecimal\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.toHexadecimal = toHexadecimal;\\n\\n/**\\n * Configurable ways to encode characters as hexadecimal references.\\n *\\n * @param {number} code\\n * @param {number} next\\n * @param {boolean|undefined} omit\\n * @returns {string}\\n */\\nfunction toHexadecimal(code, next, omit) {\\n  const value = '&#x' + code.toString(16).toUpperCase();\\n  return omit && next && !/[\\\\dA-Fa-f]/.test(String.fromCharCode(next)) ? value : value + ';';\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"toHexadecimal\",\"code\",\"next\",\"omit\",\"toString\",\"toUpperCase\",\"test\",\"String\",\"fromCharCode\"]\n}\n"]