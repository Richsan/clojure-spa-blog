["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/c.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$c=function(global,require,module,exports){function c(Prism){Prism.register(_clike.default);Prism.languages.c=Prism.languages.extend(\"clike\",{comment:{pattern:/\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,greedy:!0},string:{pattern:/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,greedy:!0},\"class-name\":{pattern:/(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,lookbehind:!0},keyword:/\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\nfunction:/\\b[a-z_]\\w*(?=\\s*\\()/i,number:/(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,operator:/>>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/});Prism.languages.insertBefore(\"c\",\"string\",{char:{pattern:/'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,greedy:!0}});Prism.languages.insertBefore(\"c\",\"string\",{macro:{pattern:/(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,greedy:!0,\nalias:\"property\",inside:{string:[{pattern:/^(#\\s*include\\s*)<[^>]+>/,lookbehind:!0},Prism.languages.c.string],char:Prism.languages.c[\"char\"],comment:Prism.languages.c.comment,\"macro-name\":[{pattern:/(^#\\s*define\\s+)\\w+\\b(?!\\()/i,lookbehind:!0},{pattern:/(^#\\s*define\\s+)\\w+\\b(?=\\()/i,lookbehind:!0,alias:\"function\"}],directive:{pattern:/^(#\\s*)[a-z]+/,lookbehind:!0,alias:\"keyword\"},\"directive-hash\":/^#/,punctuation:/##|\\\\(?=[\\r\\n])/,expression:{pattern:/\\S[\\s\\S]*/,inside:Prism.languages.c}}}});Prism.languages.insertBefore(\"c\",\n\"function\",{constant:/\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/});delete Prism.languages.c[\"boolean\"]}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=c;var _clike=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require(\"module$node_modules$refractor$lang$clike\"));c.displayName=\"c\";c.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$c\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = c;\n\nvar _clike = _interopRequireDefault(require(\"./clike.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-nocheck\nc.displayName = 'c';\nc.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction c(Prism) {\n  Prism.register(_clike.default);\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    string: {\n      // https://en.cppreference.com/w/c/language/string_literal\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    char: {\n      // https://en.cppreference.com/w/c/language/character_constant\n      pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [{\n          // highlight the path of the include statement as a string\n          pattern: /^(#\\s*include\\s*)<[^>]+>/,\n          lookbehind: true\n        }, Prism.languages.c['string']],\n        char: Prism.languages.c['char'],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [{\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n          lookbehind: true\n        }, {\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n          lookbehind: true,\n          alias: 'function'\n        }],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('c', 'function', {\n    // highlight predefined macros as constants\n    constant: /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n  });\n  delete Prism.languages.c['boolean'];\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$refractor$lang$clike"]],"~:properties",["^5",["punctuation","string","aliases","constant","directive","operator","displayName","__esModule","expression","lookbehind","value","char","keyword","number","greedy","function","pattern","inside","alias","comment","default","c","macro"]],"~:compiled-at",1676841365355,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$c.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBjGC,QAASA,EAAC,CAACC,KAAD,CAAQ,CAChBA,KAAMC,CAAAA,QAAN,CAAeC,MAAOC,CAAAA,OAAtB,CACAH,MAAMI,CAAAA,SAAUL,CAAAA,CAAhB,CAAoBC,KAAMI,CAAAA,SAAUC,CAAAA,MAAhB,CAAuB,OAAvB,CAAgC,CAClDC,QAAS,CACPC,QAAS,qEADF,CAEPC,OAAQ,CAAA,CAFD,CADyC,CAKlDC,OAAQ,CAENF,QAAS,qCAFH,CAGNC,OAAQ,CAAA,CAHF,CAL0C,CAUlD,aAAc,CACZD,QAAS,kFADG,CAEZG,WAAY,CAAA,CAFA,CAVoC,CAclDC,QAAS,mVAdyC;AAelDC,SAAU,uBAfwC,CAgBlDC,OAAQ,mHAhB0C,CAiBlDC,SAAU,iDAjBwC,CAAhC,CAmBpBd,MAAMI,CAAAA,SAAUW,CAAAA,YAAhB,CAA6B,GAA7B,CAAkC,QAAlC,CAA4C,CAC1CC,KAAM,CAEJT,QAAS,0CAFL,CAGJC,OAAQ,CAAA,CAHJ,CADoC,CAA5C,CAOAR,MAAMI,CAAAA,SAAUW,CAAAA,YAAhB,CAA6B,GAA7B,CAAkC,QAAlC,CAA4C,CAC1CE,MAAO,CAGLV,QAAS,2FAHJ,CAILG,WAAY,CAAA,CAJP,CAKLF,OAAQ,CAAA,CALH;AAMLU,MAAO,UANF,CAOLC,OAAQ,CACNV,OAAQ,CAAC,CAEPF,QAAS,0BAFF,CAGPG,WAAY,CAAA,CAHL,CAAD,CAILV,KAAMI,CAAAA,SAAUL,CAAAA,CAAhB,CAAA,MAJK,CADF,CAMNiB,KAAMhB,KAAMI,CAAAA,SAAUL,CAAAA,CAAhB,CAAkB,MAAlB,CANA,CAONO,QAASN,KAAMI,CAAAA,SAAUL,CAAAA,CAAhB,CAAA,OAPH,CAQN,aAAc,CAAC,CACbQ,QAAS,8BADI,CAEbG,WAAY,CAAA,CAFC,CAAD,CAGX,CACDH,QAAS,8BADR,CAEDG,WAAY,CAAA,CAFX,CAGDQ,MAAO,UAHN,CAHW,CARR,CAiBNE,UAAW,CACTb,QAAS,eADA,CAETG,WAAY,CAAA,CAFH,CAGTQ,MAAO,SAHE,CAjBL,CAsBN,iBAAkB,IAtBZ,CAuBNG,YAAa,iBAvBP,CAwBNC,WAAY,CACVf,QAAS,WADC,CAEVY,OAAQnB,KAAMI,CAAAA,SAAUL,CAAAA,CAFd,CAxBN,CAPH,CADmC,CAA5C,CAuCAC,MAAMI,CAAAA,SAAUW,CAAAA,YAAhB,CAA6B,GAA7B;AAAkC,UAAlC,CAA8C,CAE5CQ,SAAU,4HAFkC,CAA9C,CAIA,QAAOvB,KAAMI,CAAAA,SAAUL,CAAAA,CAAhB,CAAkB,SAAlB,CAvES,CAdlByB,MAAOC,CAAAA,cAAP,CAAsB3B,OAAtB,CAA+B,YAA/B,CAA6C,CAC3C4B,MAAO,CAAA,CADoC,CAA7C,CAGA5B,QAAQK,CAAAA,OAAR,CAAkBJ,CAElB,KAAIG,OAEJyB,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEzB,QAASyB,GAAX,CAAvC,CAFxB,CAAuBhC,OAAA,CAAQ,0CAAR,CAAvB,CAKbG,EAAE+B,CAAAA,WAAF,CAAgB,GAChB/B,EAAEgC,CAAAA,OAAF,CAAY,EAdqF;\",\n\"sources\":[\"node_modules/refractor/lang/c.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$c\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = c;\\n\\nvar _clike = _interopRequireDefault(require(\\\"./clike.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// @ts-nocheck\\nc.displayName = 'c';\\nc.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction c(Prism) {\\n  Prism.register(_clike.default);\\n  Prism.languages.c = Prism.languages.extend('clike', {\\n    comment: {\\n      pattern: /\\\\/\\\\/(?:[^\\\\r\\\\n\\\\\\\\]|\\\\\\\\(?:\\\\r\\\\n?|\\\\n|(?![\\\\r\\\\n])))*|\\\\/\\\\*[\\\\s\\\\S]*?(?:\\\\*\\\\/|$)/,\\n      greedy: true\\n    },\\n    string: {\\n      // https://en.cppreference.com/w/c/language/string_literal\\n      pattern: /\\\"(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|[^\\\"\\\\\\\\\\\\r\\\\n])*\\\"/,\\n      greedy: true\\n    },\\n    'class-name': {\\n      pattern: /(\\\\b(?:enum|struct)\\\\s+(?:__attribute__\\\\s*\\\\(\\\\([\\\\s\\\\S]*?\\\\)\\\\)\\\\s*)?)\\\\w+|\\\\b[a-z]\\\\w*_t\\\\b/,\\n      lookbehind: true\\n    },\\n    keyword: /\\\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\\\b/,\\n    function: /\\\\b[a-z_]\\\\w*(?=\\\\s*\\\\()/i,\\n    number: /(?:\\\\b0x(?:[\\\\da-f]+(?:\\\\.[\\\\da-f]*)?|\\\\.[\\\\da-f]+)(?:p[+-]?\\\\d+)?|(?:\\\\b\\\\d+(?:\\\\.\\\\d*)?|\\\\B\\\\.\\\\d+)(?:e[+-]?\\\\d+)?)[ful]{0,4}/i,\\n    operator: />>=?|<<=?|->|([-+&|:])\\\\1|[?:~]|[-+*/%&|^!=<>]=?/\\n  });\\n  Prism.languages.insertBefore('c', 'string', {\\n    char: {\\n      // https://en.cppreference.com/w/c/language/character_constant\\n      pattern: /'(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|[^'\\\\\\\\\\\\r\\\\n]){0,32}'/,\\n      greedy: true\\n    }\\n  });\\n  Prism.languages.insertBefore('c', 'string', {\\n    macro: {\\n      // allow for multiline macro definitions\\n      // spaces after the # character compile fine with gcc\\n      pattern: /(^[\\\\t ]*)#\\\\s*[a-z](?:[^\\\\r\\\\n\\\\\\\\/]|\\\\/(?!\\\\*)|\\\\/\\\\*(?:[^*]|\\\\*(?!\\\\/))*\\\\*\\\\/|\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S]))*/im,\\n      lookbehind: true,\\n      greedy: true,\\n      alias: 'property',\\n      inside: {\\n        string: [{\\n          // highlight the path of the include statement as a string\\n          pattern: /^(#\\\\s*include\\\\s*)<[^>]+>/,\\n          lookbehind: true\\n        }, Prism.languages.c['string']],\\n        char: Prism.languages.c['char'],\\n        comment: Prism.languages.c['comment'],\\n        'macro-name': [{\\n          pattern: /(^#\\\\s*define\\\\s+)\\\\w+\\\\b(?!\\\\()/i,\\n          lookbehind: true\\n        }, {\\n          pattern: /(^#\\\\s*define\\\\s+)\\\\w+\\\\b(?=\\\\()/i,\\n          lookbehind: true,\\n          alias: 'function'\\n        }],\\n        // highlight macro directives as keywords\\n        directive: {\\n          pattern: /^(#\\\\s*)[a-z]+/,\\n          lookbehind: true,\\n          alias: 'keyword'\\n        },\\n        'directive-hash': /^#/,\\n        punctuation: /##|\\\\\\\\(?=[\\\\r\\\\n])/,\\n        expression: {\\n          pattern: /\\\\S[\\\\s\\\\S]*/,\\n          inside: Prism.languages.c\\n        }\\n      }\\n    }\\n  });\\n  Prism.languages.insertBefore('c', 'function', {\\n    // highlight predefined macros as constants\\n    constant: /\\\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\\\b/\\n  });\\n  delete Prism.languages.c['boolean'];\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"c\",\"Prism\",\"register\",\"_clike\",\"default\",\"languages\",\"extend\",\"comment\",\"pattern\",\"greedy\",\"string\",\"lookbehind\",\"keyword\",\"function\",\"number\",\"operator\",\"insertBefore\",\"char\",\"macro\",\"alias\",\"inside\",\"directive\",\"punctuation\",\"expression\",\"constant\",\"Object\",\"defineProperty\",\"value\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"displayName\",\"aliases\"]\n}\n"]