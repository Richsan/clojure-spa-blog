["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/nim.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$nim=function(global,require,module,exports){function nim(Prism){Prism.languages.nim={comment:{pattern:/#.*/,greedy:!0},string:{pattern:/(?:\\b(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")/,greedy:!0},char:{pattern:/'(?:\\\\(?:\\d+|x[\\da-fA-F]{0,2}|.)|[^'])'/,greedy:!0},function:{pattern:/(?:(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,greedy:!0,inside:{operator:/\\*$/}},identifier:{pattern:/`[^`\\r\\n]+`/,\ngreedy:!0,inside:{punctuation:/`/}},number:/\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,keyword:/\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,operator:{pattern:/(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\\b)/m,\nlookbehind:!0},punctuation:/[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=nim;nim.displayName=\"nim\";nim.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$nim\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = nim;\n// @ts-nocheck\nnim.displayName = 'nim';\nnim.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction nim(Prism) {\n  Prism.languages.nim = {\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    string: {\n      // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\n      pattern: /(?:\\b(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")/,\n      greedy: true\n    },\n    char: {\n      // Character literals are handled specifically to prevent issues with numeric type suffixes\n      pattern: /'(?:\\\\(?:\\d+|x[\\da-fA-F]{0,2}|.)|[^'])'/,\n      greedy: true\n    },\n    function: {\n      pattern: /(?:(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        operator: /\\*$/\n      }\n    },\n    // We don't want to highlight operators (and anything really) inside backticks\n    identifier: {\n      pattern: /`[^`\\r\\n]+`/,\n      greedy: true,\n      inside: {\n        punctuation: /`/\n      }\n    },\n    // The negative look ahead prevents wrong highlighting of the .. operator\n    number: /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n    keyword: /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n    operator: {\n      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\n      // but allow the slice operator .. to take precedence over them\n      // One can define his own operators in Nim so all combination of operators might be an operator.\n      pattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\\b)/m,\n      lookbehind: true\n    },\n    punctuation: /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["punctuation","string","aliases","nim","operator","displayName","__esModule","lookbehind","value","char","identifier","keyword","number","greedy","function","pattern","inside","comment","default"]],"~:compiled-at",1676841365441,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$nim.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYnGC,QAASA,IAAG,CAACC,KAAD,CAAQ,CAClBA,KAAMC,CAAAA,SAAUF,CAAAA,GAAhB,CAAsB,CACpBG,QAAS,CACPC,QAAS,KADF,CAEPC,OAAQ,CAAA,CAFD,CADW,CAKpBC,OAAQ,CAENF,QAAS,gGAFH,CAGNC,OAAQ,CAAA,CAHF,CALY,CAUpBE,KAAM,CAEJH,QAAS,yCAFL,CAGJC,OAAQ,CAAA,CAHJ,CAVc,CAepBG,SAAU,CACRJ,QAAS,mFADD,CAERC,OAAQ,CAAA,CAFA,CAGRI,OAAQ,CACNC,SAAU,KADJ,CAHA,CAfU,CAuBpBC,WAAY,CACVP,QAAS,aADC;AAEVC,OAAQ,CAAA,CAFE,CAGVI,OAAQ,CACNG,YAAa,GADP,CAHE,CAvBQ,CA+BpBC,OAAQ,gGA/BY,CAgCpBC,QAAS,6VAhCW,CAiCpBJ,SAAU,CAIRN,QAAS,iJAJD;AAKRW,WAAY,CAAA,CALJ,CAjCU,CAwCpBH,YAAa,iCAxCO,CADJ,CATpBI,MAAOC,CAAAA,cAAP,CAAsBlB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CmB,MAAO,CAAA,CADoC,CAA7C,CAGAnB,QAAQoB,CAAAA,OAAR,CAAkBnB,GAElBA,IAAIoB,CAAAA,WAAJ,CAAkB,KAClBpB,IAAIqB,CAAAA,OAAJ,CAAc,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/nim.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$nim\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = nim;\\n// @ts-nocheck\\nnim.displayName = 'nim';\\nnim.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction nim(Prism) {\\n  Prism.languages.nim = {\\n    comment: {\\n      pattern: /#.*/,\\n      greedy: true\\n    },\\n    string: {\\n      // Double-quoted strings can be prefixed by an identifier (Generalized raw string literals)\\n      pattern: /(?:\\\\b(?!\\\\d)(?:\\\\w|\\\\\\\\x[89a-fA-F][0-9a-fA-F])+)?(?:\\\"\\\"\\\"[\\\\s\\\\S]*?\\\"\\\"\\\"(?!\\\")|\\\"(?:\\\\\\\\[\\\\s\\\\S]|\\\"\\\"|[^\\\"\\\\\\\\])*\\\")/,\\n      greedy: true\\n    },\\n    char: {\\n      // Character literals are handled specifically to prevent issues with numeric type suffixes\\n      pattern: /'(?:\\\\\\\\(?:\\\\d+|x[\\\\da-fA-F]{0,2}|.)|[^'])'/,\\n      greedy: true\\n    },\\n    function: {\\n      pattern: /(?:(?!\\\\d)(?:\\\\w|\\\\\\\\x[89a-fA-F][0-9a-fA-F])+|`[^`\\\\r\\\\n]+`)\\\\*?(?:\\\\[[^\\\\]]+\\\\])?(?=\\\\s*\\\\()/,\\n      greedy: true,\\n      inside: {\\n        operator: /\\\\*$/\\n      }\\n    },\\n    // We don't want to highlight operators (and anything really) inside backticks\\n    identifier: {\\n      pattern: /`[^`\\\\r\\\\n]+`/,\\n      greedy: true,\\n      inside: {\\n        punctuation: /`/\\n      }\\n    },\\n    // The negative look ahead prevents wrong highlighting of the .. operator\\n    number: /\\\\b(?:0[xXoObB][\\\\da-fA-F_]+|\\\\d[\\\\d_]*(?:(?!\\\\.\\\\.)\\\\.[\\\\d_]*)?(?:[eE][+-]?\\\\d[\\\\d_]*)?)(?:'?[iuf]\\\\d*)?/,\\n    keyword: /\\\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\\\b/,\\n    operator: {\\n      // Look behind and look ahead prevent wrong highlighting of punctuations [. .] {. .} (. .)\\n      // but allow the slice operator .. to take precedence over them\\n      // One can define his own operators in Nim so all combination of operators might be an operator.\\n      pattern: /(^|[({\\\\[](?=\\\\.\\\\.)|(?![({\\\\[]\\\\.).)(?:(?:[=+\\\\-*\\\\/<>@$~&%|!?^:\\\\\\\\]|\\\\.\\\\.|\\\\.(?![)}\\\\]]))+|\\\\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\\\\b)/m,\\n      lookbehind: true\\n    },\\n    punctuation: /[({\\\\[]\\\\.|\\\\.[)}\\\\]]|[`(){}\\\\[\\\\],:]/\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"nim\",\"Prism\",\"languages\",\"comment\",\"pattern\",\"greedy\",\"string\",\"char\",\"function\",\"inside\",\"operator\",\"identifier\",\"punctuation\",\"number\",\"keyword\",\"lookbehind\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]