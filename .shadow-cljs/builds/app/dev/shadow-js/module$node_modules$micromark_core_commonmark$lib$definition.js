["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-core-commonmark/lib/definition.js"],"~:js","shadow$provide.module$node_modules$micromark_core_commonmark$lib$definition=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.definition=void 0;var _micromarkFactoryDestination=require(\"module$node_modules$micromark_factory_destination$index\"),_micromarkFactoryLabel=require(\"module$node_modules$micromark_factory_label$index\"),_micromarkFactorySpace=require(\"module$node_modules$micromark_factory_space$index\"),_micromarkFactoryTitle=require(\"module$node_modules$micromark_factory_title$index\"),\n_micromarkFactoryWhitespace=require(\"module$node_modules$micromark_factory_whitespace$index\"),_micromarkUtilNormalizeIdentifier=require(\"module$node_modules$micromark_util_normalize_identifier$index\"),_micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\");exports.definition={name:\"definition\",tokenize:function(effects,ok,nok){function labelAfter(code){identifier=(0,_micromarkUtilNormalizeIdentifier.normalizeIdentifier)(self.sliceSerialize(self.events[self.events.length-\n1][1]).slice(1,-1));return 58===code?(effects.enter(\"definitionMarker\"),effects.consume(code),effects.exit(\"definitionMarker\"),(0,_micromarkFactoryWhitespace.factoryWhitespace)(effects,(0,_micromarkFactoryDestination.factoryDestination)(effects,effects.attempt(titleConstruct,(0,_micromarkFactorySpace.factorySpace)(effects,after,\"whitespace\"),(0,_micromarkFactorySpace.factorySpace)(effects,after,\"whitespace\")),nok,\"definitionDestination\",\"definitionDestinationLiteral\",\"definitionDestinationLiteralMarker\",\n\"definitionDestinationRaw\",\"definitionDestinationString\"))):nok(code)}function after(code){return null===code||(0,_micromarkUtilCharacter.markdownLineEnding)(code)?(effects.exit(\"definition\"),self.parser.defined.includes(identifier)||self.parser.defined.push(identifier),ok(code)):nok(code)}const self=this;let identifier;return function(code){effects.enter(\"definition\");return _micromarkFactoryLabel.factoryLabel.call(self,effects,labelAfter,nok,\"definitionLabel\",\"definitionLabelMarker\",\"definitionLabelString\")(code)}}};\nconst titleConstruct={tokenize:function(effects,ok,nok){function before(code){return 34===code||39===code||40===code?(0,_micromarkFactoryTitle.factoryTitle)(effects,(0,_micromarkFactorySpace.factorySpace)(effects,after,\"whitespace\"),nok,\"definitionTitle\",\"definitionTitleMarker\",\"definitionTitleString\")(code):nok(code)}function after(code){return null===code||(0,_micromarkUtilCharacter.markdownLineEnding)(code)?ok(code):nok(code)}return function(code){return(0,_micromarkUtilCharacter.markdownLineEndingOrSpace)(code)?\n(0,_micromarkFactoryWhitespace.factoryWhitespace)(effects,before)(code):nok(code)}},partial:!0}}","~:source","shadow$provide[\"module$node_modules$micromark_core_commonmark$lib$definition\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.definition = void 0;\n\nvar _micromarkFactoryDestination = require(\"micromark-factory-destination\");\n\nvar _micromarkFactoryLabel = require(\"micromark-factory-label\");\n\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\n\nvar _micromarkFactoryTitle = require(\"micromark-factory-title\");\n\nvar _micromarkFactoryWhitespace = require(\"micromark-factory-whitespace\");\n\nvar _micromarkUtilNormalizeIdentifier = require(\"micromark-util-normalize-identifier\");\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\n/** @type {Construct} */\nconst definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n/** @type {Construct} */\n\nexports.definition = definition;\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n\n  let identifier;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition');\n    return _micromarkFactoryLabel.factoryLabel.call(self, effects, labelAfter, nok, 'definitionLabel', 'definitionLabelMarker', 'definitionLabelString')(code);\n  }\n  /** @type {State} */\n\n\n  function labelAfter(code) {\n    identifier = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker'); // Note: blank lines canâ€™t exist in content.\n\n      return (0, _micromarkFactoryWhitespace.factoryWhitespace)(effects, (0, _micromarkFactoryDestination.factoryDestination)(effects, effects.attempt(titleConstruct, (0, _micromarkFactorySpace.factorySpace)(effects, after, 'whitespace'), (0, _micromarkFactorySpace.factorySpace)(effects, after, 'whitespace')), nok, 'definitionDestination', 'definitionDestinationLiteral', 'definitionDestinationLiteralMarker', 'definitionDestinationRaw', 'definitionDestinationString'));\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function after(code) {\n    if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\n      effects.exit('definition');\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier);\n      }\n\n      return ok(code);\n    }\n\n    return nok(code);\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    return (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code) ? (0, _micromarkFactoryWhitespace.factoryWhitespace)(effects, before)(code) : nok(code);\n  }\n  /** @type {State} */\n\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return (0, _micromarkFactoryTitle.factoryTitle)(effects, (0, _micromarkFactorySpace.factorySpace)(effects, after, 'whitespace'), nok, 'definitionTitle', 'definitionTitleMarker', 'definitionTitleString')(code);\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function after(code) {\n    return code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code) ? ok(code) : nok(code);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_normalize_identifier$index","~$module$node_modules$micromark_util_character$index","~$shadow.js","~$module$node_modules$micromark_factory_destination$index","~$module$node_modules$micromark_factory_title$index","~$module$node_modules$micromark_factory_whitespace$index","~$module$node_modules$micromark_factory_space$index","~$module$node_modules$micromark_factory_label$index"]],"~:properties",["^5",["partial","tokenize","__esModule","name","value","definition"]],"~:compiled-at",1676665867287,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_core_commonmark$lib$definition.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/micromark-core-commonmark/lib/definition.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_core_commonmark$lib$definition\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.definition = void 0;\\n\\nvar _micromarkFactoryDestination = require(\\\"micromark-factory-destination\\\");\\n\\nvar _micromarkFactoryLabel = require(\\\"micromark-factory-label\\\");\\n\\nvar _micromarkFactorySpace = require(\\\"micromark-factory-space\\\");\\n\\nvar _micromarkFactoryTitle = require(\\\"micromark-factory-title\\\");\\n\\nvar _micromarkFactoryWhitespace = require(\\\"micromark-factory-whitespace\\\");\\n\\nvar _micromarkUtilNormalizeIdentifier = require(\\\"micromark-util-normalize-identifier\\\");\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Construct} Construct\\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\\n * @typedef {import('micromark-util-types').State} State\\n */\\n\\n/** @type {Construct} */\\nconst definition = {\\n  name: 'definition',\\n  tokenize: tokenizeDefinition\\n};\\n/** @type {Construct} */\\n\\nexports.definition = definition;\\nconst titleConstruct = {\\n  tokenize: tokenizeTitle,\\n  partial: true\\n};\\n/** @type {Tokenizer} */\\n\\nfunction tokenizeDefinition(effects, ok, nok) {\\n  const self = this;\\n  /** @type {string} */\\n\\n  let identifier;\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    effects.enter('definition');\\n    return _micromarkFactoryLabel.factoryLabel.call(self, effects, labelAfter, nok, 'definitionLabel', 'definitionLabelMarker', 'definitionLabelString')(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function labelAfter(code) {\\n    identifier = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\\n\\n    if (code === 58) {\\n      effects.enter('definitionMarker');\\n      effects.consume(code);\\n      effects.exit('definitionMarker'); // Note: blank lines can\\u2019t exist in content.\\n\\n      return (0, _micromarkFactoryWhitespace.factoryWhitespace)(effects, (0, _micromarkFactoryDestination.factoryDestination)(effects, effects.attempt(titleConstruct, (0, _micromarkFactorySpace.factorySpace)(effects, after, 'whitespace'), (0, _micromarkFactorySpace.factorySpace)(effects, after, 'whitespace')), nok, 'definitionDestination', 'definitionDestinationLiteral', 'definitionDestinationLiteralMarker', 'definitionDestinationRaw', 'definitionDestinationString'));\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function after(code) {\\n    if (code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code)) {\\n      effects.exit('definition');\\n\\n      if (!self.parser.defined.includes(identifier)) {\\n        self.parser.defined.push(identifier);\\n      }\\n\\n      return ok(code);\\n    }\\n\\n    return nok(code);\\n  }\\n}\\n/** @type {Tokenizer} */\\n\\n\\nfunction tokenizeTitle(effects, ok, nok) {\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    return (0, _micromarkUtilCharacter.markdownLineEndingOrSpace)(code) ? (0, _micromarkFactoryWhitespace.factoryWhitespace)(effects, before)(code) : nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function before(code) {\\n    if (code === 34 || code === 39 || code === 40) {\\n      return (0, _micromarkFactoryTitle.factoryTitle)(effects, (0, _micromarkFactorySpace.factorySpace)(effects, after, 'whitespace'), nok, 'definitionTitle', 'definitionTitleMarker', 'definitionTitleString')(code);\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function after(code) {\\n    return code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code) ? ok(code) : nok(code);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"definition\",\"_micromarkFactoryDestination\",\"_micromarkFactoryLabel\",\"_micromarkFactorySpace\",\"_micromarkFactoryTitle\",\"_micromarkFactoryWhitespace\",\"_micromarkUtilNormalizeIdentifier\",\"_micromarkUtilCharacter\",\"name\",\"tokenize\",\"tokenizeDefinition\",\"effects\",\"ok\",\"nok\",\"labelAfter\",\"code\",\"identifier\",\"normalizeIdentifier\",\"self\",\"sliceSerialize\",\"events\",\"length\",\"slice\",\"enter\",\"consume\",\"exit\",\"factoryWhitespace\",\"factoryDestination\",\"attempt\",\"titleConstruct\",\"factorySpace\",\"after\",\"markdownLineEnding\",\"parser\",\"defined\",\"includes\",\"push\",\"start\",\"factoryLabel\",\"call\",\"tokenizeTitle\",\"before\",\"factoryTitle\",\"markdownLineEndingOrSpace\",\"partial\"]\n}\n"]