["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@uiw/copy-to-clipboard/dist/copy-to-clipboard.umd.js"],"~:js","shadow$provide.module$node_modules$$uiw$copy_to_clipboard$dist$copy_to_clipboard_umd=function(global$jscomp$0,require,module,exports){(function(global,factory){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=factory():\"function\"===typeof define&&define.amd?define(factory):(global=\"undefined\"!==typeof globalThis?globalThis:global||self,global.copyTextToClipboard=factory())})(this,function(){return function(text,cb){const el=document.createElement(\"textarea\");el.value=text;el.setAttribute(\"readonly\",\n\"\");el.style={position:\"absolute\",left:\"-9999px\"};document.body.appendChild(el);text=0<document.getSelection().rangeCount?document.getSelection().getRangeAt(0):!1;el.select();let isCopy=!1;try{isCopy=!!document.execCommand(\"copy\")}catch(err){isCopy=!1}document.body.removeChild(el);text&&document.getSelection&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(text));cb&&cb(isCopy)}})}","~:source","shadow$provide[\"module$node_modules$$uiw$copy_to_clipboard$dist$copy_to_clipboard_umd\"] = function(global,require,module,exports) {\n/*!\n * @uiw/copy-to-clipboard v1.0.12\n * Copy to clipboard.\n * \n * Copyright (c) 2021 Kenny Wang\n * https://github.com/uiwjs/copy-to-clipboard.git\n * \n * Licensed under the MIT license.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.copyTextToClipboard = factory());\n}(this, (function () { 'use strict';\n\n  /**\n   * *** This styling is an extra step which is likely not required. ***\n   * https://github.com/w3c/clipboard-apis/blob/master/explainer.adoc#writing-to-the-clipboard\n   * \n   * Why is it here? To ensure:\n   * \n   * 1. the element is able to have focus and selection.\n   * 2. if element was to flash render it has minimal visual impact.\n   * 3. less flakyness with selection and copying which **might** occur if\n   *     the textarea element is not visible.\n   *\n   *   The likelihood is the element won't even render, not even a flash,\n   *   so some of these are just precautions. However in IE the element\n   *   is visible whilst the popup box asking the user for permission for\n   *   the web page to copy to the clipboard.\n   *  \n   *   Place in top-left corner of screen regardless of scroll position.\n   *\n   * @typedef CopyTextToClipboard\n   * @property {(text: string, method?: (isCopy: boolean) => void) => void} void\n   * @returns {void}\n   * \n   * @param {string} text \n   * @param {CopyTextToClipboard} cb \n   */\n  function copyTextToClipboard(text, cb) {\n    const el = document.createElement('textarea');\n    el.value = text;\n    el.setAttribute('readonly', '');\n    el.style = {\n      position: 'absolute',\n      left: '-9999px',\n    };\n    document.body.appendChild(el);\n    const selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\n    el.select();\n    let isCopy = false;\n    try {\n      const successful = document.execCommand('copy');\n      isCopy = !!successful;\n    } catch (err) {\n      isCopy = false;\n    }\n    document.body.removeChild(el);\n    if (selected && document.getSelection) {\n      document.getSelection().removeAllRanges();\n      document.getSelection().addRange(selected);\n    }\n    cb && cb(isCopy);\n  }\n\n  return copyTextToClipboard;\n\n})));\n//# sourceMappingURL=copy-to-clipboard.umd.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["position","style","value","copyTextToClipboard","left"]],"~:compiled-at",1676841365504,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$uiw$copy_to_clipboard$dist$copy_to_clipboard_umd.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,eAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAWjI,SAAS,CAACH,MAAD,CAASI,OAAT,CAAkB,CACP,QAAnB,GAAA,MAAOD,QAAP,EAAiD,WAAjD,GAA+B,MAAOD,OAAtC,CAA+DA,MAAOC,CAAAA,OAAtE,CAAgFC,OAAA,EAAhF,CACkB,UAAlB,GAAA,MAAOC,OAAP,EAAgCA,MAAOC,CAAAA,GAAvC,CAA6CD,MAAA,CAAOD,OAAP,CAA7C,EACCJ,MAAA,CAA+B,WAAtB,GAAA,MAAOO,WAAP,CAAoCA,UAApC,CAAiDP,MAAjD,EAA2DQ,IAApE,CAA0ER,MAAOS,CAAAA,mBAAjF,CAAuGL,OAAA,EADxG,CAF0B,CAA3B,CAAA,CAIC,IAJD,CAIQ,QAAS,EAAG,CAqDnB,MA1BAK,SAA4B,CAACC,IAAD,CAAOC,EAAP,CAAW,CACrC,MAAMC,GAAKC,QAASC,CAAAA,aAAT,CAAuB,UAAvB,CACXF,GAAGG,CAAAA,KAAH,CAAWL,IACXE,GAAGI,CAAAA,YAAH,CAAgB,UAAhB;AAA4B,EAA5B,CACAJ,GAAGK,CAAAA,KAAH,CAAW,CACTC,SAAU,UADD,CAETC,KAAM,SAFG,CAIXN,SAASO,CAAAA,IAAKC,CAAAA,WAAd,CAA0BT,EAA1B,CACMU,KAAAA,CAAgD,CAArC,CAAAT,QAASU,CAAAA,YAAT,EAAwBC,CAAAA,UAAxB,CAAyCX,QAASU,CAAAA,YAAT,EAAwBE,CAAAA,UAAxB,CAAmC,CAAnC,CAAzC,CAAiF,CAAA,CAClGb,GAAGc,CAAAA,MAAH,EACA,KAAIC,OAAS,CAAA,CACb,IAAI,CAEFA,MAAA,CAAS,CAAC,CADSd,QAASe,CAAAA,WAATC,CAAqB,MAArBA,CADjB,CAGF,MAAOC,GAAP,CAAY,CACZH,MAAA,CAAS,CAAA,CADG,CAGdd,QAASO,CAAAA,IAAKW,CAAAA,WAAd,CAA0BnB,EAA1B,CACIU,KAAJ,EAAgBT,QAASU,CAAAA,YAAzB,GACEV,QAASU,CAAAA,YAAT,EAAwBS,CAAAA,eAAxB,EACA,CAAAnB,QAASU,CAAAA,YAAT,EAAwBU,CAAAA,QAAxB,CAAiCX,IAAjC,CAFF,CAIAX,GAAA,EAAMA,EAAA,CAAGgB,MAAH,CAvB+B,CA3BpB,CAJpB,CAXiI;\",\n\"sources\":[\"node_modules/@uiw/copy-to-clipboard/dist/copy-to-clipboard.umd.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$uiw$copy_to_clipboard$dist$copy_to_clipboard_umd\\\"] = function(global,require,module,exports) {\\n/*!\\n * @uiw/copy-to-clipboard v1.0.12\\n * Copy to clipboard.\\n * \\n * Copyright (c) 2021 Kenny Wang\\n * https://github.com/uiwjs/copy-to-clipboard.git\\n * \\n * Licensed under the MIT license.\\n */\\n\\n(function (global, factory) {\\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\\n  typeof define === 'function' && define.amd ? define(factory) :\\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.copyTextToClipboard = factory());\\n}(this, (function () { 'use strict';\\n\\n  /**\\n   * *** This styling is an extra step which is likely not required. ***\\n   * https://github.com/w3c/clipboard-apis/blob/master/explainer.adoc#writing-to-the-clipboard\\n   * \\n   * Why is it here? To ensure:\\n   * \\n   * 1. the element is able to have focus and selection.\\n   * 2. if element was to flash render it has minimal visual impact.\\n   * 3. less flakyness with selection and copying which **might** occur if\\n   *     the textarea element is not visible.\\n   *\\n   *   The likelihood is the element won't even render, not even a flash,\\n   *   so some of these are just precautions. However in IE the element\\n   *   is visible whilst the popup box asking the user for permission for\\n   *   the web page to copy to the clipboard.\\n   *  \\n   *   Place in top-left corner of screen regardless of scroll position.\\n   *\\n   * @typedef CopyTextToClipboard\\n   * @property {(text: string, method?: (isCopy: boolean) => void) => void} void\\n   * @returns {void}\\n   * \\n   * @param {string} text \\n   * @param {CopyTextToClipboard} cb \\n   */\\n  function copyTextToClipboard(text, cb) {\\n    const el = document.createElement('textarea');\\n    el.value = text;\\n    el.setAttribute('readonly', '');\\n    el.style = {\\n      position: 'absolute',\\n      left: '-9999px',\\n    };\\n    document.body.appendChild(el);\\n    const selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\\n    el.select();\\n    let isCopy = false;\\n    try {\\n      const successful = document.execCommand('copy');\\n      isCopy = !!successful;\\n    } catch (err) {\\n      isCopy = false;\\n    }\\n    document.body.removeChild(el);\\n    if (selected && document.getSelection) {\\n      document.getSelection().removeAllRanges();\\n      document.getSelection().addRange(selected);\\n    }\\n    cb && cb(isCopy);\\n  }\\n\\n  return copyTextToClipboard;\\n\\n})));\\n//# sourceMappingURL=copy-to-clipboard.umd.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"globalThis\",\"self\",\"copyTextToClipboard\",\"text\",\"cb\",\"el\",\"document\",\"createElement\",\"value\",\"setAttribute\",\"style\",\"position\",\"left\",\"body\",\"appendChild\",\"selected\",\"getSelection\",\"rangeCount\",\"getRangeAt\",\"select\",\"isCopy\",\"execCommand\",\"successful\",\"err\",\"removeChild\",\"removeAllRanges\",\"addRange\"]\n}\n"]