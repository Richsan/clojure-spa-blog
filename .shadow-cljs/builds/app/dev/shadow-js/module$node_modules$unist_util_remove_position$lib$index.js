["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/unist-util-remove-position/lib/index.js"],"~:js","shadow$provide.module$node_modules$unist_util_remove_position$lib$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.removePosition=function(tree,options){const force=\"boolean\"===typeof options?options:options?options.force:!1;(0,_unistUtilVisit.visit)(tree,function(node){force?delete node.position:node.position=void 0});return tree};var _unistUtilVisit=require(\"module$node_modules$unist_util_visit$index\")}","~:source","shadow$provide[\"module$node_modules$unist_util_remove_position$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removePosition = removePosition;\n\nvar _unistUtilVisit = require(\"unist-util-visit\");\n\n/**\n * @typedef {import('unist').Node} Node\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [force=false]\n *   Whether to use `delete` to remove `position` fields.\n *\n *   The default is to set them to `undefined`.\n */\n\n/**\n * Remove the `position` field from a tree.\n *\n * @template {Node} Tree\n *   Node type.\n * @param {Tree} tree\n *   Tree to clean.\n * @param {Options | boolean | null | undefined} [options]\n *   Configuration.\n * @returns {Tree}\n *   The given, modified, `tree`.\n */\n// To do: next major: return `void`.\n// To do: remove `force` shortcut, replace with options.\nfunction removePosition(tree, options) {\n  const force = typeof options === 'boolean' ? options : options ? options.force : false;\n  (0, _unistUtilVisit.visit)(tree, remove);\n  return tree;\n  /**\n   * @param {Node} node\n   */\n\n  function remove(node) {\n    if (force) {\n      delete node.position;\n    } else {\n      node.position = undefined;\n    }\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$unist_util_visit$index","~$shadow.js"]],"~:properties",["^5",["__esModule","position","value","removePosition"]],"~:compiled-at",1676667638367,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$unist_util_remove_position$lib$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,cAAR,CA+BAA,QAAuB,CAACC,IAAD,CAAOC,OAAP,CAAgB,CACrC,MAAMC,MAA2B,SAAnB,GAAA,MAAOD,QAAP,CAA+BA,OAA/B,CAAyCA,OAAA,CAAUA,OAAQC,CAAAA,KAAlB,CAA0B,CAAA,CACjF,IAAIC,eAAgBC,CAAAA,KAApB,EAA2BJ,IAA3B,CAMAK,QAAe,CAACC,IAAD,CAAO,CAChBJ,KAAJ,CACE,OAAOI,IAAKC,CAAAA,QADd,CAGED,IAAKC,CAAAA,QAHP,CAGkBC,IAAAA,EAJE,CANtB,CACA,OAAOR,KAH8B,CA7BvC,KAAIG,gBAAkBV,OAAA,CAAQ,4CAAR,CAR+F;\",\n\"sources\":[\"node_modules/unist-util-remove-position/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$unist_util_remove_position$lib$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.removePosition = removePosition;\\n\\nvar _unistUtilVisit = require(\\\"unist-util-visit\\\");\\n\\n/**\\n * @typedef {import('unist').Node} Node\\n */\\n\\n/**\\n * @typedef Options\\n *   Configuration.\\n * @property {boolean | null | undefined} [force=false]\\n *   Whether to use `delete` to remove `position` fields.\\n *\\n *   The default is to set them to `undefined`.\\n */\\n\\n/**\\n * Remove the `position` field from a tree.\\n *\\n * @template {Node} Tree\\n *   Node type.\\n * @param {Tree} tree\\n *   Tree to clean.\\n * @param {Options | boolean | null | undefined} [options]\\n *   Configuration.\\n * @returns {Tree}\\n *   The given, modified, `tree`.\\n */\\n// To do: next major: return `void`.\\n// To do: remove `force` shortcut, replace with options.\\nfunction removePosition(tree, options) {\\n  const force = typeof options === 'boolean' ? options : options ? options.force : false;\\n  (0, _unistUtilVisit.visit)(tree, remove);\\n  return tree;\\n  /**\\n   * @param {Node} node\\n   */\\n\\n  function remove(node) {\\n    if (force) {\\n      delete node.position;\\n    } else {\\n      node.position = undefined;\\n    }\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"removePosition\",\"tree\",\"options\",\"force\",\"_unistUtilVisit\",\"visit\",\"remove\",\"node\",\"position\",\"undefined\"]\n}\n"]