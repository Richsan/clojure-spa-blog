["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/concurnas.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$concurnas=function(global,require,module,exports){function concurnas(Prism){Prism.languages.concurnas={comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\/\\/.*)/,lookbehind:!0,greedy:!0},langext:{pattern:/\\b\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,greedy:!0,inside:{\"class-name\":/^\\w+/,string:{pattern:/(^\\s*\\|\\|)[\\s\\S]+(?=\\|\\|$)/,lookbehind:!0},punctuation:/\\|\\|/}},function:{pattern:/((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,lookbehind:!0},keyword:/\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,\nboolean:/\\b(?:false|true)\\b/,number:/\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,punctuation:/[{}[\\];(),.:]/,operator:/<==|>==|=>|->|<-|<>|&==|&<>|\\?:?|\\.\\?|\\+\\+|--|[-+*/=<>]=?|[!^~]|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,annotation:{pattern:/@(?:\\w+:)?(?:\\w+|\\[[^\\]]+\\])?/,alias:\"builtin\"}};Prism.languages.insertBefore(\"concurnas\",\"langext\",{\"regex-literal\":{pattern:/\\br(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,\ninside:{interpolation:{pattern:/((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,lookbehind:!0,inside:Prism.languages.concurnas},regex:/[\\s\\S]+/}},\"string-literal\":{pattern:/(?:\\B|\\bs)(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,lookbehind:!0,inside:Prism.languages.concurnas},string:/[\\s\\S]+/}}});Prism.languages.conc=Prism.languages.concurnas}Object.defineProperty(exports,\"__esModule\",{value:!0});\nexports.default=concurnas;concurnas.displayName=\"concurnas\";concurnas.aliases=[\"conc\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$concurnas\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = concurnas;\n// @ts-nocheck\nconcurnas.displayName = 'concurnas';\nconcurnas.aliases = ['conc'];\n/** @type {import('../core.js').Syntax} */\n\nfunction concurnas(Prism) {\n  Prism.languages.concurnas = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    langext: {\n      pattern: /\\b\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,\n      greedy: true,\n      inside: {\n        'class-name': /^\\w+/,\n        string: {\n          pattern: /(^\\s*\\|\\|)[\\s\\S]+(?=\\|\\|$)/,\n          lookbehind: true\n        },\n        punctuation: /\\|\\|/\n      }\n    },\n    function: {\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,\n    punctuation: /[{}[\\];(),.:]/,\n    operator: /<==|>==|=>|->|<-|<>|&==|&<>|\\?:?|\\.\\?|\\+\\+|--|[-+*/=<>]=?|[!^~]|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,\n    annotation: {\n      pattern: /@(?:\\w+:)?(?:\\w+|\\[[^\\]]+\\])?/,\n      alias: 'builtin'\n    }\n  };\n  Prism.languages.insertBefore('concurnas', 'langext', {\n    'regex-literal': {\n      pattern: /\\br(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: Prism.languages.concurnas\n        },\n        regex: /[\\s\\S]+/\n      }\n    },\n    'string-literal': {\n      pattern: /(?:\\B|\\bs)(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: Prism.languages.concurnas\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n  Prism.languages.conc = Prism.languages.concurnas;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","punctuation","string","aliases","concurnas","operator","displayName","__esModule","regex","lookbehind","conc","value","keyword","number","greedy","function","langext","pattern","inside","annotation","alias","comment","interpolation","default"]],"~:compiled-at",1676841365400,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$concurnas.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,4CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYzGC,QAASA,UAAS,CAACC,KAAD,CAAQ,CACxBA,KAAMC,CAAAA,SAAUF,CAAAA,SAAhB,CAA4B,CAC1BG,QAAS,CACPC,QAAS,4CADF,CAEPC,WAAY,CAAA,CAFL,CAGPC,OAAQ,CAAA,CAHD,CADiB,CAM1BC,QAAS,CACPH,QAAS,0BADF,CAEPE,OAAQ,CAAA,CAFD,CAGPE,OAAQ,CACN,aAAc,MADR,CAENC,OAAQ,CACNL,QAAS,4BADH,CAENC,WAAY,CAAA,CAFN,CAFF,CAMNK,YAAa,MANP,CAHD,CANiB,CAkB1BC,SAAU,CACRP,QAAS,0CADD,CAERC,WAAY,CAAA,CAFJ,CAlBgB,CAsB1BO,QAAS,yjBAtBiB;AAuB1BC,QAAS,oBAvBiB,CAwB1BC,OAAQ,2HAxBkB,CAyB1BJ,YAAa,eAzBa,CA0B1BK,SAAU,qHA1BgB,CA2B1BC,WAAY,CACVZ,QAAS,+BADC,CAEVa,MAAO,SAFG,CA3Bc,CAgC5BhB,MAAMC,CAAAA,SAAUgB,CAAAA,YAAhB,CAA6B,WAA7B,CAA0C,SAA1C,CAAqD,CACnD,gBAAiB,CACfd,QAAS,oCADM,CAEfE,OAAQ,CAAA,CAFO;AAGfE,OAAQ,CACNW,cAAe,CACbf,QAAS,gEADI,CAEbC,WAAY,CAAA,CAFC,CAGbG,OAAQP,KAAMC,CAAAA,SAAUF,CAAAA,SAHX,CADT,CAMNoB,MAAO,SAND,CAHO,CADkC,CAanD,iBAAkB,CAChBhB,QAAS,2CADO,CAEhBE,OAAQ,CAAA,CAFQ,CAGhBE,OAAQ,CACNW,cAAe,CACbf,QAAS,gEADI,CAEbC,WAAY,CAAA,CAFC,CAGbG,OAAQP,KAAMC,CAAAA,SAAUF,CAAAA,SAHX,CADT,CAMNS,OAAQ,SANF,CAHQ,CAbiC,CAArD,CA0BAR,MAAMC,CAAAA,SAAUmB,CAAAA,IAAhB,CAAuBpB,KAAMC,CAAAA,SAAUF,CAAAA,SA3Df,CAT1BsB,MAAOC,CAAAA,cAAP,CAAsBxB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CyB,MAAO,CAAA,CADoC,CAA7C,CAGAzB;OAAQ0B,CAAAA,OAAR,CAAkBzB,SAElBA,UAAU0B,CAAAA,WAAV,CAAwB,WACxB1B,UAAU2B,CAAAA,OAAV,CAAoB,CAAC,MAAD,CATqF;\",\n\"sources\":[\"node_modules/refractor/lang/concurnas.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$concurnas\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = concurnas;\\n// @ts-nocheck\\nconcurnas.displayName = 'concurnas';\\nconcurnas.aliases = ['conc'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction concurnas(Prism) {\\n  Prism.languages.concurnas = {\\n    comment: {\\n      pattern: /(^|[^\\\\\\\\])(?:\\\\/\\\\*[\\\\s\\\\S]*?(?:\\\\*\\\\/|$)|\\\\/\\\\/.*)/,\\n      lookbehind: true,\\n      greedy: true\\n    },\\n    langext: {\\n      pattern: /\\\\b\\\\w+\\\\s*\\\\|\\\\|[\\\\s\\\\S]+?\\\\|\\\\|/,\\n      greedy: true,\\n      inside: {\\n        'class-name': /^\\\\w+/,\\n        string: {\\n          pattern: /(^\\\\s*\\\\|\\\\|)[\\\\s\\\\S]+(?=\\\\|\\\\|$)/,\\n          lookbehind: true\\n        },\\n        punctuation: /\\\\|\\\\|/\\n      }\\n    },\\n    function: {\\n      pattern: /((?:^|\\\\s)def[ \\\\t]+)[a-zA-Z_]\\\\w*(?=\\\\s*\\\\()/,\\n      lookbehind: true\\n    },\\n    keyword: /\\\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\\\b/,\\n    boolean: /\\\\b(?:false|true)\\\\b/,\\n    number: /\\\\b0b[01][01_]*L?\\\\b|\\\\b0x(?:[\\\\da-f_]*\\\\.)?[\\\\da-f_p+-]+\\\\b|(?:\\\\b\\\\d[\\\\d_]*(?:\\\\.[\\\\d_]*)?|\\\\B\\\\.\\\\d[\\\\d_]*)(?:e[+-]?\\\\d[\\\\d_]*)?[dfls]?/i,\\n    punctuation: /[{}[\\\\];(),.:]/,\\n    operator: /<==|>==|=>|->|<-|<>|&==|&<>|\\\\?:?|\\\\.\\\\?|\\\\+\\\\+|--|[-+*/=<>]=?|[!^~]|\\\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\\\b=?/,\\n    annotation: {\\n      pattern: /@(?:\\\\w+:)?(?:\\\\w+|\\\\[[^\\\\]]+\\\\])?/,\\n      alias: 'builtin'\\n    }\\n  };\\n  Prism.languages.insertBefore('concurnas', 'langext', {\\n    'regex-literal': {\\n      pattern: /\\\\br(\\\"|')(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1/,\\n      greedy: true,\\n      inside: {\\n        interpolation: {\\n          pattern: /((?:^|[^\\\\\\\\])(?:\\\\\\\\{2})*)\\\\{(?:[^{}]|\\\\{(?:[^{}]|\\\\{[^}]*\\\\})*\\\\})+\\\\}/,\\n          lookbehind: true,\\n          inside: Prism.languages.concurnas\\n        },\\n        regex: /[\\\\s\\\\S]+/\\n      }\\n    },\\n    'string-literal': {\\n      pattern: /(?:\\\\B|\\\\bs)(\\\"|')(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1/,\\n      greedy: true,\\n      inside: {\\n        interpolation: {\\n          pattern: /((?:^|[^\\\\\\\\])(?:\\\\\\\\{2})*)\\\\{(?:[^{}]|\\\\{(?:[^{}]|\\\\{[^}]*\\\\})*\\\\})+\\\\}/,\\n          lookbehind: true,\\n          inside: Prism.languages.concurnas\\n        },\\n        string: /[\\\\s\\\\S]+/\\n      }\\n    }\\n  });\\n  Prism.languages.conc = Prism.languages.concurnas;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"concurnas\",\"Prism\",\"languages\",\"comment\",\"pattern\",\"lookbehind\",\"greedy\",\"langext\",\"inside\",\"string\",\"punctuation\",\"function\",\"keyword\",\"boolean\",\"number\",\"operator\",\"annotation\",\"alias\",\"insertBefore\",\"interpolation\",\"regex\",\"conc\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]