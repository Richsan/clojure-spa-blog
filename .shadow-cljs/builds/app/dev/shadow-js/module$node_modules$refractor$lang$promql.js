["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/promql.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$promql=function(global,require,module,exports){function promql(Prism){var vectorMatching=\"on ignoring group_right group_left by without\".split(\" \"),keywords=\"sum min max avg group stddev stdvar count count_values bottomk topk quantile\".split(\" \").concat(vectorMatching,[\"offset\"]);Prism.languages.promql={comment:{pattern:/(^[ \\t]*)#.*/m,lookbehind:!0},\"vector-match\":{pattern:new RegExp(\"((?:\"+vectorMatching.join(\"|\")+\")\\\\s*)\\\\([^)]*\\\\)\"),lookbehind:!0,\ninside:{\"label-key\":{pattern:/\\b[^,]+\\b/,alias:\"attr-name\"},punctuation:/[(),]/}},\"context-labels\":{pattern:/\\{[^{}]*\\}/,inside:{\"label-key\":{pattern:/\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,alias:\"attr-name\"},\"label-value\":{pattern:/([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0,alias:\"attr-value\"},punctuation:/\\{|\\}|=~?|![=~]|,/}},\"context-range\":[{pattern:/\\[[\\w\\s:]+\\]/,inside:{punctuation:/\\[|\\]|:/,\"range-duration\":{pattern:/\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,alias:\"number\"}}},{pattern:/(\\boffset\\s+)\\w+/,lookbehind:!0,\ninside:{\"range-duration\":{pattern:/\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,alias:\"number\"}}}],keyword:new RegExp(\"\\\\b(?:\"+keywords.join(\"|\")+\")\\\\b\",\"i\"),function:/\\b[a-z_]\\w*(?=\\s*\\()/i,number:/[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,operator:/[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,punctuation:/[{};()`,.[\\]]/}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=promql;promql.displayName=\"promql\";promql.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$promql\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = promql;\n// @ts-nocheck\npromql.displayName = 'promql';\npromql.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction promql(Prism) {\n  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\n  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\n  ;\n\n  (function (Prism) {\n    // PromQL Aggregation Operators\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\n    var aggregations = ['sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile']; // PromQL vector matching + the by and without clauses\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\n\n    var vectorMatching = ['on', 'ignoring', 'group_right', 'group_left', 'by', 'without']; // PromQL offset modifier\n    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\n\n    var offsetModifier = ['offset'];\n    var keywords = aggregations.concat(vectorMatching, offsetModifier);\n    Prism.languages.promql = {\n      comment: {\n        pattern: /(^[ \\t]*)#.*/m,\n        lookbehind: true\n      },\n      'vector-match': {\n        // Match the comma-separated label lists inside vector matching:\n        pattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\s*)\\\\([^)]*\\\\)'),\n        lookbehind: true,\n        inside: {\n          'label-key': {\n            pattern: /\\b[^,]+\\b/,\n            alias: 'attr-name'\n          },\n          punctuation: /[(),]/\n        }\n      },\n      'context-labels': {\n        pattern: /\\{[^{}]*\\}/,\n        inside: {\n          'label-key': {\n            pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n            alias: 'attr-name'\n          },\n          'label-value': {\n            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n            greedy: true,\n            alias: 'attr-value'\n          },\n          punctuation: /\\{|\\}|=~?|![=~]|,/\n        }\n      },\n      'context-range': [{\n        pattern: /\\[[\\w\\s:]+\\]/,\n        // [1m]\n        inside: {\n          punctuation: /\\[|\\]|:/,\n          'range-duration': {\n            pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n            alias: 'number'\n          }\n        }\n      }, {\n        pattern: /(\\boffset\\s+)\\w+/,\n        // offset 1m\n        lookbehind: true,\n        inside: {\n          'range-duration': {\n            pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n            alias: 'number'\n          }\n        }\n      }],\n      keyword: new RegExp('\\\\b(?:' + keywords.join('|') + ')\\\\b', 'i'),\n      function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n      number: /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n      operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n      punctuation: /[{};()`,.[\\]]/\n    };\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["punctuation","aliases","operator","displayName","__esModule","lookbehind","value","promql","keyword","number","greedy","function","pattern","inside","alias","comment","default"]],"~:compiled-at",1676841365447,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$promql.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYtGC,QAASA,OAAM,CAACC,KAAD,CAAQ,CAWnB,IAAIC,eAAiB,+CAAA,CAAA,KAAA,CAAA,GAAA,CAArB,CAIIC,SAPeC,8EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAOSC,CAAAA,MAAb,CAAoBH,cAApB,CADMI,CAAC,QAADA,CACN,CA4DdL,MA3DKM,CAAAA,SAAUP,CAAAA,MAAhB,CAAyB,CACvBQ,QAAS,CACPC,QAAS,eADF,CAEPC,WAAY,CAAA,CAFL,CADc,CAKvB,eAAgB,CAEdD,QAAS,IAAIE,MAAJ,CAAW,MAAX,CAAoBT,cAAeU,CAAAA,IAAf,CAAoB,GAApB,CAApB,CAA+C,mBAA/C,CAFK,CAGdF,WAAY,CAAA,CAHE;AAIdG,OAAQ,CACN,YAAa,CACXJ,QAAS,WADE,CAEXK,MAAO,WAFI,CADP,CAKNC,YAAa,OALP,CAJM,CALO,CAiBvB,iBAAkB,CAChBN,QAAS,YADO,CAEhBI,OAAQ,CACN,YAAa,CACXJ,QAAS,+BADE,CAEXK,MAAO,WAFI,CADP,CAKN,cAAe,CACbL,QAAS,oCADI,CAEbO,OAAQ,CAAA,CAFK,CAGbF,MAAO,YAHM,CALT,CAUNC,YAAa,mBAVP,CAFQ,CAjBK,CAgCvB,gBAAiB,CAAC,CAChBN,QAAS,cADO,CAGhBI,OAAQ,CACNE,YAAa,SADP,CAEN,iBAAkB,CAChBN,QAAS,8BADO,CAEhBK,MAAO,QAFS,CAFZ,CAHQ,CAAD,CAUd,CACDL,QAAS,kBADR,CAGDC,WAAY,CAAA,CAHX;AAIDG,OAAQ,CACN,iBAAkB,CAChBJ,QAAS,8BADO,CAEhBK,MAAO,QAFS,CADZ,CAJP,CAVc,CAhCM,CAqDvBG,QAAS,IAAIN,MAAJ,CAAW,QAAX,CAAsBR,QAASS,CAAAA,IAAT,CAAc,GAAd,CAAtB,CAA2C,MAA3C,CAAmD,GAAnD,CArDc,CAsDvBM,SAAU,uBAtDa,CAuDvBC,OAAQ,mFAvDe,CAwDvBC,SAAU,kDAxDa,CAyDvBL,YAAa,eAzDU,CAhBN,CATvBM,MAAOC,CAAAA,cAAP,CAAsBvB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CwB,MAAO,CAAA,CADoC,CAA7C,CAGAxB,QAAQyB,CAAAA,OAAR,CAAkBxB,MAElBA,OAAOyB,CAAAA,WAAP,CAAqB,QACrBzB,OAAO0B,CAAAA,OAAP,CAAiB,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/promql.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$promql\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = promql;\\n// @ts-nocheck\\npromql.displayName = 'promql';\\npromql.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction promql(Prism) {\\n  // Thanks to: https://github.com/prometheus-community/monaco-promql/blob/master/src/promql/promql.ts\\n  // As well as: https://kausal.co/blog/slate-prism-add-new-syntax-promql/\\n  ;\\n\\n  (function (Prism) {\\n    // PromQL Aggregation Operators\\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators)\\n    var aggregations = ['sum', 'min', 'max', 'avg', 'group', 'stddev', 'stdvar', 'count', 'count_values', 'bottomk', 'topk', 'quantile']; // PromQL vector matching + the by and without clauses\\n    // (https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching)\\n\\n    var vectorMatching = ['on', 'ignoring', 'group_right', 'group_left', 'by', 'without']; // PromQL offset modifier\\n    // (https://prometheus.io/docs/prometheus/latest/querying/basics/#offset-modifier)\\n\\n    var offsetModifier = ['offset'];\\n    var keywords = aggregations.concat(vectorMatching, offsetModifier);\\n    Prism.languages.promql = {\\n      comment: {\\n        pattern: /(^[ \\\\t]*)#.*/m,\\n        lookbehind: true\\n      },\\n      'vector-match': {\\n        // Match the comma-separated label lists inside vector matching:\\n        pattern: new RegExp('((?:' + vectorMatching.join('|') + ')\\\\\\\\s*)\\\\\\\\([^)]*\\\\\\\\)'),\\n        lookbehind: true,\\n        inside: {\\n          'label-key': {\\n            pattern: /\\\\b[^,]+\\\\b/,\\n            alias: 'attr-name'\\n          },\\n          punctuation: /[(),]/\\n        }\\n      },\\n      'context-labels': {\\n        pattern: /\\\\{[^{}]*\\\\}/,\\n        inside: {\\n          'label-key': {\\n            pattern: /\\\\b[a-z_]\\\\w*(?=\\\\s*(?:=|![=~]))/,\\n            alias: 'attr-name'\\n          },\\n          'label-value': {\\n            pattern: /([\\\"'`])(?:\\\\\\\\[\\\\s\\\\S]|(?!\\\\1)[^\\\\\\\\])*\\\\1/,\\n            greedy: true,\\n            alias: 'attr-value'\\n          },\\n          punctuation: /\\\\{|\\\\}|=~?|![=~]|,/\\n        }\\n      },\\n      'context-range': [{\\n        pattern: /\\\\[[\\\\w\\\\s:]+\\\\]/,\\n        // [1m]\\n        inside: {\\n          punctuation: /\\\\[|\\\\]|:/,\\n          'range-duration': {\\n            pattern: /\\\\b(?:\\\\d+(?:[smhdwy]|ms))+\\\\b/i,\\n            alias: 'number'\\n          }\\n        }\\n      }, {\\n        pattern: /(\\\\boffset\\\\s+)\\\\w+/,\\n        // offset 1m\\n        lookbehind: true,\\n        inside: {\\n          'range-duration': {\\n            pattern: /\\\\b(?:\\\\d+(?:[smhdwy]|ms))+\\\\b/i,\\n            alias: 'number'\\n          }\\n        }\\n      }],\\n      keyword: new RegExp('\\\\\\\\b(?:' + keywords.join('|') + ')\\\\\\\\b', 'i'),\\n      function: /\\\\b[a-z_]\\\\w*(?=\\\\s*\\\\()/i,\\n      number: /[-+]?(?:(?:\\\\b\\\\d+(?:\\\\.\\\\d+)?|\\\\B\\\\.\\\\d+)(?:e[-+]?\\\\d+)?\\\\b|\\\\b(?:0x[0-9a-f]+|nan|inf)\\\\b)/i,\\n      operator: /[\\\\^*/%+-]|==|!=|<=|<|>=|>|\\\\b(?:and|or|unless)\\\\b/i,\\n      punctuation: /[{};()`,.[\\\\]]/\\n    };\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"promql\",\"Prism\",\"vectorMatching\",\"keywords\",\"aggregations\",\"concat\",\"offsetModifier\",\"languages\",\"comment\",\"pattern\",\"lookbehind\",\"RegExp\",\"join\",\"inside\",\"alias\",\"punctuation\",\"greedy\",\"keyword\",\"function\",\"number\",\"operator\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]