["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/parse5/lib/tokenizer/index.js"],"~:js","shadow$provide.module$node_modules$parse5$lib$tokenizer$index=function(global,require,module,exports){function isWhitespace(cp){return cp===$.SPACE||cp===$.LINE_FEED||cp===$.TABULATION||cp===$.FORM_FEED}function isAsciiDigit(cp){return cp>=$.DIGIT_0&&cp<=$.DIGIT_9}function isAsciiUpper(cp){return cp>=$.LATIN_CAPITAL_A&&cp<=$.LATIN_CAPITAL_Z}function isAsciiLower(cp){return cp>=$.LATIN_SMALL_A&&cp<=$.LATIN_SMALL_Z}function isAsciiLetter(cp){return isAsciiLower(cp)||isAsciiUpper(cp)}function isAsciiAlphaNumeric(cp){return isAsciiLetter(cp)||\nisAsciiDigit(cp)}function toChar(cp){if(65535>=cp)return String.fromCharCode(cp);cp-=65536;return String.fromCharCode(cp>>>10&1023|55296)+String.fromCharCode(56320|cp&1023)}function toAsciiLowerChar(cp){return String.fromCharCode(cp+32)}function findNamedEntityTreeBranch(nodeIx,cp){const branchCount=neTree[++nodeIx];nodeIx=++nodeIx;let hi=nodeIx+branchCount-1;for(;nodeIx<=hi;){const mid=nodeIx+hi>>>1,midCp=neTree[mid];if(midCp<cp)nodeIx=mid+1;else if(midCp>cp)hi=mid-1;else return neTree[mid+branchCount]}return-1}\nconst Preprocessor=require(\"module$node_modules$parse5$lib$tokenizer$preprocessor\"),unicode=require(\"module$node_modules$parse5$lib$common$unicode\"),neTree=require(\"module$node_modules$parse5$lib$tokenizer$named_entity_data\"),ERR=require(\"module$node_modules$parse5$lib$common$error_codes\"),$=unicode.CODE_POINTS,$$=unicode.CODE_POINT_SEQUENCES,C1_CONTROLS_REFERENCE_REPLACEMENTS={128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,\n146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376};class Tokenizer{constructor(){this.preprocessor=new Preprocessor;this.tokenQueue=[];this.allowCDATA=!1;this.state=\"DATA_STATE\";this.returnState=\"\";this.charRefCode=-1;this.tempBuff=[];this.lastStartTagName=\"\";this.consumedAfterSnapshot=-1;this.active=!1;this.currentAttr=this.currentToken=this.currentCharacterToken=null}_err(){}_errOnNextCodePoint(err){this._consume();this._err(err);this._unconsume()}getNextToken(){for(;!this.tokenQueue.length&&\nthis.active;){this.consumedAfterSnapshot=0;const cp=this._consume();if(!this._ensureHibernation())this[this.state](cp)}return this.tokenQueue.shift()}write(chunk,isLastChunk){this.active=!0;this.preprocessor.write(chunk,isLastChunk)}insertHtmlAtCurrentPos(chunk){this.active=!0;this.preprocessor.insertHtmlAtCurrentPos(chunk)}_ensureHibernation(){if(this.preprocessor.endOfChunkHit){for(;0<this.consumedAfterSnapshot;this.consumedAfterSnapshot--)this.preprocessor.retreat();this.active=!1;this.tokenQueue.push({type:Tokenizer.HIBERNATION_TOKEN});\nreturn!0}return!1}_consume(){this.consumedAfterSnapshot++;return this.preprocessor.advance()}_unconsume(){this.consumedAfterSnapshot--;this.preprocessor.retreat()}_reconsumeInState(state){this.state=state;this._unconsume()}_consumeSequenceIfMatch(pattern,startCp,caseSensitive){let consumedCount=0,isMatch=!0;const patternLength=pattern.length;let patternPos=0,patternCp;for(;patternPos<patternLength;patternPos++){0<patternPos&&(startCp=this._consume(),consumedCount++);if(startCp===$.EOF){isMatch=!1;\nbreak}patternCp=pattern[patternPos];if(startCp!==patternCp&&(caseSensitive||startCp!==patternCp+32)){isMatch=!1;break}}if(!isMatch)for(;consumedCount--;)this._unconsume();return isMatch}_isTempBufferEqualToScriptString(){if(this.tempBuff.length!==$$.SCRIPT_STRING.length)return!1;for(let i=0;i<this.tempBuff.length;i++)if(this.tempBuff[i]!==$$.SCRIPT_STRING[i])return!1;return!0}_createStartTagToken(){this.currentToken={type:Tokenizer.START_TAG_TOKEN,tagName:\"\",selfClosing:!1,ackSelfClosing:!1,attrs:[]}}_createEndTagToken(){this.currentToken=\n{type:Tokenizer.END_TAG_TOKEN,tagName:\"\",selfClosing:!1,attrs:[]}}_createCommentToken(){this.currentToken={type:Tokenizer.COMMENT_TOKEN,data:\"\"}}_createDoctypeToken(initialName){this.currentToken={type:Tokenizer.DOCTYPE_TOKEN,name:initialName,forceQuirks:!1,publicId:null,systemId:null}}_createCharacterToken(type,ch){this.currentCharacterToken={type,chars:ch}}_createEOFToken(){this.currentToken={type:Tokenizer.EOF_TOKEN}}_createAttr(attrNameFirstCh){this.currentAttr={name:attrNameFirstCh,value:\"\"}}_leaveAttrName(toState){null===\nTokenizer.getTokenAttr(this.currentToken,this.currentAttr.name)?this.currentToken.attrs.push(this.currentAttr):this._err(ERR.duplicateAttribute);this.state=toState}_leaveAttrValue(toState){this.state=toState}_emitCurrentToken(){this._emitCurrentCharacterToken();const ct=this.currentToken;this.currentToken=null;ct.type===Tokenizer.START_TAG_TOKEN?this.lastStartTagName=ct.tagName:ct.type===Tokenizer.END_TAG_TOKEN&&(0<ct.attrs.length&&this._err(ERR.endTagWithAttributes),ct.selfClosing&&this._err(ERR.endTagWithTrailingSolidus));\nthis.tokenQueue.push(ct)}_emitCurrentCharacterToken(){this.currentCharacterToken&&(this.tokenQueue.push(this.currentCharacterToken),this.currentCharacterToken=null)}_emitEOFToken(){this._createEOFToken();this._emitCurrentToken()}_appendCharToCurrentCharacterToken(type,ch){this.currentCharacterToken&&this.currentCharacterToken.type!==type&&this._emitCurrentCharacterToken();this.currentCharacterToken?this.currentCharacterToken.chars+=ch:this._createCharacterToken(type,ch)}_emitCodePoint(cp){let type=\nTokenizer.CHARACTER_TOKEN;isWhitespace(cp)?type=Tokenizer.WHITESPACE_CHARACTER_TOKEN:cp===$.NULL&&(type=Tokenizer.NULL_CHARACTER_TOKEN);this._appendCharToCurrentCharacterToken(type,toChar(cp))}_emitSeveralCodePoints(codePoints){for(let i=0;i<codePoints.length;i++)this._emitCodePoint(codePoints[i])}_emitChars(ch){this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN,ch)}_matchNamedCharacterReference(startCp){let result=null,excess=1,i=findNamedEntityTreeBranch(0,startCp);for(this.tempBuff.push(startCp);-1<\ni;){startCp=neTree[i];const inNode=7>startCp;inNode&&startCp&1&&(result=startCp&2?[neTree[++i],neTree[++i]]:[neTree[++i]],excess=0);const cp=this._consume();this.tempBuff.push(cp);excess++;if(cp===$.EOF)break;i=inNode?startCp&4?findNamedEntityTreeBranch(i,cp):-1:cp===startCp?++i:-1}for(;excess--;)this.tempBuff.pop(),this._unconsume();return result}_isCharacterReferenceInAttribute(){return\"ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE\"===this.returnState||\"ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE\"===this.returnState||\n\"ATTRIBUTE_VALUE_UNQUOTED_STATE\"===this.returnState}_isCharacterReferenceAttributeQuirk(withSemicolon){return!withSemicolon&&this._isCharacterReferenceInAttribute()?(withSemicolon=this._consume(),this._unconsume(),withSemicolon===$.EQUALS_SIGN||isAsciiAlphaNumeric(withSemicolon)):!1}_flushCodePointsConsumedAsCharacterReference(){if(this._isCharacterReferenceInAttribute())for(let i=0;i<this.tempBuff.length;i++)this.currentAttr.value+=toChar(this.tempBuff[i]);else this._emitSeveralCodePoints(this.tempBuff);\nthis.tempBuff=[]}DATA_STATE(cp){this.preprocessor.dropParsedChunk();cp===$.LESS_THAN_SIGN?this.state=\"TAG_OPEN_STATE\":cp===$.AMPERSAND?(this.returnState=\"DATA_STATE\",this.state=\"CHARACTER_REFERENCE_STATE\"):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this._emitCodePoint(cp)):cp===$.EOF?this._emitEOFToken():this._emitCodePoint(cp)}RCDATA_STATE(cp){this.preprocessor.dropParsedChunk();cp===$.AMPERSAND?(this.returnState=\"RCDATA_STATE\",this.state=\"CHARACTER_REFERENCE_STATE\"):cp===$.LESS_THAN_SIGN?\nthis.state=\"RCDATA_LESS_THAN_SIGN_STATE\":cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this._emitChars(unicode.REPLACEMENT_CHARACTER)):cp===$.EOF?this._emitEOFToken():this._emitCodePoint(cp)}RAWTEXT_STATE(cp){this.preprocessor.dropParsedChunk();cp===$.LESS_THAN_SIGN?this.state=\"RAWTEXT_LESS_THAN_SIGN_STATE\":cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this._emitChars(unicode.REPLACEMENT_CHARACTER)):cp===$.EOF?this._emitEOFToken():this._emitCodePoint(cp)}SCRIPT_DATA_STATE(cp){this.preprocessor.dropParsedChunk();\ncp===$.LESS_THAN_SIGN?this.state=\"SCRIPT_DATA_LESS_THAN_SIGN_STATE\":cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this._emitChars(unicode.REPLACEMENT_CHARACTER)):cp===$.EOF?this._emitEOFToken():this._emitCodePoint(cp)}PLAINTEXT_STATE(cp){this.preprocessor.dropParsedChunk();cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this._emitChars(unicode.REPLACEMENT_CHARACTER)):cp===$.EOF?this._emitEOFToken():this._emitCodePoint(cp)}TAG_OPEN_STATE(cp){cp===$.EXCLAMATION_MARK?this.state=\"MARKUP_DECLARATION_OPEN_STATE\":\ncp===$.SOLIDUS?this.state=\"END_TAG_OPEN_STATE\":isAsciiLetter(cp)?(this._createStartTagToken(),this._reconsumeInState(\"TAG_NAME_STATE\")):cp===$.QUESTION_MARK?(this._err(ERR.unexpectedQuestionMarkInsteadOfTagName),this._createCommentToken(),this._reconsumeInState(\"BOGUS_COMMENT_STATE\")):cp===$.EOF?(this._err(ERR.eofBeforeTagName),this._emitChars(\"\\x3c\"),this._emitEOFToken()):(this._err(ERR.invalidFirstCharacterOfTagName),this._emitChars(\"\\x3c\"),this._reconsumeInState(\"DATA_STATE\"))}END_TAG_OPEN_STATE(cp){isAsciiLetter(cp)?\n(this._createEndTagToken(),this._reconsumeInState(\"TAG_NAME_STATE\")):cp===$.GREATER_THAN_SIGN?(this._err(ERR.missingEndTagName),this.state=\"DATA_STATE\"):cp===$.EOF?(this._err(ERR.eofBeforeTagName),this._emitChars(\"\\x3c/\"),this._emitEOFToken()):(this._err(ERR.invalidFirstCharacterOfTagName),this._createCommentToken(),this._reconsumeInState(\"BOGUS_COMMENT_STATE\"))}TAG_NAME_STATE(cp){isWhitespace(cp)?this.state=\"BEFORE_ATTRIBUTE_NAME_STATE\":cp===$.SOLIDUS?this.state=\"SELF_CLOSING_START_TAG_STATE\":cp===\n$.GREATER_THAN_SIGN?(this.state=\"DATA_STATE\",this._emitCurrentToken()):isAsciiUpper(cp)?this.currentToken.tagName+=toAsciiLowerChar(cp):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this.currentToken.tagName+=unicode.REPLACEMENT_CHARACTER):cp===$.EOF?(this._err(ERR.eofInTag),this._emitEOFToken()):this.currentToken.tagName+=toChar(cp)}RCDATA_LESS_THAN_SIGN_STATE(cp){cp===$.SOLIDUS?(this.tempBuff=[],this.state=\"RCDATA_END_TAG_OPEN_STATE\"):(this._emitChars(\"\\x3c\"),this._reconsumeInState(\"RCDATA_STATE\"))}RCDATA_END_TAG_OPEN_STATE(cp){isAsciiLetter(cp)?\n(this._createEndTagToken(),this._reconsumeInState(\"RCDATA_END_TAG_NAME_STATE\")):(this._emitChars(\"\\x3c/\"),this._reconsumeInState(\"RCDATA_STATE\"))}RCDATA_END_TAG_NAME_STATE(cp){if(isAsciiUpper(cp))this.currentToken.tagName+=toAsciiLowerChar(cp),this.tempBuff.push(cp);else if(isAsciiLower(cp))this.currentToken.tagName+=toChar(cp),this.tempBuff.push(cp);else{if(this.lastStartTagName===this.currentToken.tagName){if(isWhitespace(cp)){this.state=\"BEFORE_ATTRIBUTE_NAME_STATE\";return}if(cp===$.SOLIDUS){this.state=\n\"SELF_CLOSING_START_TAG_STATE\";return}if(cp===$.GREATER_THAN_SIGN){this.state=\"DATA_STATE\";this._emitCurrentToken();return}}this._emitChars(\"\\x3c/\");this._emitSeveralCodePoints(this.tempBuff);this._reconsumeInState(\"RCDATA_STATE\")}}RAWTEXT_LESS_THAN_SIGN_STATE(cp){cp===$.SOLIDUS?(this.tempBuff=[],this.state=\"RAWTEXT_END_TAG_OPEN_STATE\"):(this._emitChars(\"\\x3c\"),this._reconsumeInState(\"RAWTEXT_STATE\"))}RAWTEXT_END_TAG_OPEN_STATE(cp){isAsciiLetter(cp)?(this._createEndTagToken(),this._reconsumeInState(\"RAWTEXT_END_TAG_NAME_STATE\")):\n(this._emitChars(\"\\x3c/\"),this._reconsumeInState(\"RAWTEXT_STATE\"))}RAWTEXT_END_TAG_NAME_STATE(cp){if(isAsciiUpper(cp))this.currentToken.tagName+=toAsciiLowerChar(cp),this.tempBuff.push(cp);else if(isAsciiLower(cp))this.currentToken.tagName+=toChar(cp),this.tempBuff.push(cp);else{if(this.lastStartTagName===this.currentToken.tagName){if(isWhitespace(cp)){this.state=\"BEFORE_ATTRIBUTE_NAME_STATE\";return}if(cp===$.SOLIDUS){this.state=\"SELF_CLOSING_START_TAG_STATE\";return}if(cp===$.GREATER_THAN_SIGN){this._emitCurrentToken();\nthis.state=\"DATA_STATE\";return}}this._emitChars(\"\\x3c/\");this._emitSeveralCodePoints(this.tempBuff);this._reconsumeInState(\"RAWTEXT_STATE\")}}SCRIPT_DATA_LESS_THAN_SIGN_STATE(cp){cp===$.SOLIDUS?(this.tempBuff=[],this.state=\"SCRIPT_DATA_END_TAG_OPEN_STATE\"):cp===$.EXCLAMATION_MARK?(this.state=\"SCRIPT_DATA_ESCAPE_START_STATE\",this._emitChars(\"\\x3c!\")):(this._emitChars(\"\\x3c\"),this._reconsumeInState(\"SCRIPT_DATA_STATE\"))}SCRIPT_DATA_END_TAG_OPEN_STATE(cp){isAsciiLetter(cp)?(this._createEndTagToken(),\nthis._reconsumeInState(\"SCRIPT_DATA_END_TAG_NAME_STATE\")):(this._emitChars(\"\\x3c/\"),this._reconsumeInState(\"SCRIPT_DATA_STATE\"))}SCRIPT_DATA_END_TAG_NAME_STATE(cp){if(isAsciiUpper(cp))this.currentToken.tagName+=toAsciiLowerChar(cp),this.tempBuff.push(cp);else if(isAsciiLower(cp))this.currentToken.tagName+=toChar(cp),this.tempBuff.push(cp);else{if(this.lastStartTagName===this.currentToken.tagName){if(isWhitespace(cp)){this.state=\"BEFORE_ATTRIBUTE_NAME_STATE\";return}if(cp===$.SOLIDUS){this.state=\"SELF_CLOSING_START_TAG_STATE\";\nreturn}if(cp===$.GREATER_THAN_SIGN){this._emitCurrentToken();this.state=\"DATA_STATE\";return}}this._emitChars(\"\\x3c/\");this._emitSeveralCodePoints(this.tempBuff);this._reconsumeInState(\"SCRIPT_DATA_STATE\")}}SCRIPT_DATA_ESCAPE_START_STATE(cp){cp===$.HYPHEN_MINUS?(this.state=\"SCRIPT_DATA_ESCAPE_START_DASH_STATE\",this._emitChars(\"-\")):this._reconsumeInState(\"SCRIPT_DATA_STATE\")}SCRIPT_DATA_ESCAPE_START_DASH_STATE(cp){cp===$.HYPHEN_MINUS?(this.state=\"SCRIPT_DATA_ESCAPED_DASH_DASH_STATE\",this._emitChars(\"-\")):\nthis._reconsumeInState(\"SCRIPT_DATA_STATE\")}SCRIPT_DATA_ESCAPED_STATE(cp){cp===$.HYPHEN_MINUS?(this.state=\"SCRIPT_DATA_ESCAPED_DASH_STATE\",this._emitChars(\"-\")):cp===$.LESS_THAN_SIGN?this.state=\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE\":cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this._emitChars(unicode.REPLACEMENT_CHARACTER)):cp===$.EOF?(this._err(ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):this._emitCodePoint(cp)}SCRIPT_DATA_ESCAPED_DASH_STATE(cp){cp===$.HYPHEN_MINUS?(this.state=\n\"SCRIPT_DATA_ESCAPED_DASH_DASH_STATE\",this._emitChars(\"-\")):cp===$.LESS_THAN_SIGN?this.state=\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE\":cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this.state=\"SCRIPT_DATA_ESCAPED_STATE\",this._emitChars(unicode.REPLACEMENT_CHARACTER)):cp===$.EOF?(this._err(ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=\"SCRIPT_DATA_ESCAPED_STATE\",this._emitCodePoint(cp))}SCRIPT_DATA_ESCAPED_DASH_DASH_STATE(cp){cp===$.HYPHEN_MINUS?this._emitChars(\"-\"):\ncp===$.LESS_THAN_SIGN?this.state=\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE\":cp===$.GREATER_THAN_SIGN?(this.state=\"SCRIPT_DATA_STATE\",this._emitChars(\"\\x3e\")):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this.state=\"SCRIPT_DATA_ESCAPED_STATE\",this._emitChars(unicode.REPLACEMENT_CHARACTER)):cp===$.EOF?(this._err(ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=\"SCRIPT_DATA_ESCAPED_STATE\",this._emitCodePoint(cp))}SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE(cp){cp===$.SOLIDUS?\n(this.tempBuff=[],this.state=\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE\"):isAsciiLetter(cp)?(this.tempBuff=[],this._emitChars(\"\\x3c\"),this._reconsumeInState(\"SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE\")):(this._emitChars(\"\\x3c\"),this._reconsumeInState(\"SCRIPT_DATA_ESCAPED_STATE\"))}SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE(cp){isAsciiLetter(cp)?(this._createEndTagToken(),this._reconsumeInState(\"SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE\")):(this._emitChars(\"\\x3c/\"),this._reconsumeInState(\"SCRIPT_DATA_ESCAPED_STATE\"))}SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE(cp){if(isAsciiUpper(cp))this.currentToken.tagName+=\ntoAsciiLowerChar(cp),this.tempBuff.push(cp);else if(isAsciiLower(cp))this.currentToken.tagName+=toChar(cp),this.tempBuff.push(cp);else{if(this.lastStartTagName===this.currentToken.tagName){if(isWhitespace(cp)){this.state=\"BEFORE_ATTRIBUTE_NAME_STATE\";return}if(cp===$.SOLIDUS){this.state=\"SELF_CLOSING_START_TAG_STATE\";return}if(cp===$.GREATER_THAN_SIGN){this._emitCurrentToken();this.state=\"DATA_STATE\";return}}this._emitChars(\"\\x3c/\");this._emitSeveralCodePoints(this.tempBuff);this._reconsumeInState(\"SCRIPT_DATA_ESCAPED_STATE\")}}SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE(cp){isWhitespace(cp)||\ncp===$.SOLIDUS||cp===$.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?\"SCRIPT_DATA_DOUBLE_ESCAPED_STATE\":\"SCRIPT_DATA_ESCAPED_STATE\",this._emitCodePoint(cp)):isAsciiUpper(cp)?(this.tempBuff.push(cp+32),this._emitCodePoint(cp)):isAsciiLower(cp)?(this.tempBuff.push(cp),this._emitCodePoint(cp)):this._reconsumeInState(\"SCRIPT_DATA_ESCAPED_STATE\")}SCRIPT_DATA_DOUBLE_ESCAPED_STATE(cp){cp===$.HYPHEN_MINUS?(this.state=\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE\",this._emitChars(\"-\")):cp===\n$.LESS_THAN_SIGN?(this.state=\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE\",this._emitChars(\"\\x3c\")):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this._emitChars(unicode.REPLACEMENT_CHARACTER)):cp===$.EOF?(this._err(ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):this._emitCodePoint(cp)}SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE(cp){cp===$.HYPHEN_MINUS?(this.state=\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE\",this._emitChars(\"-\")):cp===$.LESS_THAN_SIGN?(this.state=\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE\",\nthis._emitChars(\"\\x3c\")):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this.state=\"SCRIPT_DATA_DOUBLE_ESCAPED_STATE\",this._emitChars(unicode.REPLACEMENT_CHARACTER)):cp===$.EOF?(this._err(ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=\"SCRIPT_DATA_DOUBLE_ESCAPED_STATE\",this._emitCodePoint(cp))}SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE(cp){cp===$.HYPHEN_MINUS?this._emitChars(\"-\"):cp===$.LESS_THAN_SIGN?(this.state=\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE\",this._emitChars(\"\\x3c\")):\ncp===$.GREATER_THAN_SIGN?(this.state=\"SCRIPT_DATA_STATE\",this._emitChars(\"\\x3e\")):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this.state=\"SCRIPT_DATA_DOUBLE_ESCAPED_STATE\",this._emitChars(unicode.REPLACEMENT_CHARACTER)):cp===$.EOF?(this._err(ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=\"SCRIPT_DATA_DOUBLE_ESCAPED_STATE\",this._emitCodePoint(cp))}SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE(cp){cp===$.SOLIDUS?(this.tempBuff=[],this.state=\"SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE\",\nthis._emitChars(\"/\")):this._reconsumeInState(\"SCRIPT_DATA_DOUBLE_ESCAPED_STATE\")}SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE(cp){isWhitespace(cp)||cp===$.SOLIDUS||cp===$.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?\"SCRIPT_DATA_ESCAPED_STATE\":\"SCRIPT_DATA_DOUBLE_ESCAPED_STATE\",this._emitCodePoint(cp)):isAsciiUpper(cp)?(this.tempBuff.push(cp+32),this._emitCodePoint(cp)):isAsciiLower(cp)?(this.tempBuff.push(cp),this._emitCodePoint(cp)):this._reconsumeInState(\"SCRIPT_DATA_DOUBLE_ESCAPED_STATE\")}BEFORE_ATTRIBUTE_NAME_STATE(cp){isWhitespace(cp)||\n(cp===$.SOLIDUS||cp===$.GREATER_THAN_SIGN||cp===$.EOF?this._reconsumeInState(\"AFTER_ATTRIBUTE_NAME_STATE\"):cp===$.EQUALS_SIGN?(this._err(ERR.unexpectedEqualsSignBeforeAttributeName),this._createAttr(\"\\x3d\"),this.state=\"ATTRIBUTE_NAME_STATE\"):(this._createAttr(\"\"),this._reconsumeInState(\"ATTRIBUTE_NAME_STATE\")))}ATTRIBUTE_NAME_STATE(cp){isWhitespace(cp)||cp===$.SOLIDUS||cp===$.GREATER_THAN_SIGN||cp===$.EOF?(this._leaveAttrName(\"AFTER_ATTRIBUTE_NAME_STATE\"),this._unconsume()):cp===$.EQUALS_SIGN?this._leaveAttrName(\"BEFORE_ATTRIBUTE_VALUE_STATE\"):\nisAsciiUpper(cp)?this.currentAttr.name+=toAsciiLowerChar(cp):cp===$.QUOTATION_MARK||cp===$.APOSTROPHE||cp===$.LESS_THAN_SIGN?(this._err(ERR.unexpectedCharacterInAttributeName),this.currentAttr.name+=toChar(cp)):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this.currentAttr.name+=unicode.REPLACEMENT_CHARACTER):this.currentAttr.name+=toChar(cp)}AFTER_ATTRIBUTE_NAME_STATE(cp){isWhitespace(cp)||(cp===$.SOLIDUS?this.state=\"SELF_CLOSING_START_TAG_STATE\":cp===$.EQUALS_SIGN?this.state=\"BEFORE_ATTRIBUTE_VALUE_STATE\":\ncp===$.GREATER_THAN_SIGN?(this.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.EOF?(this._err(ERR.eofInTag),this._emitEOFToken()):(this._createAttr(\"\"),this._reconsumeInState(\"ATTRIBUTE_NAME_STATE\")))}BEFORE_ATTRIBUTE_VALUE_STATE(cp){isWhitespace(cp)||(cp===$.QUOTATION_MARK?this.state=\"ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE\":cp===$.APOSTROPHE?this.state=\"ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE\":cp===$.GREATER_THAN_SIGN?(this._err(ERR.missingAttributeValue),this.state=\"DATA_STATE\",this._emitCurrentToken()):\nthis._reconsumeInState(\"ATTRIBUTE_VALUE_UNQUOTED_STATE\"))}ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE(cp){cp===$.QUOTATION_MARK?this.state=\"AFTER_ATTRIBUTE_VALUE_QUOTED_STATE\":cp===$.AMPERSAND?(this.returnState=\"ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE\",this.state=\"CHARACTER_REFERENCE_STATE\"):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this.currentAttr.value+=unicode.REPLACEMENT_CHARACTER):cp===$.EOF?(this._err(ERR.eofInTag),this._emitEOFToken()):this.currentAttr.value+=toChar(cp)}ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE(cp){cp===\n$.APOSTROPHE?this.state=\"AFTER_ATTRIBUTE_VALUE_QUOTED_STATE\":cp===$.AMPERSAND?(this.returnState=\"ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE\",this.state=\"CHARACTER_REFERENCE_STATE\"):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this.currentAttr.value+=unicode.REPLACEMENT_CHARACTER):cp===$.EOF?(this._err(ERR.eofInTag),this._emitEOFToken()):this.currentAttr.value+=toChar(cp)}ATTRIBUTE_VALUE_UNQUOTED_STATE(cp){isWhitespace(cp)?this._leaveAttrValue(\"BEFORE_ATTRIBUTE_NAME_STATE\"):cp===$.AMPERSAND?(this.returnState=\n\"ATTRIBUTE_VALUE_UNQUOTED_STATE\",this.state=\"CHARACTER_REFERENCE_STATE\"):cp===$.GREATER_THAN_SIGN?(this._leaveAttrValue(\"DATA_STATE\"),this._emitCurrentToken()):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this.currentAttr.value+=unicode.REPLACEMENT_CHARACTER):cp===$.QUOTATION_MARK||cp===$.APOSTROPHE||cp===$.LESS_THAN_SIGN||cp===$.EQUALS_SIGN||cp===$.GRAVE_ACCENT?(this._err(ERR.unexpectedCharacterInUnquotedAttributeValue),this.currentAttr.value+=toChar(cp)):cp===$.EOF?(this._err(ERR.eofInTag),\nthis._emitEOFToken()):this.currentAttr.value+=toChar(cp)}AFTER_ATTRIBUTE_VALUE_QUOTED_STATE(cp){isWhitespace(cp)?this._leaveAttrValue(\"BEFORE_ATTRIBUTE_NAME_STATE\"):cp===$.SOLIDUS?this._leaveAttrValue(\"SELF_CLOSING_START_TAG_STATE\"):cp===$.GREATER_THAN_SIGN?(this._leaveAttrValue(\"DATA_STATE\"),this._emitCurrentToken()):cp===$.EOF?(this._err(ERR.eofInTag),this._emitEOFToken()):(this._err(ERR.missingWhitespaceBetweenAttributes),this._reconsumeInState(\"BEFORE_ATTRIBUTE_NAME_STATE\"))}SELF_CLOSING_START_TAG_STATE(cp){cp===\n$.GREATER_THAN_SIGN?(this.currentToken.selfClosing=!0,this.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.EOF?(this._err(ERR.eofInTag),this._emitEOFToken()):(this._err(ERR.unexpectedSolidusInTag),this._reconsumeInState(\"BEFORE_ATTRIBUTE_NAME_STATE\"))}BOGUS_COMMENT_STATE(cp){cp===$.GREATER_THAN_SIGN?(this.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.EOF?(this._emitCurrentToken(),this._emitEOFToken()):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this.currentToken.data+=unicode.REPLACEMENT_CHARACTER):\nthis.currentToken.data+=toChar(cp)}MARKUP_DECLARATION_OPEN_STATE(cp){this._consumeSequenceIfMatch($$.DASH_DASH_STRING,cp,!0)?(this._createCommentToken(),this.state=\"COMMENT_START_STATE\"):this._consumeSequenceIfMatch($$.DOCTYPE_STRING,cp,!1)?this.state=\"DOCTYPE_STATE\":this._consumeSequenceIfMatch($$.CDATA_START_STRING,cp,!0)?this.allowCDATA?this.state=\"CDATA_SECTION_STATE\":(this._err(ERR.cdataInHtmlContent),this._createCommentToken(),this.currentToken.data=\"[CDATA[\",this.state=\"BOGUS_COMMENT_STATE\"):\nthis._ensureHibernation()||(this._err(ERR.incorrectlyOpenedComment),this._createCommentToken(),this._reconsumeInState(\"BOGUS_COMMENT_STATE\"))}COMMENT_START_STATE(cp){cp===$.HYPHEN_MINUS?this.state=\"COMMENT_START_DASH_STATE\":cp===$.GREATER_THAN_SIGN?(this._err(ERR.abruptClosingOfEmptyComment),this.state=\"DATA_STATE\",this._emitCurrentToken()):this._reconsumeInState(\"COMMENT_STATE\")}COMMENT_START_DASH_STATE(cp){cp===$.HYPHEN_MINUS?this.state=\"COMMENT_END_STATE\":cp===$.GREATER_THAN_SIGN?(this._err(ERR.abruptClosingOfEmptyComment),\nthis.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.EOF?(this._err(ERR.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+=\"-\",this._reconsumeInState(\"COMMENT_STATE\"))}COMMENT_STATE(cp){cp===$.HYPHEN_MINUS?this.state=\"COMMENT_END_DASH_STATE\":cp===$.LESS_THAN_SIGN?(this.currentToken.data+=\"\\x3c\",this.state=\"COMMENT_LESS_THAN_SIGN_STATE\"):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this.currentToken.data+=unicode.REPLACEMENT_CHARACTER):cp===$.EOF?(this._err(ERR.eofInComment),\nthis._emitCurrentToken(),this._emitEOFToken()):this.currentToken.data+=toChar(cp)}COMMENT_LESS_THAN_SIGN_STATE(cp){cp===$.EXCLAMATION_MARK?(this.currentToken.data+=\"!\",this.state=\"COMMENT_LESS_THAN_SIGN_BANG_STATE\"):cp===$.LESS_THAN_SIGN?this.currentToken.data+=\"!\":this._reconsumeInState(\"COMMENT_STATE\")}COMMENT_LESS_THAN_SIGN_BANG_STATE(cp){cp===$.HYPHEN_MINUS?this.state=\"COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE\":this._reconsumeInState(\"COMMENT_STATE\")}COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE(cp){cp===\n$.HYPHEN_MINUS?this.state=\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE\":this._reconsumeInState(\"COMMENT_END_DASH_STATE\")}COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE(cp){cp!==$.GREATER_THAN_SIGN&&cp!==$.EOF&&this._err(ERR.nestedComment);this._reconsumeInState(\"COMMENT_END_STATE\")}COMMENT_END_DASH_STATE(cp){cp===$.HYPHEN_MINUS?this.state=\"COMMENT_END_STATE\":cp===$.EOF?(this._err(ERR.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+=\"-\",this._reconsumeInState(\"COMMENT_STATE\"))}COMMENT_END_STATE(cp){cp===\n$.GREATER_THAN_SIGN?(this.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.EXCLAMATION_MARK?this.state=\"COMMENT_END_BANG_STATE\":cp===$.HYPHEN_MINUS?this.currentToken.data+=\"-\":cp===$.EOF?(this._err(ERR.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+=\"--\",this._reconsumeInState(\"COMMENT_STATE\"))}COMMENT_END_BANG_STATE(cp){cp===$.HYPHEN_MINUS?(this.currentToken.data+=\"--!\",this.state=\"COMMENT_END_DASH_STATE\"):cp===$.GREATER_THAN_SIGN?(this._err(ERR.incorrectlyClosedComment),\nthis.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.EOF?(this._err(ERR.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+=\"--!\",this._reconsumeInState(\"COMMENT_STATE\"))}DOCTYPE_STATE(cp){isWhitespace(cp)?this.state=\"BEFORE_DOCTYPE_NAME_STATE\":cp===$.GREATER_THAN_SIGN?this._reconsumeInState(\"BEFORE_DOCTYPE_NAME_STATE\"):cp===$.EOF?(this._err(ERR.eofInDoctype),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):\n(this._err(ERR.missingWhitespaceBeforeDoctypeName),this._reconsumeInState(\"BEFORE_DOCTYPE_NAME_STATE\"))}BEFORE_DOCTYPE_NAME_STATE(cp){isWhitespace(cp)||(isAsciiUpper(cp)?(this._createDoctypeToken(toAsciiLowerChar(cp)),this.state=\"DOCTYPE_NAME_STATE\"):cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER),this.state=\"DOCTYPE_NAME_STATE\"):cp===$.GREATER_THAN_SIGN?(this._err(ERR.missingDoctypeName),this._createDoctypeToken(null),this.currentToken.forceQuirks=\n!0,this._emitCurrentToken(),this.state=\"DATA_STATE\"):cp===$.EOF?(this._err(ERR.eofInDoctype),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._createDoctypeToken(toChar(cp)),this.state=\"DOCTYPE_NAME_STATE\"))}DOCTYPE_NAME_STATE(cp){isWhitespace(cp)?this.state=\"AFTER_DOCTYPE_NAME_STATE\":cp===$.GREATER_THAN_SIGN?(this.state=\"DATA_STATE\",this._emitCurrentToken()):isAsciiUpper(cp)?this.currentToken.name+=toAsciiLowerChar(cp):cp===$.NULL?\n(this._err(ERR.unexpectedNullCharacter),this.currentToken.name+=unicode.REPLACEMENT_CHARACTER):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.name+=toChar(cp)}AFTER_DOCTYPE_NAME_STATE(cp){isWhitespace(cp)||(cp===$.GREATER_THAN_SIGN?(this.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this._consumeSequenceIfMatch($$.PUBLIC_STRING,\ncp,!1)?this.state=\"AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE\":this._consumeSequenceIfMatch($$.SYSTEM_STRING,cp,!1)?this.state=\"AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE\":this._ensureHibernation()||(this._err(ERR.invalidCharacterSequenceAfterDoctypeName),this.currentToken.forceQuirks=!0,this._reconsumeInState(\"BOGUS_DOCTYPE_STATE\")))}AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE(cp){isWhitespace(cp)?this.state=\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE\":cp===$.QUOTATION_MARK?(this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword),\nthis.currentToken.publicId=\"\",this.state=\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE\"):cp===$.APOSTROPHE?(this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword),this.currentToken.publicId=\"\",this.state=\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE\"):cp===$.GREATER_THAN_SIGN?(this._err(ERR.missingDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),\nthis._emitEOFToken()):(this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(\"BOGUS_DOCTYPE_STATE\"))}BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE(cp){isWhitespace(cp)||(cp===$.QUOTATION_MARK?(this.currentToken.publicId=\"\",this.state=\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE\"):cp===$.APOSTROPHE?(this.currentToken.publicId=\"\",this.state=\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE\"):cp===$.GREATER_THAN_SIGN?(this._err(ERR.missingDoctypePublicIdentifier),\nthis.currentToken.forceQuirks=!0,this.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(\"BOGUS_DOCTYPE_STATE\")))}DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE(cp){cp===$.QUOTATION_MARK?this.state=\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE\":cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),\nthis.currentToken.publicId+=unicode.REPLACEMENT_CHARACTER):cp===$.GREATER_THAN_SIGN?(this._err(ERR.abruptDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=\"DATA_STATE\"):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=toChar(cp)}DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE(cp){cp===$.APOSTROPHE?this.state=\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE\":cp===$.NULL?\n(this._err(ERR.unexpectedNullCharacter),this.currentToken.publicId+=unicode.REPLACEMENT_CHARACTER):cp===$.GREATER_THAN_SIGN?(this._err(ERR.abruptDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=\"DATA_STATE\"):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=toChar(cp)}AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE(cp){isWhitespace(cp)?this.state=\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE\":\ncp===$.GREATER_THAN_SIGN?(this.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.QUOTATION_MARK?(this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),this.currentToken.systemId=\"\",this.state=\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE\"):cp===$.APOSTROPHE?(this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),this.currentToken.systemId=\"\",this.state=\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE\"):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=\n!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(\"BOGUS_DOCTYPE_STATE\"))}BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE(cp){isWhitespace(cp)||(cp===$.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=\"DATA_STATE\"):cp===$.QUOTATION_MARK?(this.currentToken.systemId=\"\",this.state=\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE\"):cp===$.APOSTROPHE?(this.currentToken.systemId=\"\",\nthis.state=\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE\"):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(\"BOGUS_DOCTYPE_STATE\")))}AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE(cp){isWhitespace(cp)?this.state=\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE\":cp===$.QUOTATION_MARK?(this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword),\nthis.currentToken.systemId=\"\",this.state=\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE\"):cp===$.APOSTROPHE?(this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword),this.currentToken.systemId=\"\",this.state=\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE\"):cp===$.GREATER_THAN_SIGN?(this._err(ERR.missingDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),\nthis._emitEOFToken()):(this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(\"BOGUS_DOCTYPE_STATE\"))}BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE(cp){isWhitespace(cp)||(cp===$.QUOTATION_MARK?(this.currentToken.systemId=\"\",this.state=\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE\"):cp===$.APOSTROPHE?(this.currentToken.systemId=\"\",this.state=\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE\"):cp===$.GREATER_THAN_SIGN?(this._err(ERR.missingDoctypeSystemIdentifier),\nthis.currentToken.forceQuirks=!0,this.state=\"DATA_STATE\",this._emitCurrentToken()):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(\"BOGUS_DOCTYPE_STATE\")))}DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE(cp){cp===$.QUOTATION_MARK?this.state=\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE\":cp===$.NULL?(this._err(ERR.unexpectedNullCharacter),\nthis.currentToken.systemId+=unicode.REPLACEMENT_CHARACTER):cp===$.GREATER_THAN_SIGN?(this._err(ERR.abruptDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=\"DATA_STATE\"):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=toChar(cp)}DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE(cp){cp===$.APOSTROPHE?this.state=\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE\":cp===$.NULL?\n(this._err(ERR.unexpectedNullCharacter),this.currentToken.systemId+=unicode.REPLACEMENT_CHARACTER):cp===$.GREATER_THAN_SIGN?(this._err(ERR.abruptDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=\"DATA_STATE\"):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=toChar(cp)}AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE(cp){isWhitespace(cp)||(cp===$.GREATER_THAN_SIGN?(this._emitCurrentToken(),\nthis.state=\"DATA_STATE\"):cp===$.EOF?(this._err(ERR.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier),this._reconsumeInState(\"BOGUS_DOCTYPE_STATE\")))}BOGUS_DOCTYPE_STATE(cp){cp===$.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=\"DATA_STATE\"):cp===$.NULL?this._err(ERR.unexpectedNullCharacter):cp===$.EOF&&(this._emitCurrentToken(),this._emitEOFToken())}CDATA_SECTION_STATE(cp){cp===$.RIGHT_SQUARE_BRACKET?\nthis.state=\"CDATA_SECTION_BRACKET_STATE\":cp===$.EOF?(this._err(ERR.eofInCdata),this._emitEOFToken()):this._emitCodePoint(cp)}CDATA_SECTION_BRACKET_STATE(cp){cp===$.RIGHT_SQUARE_BRACKET?this.state=\"CDATA_SECTION_END_STATE\":(this._emitChars(\"]\"),this._reconsumeInState(\"CDATA_SECTION_STATE\"))}CDATA_SECTION_END_STATE(cp){cp===$.GREATER_THAN_SIGN?this.state=\"DATA_STATE\":cp===$.RIGHT_SQUARE_BRACKET?this._emitChars(\"]\"):(this._emitChars(\"]]\"),this._reconsumeInState(\"CDATA_SECTION_STATE\"))}CHARACTER_REFERENCE_STATE(cp){this.tempBuff=\n[$.AMPERSAND];cp===$.NUMBER_SIGN?(this.tempBuff.push(cp),this.state=\"NUMERIC_CHARACTER_REFERENCE_STATE\"):isAsciiAlphaNumeric(cp)?this._reconsumeInState(\"NAMED_CHARACTER_REFERENCE_STATE\"):(this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState))}NAMED_CHARACTER_REFERENCE_STATE(cp){cp=this._matchNamedCharacterReference(cp);if(this._ensureHibernation())this.tempBuff=[$.AMPERSAND];else if(cp){const withSemicolon=this.tempBuff[this.tempBuff.length-1]===$.SEMICOLON;\nthis._isCharacterReferenceAttributeQuirk(withSemicolon)||(withSemicolon||this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference),this.tempBuff=cp);this._flushCodePointsConsumedAsCharacterReference();this.state=this.returnState}else this._flushCodePointsConsumedAsCharacterReference(),this.state=\"AMBIGUOS_AMPERSAND_STATE\"}AMBIGUOS_AMPERSAND_STATE(cp){isAsciiAlphaNumeric(cp)?this._isCharacterReferenceInAttribute()?this.currentAttr.value+=toChar(cp):this._emitCodePoint(cp):(cp===$.SEMICOLON&&\nthis._err(ERR.unknownNamedCharacterReference),this._reconsumeInState(this.returnState))}NUMERIC_CHARACTER_REFERENCE_STATE(cp){this.charRefCode=0;cp===$.LATIN_SMALL_X||cp===$.LATIN_CAPITAL_X?(this.tempBuff.push(cp),this.state=\"HEXADEMICAL_CHARACTER_REFERENCE_START_STATE\"):this._reconsumeInState(\"DECIMAL_CHARACTER_REFERENCE_START_STATE\")}HEXADEMICAL_CHARACTER_REFERENCE_START_STATE(cp){isAsciiDigit(cp)||cp>=$.LATIN_CAPITAL_A&&cp<=$.LATIN_CAPITAL_F||cp>=$.LATIN_SMALL_A&&cp<=$.LATIN_SMALL_F?this._reconsumeInState(\"HEXADEMICAL_CHARACTER_REFERENCE_STATE\"):\n(this._err(ERR.absenceOfDigitsInNumericCharacterReference),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState))}DECIMAL_CHARACTER_REFERENCE_START_STATE(cp){isAsciiDigit(cp)?this._reconsumeInState(\"DECIMAL_CHARACTER_REFERENCE_STATE\"):(this._err(ERR.absenceOfDigitsInNumericCharacterReference),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState))}HEXADEMICAL_CHARACTER_REFERENCE_STATE(cp){cp>=$.LATIN_CAPITAL_A&&cp<=$.LATIN_CAPITAL_F?\nthis.charRefCode=16*this.charRefCode+cp-55:cp>=$.LATIN_SMALL_A&&cp<=$.LATIN_SMALL_F?this.charRefCode=16*this.charRefCode+cp-87:isAsciiDigit(cp)?this.charRefCode=16*this.charRefCode+cp-48:cp===$.SEMICOLON?this.state=\"NUMERIC_CHARACTER_REFERENCE_END_STATE\":(this._err(ERR.missingSemicolonAfterCharacterReference),this._reconsumeInState(\"NUMERIC_CHARACTER_REFERENCE_END_STATE\"))}DECIMAL_CHARACTER_REFERENCE_STATE(cp){isAsciiDigit(cp)?this.charRefCode=10*this.charRefCode+cp-48:cp===$.SEMICOLON?this.state=\n\"NUMERIC_CHARACTER_REFERENCE_END_STATE\":(this._err(ERR.missingSemicolonAfterCharacterReference),this._reconsumeInState(\"NUMERIC_CHARACTER_REFERENCE_END_STATE\"))}NUMERIC_CHARACTER_REFERENCE_END_STATE(){if(this.charRefCode===$.NULL)this._err(ERR.nullCharacterReference),this.charRefCode=$.REPLACEMENT_CHARACTER;else if(1114111<this.charRefCode)this._err(ERR.characterReferenceOutsideUnicodeRange),this.charRefCode=$.REPLACEMENT_CHARACTER;else if(unicode.isSurrogate(this.charRefCode))this._err(ERR.surrogateCharacterReference),\nthis.charRefCode=$.REPLACEMENT_CHARACTER;else if(unicode.isUndefinedCodePoint(this.charRefCode))this._err(ERR.noncharacterCharacterReference);else if(unicode.isControlCodePoint(this.charRefCode)||this.charRefCode===$.CARRIAGE_RETURN){this._err(ERR.controlCharacterReference);const replacement=C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];replacement&&(this.charRefCode=replacement)}this.tempBuff=[this.charRefCode];this._flushCodePointsConsumedAsCharacterReference();this._reconsumeInState(this.returnState)}}\nTokenizer.CHARACTER_TOKEN=\"CHARACTER_TOKEN\";Tokenizer.NULL_CHARACTER_TOKEN=\"NULL_CHARACTER_TOKEN\";Tokenizer.WHITESPACE_CHARACTER_TOKEN=\"WHITESPACE_CHARACTER_TOKEN\";Tokenizer.START_TAG_TOKEN=\"START_TAG_TOKEN\";Tokenizer.END_TAG_TOKEN=\"END_TAG_TOKEN\";Tokenizer.COMMENT_TOKEN=\"COMMENT_TOKEN\";Tokenizer.DOCTYPE_TOKEN=\"DOCTYPE_TOKEN\";Tokenizer.EOF_TOKEN=\"EOF_TOKEN\";Tokenizer.HIBERNATION_TOKEN=\"HIBERNATION_TOKEN\";Tokenizer.MODE={DATA:\"DATA_STATE\",RCDATA:\"RCDATA_STATE\",RAWTEXT:\"RAWTEXT_STATE\",SCRIPT_DATA:\"SCRIPT_DATA_STATE\",\nPLAINTEXT:\"PLAINTEXT_STATE\"};Tokenizer.getTokenAttr=function(token,attrName){for(let i=token.attrs.length-1;0<=i;i--)if(token.attrs[i].name===attrName)return token.attrs[i].value;return null};module.exports=Tokenizer}","~:source","shadow$provide[\"module$node_modules$parse5$lib$tokenizer$index\"] = function(global,require,module,exports) {\n'use strict';\n\nconst Preprocessor = require('./preprocessor');\nconst unicode = require('../common/unicode');\nconst neTree = require('./named-entity-data');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\nconst $$ = unicode.CODE_POINT_SEQUENCES;\n\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n    0x80: 0x20ac,\n    0x82: 0x201a,\n    0x83: 0x0192,\n    0x84: 0x201e,\n    0x85: 0x2026,\n    0x86: 0x2020,\n    0x87: 0x2021,\n    0x88: 0x02c6,\n    0x89: 0x2030,\n    0x8a: 0x0160,\n    0x8b: 0x2039,\n    0x8c: 0x0152,\n    0x8e: 0x017d,\n    0x91: 0x2018,\n    0x92: 0x2019,\n    0x93: 0x201c,\n    0x94: 0x201d,\n    0x95: 0x2022,\n    0x96: 0x2013,\n    0x97: 0x2014,\n    0x98: 0x02dc,\n    0x99: 0x2122,\n    0x9a: 0x0161,\n    0x9b: 0x203a,\n    0x9c: 0x0153,\n    0x9e: 0x017e,\n    0x9f: 0x0178\n};\n\n// Named entity tree flags\nconst HAS_DATA_FLAG = 1 << 0;\nconst DATA_DUPLET_FLAG = 1 << 1;\nconst HAS_BRANCHES_FLAG = 1 << 2;\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\n\n//States\nconst DATA_STATE = 'DATA_STATE';\nconst RCDATA_STATE = 'RCDATA_STATE';\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nconst COMMENT_STATE = 'COMMENT_STATE';\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\n\n//Utils\n\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLowerCodePoint(cp) {\n    return cp + 0x0020;\n}\n\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\nfunction toChar(cp) {\n    if (cp <= 0xffff) {\n        return String.fromCharCode(cp);\n    }\n\n    cp -= 0x10000;\n    return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));\n}\n\nfunction toAsciiLowerChar(cp) {\n    return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\n\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n    const branchCount = neTree[++nodeIx];\n    let lo = ++nodeIx;\n    let hi = lo + branchCount - 1;\n\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midCp = neTree[mid];\n\n        if (midCp < cp) {\n            lo = mid + 1;\n        } else if (midCp > cp) {\n            hi = mid - 1;\n        } else {\n            return neTree[mid + branchCount];\n        }\n    }\n\n    return -1;\n}\n\n//Tokenizer\nclass Tokenizer {\n    constructor() {\n        this.preprocessor = new Preprocessor();\n\n        this.tokenQueue = [];\n\n        this.allowCDATA = false;\n\n        this.state = DATA_STATE;\n        this.returnState = '';\n\n        this.charRefCode = -1;\n        this.tempBuff = [];\n        this.lastStartTagName = '';\n\n        this.consumedAfterSnapshot = -1;\n        this.active = false;\n\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = null;\n    }\n\n    //Errors\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _errOnNextCodePoint(err) {\n        this._consume();\n        this._err(err);\n        this._unconsume();\n    }\n\n    //API\n    getNextToken() {\n        while (!this.tokenQueue.length && this.active) {\n            this.consumedAfterSnapshot = 0;\n\n            const cp = this._consume();\n\n            if (!this._ensureHibernation()) {\n                this[this.state](cp);\n            }\n        }\n\n        return this.tokenQueue.shift();\n    }\n\n    write(chunk, isLastChunk) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    }\n\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n                this.preprocessor.retreat();\n            }\n\n            this.active = false;\n            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n\n    _unconsume() {\n        this.consumedAfterSnapshot--;\n        this.preprocessor.retreat();\n    }\n\n    _reconsumeInState(state) {\n        this.state = state;\n        this._unconsume();\n    }\n\n    _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n        let consumedCount = 0;\n        let isMatch = true;\n        const patternLength = pattern.length;\n        let patternPos = 0;\n        let cp = startCp;\n        let patternCp = void 0;\n\n        for (; patternPos < patternLength; patternPos++) {\n            if (patternPos > 0) {\n                cp = this._consume();\n                consumedCount++;\n            }\n\n            if (cp === $.EOF) {\n                isMatch = false;\n                break;\n            }\n\n            patternCp = pattern[patternPos];\n\n            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n                isMatch = false;\n                break;\n            }\n        }\n\n        if (!isMatch) {\n            while (consumedCount--) {\n                this._unconsume();\n            }\n        }\n\n        return isMatch;\n    }\n\n    //Temp buffer\n    _isTempBufferEqualToScriptString() {\n        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n            return false;\n        }\n\n        for (let i = 0; i < this.tempBuff.length; i++) {\n            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: Tokenizer.START_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createEndTagToken() {\n        this.currentToken = {\n            type: Tokenizer.END_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createCommentToken() {\n        this.currentToken = {\n            type: Tokenizer.COMMENT_TOKEN,\n            data: ''\n        };\n    }\n\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: Tokenizer.DOCTYPE_TOKEN,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null\n        };\n    }\n\n    _createCharacterToken(type, ch) {\n        this.currentCharacterToken = {\n            type: type,\n            chars: ch\n        };\n    }\n\n    _createEOFToken() {\n        this.currentToken = { type: Tokenizer.EOF_TOKEN };\n    }\n\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: ''\n        };\n    }\n\n    _leaveAttrName(toState) {\n        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n            this.currentToken.attrs.push(this.currentAttr);\n        } else {\n            this._err(ERR.duplicateAttribute);\n        }\n\n        this.state = toState;\n    }\n\n    _leaveAttrValue(toState) {\n        this.state = toState;\n    }\n\n    //Token emission\n    _emitCurrentToken() {\n        this._emitCurrentCharacterToken();\n\n        const ct = this.currentToken;\n\n        this.currentToken = null;\n\n        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n        if (ct.type === Tokenizer.START_TAG_TOKEN) {\n            this.lastStartTagName = ct.tagName;\n        } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n        }\n\n        this.tokenQueue.push(ct);\n    }\n\n    _emitCurrentCharacterToken() {\n        if (this.currentCharacterToken) {\n            this.tokenQueue.push(this.currentCharacterToken);\n            this.currentCharacterToken = null;\n        }\n    }\n\n    _emitEOFToken() {\n        this._createEOFToken();\n        this._emitCurrentToken();\n    }\n\n    //Characters emission\n\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n            this._emitCurrentCharacterToken();\n        }\n\n        if (this.currentCharacterToken) {\n            this.currentCharacterToken.chars += ch;\n        } else {\n            this._createCharacterToken(type, ch);\n        }\n    }\n\n    _emitCodePoint(cp) {\n        let type = Tokenizer.CHARACTER_TOKEN;\n\n        if (isWhitespace(cp)) {\n            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n        } else if (cp === $.NULL) {\n            type = Tokenizer.NULL_CHARACTER_TOKEN;\n        }\n\n        this._appendCharToCurrentCharacterToken(type, toChar(cp));\n    }\n\n    _emitSeveralCodePoints(codePoints) {\n        for (let i = 0; i < codePoints.length; i++) {\n            this._emitCodePoint(codePoints[i]);\n        }\n    }\n\n    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n    //So we can avoid additional checks here.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n    }\n\n    // Character reference helpers\n    _matchNamedCharacterReference(startCp) {\n        let result = null;\n        let excess = 1;\n        let i = findNamedEntityTreeBranch(0, startCp);\n\n        this.tempBuff.push(startCp);\n\n        while (i > -1) {\n            const current = neTree[i];\n            const inNode = current < MAX_BRANCH_MARKER_VALUE;\n            const nodeWithData = inNode && current & HAS_DATA_FLAG;\n\n            if (nodeWithData) {\n                //NOTE: we use greedy search, so we continue lookup at this point\n                result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n                excess = 0;\n            }\n\n            const cp = this._consume();\n\n            this.tempBuff.push(cp);\n            excess++;\n\n            if (cp === $.EOF) {\n                break;\n            }\n\n            if (inNode) {\n                i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n            } else {\n                i = cp === current ? ++i : -1;\n            }\n        }\n\n        while (excess--) {\n            this.tempBuff.pop();\n            this._unconsume();\n        }\n\n        return result;\n    }\n\n    _isCharacterReferenceInAttribute() {\n        return (\n            this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE\n        );\n    }\n\n    _isCharacterReferenceAttributeQuirk(withSemicolon) {\n        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n            const nextCp = this._consume();\n\n            this._unconsume();\n\n            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n        }\n\n        return false;\n    }\n\n    _flushCodePointsConsumedAsCharacterReference() {\n        if (this._isCharacterReferenceInAttribute()) {\n            for (let i = 0; i < this.tempBuff.length; i++) {\n                this.currentAttr.value += toChar(this.tempBuff[i]);\n            }\n        } else {\n            this._emitSeveralCodePoints(this.tempBuff);\n        }\n\n        this.tempBuff = [];\n    }\n\n    // State machine\n\n    // Data state\n    //------------------------------------------------------------------\n    [DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = TAG_OPEN_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = DATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitCodePoint(cp);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    //  RCDATA state\n    //------------------------------------------------------------------\n    [RCDATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.AMPERSAND) {\n            this.returnState = RCDATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = RCDATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    [RAWTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    [PLAINTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Tag open state\n    //------------------------------------------------------------------\n    [TAG_OPEN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.state = MARKUP_DECLARATION_OPEN_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.QUESTION_MARK) {\n            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('<');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._emitChars('<');\n            this._reconsumeInState(DATA_STATE);\n        }\n    }\n\n    // End tag open state\n    //------------------------------------------------------------------\n    [END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingEndTagName);\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('</');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Tag name state\n    //------------------------------------------------------------------\n    [TAG_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentToken.tagName += toChar(cp);\n        }\n    }\n\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    [RCDATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RCDATA_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this.state = DATA_STATE;\n                    this._emitCurrentToken();\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RAWTEXT_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n            this._emitChars('<!');\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                } else if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                } else if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this.tempBuff = [];\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE\n                : SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n            this._emitChars('/');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_ESCAPED_STATE\n                : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Before attribute name state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.EQUALS_SIGN) {\n            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n            this._createAttr('=');\n            this.state = ATTRIBUTE_NAME_STATE;\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Attribute name state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n            this._unconsume();\n        } else if (cp === $.EQUALS_SIGN) {\n            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n        } else if (isAsciiUpper(cp)) {\n            this.currentAttr.name += toAsciiLowerChar(cp);\n        } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n            this._err(ERR.unexpectedCharacterInAttributeName);\n            this.currentAttr.name += toChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentAttr.name += toChar(cp);\n        }\n    }\n\n    // After attribute name state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.EQUALS_SIGN) {\n            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Before attribute value state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingAttributeValue);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n        }\n    }\n\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (\n            cp === $.QUOTATION_MARK ||\n            cp === $.APOSTROPHE ||\n            cp === $.LESS_THAN_SIGN ||\n            cp === $.EQUALS_SIGN ||\n            cp === $.GRAVE_ACCENT\n        ) {\n            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n            this.currentAttr.value += toChar(cp);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.SOLIDUS) {\n            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBetweenAttributes);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    [SELF_CLOSING_START_TAG_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.currentToken.selfClosing = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedSolidusInTag);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Bogus comment state\n    //------------------------------------------------------------------\n    [BOGUS_COMMENT_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    [MARKUP_DECLARATION_OPEN_STATE](cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n            this._createCommentToken();\n            this.state = COMMENT_START_STATE;\n        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n            this.state = DOCTYPE_STATE;\n        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n            if (this.allowCDATA) {\n                this.state = CDATA_SECTION_STATE;\n            } else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken();\n                this.currentToken.data = '[CDATA[';\n                this.state = BOGUS_COMMENT_STATE;\n            }\n        }\n\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Comment start state\n    //------------------------------------------------------------------\n    [COMMENT_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_START_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment start dash state\n    //------------------------------------------------------------------\n    [COMMENT_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment state\n    //------------------------------------------------------------------\n    [COMMENT_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '<';\n            this.state = COMMENT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.currentToken.data += '!';\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '!';\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_END_DASH_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n\n        this._reconsumeInState(COMMENT_END_STATE);\n    }\n\n    // Comment end dash state\n    //------------------------------------------------------------------\n    [COMMENT_END_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end state\n    //------------------------------------------------------------------\n    [COMMENT_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = COMMENT_END_BANG_STATE;\n        } else if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '-';\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end bang state\n    //------------------------------------------------------------------\n    [COMMENT_END_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '--!';\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.incorrectlyClosedComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--!';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    [DOCTYPE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBeforeDoctypeName);\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        }\n    }\n\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(toAsciiLowerChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeName);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._createDoctypeToken(toChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        }\n    }\n\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    [DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = AFTER_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.name += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.name += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n        }\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    [BOGUS_DOCTYPE_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        }\n    }\n\n    // CDATA section state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_BRACKET_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInCdata);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_BRACKET_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_END_STATE;\n        } else {\n            this._emitChars(']');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // CDATA section end state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n        } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this._emitChars(']');\n        } else {\n            this._emitChars(']]');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // Character reference state\n    //------------------------------------------------------------------\n    [CHARACTER_REFERENCE_STATE](cp) {\n        this.tempBuff = [$.AMPERSAND];\n\n        if (cp === $.NUMBER_SIGN) {\n            this.tempBuff.push(cp);\n            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n        } else if (isAsciiAlphaNumeric(cp)) {\n            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Named character reference state\n    //------------------------------------------------------------------\n    [NAMED_CHARACTER_REFERENCE_STATE](cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n\n        //NOTE: matching can be abrupted by hibernation. In that case match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            this.tempBuff = [$.AMPERSAND];\n        } else if (matchResult) {\n            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n\n            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n                if (!withSemicolon) {\n                    this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n                }\n\n                this.tempBuff = matchResult;\n            }\n\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = this.returnState;\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = AMBIGUOUS_AMPERSAND_STATE;\n        }\n    }\n\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    [AMBIGUOUS_AMPERSAND_STATE](cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            if (this._isCharacterReferenceInAttribute()) {\n                this.currentAttr.value += toChar(cp);\n            } else {\n                this._emitCodePoint(cp);\n            }\n        } else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\n        this.charRefCode = 0;\n\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n            this.tempBuff.push(cp);\n            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n        } else {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n        }\n    }\n\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiHexDigit(cp)) {\n            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Decimal character reference start state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        } else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        } else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\n        if (this.charRefCode === $.NULL) {\n            this._err(ERR.nullCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (this.charRefCode > 0x10ffff) {\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isSurrogate(this.charRefCode)) {\n            this._err(ERR.surrogateCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n            this._err(ERR.noncharacterCharacterReference);\n        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n\n            if (replacement) {\n                this.charRefCode = replacement;\n            }\n        }\n\n        this.tempBuff = [this.charRefCode];\n\n        this._flushCodePointsConsumedAsCharacterReference();\n        this._reconsumeInState(this.returnState);\n    }\n}\n\n//Token types\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\n\n//Tokenizer initial states for different modes\nTokenizer.MODE = {\n    DATA: DATA_STATE,\n    RCDATA: RCDATA_STATE,\n    RAWTEXT: RAWTEXT_STATE,\n    SCRIPT_DATA: SCRIPT_DATA_STATE,\n    PLAINTEXT: PLAINTEXT_STATE\n};\n\n//Static\nTokenizer.getTokenAttr = function(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n\n    return null;\n};\n\nmodule.exports = Tokenizer;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$parse5$lib$common$error_codes","~$module$node_modules$parse5$lib$tokenizer$preprocessor","~$module$node_modules$parse5$lib$tokenizer$named_entity_data","~$module$node_modules$parse5$lib$common$unicode"]],"~:properties",["^5",["currentToken","systemId","attrs","currentCharacterToken","charRefCode","COMMENT_TOKEN","MODE","RAWTEXT","chars","END_TAG_TOKEN","publicId","preprocessor","forceQuirks","currentAttr","name","consumedAfterSnapshot","value","START_TAG_TOKEN","HIBERNATION_TOKEN","tokenQueue","CHARACTER_TOKEN","lastStartTagName","EOF_TOKEN","ackSelfClosing","type","tagName","state","DOCTYPE_TOKEN","returnState","getTokenAttr","SCRIPT_DATA","WHITESPACE_CHARACTER_TOKEN","RCDATA","active","allowCDATA","PLAINTEXT","selfClosing","data","DATA","NULL_CHARACTER_TOKEN","tempBuff"]],"~:compiled-at",1676667638404,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$parse5$lib$tokenizer$index.js\",\n\"lineCount\":78,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/parse5/lib/tokenizer/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$parse5$lib$tokenizer$index\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nconst Preprocessor = require('./preprocessor');\\nconst unicode = require('../common/unicode');\\nconst neTree = require('./named-entity-data');\\nconst ERR = require('../common/error-codes');\\n\\n//Aliases\\nconst $ = unicode.CODE_POINTS;\\nconst $$ = unicode.CODE_POINT_SEQUENCES;\\n\\n//C1 Unicode control character reference replacements\\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\\n    0x80: 0x20ac,\\n    0x82: 0x201a,\\n    0x83: 0x0192,\\n    0x84: 0x201e,\\n    0x85: 0x2026,\\n    0x86: 0x2020,\\n    0x87: 0x2021,\\n    0x88: 0x02c6,\\n    0x89: 0x2030,\\n    0x8a: 0x0160,\\n    0x8b: 0x2039,\\n    0x8c: 0x0152,\\n    0x8e: 0x017d,\\n    0x91: 0x2018,\\n    0x92: 0x2019,\\n    0x93: 0x201c,\\n    0x94: 0x201d,\\n    0x95: 0x2022,\\n    0x96: 0x2013,\\n    0x97: 0x2014,\\n    0x98: 0x02dc,\\n    0x99: 0x2122,\\n    0x9a: 0x0161,\\n    0x9b: 0x203a,\\n    0x9c: 0x0153,\\n    0x9e: 0x017e,\\n    0x9f: 0x0178\\n};\\n\\n// Named entity tree flags\\nconst HAS_DATA_FLAG = 1 << 0;\\nconst DATA_DUPLET_FLAG = 1 << 1;\\nconst HAS_BRANCHES_FLAG = 1 << 2;\\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\\n\\n//States\\nconst DATA_STATE = 'DATA_STATE';\\nconst RCDATA_STATE = 'RCDATA_STATE';\\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\\nconst COMMENT_STATE = 'COMMENT_STATE';\\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\\n\\n//Utils\\n\\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\\n//this functions if they will be situated in another module due to context switch.\\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\\nfunction isWhitespace(cp) {\\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\\n}\\n\\nfunction isAsciiDigit(cp) {\\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\\n}\\n\\nfunction isAsciiUpper(cp) {\\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\\n}\\n\\nfunction isAsciiLower(cp) {\\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\\n}\\n\\nfunction isAsciiLetter(cp) {\\n    return isAsciiLower(cp) || isAsciiUpper(cp);\\n}\\n\\nfunction isAsciiAlphaNumeric(cp) {\\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\\n}\\n\\nfunction isAsciiUpperHexDigit(cp) {\\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\\n}\\n\\nfunction isAsciiLowerHexDigit(cp) {\\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\\n}\\n\\nfunction isAsciiHexDigit(cp) {\\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\\n}\\n\\nfunction toAsciiLowerCodePoint(cp) {\\n    return cp + 0x0020;\\n}\\n\\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\\n//So, we need to workaround this manually.\\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\\nfunction toChar(cp) {\\n    if (cp <= 0xffff) {\\n        return String.fromCharCode(cp);\\n    }\\n\\n    cp -= 0x10000;\\n    return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));\\n}\\n\\nfunction toAsciiLowerChar(cp) {\\n    return String.fromCharCode(toAsciiLowerCodePoint(cp));\\n}\\n\\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\\n    const branchCount = neTree[++nodeIx];\\n    let lo = ++nodeIx;\\n    let hi = lo + branchCount - 1;\\n\\n    while (lo <= hi) {\\n        const mid = (lo + hi) >>> 1;\\n        const midCp = neTree[mid];\\n\\n        if (midCp < cp) {\\n            lo = mid + 1;\\n        } else if (midCp > cp) {\\n            hi = mid - 1;\\n        } else {\\n            return neTree[mid + branchCount];\\n        }\\n    }\\n\\n    return -1;\\n}\\n\\n//Tokenizer\\nclass Tokenizer {\\n    constructor() {\\n        this.preprocessor = new Preprocessor();\\n\\n        this.tokenQueue = [];\\n\\n        this.allowCDATA = false;\\n\\n        this.state = DATA_STATE;\\n        this.returnState = '';\\n\\n        this.charRefCode = -1;\\n        this.tempBuff = [];\\n        this.lastStartTagName = '';\\n\\n        this.consumedAfterSnapshot = -1;\\n        this.active = false;\\n\\n        this.currentCharacterToken = null;\\n        this.currentToken = null;\\n        this.currentAttr = null;\\n    }\\n\\n    //Errors\\n    _err() {\\n        // NOTE: err reporting is noop by default. Enabled by mixin.\\n    }\\n\\n    _errOnNextCodePoint(err) {\\n        this._consume();\\n        this._err(err);\\n        this._unconsume();\\n    }\\n\\n    //API\\n    getNextToken() {\\n        while (!this.tokenQueue.length && this.active) {\\n            this.consumedAfterSnapshot = 0;\\n\\n            const cp = this._consume();\\n\\n            if (!this._ensureHibernation()) {\\n                this[this.state](cp);\\n            }\\n        }\\n\\n        return this.tokenQueue.shift();\\n    }\\n\\n    write(chunk, isLastChunk) {\\n        this.active = true;\\n        this.preprocessor.write(chunk, isLastChunk);\\n    }\\n\\n    insertHtmlAtCurrentPos(chunk) {\\n        this.active = true;\\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\\n    }\\n\\n    //Hibernation\\n    _ensureHibernation() {\\n        if (this.preprocessor.endOfChunkHit) {\\n            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\\n                this.preprocessor.retreat();\\n            }\\n\\n            this.active = false;\\n            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    //Consumption\\n    _consume() {\\n        this.consumedAfterSnapshot++;\\n        return this.preprocessor.advance();\\n    }\\n\\n    _unconsume() {\\n        this.consumedAfterSnapshot--;\\n        this.preprocessor.retreat();\\n    }\\n\\n    _reconsumeInState(state) {\\n        this.state = state;\\n        this._unconsume();\\n    }\\n\\n    _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\\n        let consumedCount = 0;\\n        let isMatch = true;\\n        const patternLength = pattern.length;\\n        let patternPos = 0;\\n        let cp = startCp;\\n        let patternCp = void 0;\\n\\n        for (; patternPos < patternLength; patternPos++) {\\n            if (patternPos > 0) {\\n                cp = this._consume();\\n                consumedCount++;\\n            }\\n\\n            if (cp === $.EOF) {\\n                isMatch = false;\\n                break;\\n            }\\n\\n            patternCp = pattern[patternPos];\\n\\n            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\\n                isMatch = false;\\n                break;\\n            }\\n        }\\n\\n        if (!isMatch) {\\n            while (consumedCount--) {\\n                this._unconsume();\\n            }\\n        }\\n\\n        return isMatch;\\n    }\\n\\n    //Temp buffer\\n    _isTempBufferEqualToScriptString() {\\n        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\\n            return false;\\n        }\\n\\n        for (let i = 0; i < this.tempBuff.length; i++) {\\n            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    //Token creation\\n    _createStartTagToken() {\\n        this.currentToken = {\\n            type: Tokenizer.START_TAG_TOKEN,\\n            tagName: '',\\n            selfClosing: false,\\n            ackSelfClosing: false,\\n            attrs: []\\n        };\\n    }\\n\\n    _createEndTagToken() {\\n        this.currentToken = {\\n            type: Tokenizer.END_TAG_TOKEN,\\n            tagName: '',\\n            selfClosing: false,\\n            attrs: []\\n        };\\n    }\\n\\n    _createCommentToken() {\\n        this.currentToken = {\\n            type: Tokenizer.COMMENT_TOKEN,\\n            data: ''\\n        };\\n    }\\n\\n    _createDoctypeToken(initialName) {\\n        this.currentToken = {\\n            type: Tokenizer.DOCTYPE_TOKEN,\\n            name: initialName,\\n            forceQuirks: false,\\n            publicId: null,\\n            systemId: null\\n        };\\n    }\\n\\n    _createCharacterToken(type, ch) {\\n        this.currentCharacterToken = {\\n            type: type,\\n            chars: ch\\n        };\\n    }\\n\\n    _createEOFToken() {\\n        this.currentToken = { type: Tokenizer.EOF_TOKEN };\\n    }\\n\\n    //Tag attributes\\n    _createAttr(attrNameFirstCh) {\\n        this.currentAttr = {\\n            name: attrNameFirstCh,\\n            value: ''\\n        };\\n    }\\n\\n    _leaveAttrName(toState) {\\n        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\\n            this.currentToken.attrs.push(this.currentAttr);\\n        } else {\\n            this._err(ERR.duplicateAttribute);\\n        }\\n\\n        this.state = toState;\\n    }\\n\\n    _leaveAttrValue(toState) {\\n        this.state = toState;\\n    }\\n\\n    //Token emission\\n    _emitCurrentToken() {\\n        this._emitCurrentCharacterToken();\\n\\n        const ct = this.currentToken;\\n\\n        this.currentToken = null;\\n\\n        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\\n        if (ct.type === Tokenizer.START_TAG_TOKEN) {\\n            this.lastStartTagName = ct.tagName;\\n        } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\\n            if (ct.attrs.length > 0) {\\n                this._err(ERR.endTagWithAttributes);\\n            }\\n\\n            if (ct.selfClosing) {\\n                this._err(ERR.endTagWithTrailingSolidus);\\n            }\\n        }\\n\\n        this.tokenQueue.push(ct);\\n    }\\n\\n    _emitCurrentCharacterToken() {\\n        if (this.currentCharacterToken) {\\n            this.tokenQueue.push(this.currentCharacterToken);\\n            this.currentCharacterToken = null;\\n        }\\n    }\\n\\n    _emitEOFToken() {\\n        this._createEOFToken();\\n        this._emitCurrentToken();\\n    }\\n\\n    //Characters emission\\n\\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\\n    //If we have a sequence of characters that belong to the same group, parser can process it\\n    //as a single solid character token.\\n    //So, there are 3 types of character tokens in parse5:\\n    //1)NULL_CHARACTER_TOKEN - \\\\u0000-character sequences (e.g. '\\\\u0000\\\\u0000\\\\u0000')\\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\\\n  \\\\r\\\\t   \\\\f')\\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\\n    _appendCharToCurrentCharacterToken(type, ch) {\\n        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\\n            this._emitCurrentCharacterToken();\\n        }\\n\\n        if (this.currentCharacterToken) {\\n            this.currentCharacterToken.chars += ch;\\n        } else {\\n            this._createCharacterToken(type, ch);\\n        }\\n    }\\n\\n    _emitCodePoint(cp) {\\n        let type = Tokenizer.CHARACTER_TOKEN;\\n\\n        if (isWhitespace(cp)) {\\n            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\\n        } else if (cp === $.NULL) {\\n            type = Tokenizer.NULL_CHARACTER_TOKEN;\\n        }\\n\\n        this._appendCharToCurrentCharacterToken(type, toChar(cp));\\n    }\\n\\n    _emitSeveralCodePoints(codePoints) {\\n        for (let i = 0; i < codePoints.length; i++) {\\n            this._emitCodePoint(codePoints[i]);\\n        }\\n    }\\n\\n    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\\n    //So we can avoid additional checks here.\\n    _emitChars(ch) {\\n        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\\n    }\\n\\n    // Character reference helpers\\n    _matchNamedCharacterReference(startCp) {\\n        let result = null;\\n        let excess = 1;\\n        let i = findNamedEntityTreeBranch(0, startCp);\\n\\n        this.tempBuff.push(startCp);\\n\\n        while (i > -1) {\\n            const current = neTree[i];\\n            const inNode = current < MAX_BRANCH_MARKER_VALUE;\\n            const nodeWithData = inNode && current & HAS_DATA_FLAG;\\n\\n            if (nodeWithData) {\\n                //NOTE: we use greedy search, so we continue lookup at this point\\n                result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\\n                excess = 0;\\n            }\\n\\n            const cp = this._consume();\\n\\n            this.tempBuff.push(cp);\\n            excess++;\\n\\n            if (cp === $.EOF) {\\n                break;\\n            }\\n\\n            if (inNode) {\\n                i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\\n            } else {\\n                i = cp === current ? ++i : -1;\\n            }\\n        }\\n\\n        while (excess--) {\\n            this.tempBuff.pop();\\n            this._unconsume();\\n        }\\n\\n        return result;\\n    }\\n\\n    _isCharacterReferenceInAttribute() {\\n        return (\\n            this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||\\n            this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||\\n            this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE\\n        );\\n    }\\n\\n    _isCharacterReferenceAttributeQuirk(withSemicolon) {\\n        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\\n            const nextCp = this._consume();\\n\\n            this._unconsume();\\n\\n            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\\n        }\\n\\n        return false;\\n    }\\n\\n    _flushCodePointsConsumedAsCharacterReference() {\\n        if (this._isCharacterReferenceInAttribute()) {\\n            for (let i = 0; i < this.tempBuff.length; i++) {\\n                this.currentAttr.value += toChar(this.tempBuff[i]);\\n            }\\n        } else {\\n            this._emitSeveralCodePoints(this.tempBuff);\\n        }\\n\\n        this.tempBuff = [];\\n    }\\n\\n    // State machine\\n\\n    // Data state\\n    //------------------------------------------------------------------\\n    [DATA_STATE](cp) {\\n        this.preprocessor.dropParsedChunk();\\n\\n        if (cp === $.LESS_THAN_SIGN) {\\n            this.state = TAG_OPEN_STATE;\\n        } else if (cp === $.AMPERSAND) {\\n            this.returnState = DATA_STATE;\\n            this.state = CHARACTER_REFERENCE_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this._emitCodePoint(cp);\\n        } else if (cp === $.EOF) {\\n            this._emitEOFToken();\\n        } else {\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    //  RCDATA state\\n    //------------------------------------------------------------------\\n    [RCDATA_STATE](cp) {\\n        this.preprocessor.dropParsedChunk();\\n\\n        if (cp === $.AMPERSAND) {\\n            this.returnState = RCDATA_STATE;\\n            this.state = CHARACTER_REFERENCE_STATE;\\n        } else if (cp === $.LESS_THAN_SIGN) {\\n            this.state = RCDATA_LESS_THAN_SIGN_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\\n        } else if (cp === $.EOF) {\\n            this._emitEOFToken();\\n        } else {\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    // RAWTEXT state\\n    //------------------------------------------------------------------\\n    [RAWTEXT_STATE](cp) {\\n        this.preprocessor.dropParsedChunk();\\n\\n        if (cp === $.LESS_THAN_SIGN) {\\n            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\\n        } else if (cp === $.EOF) {\\n            this._emitEOFToken();\\n        } else {\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    // Script data state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_STATE](cp) {\\n        this.preprocessor.dropParsedChunk();\\n\\n        if (cp === $.LESS_THAN_SIGN) {\\n            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\\n        } else if (cp === $.EOF) {\\n            this._emitEOFToken();\\n        } else {\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    // PLAINTEXT state\\n    //------------------------------------------------------------------\\n    [PLAINTEXT_STATE](cp) {\\n        this.preprocessor.dropParsedChunk();\\n\\n        if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\\n        } else if (cp === $.EOF) {\\n            this._emitEOFToken();\\n        } else {\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    // Tag open state\\n    //------------------------------------------------------------------\\n    [TAG_OPEN_STATE](cp) {\\n        if (cp === $.EXCLAMATION_MARK) {\\n            this.state = MARKUP_DECLARATION_OPEN_STATE;\\n        } else if (cp === $.SOLIDUS) {\\n            this.state = END_TAG_OPEN_STATE;\\n        } else if (isAsciiLetter(cp)) {\\n            this._createStartTagToken();\\n            this._reconsumeInState(TAG_NAME_STATE);\\n        } else if (cp === $.QUESTION_MARK) {\\n            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\\n            this._createCommentToken();\\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofBeforeTagName);\\n            this._emitChars('<');\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.invalidFirstCharacterOfTagName);\\n            this._emitChars('<');\\n            this._reconsumeInState(DATA_STATE);\\n        }\\n    }\\n\\n    // End tag open state\\n    //------------------------------------------------------------------\\n    [END_TAG_OPEN_STATE](cp) {\\n        if (isAsciiLetter(cp)) {\\n            this._createEndTagToken();\\n            this._reconsumeInState(TAG_NAME_STATE);\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.missingEndTagName);\\n            this.state = DATA_STATE;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofBeforeTagName);\\n            this._emitChars('</');\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.invalidFirstCharacterOfTagName);\\n            this._createCommentToken();\\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\\n        }\\n    }\\n\\n    // Tag name state\\n    //------------------------------------------------------------------\\n    [TAG_NAME_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\\n        } else if (cp === $.SOLIDUS) {\\n            this.state = SELF_CLOSING_START_TAG_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (isAsciiUpper(cp)) {\\n            this.currentToken.tagName += toAsciiLowerChar(cp);\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInTag);\\n            this._emitEOFToken();\\n        } else {\\n            this.currentToken.tagName += toChar(cp);\\n        }\\n    }\\n\\n    // RCDATA less-than sign state\\n    //------------------------------------------------------------------\\n    [RCDATA_LESS_THAN_SIGN_STATE](cp) {\\n        if (cp === $.SOLIDUS) {\\n            this.tempBuff = [];\\n            this.state = RCDATA_END_TAG_OPEN_STATE;\\n        } else {\\n            this._emitChars('<');\\n            this._reconsumeInState(RCDATA_STATE);\\n        }\\n    }\\n\\n    // RCDATA end tag open state\\n    //------------------------------------------------------------------\\n    [RCDATA_END_TAG_OPEN_STATE](cp) {\\n        if (isAsciiLetter(cp)) {\\n            this._createEndTagToken();\\n            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\\n        } else {\\n            this._emitChars('</');\\n            this._reconsumeInState(RCDATA_STATE);\\n        }\\n    }\\n\\n    // RCDATA end tag name state\\n    //------------------------------------------------------------------\\n    [RCDATA_END_TAG_NAME_STATE](cp) {\\n        if (isAsciiUpper(cp)) {\\n            this.currentToken.tagName += toAsciiLowerChar(cp);\\n            this.tempBuff.push(cp);\\n        } else if (isAsciiLower(cp)) {\\n            this.currentToken.tagName += toChar(cp);\\n            this.tempBuff.push(cp);\\n        } else {\\n            if (this.lastStartTagName === this.currentToken.tagName) {\\n                if (isWhitespace(cp)) {\\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\\n                    return;\\n                }\\n\\n                if (cp === $.SOLIDUS) {\\n                    this.state = SELF_CLOSING_START_TAG_STATE;\\n                    return;\\n                }\\n\\n                if (cp === $.GREATER_THAN_SIGN) {\\n                    this.state = DATA_STATE;\\n                    this._emitCurrentToken();\\n                    return;\\n                }\\n            }\\n\\n            this._emitChars('</');\\n            this._emitSeveralCodePoints(this.tempBuff);\\n            this._reconsumeInState(RCDATA_STATE);\\n        }\\n    }\\n\\n    // RAWTEXT less-than sign state\\n    //------------------------------------------------------------------\\n    [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\\n        if (cp === $.SOLIDUS) {\\n            this.tempBuff = [];\\n            this.state = RAWTEXT_END_TAG_OPEN_STATE;\\n        } else {\\n            this._emitChars('<');\\n            this._reconsumeInState(RAWTEXT_STATE);\\n        }\\n    }\\n\\n    // RAWTEXT end tag open state\\n    //------------------------------------------------------------------\\n    [RAWTEXT_END_TAG_OPEN_STATE](cp) {\\n        if (isAsciiLetter(cp)) {\\n            this._createEndTagToken();\\n            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\\n        } else {\\n            this._emitChars('</');\\n            this._reconsumeInState(RAWTEXT_STATE);\\n        }\\n    }\\n\\n    // RAWTEXT end tag name state\\n    //------------------------------------------------------------------\\n    [RAWTEXT_END_TAG_NAME_STATE](cp) {\\n        if (isAsciiUpper(cp)) {\\n            this.currentToken.tagName += toAsciiLowerChar(cp);\\n            this.tempBuff.push(cp);\\n        } else if (isAsciiLower(cp)) {\\n            this.currentToken.tagName += toChar(cp);\\n            this.tempBuff.push(cp);\\n        } else {\\n            if (this.lastStartTagName === this.currentToken.tagName) {\\n                if (isWhitespace(cp)) {\\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\\n                    return;\\n                }\\n\\n                if (cp === $.SOLIDUS) {\\n                    this.state = SELF_CLOSING_START_TAG_STATE;\\n                    return;\\n                }\\n\\n                if (cp === $.GREATER_THAN_SIGN) {\\n                    this._emitCurrentToken();\\n                    this.state = DATA_STATE;\\n                    return;\\n                }\\n            }\\n\\n            this._emitChars('</');\\n            this._emitSeveralCodePoints(this.tempBuff);\\n            this._reconsumeInState(RAWTEXT_STATE);\\n        }\\n    }\\n\\n    // Script data less-than sign state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\\n        if (cp === $.SOLIDUS) {\\n            this.tempBuff = [];\\n            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\\n        } else if (cp === $.EXCLAMATION_MARK) {\\n            this.state = SCRIPT_DATA_ESCAPE_START_STATE;\\n            this._emitChars('<!');\\n        } else {\\n            this._emitChars('<');\\n            this._reconsumeInState(SCRIPT_DATA_STATE);\\n        }\\n    }\\n\\n    // Script data end tag open state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\\n        if (isAsciiLetter(cp)) {\\n            this._createEndTagToken();\\n            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\\n        } else {\\n            this._emitChars('</');\\n            this._reconsumeInState(SCRIPT_DATA_STATE);\\n        }\\n    }\\n\\n    // Script data end tag name state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\\n        if (isAsciiUpper(cp)) {\\n            this.currentToken.tagName += toAsciiLowerChar(cp);\\n            this.tempBuff.push(cp);\\n        } else if (isAsciiLower(cp)) {\\n            this.currentToken.tagName += toChar(cp);\\n            this.tempBuff.push(cp);\\n        } else {\\n            if (this.lastStartTagName === this.currentToken.tagName) {\\n                if (isWhitespace(cp)) {\\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\\n                    return;\\n                } else if (cp === $.SOLIDUS) {\\n                    this.state = SELF_CLOSING_START_TAG_STATE;\\n                    return;\\n                } else if (cp === $.GREATER_THAN_SIGN) {\\n                    this._emitCurrentToken();\\n                    this.state = DATA_STATE;\\n                    return;\\n                }\\n            }\\n\\n            this._emitChars('</');\\n            this._emitSeveralCodePoints(this.tempBuff);\\n            this._reconsumeInState(SCRIPT_DATA_STATE);\\n        }\\n    }\\n\\n    // Script data escape start state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\\n            this._emitChars('-');\\n        } else {\\n            this._reconsumeInState(SCRIPT_DATA_STATE);\\n        }\\n    }\\n\\n    // Script data escape start dash state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\\n            this._emitChars('-');\\n        } else {\\n            this._reconsumeInState(SCRIPT_DATA_STATE);\\n        }\\n    }\\n\\n    // Script data escaped state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_ESCAPED_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\\n            this._emitChars('-');\\n        } else if (cp === $.LESS_THAN_SIGN) {\\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\\n            this._emitEOFToken();\\n        } else {\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    // Script data escaped dash state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\\n            this._emitChars('-');\\n        } else if (cp === $.LESS_THAN_SIGN) {\\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\\n            this._emitEOFToken();\\n        } else {\\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    // Script data escaped dash dash state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this._emitChars('-');\\n        } else if (cp === $.LESS_THAN_SIGN) {\\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this.state = SCRIPT_DATA_STATE;\\n            this._emitChars('>');\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\\n            this._emitEOFToken();\\n        } else {\\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    // Script data escaped less-than sign state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\\n        if (cp === $.SOLIDUS) {\\n            this.tempBuff = [];\\n            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\\n        } else if (isAsciiLetter(cp)) {\\n            this.tempBuff = [];\\n            this._emitChars('<');\\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\\n        } else {\\n            this._emitChars('<');\\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\\n        }\\n    }\\n\\n    // Script data escaped end tag open state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\\n        if (isAsciiLetter(cp)) {\\n            this._createEndTagToken();\\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\\n        } else {\\n            this._emitChars('</');\\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\\n        }\\n    }\\n\\n    // Script data escaped end tag name state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\\n        if (isAsciiUpper(cp)) {\\n            this.currentToken.tagName += toAsciiLowerChar(cp);\\n            this.tempBuff.push(cp);\\n        } else if (isAsciiLower(cp)) {\\n            this.currentToken.tagName += toChar(cp);\\n            this.tempBuff.push(cp);\\n        } else {\\n            if (this.lastStartTagName === this.currentToken.tagName) {\\n                if (isWhitespace(cp)) {\\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\\n                    return;\\n                }\\n\\n                if (cp === $.SOLIDUS) {\\n                    this.state = SELF_CLOSING_START_TAG_STATE;\\n                    return;\\n                }\\n\\n                if (cp === $.GREATER_THAN_SIGN) {\\n                    this._emitCurrentToken();\\n                    this.state = DATA_STATE;\\n                    return;\\n                }\\n            }\\n\\n            this._emitChars('</');\\n            this._emitSeveralCodePoints(this.tempBuff);\\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\\n        }\\n    }\\n\\n    // Script data double escape start state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\\n            this.state = this._isTempBufferEqualToScriptString()\\n                ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE\\n                : SCRIPT_DATA_ESCAPED_STATE;\\n            this._emitCodePoint(cp);\\n        } else if (isAsciiUpper(cp)) {\\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\\n            this._emitCodePoint(cp);\\n        } else if (isAsciiLower(cp)) {\\n            this.tempBuff.push(cp);\\n            this._emitCodePoint(cp);\\n        } else {\\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\\n        }\\n    }\\n\\n    // Script data double escaped state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\\n            this._emitChars('-');\\n        } else if (cp === $.LESS_THAN_SIGN) {\\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\\n            this._emitChars('<');\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\\n            this._emitEOFToken();\\n        } else {\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    // Script data double escaped dash state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\\n            this._emitChars('-');\\n        } else if (cp === $.LESS_THAN_SIGN) {\\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\\n            this._emitChars('<');\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\\n            this._emitEOFToken();\\n        } else {\\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    // Script data double escaped dash dash state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this._emitChars('-');\\n        } else if (cp === $.LESS_THAN_SIGN) {\\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\\n            this._emitChars('<');\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this.state = SCRIPT_DATA_STATE;\\n            this._emitChars('>');\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\\n            this._emitEOFToken();\\n        } else {\\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    // Script data double escaped less-than sign state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\\n        if (cp === $.SOLIDUS) {\\n            this.tempBuff = [];\\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\\n            this._emitChars('/');\\n        } else {\\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\\n        }\\n    }\\n\\n    // Script data double escape end state\\n    //------------------------------------------------------------------\\n    [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\\n            this.state = this._isTempBufferEqualToScriptString()\\n                ? SCRIPT_DATA_ESCAPED_STATE\\n                : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\\n\\n            this._emitCodePoint(cp);\\n        } else if (isAsciiUpper(cp)) {\\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\\n            this._emitCodePoint(cp);\\n        } else if (isAsciiLower(cp)) {\\n            this.tempBuff.push(cp);\\n            this._emitCodePoint(cp);\\n        } else {\\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\\n        }\\n    }\\n\\n    // Before attribute name state\\n    //------------------------------------------------------------------\\n    [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            return;\\n        }\\n\\n        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\\n            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\\n        } else if (cp === $.EQUALS_SIGN) {\\n            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\\n            this._createAttr('=');\\n            this.state = ATTRIBUTE_NAME_STATE;\\n        } else {\\n            this._createAttr('');\\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\\n        }\\n    }\\n\\n    // Attribute name state\\n    //------------------------------------------------------------------\\n    [ATTRIBUTE_NAME_STATE](cp) {\\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\\n            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\\n            this._unconsume();\\n        } else if (cp === $.EQUALS_SIGN) {\\n            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\\n        } else if (isAsciiUpper(cp)) {\\n            this.currentAttr.name += toAsciiLowerChar(cp);\\n        } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\\n            this._err(ERR.unexpectedCharacterInAttributeName);\\n            this.currentAttr.name += toChar(cp);\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\\n        } else {\\n            this.currentAttr.name += toChar(cp);\\n        }\\n    }\\n\\n    // After attribute name state\\n    //------------------------------------------------------------------\\n    [AFTER_ATTRIBUTE_NAME_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            return;\\n        }\\n\\n        if (cp === $.SOLIDUS) {\\n            this.state = SELF_CLOSING_START_TAG_STATE;\\n        } else if (cp === $.EQUALS_SIGN) {\\n            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInTag);\\n            this._emitEOFToken();\\n        } else {\\n            this._createAttr('');\\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\\n        }\\n    }\\n\\n    // Before attribute value state\\n    //------------------------------------------------------------------\\n    [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            return;\\n        }\\n\\n        if (cp === $.QUOTATION_MARK) {\\n            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\\n        } else if (cp === $.APOSTROPHE) {\\n            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.missingAttributeValue);\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else {\\n            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\\n        }\\n    }\\n\\n    // Attribute value (double-quoted) state\\n    //------------------------------------------------------------------\\n    [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\\n        if (cp === $.QUOTATION_MARK) {\\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\\n        } else if (cp === $.AMPERSAND) {\\n            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\\n            this.state = CHARACTER_REFERENCE_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInTag);\\n            this._emitEOFToken();\\n        } else {\\n            this.currentAttr.value += toChar(cp);\\n        }\\n    }\\n\\n    // Attribute value (single-quoted) state\\n    //------------------------------------------------------------------\\n    [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\\n        if (cp === $.APOSTROPHE) {\\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\\n        } else if (cp === $.AMPERSAND) {\\n            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\\n            this.state = CHARACTER_REFERENCE_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInTag);\\n            this._emitEOFToken();\\n        } else {\\n            this.currentAttr.value += toChar(cp);\\n        }\\n    }\\n\\n    // Attribute value (unquoted) state\\n    //------------------------------------------------------------------\\n    [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\\n        } else if (cp === $.AMPERSAND) {\\n            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\\n            this.state = CHARACTER_REFERENCE_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._leaveAttrValue(DATA_STATE);\\n            this._emitCurrentToken();\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\\n        } else if (\\n            cp === $.QUOTATION_MARK ||\\n            cp === $.APOSTROPHE ||\\n            cp === $.LESS_THAN_SIGN ||\\n            cp === $.EQUALS_SIGN ||\\n            cp === $.GRAVE_ACCENT\\n        ) {\\n            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\\n            this.currentAttr.value += toChar(cp);\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInTag);\\n            this._emitEOFToken();\\n        } else {\\n            this.currentAttr.value += toChar(cp);\\n        }\\n    }\\n\\n    // After attribute value (quoted) state\\n    //------------------------------------------------------------------\\n    [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\\n        } else if (cp === $.SOLIDUS) {\\n            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._leaveAttrValue(DATA_STATE);\\n            this._emitCurrentToken();\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInTag);\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.missingWhitespaceBetweenAttributes);\\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\\n        }\\n    }\\n\\n    // Self-closing start tag state\\n    //------------------------------------------------------------------\\n    [SELF_CLOSING_START_TAG_STATE](cp) {\\n        if (cp === $.GREATER_THAN_SIGN) {\\n            this.currentToken.selfClosing = true;\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInTag);\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.unexpectedSolidusInTag);\\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\\n        }\\n    }\\n\\n    // Bogus comment state\\n    //------------------------------------------------------------------\\n    [BOGUS_COMMENT_STATE](cp) {\\n        if (cp === $.GREATER_THAN_SIGN) {\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.EOF) {\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\\n        } else {\\n            this.currentToken.data += toChar(cp);\\n        }\\n    }\\n\\n    // Markup declaration open state\\n    //------------------------------------------------------------------\\n    [MARKUP_DECLARATION_OPEN_STATE](cp) {\\n        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\\n            this._createCommentToken();\\n            this.state = COMMENT_START_STATE;\\n        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\\n            this.state = DOCTYPE_STATE;\\n        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\\n            if (this.allowCDATA) {\\n                this.state = CDATA_SECTION_STATE;\\n            } else {\\n                this._err(ERR.cdataInHtmlContent);\\n                this._createCommentToken();\\n                this.currentToken.data = '[CDATA[';\\n                this.state = BOGUS_COMMENT_STATE;\\n            }\\n        }\\n\\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\\n        //results are no longer valid and we will need to start over.\\n        else if (!this._ensureHibernation()) {\\n            this._err(ERR.incorrectlyOpenedComment);\\n            this._createCommentToken();\\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\\n        }\\n    }\\n\\n    // Comment start state\\n    //------------------------------------------------------------------\\n    [COMMENT_START_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = COMMENT_START_DASH_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.abruptClosingOfEmptyComment);\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else {\\n            this._reconsumeInState(COMMENT_STATE);\\n        }\\n    }\\n\\n    // Comment start dash state\\n    //------------------------------------------------------------------\\n    [COMMENT_START_DASH_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = COMMENT_END_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.abruptClosingOfEmptyComment);\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInComment);\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this.currentToken.data += '-';\\n            this._reconsumeInState(COMMENT_STATE);\\n        }\\n    }\\n\\n    // Comment state\\n    //------------------------------------------------------------------\\n    [COMMENT_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = COMMENT_END_DASH_STATE;\\n        } else if (cp === $.LESS_THAN_SIGN) {\\n            this.currentToken.data += '<';\\n            this.state = COMMENT_LESS_THAN_SIGN_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInComment);\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this.currentToken.data += toChar(cp);\\n        }\\n    }\\n\\n    // Comment less-than sign state\\n    //------------------------------------------------------------------\\n    [COMMENT_LESS_THAN_SIGN_STATE](cp) {\\n        if (cp === $.EXCLAMATION_MARK) {\\n            this.currentToken.data += '!';\\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\\n        } else if (cp === $.LESS_THAN_SIGN) {\\n            this.currentToken.data += '!';\\n        } else {\\n            this._reconsumeInState(COMMENT_STATE);\\n        }\\n    }\\n\\n    // Comment less-than sign bang state\\n    //------------------------------------------------------------------\\n    [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\\n        } else {\\n            this._reconsumeInState(COMMENT_STATE);\\n        }\\n    }\\n\\n    // Comment less-than sign bang dash state\\n    //------------------------------------------------------------------\\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\\n        } else {\\n            this._reconsumeInState(COMMENT_END_DASH_STATE);\\n        }\\n    }\\n\\n    // Comment less-than sign bang dash dash state\\n    //------------------------------------------------------------------\\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\\n            this._err(ERR.nestedComment);\\n        }\\n\\n        this._reconsumeInState(COMMENT_END_STATE);\\n    }\\n\\n    // Comment end dash state\\n    //------------------------------------------------------------------\\n    [COMMENT_END_DASH_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.state = COMMENT_END_STATE;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInComment);\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this.currentToken.data += '-';\\n            this._reconsumeInState(COMMENT_STATE);\\n        }\\n    }\\n\\n    // Comment end state\\n    //------------------------------------------------------------------\\n    [COMMENT_END_STATE](cp) {\\n        if (cp === $.GREATER_THAN_SIGN) {\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.EXCLAMATION_MARK) {\\n            this.state = COMMENT_END_BANG_STATE;\\n        } else if (cp === $.HYPHEN_MINUS) {\\n            this.currentToken.data += '-';\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInComment);\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this.currentToken.data += '--';\\n            this._reconsumeInState(COMMENT_STATE);\\n        }\\n    }\\n\\n    // Comment end bang state\\n    //------------------------------------------------------------------\\n    [COMMENT_END_BANG_STATE](cp) {\\n        if (cp === $.HYPHEN_MINUS) {\\n            this.currentToken.data += '--!';\\n            this.state = COMMENT_END_DASH_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.incorrectlyClosedComment);\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInComment);\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this.currentToken.data += '--!';\\n            this._reconsumeInState(COMMENT_STATE);\\n        }\\n    }\\n\\n    // DOCTYPE state\\n    //------------------------------------------------------------------\\n    [DOCTYPE_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            this.state = BEFORE_DOCTYPE_NAME_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this._createDoctypeToken(null);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.missingWhitespaceBeforeDoctypeName);\\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\\n        }\\n    }\\n\\n    // Before DOCTYPE name state\\n    //------------------------------------------------------------------\\n    [BEFORE_DOCTYPE_NAME_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            return;\\n        }\\n\\n        if (isAsciiUpper(cp)) {\\n            this._createDoctypeToken(toAsciiLowerChar(cp));\\n            this.state = DOCTYPE_NAME_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\\n            this.state = DOCTYPE_NAME_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.missingDoctypeName);\\n            this._createDoctypeToken(null);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this.state = DATA_STATE;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this._createDoctypeToken(null);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this._createDoctypeToken(toChar(cp));\\n            this.state = DOCTYPE_NAME_STATE;\\n        }\\n    }\\n\\n    // DOCTYPE name state\\n    //------------------------------------------------------------------\\n    [DOCTYPE_NAME_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            this.state = AFTER_DOCTYPE_NAME_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (isAsciiUpper(cp)) {\\n            this.currentToken.name += toAsciiLowerChar(cp);\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this.currentToken.name += toChar(cp);\\n        }\\n    }\\n\\n    // After DOCTYPE name state\\n    //------------------------------------------------------------------\\n    [AFTER_DOCTYPE_NAME_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            return;\\n        }\\n\\n        if (cp === $.GREATER_THAN_SIGN) {\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\\n            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\\n        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\\n            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\\n        }\\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\\n        //results are no longer valid and we will need to start over.\\n        else if (!this._ensureHibernation()) {\\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\\n            this.currentToken.forceQuirks = true;\\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\\n        }\\n    }\\n\\n    // After DOCTYPE public keyword state\\n    //------------------------------------------------------------------\\n    [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\\n        } else if (cp === $.QUOTATION_MARK) {\\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\\n            this.currentToken.publicId = '';\\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\\n        } else if (cp === $.APOSTROPHE) {\\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\\n            this.currentToken.publicId = '';\\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.missingDoctypePublicIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\\n        }\\n    }\\n\\n    // Before DOCTYPE public identifier state\\n    //------------------------------------------------------------------\\n    [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            return;\\n        }\\n\\n        if (cp === $.QUOTATION_MARK) {\\n            this.currentToken.publicId = '';\\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\\n        } else if (cp === $.APOSTROPHE) {\\n            this.currentToken.publicId = '';\\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.missingDoctypePublicIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\\n        }\\n    }\\n\\n    // DOCTYPE public identifier (double-quoted) state\\n    //------------------------------------------------------------------\\n    [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\\n        if (cp === $.QUOTATION_MARK) {\\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.abruptDoctypePublicIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this.state = DATA_STATE;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this.currentToken.publicId += toChar(cp);\\n        }\\n    }\\n\\n    // DOCTYPE public identifier (single-quoted) state\\n    //------------------------------------------------------------------\\n    [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\\n        if (cp === $.APOSTROPHE) {\\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.abruptDoctypePublicIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this.state = DATA_STATE;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this.currentToken.publicId += toChar(cp);\\n        }\\n    }\\n\\n    // After DOCTYPE public identifier state\\n    //------------------------------------------------------------------\\n    [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.QUOTATION_MARK) {\\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\\n            this.currentToken.systemId = '';\\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\\n        } else if (cp === $.APOSTROPHE) {\\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\\n            this.currentToken.systemId = '';\\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\\n        }\\n    }\\n\\n    // Between DOCTYPE public and system identifiers state\\n    //------------------------------------------------------------------\\n    [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            return;\\n        }\\n\\n        if (cp === $.GREATER_THAN_SIGN) {\\n            this._emitCurrentToken();\\n            this.state = DATA_STATE;\\n        } else if (cp === $.QUOTATION_MARK) {\\n            this.currentToken.systemId = '';\\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\\n        } else if (cp === $.APOSTROPHE) {\\n            this.currentToken.systemId = '';\\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\\n        }\\n    }\\n\\n    // After DOCTYPE system keyword state\\n    //------------------------------------------------------------------\\n    [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\\n        } else if (cp === $.QUOTATION_MARK) {\\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\\n            this.currentToken.systemId = '';\\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\\n        } else if (cp === $.APOSTROPHE) {\\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\\n            this.currentToken.systemId = '';\\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.missingDoctypeSystemIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\\n        }\\n    }\\n\\n    // Before DOCTYPE system identifier state\\n    //------------------------------------------------------------------\\n    [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            return;\\n        }\\n\\n        if (cp === $.QUOTATION_MARK) {\\n            this.currentToken.systemId = '';\\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\\n        } else if (cp === $.APOSTROPHE) {\\n            this.currentToken.systemId = '';\\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.missingDoctypeSystemIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this.state = DATA_STATE;\\n            this._emitCurrentToken();\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\\n        }\\n    }\\n\\n    // DOCTYPE system identifier (double-quoted) state\\n    //------------------------------------------------------------------\\n    [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\\n        if (cp === $.QUOTATION_MARK) {\\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.abruptDoctypeSystemIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this.state = DATA_STATE;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this.currentToken.systemId += toChar(cp);\\n        }\\n    }\\n\\n    // DOCTYPE system identifier (single-quoted) state\\n    //------------------------------------------------------------------\\n    [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\\n        if (cp === $.APOSTROPHE) {\\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\\n        } else if (cp === $.GREATER_THAN_SIGN) {\\n            this._err(ERR.abruptDoctypeSystemIdentifier);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this.state = DATA_STATE;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this.currentToken.systemId += toChar(cp);\\n        }\\n    }\\n\\n    // After DOCTYPE system identifier state\\n    //------------------------------------------------------------------\\n    [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\\n        if (isWhitespace(cp)) {\\n            return;\\n        }\\n\\n        if (cp === $.GREATER_THAN_SIGN) {\\n            this._emitCurrentToken();\\n            this.state = DATA_STATE;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInDoctype);\\n            this.currentToken.forceQuirks = true;\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        } else {\\n            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\\n        }\\n    }\\n\\n    // Bogus DOCTYPE state\\n    //------------------------------------------------------------------\\n    [BOGUS_DOCTYPE_STATE](cp) {\\n        if (cp === $.GREATER_THAN_SIGN) {\\n            this._emitCurrentToken();\\n            this.state = DATA_STATE;\\n        } else if (cp === $.NULL) {\\n            this._err(ERR.unexpectedNullCharacter);\\n        } else if (cp === $.EOF) {\\n            this._emitCurrentToken();\\n            this._emitEOFToken();\\n        }\\n    }\\n\\n    // CDATA section state\\n    //------------------------------------------------------------------\\n    [CDATA_SECTION_STATE](cp) {\\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\\n            this.state = CDATA_SECTION_BRACKET_STATE;\\n        } else if (cp === $.EOF) {\\n            this._err(ERR.eofInCdata);\\n            this._emitEOFToken();\\n        } else {\\n            this._emitCodePoint(cp);\\n        }\\n    }\\n\\n    // CDATA section bracket state\\n    //------------------------------------------------------------------\\n    [CDATA_SECTION_BRACKET_STATE](cp) {\\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\\n            this.state = CDATA_SECTION_END_STATE;\\n        } else {\\n            this._emitChars(']');\\n            this._reconsumeInState(CDATA_SECTION_STATE);\\n        }\\n    }\\n\\n    // CDATA section end state\\n    //------------------------------------------------------------------\\n    [CDATA_SECTION_END_STATE](cp) {\\n        if (cp === $.GREATER_THAN_SIGN) {\\n            this.state = DATA_STATE;\\n        } else if (cp === $.RIGHT_SQUARE_BRACKET) {\\n            this._emitChars(']');\\n        } else {\\n            this._emitChars(']]');\\n            this._reconsumeInState(CDATA_SECTION_STATE);\\n        }\\n    }\\n\\n    // Character reference state\\n    //------------------------------------------------------------------\\n    [CHARACTER_REFERENCE_STATE](cp) {\\n        this.tempBuff = [$.AMPERSAND];\\n\\n        if (cp === $.NUMBER_SIGN) {\\n            this.tempBuff.push(cp);\\n            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\\n        } else if (isAsciiAlphaNumeric(cp)) {\\n            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\\n        } else {\\n            this._flushCodePointsConsumedAsCharacterReference();\\n            this._reconsumeInState(this.returnState);\\n        }\\n    }\\n\\n    // Named character reference state\\n    //------------------------------------------------------------------\\n    [NAMED_CHARACTER_REFERENCE_STATE](cp) {\\n        const matchResult = this._matchNamedCharacterReference(cp);\\n\\n        //NOTE: matching can be abrupted by hibernation. In that case match\\n        //results are no longer valid and we will need to start over.\\n        if (this._ensureHibernation()) {\\n            this.tempBuff = [$.AMPERSAND];\\n        } else if (matchResult) {\\n            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\\n\\n            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\\n                if (!withSemicolon) {\\n                    this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\\n                }\\n\\n                this.tempBuff = matchResult;\\n            }\\n\\n            this._flushCodePointsConsumedAsCharacterReference();\\n            this.state = this.returnState;\\n        } else {\\n            this._flushCodePointsConsumedAsCharacterReference();\\n            this.state = AMBIGUOUS_AMPERSAND_STATE;\\n        }\\n    }\\n\\n    // Ambiguos ampersand state\\n    //------------------------------------------------------------------\\n    [AMBIGUOUS_AMPERSAND_STATE](cp) {\\n        if (isAsciiAlphaNumeric(cp)) {\\n            if (this._isCharacterReferenceInAttribute()) {\\n                this.currentAttr.value += toChar(cp);\\n            } else {\\n                this._emitCodePoint(cp);\\n            }\\n        } else {\\n            if (cp === $.SEMICOLON) {\\n                this._err(ERR.unknownNamedCharacterReference);\\n            }\\n\\n            this._reconsumeInState(this.returnState);\\n        }\\n    }\\n\\n    // Numeric character reference state\\n    //------------------------------------------------------------------\\n    [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\\n        this.charRefCode = 0;\\n\\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\\n            this.tempBuff.push(cp);\\n            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\\n        } else {\\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\\n        }\\n    }\\n\\n    // Hexademical character reference start state\\n    //------------------------------------------------------------------\\n    [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\\n        if (isAsciiHexDigit(cp)) {\\n            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\\n        } else {\\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\\n            this._flushCodePointsConsumedAsCharacterReference();\\n            this._reconsumeInState(this.returnState);\\n        }\\n    }\\n\\n    // Decimal character reference start state\\n    //------------------------------------------------------------------\\n    [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\\n        if (isAsciiDigit(cp)) {\\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\\n        } else {\\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\\n            this._flushCodePointsConsumedAsCharacterReference();\\n            this._reconsumeInState(this.returnState);\\n        }\\n    }\\n\\n    // Hexademical character reference state\\n    //------------------------------------------------------------------\\n    [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\\n        if (isAsciiUpperHexDigit(cp)) {\\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\\n        } else if (isAsciiLowerHexDigit(cp)) {\\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\\n        } else if (isAsciiDigit(cp)) {\\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\\n        } else if (cp === $.SEMICOLON) {\\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\\n        } else {\\n            this._err(ERR.missingSemicolonAfterCharacterReference);\\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\\n        }\\n    }\\n\\n    // Decimal character reference state\\n    //------------------------------------------------------------------\\n    [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\\n        if (isAsciiDigit(cp)) {\\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\\n        } else if (cp === $.SEMICOLON) {\\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\\n        } else {\\n            this._err(ERR.missingSemicolonAfterCharacterReference);\\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\\n        }\\n    }\\n\\n    // Numeric character reference end state\\n    //------------------------------------------------------------------\\n    [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\\n        if (this.charRefCode === $.NULL) {\\n            this._err(ERR.nullCharacterReference);\\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\\n        } else if (this.charRefCode > 0x10ffff) {\\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\\n        } else if (unicode.isSurrogate(this.charRefCode)) {\\n            this._err(ERR.surrogateCharacterReference);\\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\\n        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\\n            this._err(ERR.noncharacterCharacterReference);\\n        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\\n            this._err(ERR.controlCharacterReference);\\n\\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\\n\\n            if (replacement) {\\n                this.charRefCode = replacement;\\n            }\\n        }\\n\\n        this.tempBuff = [this.charRefCode];\\n\\n        this._flushCodePointsConsumedAsCharacterReference();\\n        this._reconsumeInState(this.returnState);\\n    }\\n}\\n\\n//Token types\\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\\n\\n//Tokenizer initial states for different modes\\nTokenizer.MODE = {\\n    DATA: DATA_STATE,\\n    RCDATA: RCDATA_STATE,\\n    RAWTEXT: RAWTEXT_STATE,\\n    SCRIPT_DATA: SCRIPT_DATA_STATE,\\n    PLAINTEXT: PLAINTEXT_STATE\\n};\\n\\n//Static\\nTokenizer.getTokenAttr = function(token, attrName) {\\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\\n        if (token.attrs[i].name === attrName) {\\n            return token.attrs[i].value;\\n        }\\n    }\\n\\n    return null;\\n};\\n\\nmodule.exports = Tokenizer;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isWhitespace\",\"cp\",\"$\",\"SPACE\",\"LINE_FEED\",\"TABULATION\",\"FORM_FEED\",\"isAsciiDigit\",\"DIGIT_0\",\"DIGIT_9\",\"isAsciiUpper\",\"LATIN_CAPITAL_A\",\"LATIN_CAPITAL_Z\",\"isAsciiLower\",\"LATIN_SMALL_A\",\"LATIN_SMALL_Z\",\"isAsciiLetter\",\"isAsciiAlphaNumeric\",\"toChar\",\"String\",\"fromCharCode\",\"toAsciiLowerChar\",\"findNamedEntityTreeBranch\",\"nodeIx\",\"branchCount\",\"neTree\",\"lo\",\"hi\",\"mid\",\"midCp\",\"Preprocessor\",\"unicode\",\"ERR\",\"CODE_POINTS\",\"$$\",\"CODE_POINT_SEQUENCES\",\"C1_CONTROLS_REFERENCE_REPLACEMENTS\",\"Tokenizer\",\"constructor\",\"preprocessor\",\"tokenQueue\",\"allowCDATA\",\"state\",\"DATA_STATE\",\"returnState\",\"charRefCode\",\"tempBuff\",\"lastStartTagName\",\"consumedAfterSnapshot\",\"active\",\"currentAttr\",\"currentToken\",\"currentCharacterToken\",\"_err\",\"_errOnNextCodePoint\",\"err\",\"_consume\",\"_unconsume\",\"getNextToken\",\"length\",\"_ensureHibernation\",\"shift\",\"write\",\"chunk\",\"isLastChunk\",\"insertHtmlAtCurrentPos\",\"endOfChunkHit\",\"retreat\",\"push\",\"type\",\"HIBERNATION_TOKEN\",\"advance\",\"_reconsumeInState\",\"_consumeSequenceIfMatch\",\"pattern\",\"startCp\",\"caseSensitive\",\"consumedCount\",\"isMatch\",\"patternLength\",\"patternPos\",\"patternCp\",\"EOF\",\"_isTempBufferEqualToScriptString\",\"SCRIPT_STRING\",\"i\",\"_createStartTagToken\",\"START_TAG_TOKEN\",\"tagName\",\"selfClosing\",\"ackSelfClosing\",\"attrs\",\"_createEndTagToken\",\"END_TAG_TOKEN\",\"_createCommentToken\",\"COMMENT_TOKEN\",\"data\",\"_createDoctypeToken\",\"initialName\",\"DOCTYPE_TOKEN\",\"name\",\"forceQuirks\",\"publicId\",\"systemId\",\"_createCharacterToken\",\"ch\",\"chars\",\"_createEOFToken\",\"EOF_TOKEN\",\"_createAttr\",\"attrNameFirstCh\",\"value\",\"_leaveAttrName\",\"toState\",\"getTokenAttr\",\"duplicateAttribute\",\"_leaveAttrValue\",\"_emitCurrentToken\",\"_emitCurrentCharacterToken\",\"ct\",\"endTagWithAttributes\",\"endTagWithTrailingSolidus\",\"_emitEOFToken\",\"_appendCharToCurrentCharacterToken\",\"_emitCodePoint\",\"CHARACTER_TOKEN\",\"WHITESPACE_CHARACTER_TOKEN\",\"NULL\",\"NULL_CHARACTER_TOKEN\",\"_emitSeveralCodePoints\",\"codePoints\",\"_emitChars\",\"_matchNamedCharacterReference\",\"result\",\"excess\",\"current\",\"inNode\",\"MAX_BRANCH_MARKER_VALUE\",\"HAS_DATA_FLAG\",\"DATA_DUPLET_FLAG\",\"HAS_BRANCHES_FLAG\",\"pop\",\"_isCharacterReferenceInAttribute\",\"ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE\",\"ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE\",\"ATTRIBUTE_VALUE_UNQUOTED_STATE\",\"_isCharacterReferenceAttributeQuirk\",\"withSemicolon\",\"nextCp\",\"EQUALS_SIGN\",\"_flushCodePointsConsumedAsCharacterReference\",\"dropParsedChunk\",\"LESS_THAN_SIGN\",\"TAG_OPEN_STATE\",\"AMPERSAND\",\"CHARACTER_REFERENCE_STATE\",\"unexpectedNullCharacter\",\"RCDATA_STATE\",\"RCDATA_LESS_THAN_SIGN_STATE\",\"REPLACEMENT_CHARACTER\",\"RAWTEXT_LESS_THAN_SIGN_STATE\",\"SCRIPT_DATA_LESS_THAN_SIGN_STATE\",\"EXCLAMATION_MARK\",\"MARKUP_DECLARATION_OPEN_STATE\",\"SOLIDUS\",\"END_TAG_OPEN_STATE\",\"TAG_NAME_STATE\",\"QUESTION_MARK\",\"unexpectedQuestionMarkInsteadOfTagName\",\"BOGUS_COMMENT_STATE\",\"eofBeforeTagName\",\"invalidFirstCharacterOfTagName\",\"GREATER_THAN_SIGN\",\"missingEndTagName\",\"BEFORE_ATTRIBUTE_NAME_STATE\",\"SELF_CLOSING_START_TAG_STATE\",\"eofInTag\",\"RCDATA_END_TAG_OPEN_STATE\",\"RCDATA_END_TAG_NAME_STATE\",\"RAWTEXT_END_TAG_OPEN_STATE\",\"RAWTEXT_STATE\",\"RAWTEXT_END_TAG_NAME_STATE\",\"SCRIPT_DATA_END_TAG_OPEN_STATE\",\"SCRIPT_DATA_ESCAPE_START_STATE\",\"SCRIPT_DATA_STATE\",\"SCRIPT_DATA_END_TAG_NAME_STATE\",\"HYPHEN_MINUS\",\"SCRIPT_DATA_ESCAPE_START_DASH_STATE\",\"SCRIPT_DATA_ESCAPED_DASH_DASH_STATE\",\"SCRIPT_DATA_ESCAPED_DASH_STATE\",\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE\",\"eofInScriptHtmlCommentLikeText\",\"SCRIPT_DATA_ESCAPED_STATE\",\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE\",\"SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE\",\"SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE\",\"SCRIPT_DATA_DOUBLE_ESCAPED_STATE\",\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE\",\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE\",\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE\",\"SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE\",\"AFTER_ATTRIBUTE_NAME_STATE\",\"unexpectedEqualsSignBeforeAttributeName\",\"ATTRIBUTE_NAME_STATE\",\"BEFORE_ATTRIBUTE_VALUE_STATE\",\"QUOTATION_MARK\",\"APOSTROPHE\",\"unexpectedCharacterInAttributeName\",\"missingAttributeValue\",\"AFTER_ATTRIBUTE_VALUE_QUOTED_STATE\",\"GRAVE_ACCENT\",\"unexpectedCharacterInUnquotedAttributeValue\",\"missingWhitespaceBetweenAttributes\",\"unexpectedSolidusInTag\",\"DASH_DASH_STRING\",\"COMMENT_START_STATE\",\"DOCTYPE_STRING\",\"DOCTYPE_STATE\",\"CDATA_START_STRING\",\"CDATA_SECTION_STATE\",\"cdataInHtmlContent\",\"incorrectlyOpenedComment\",\"COMMENT_START_DASH_STATE\",\"abruptClosingOfEmptyComment\",\"COMMENT_STATE\",\"COMMENT_END_STATE\",\"eofInComment\",\"COMMENT_END_DASH_STATE\",\"COMMENT_LESS_THAN_SIGN_STATE\",\"COMMENT_LESS_THAN_SIGN_BANG_STATE\",\"COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE\",\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE\",\"nestedComment\",\"COMMENT_END_BANG_STATE\",\"incorrectlyClosedComment\",\"BEFORE_DOCTYPE_NAME_STATE\",\"eofInDoctype\",\"missingWhitespaceBeforeDoctypeName\",\"DOCTYPE_NAME_STATE\",\"missingDoctypeName\",\"AFTER_DOCTYPE_NAME_STATE\",\"PUBLIC_STRING\",\"AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE\",\"SYSTEM_STRING\",\"AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE\",\"invalidCharacterSequenceAfterDoctypeName\",\"BOGUS_DOCTYPE_STATE\",\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE\",\"missingWhitespaceAfterDoctypePublicKeyword\",\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE\",\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE\",\"missingDoctypePublicIdentifier\",\"missingQuoteBeforeDoctypePublicIdentifier\",\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE\",\"abruptDoctypePublicIdentifier\",\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE\",\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\",\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE\",\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE\",\"missingQuoteBeforeDoctypeSystemIdentifier\",\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE\",\"missingWhitespaceAfterDoctypeSystemKeyword\",\"missingDoctypeSystemIdentifier\",\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE\",\"abruptDoctypeSystemIdentifier\",\"unexpectedCharacterAfterDoctypeSystemIdentifier\",\"RIGHT_SQUARE_BRACKET\",\"CDATA_SECTION_BRACKET_STATE\",\"eofInCdata\",\"CDATA_SECTION_END_STATE\",\"NUMBER_SIGN\",\"NUMERIC_CHARACTER_REFERENCE_STATE\",\"NAMED_CHARACTER_REFERENCE_STATE\",\"matchResult\",\"SEMICOLON\",\"missingSemicolonAfterCharacterReference\",\"AMBIGUOUS_AMPERSAND_STATE\",\"unknownNamedCharacterReference\",\"LATIN_SMALL_X\",\"LATIN_CAPITAL_X\",\"HEXADEMICAL_CHARACTER_REFERENCE_START_STATE\",\"DECIMAL_CHARACTER_REFERENCE_START_STATE\",\"LATIN_CAPITAL_F\",\"LATIN_SMALL_F\",\"HEXADEMICAL_CHARACTER_REFERENCE_STATE\",\"absenceOfDigitsInNumericCharacterReference\",\"DECIMAL_CHARACTER_REFERENCE_STATE\",\"NUMERIC_CHARACTER_REFERENCE_END_STATE\",\"nullCharacterReference\",\"characterReferenceOutsideUnicodeRange\",\"isSurrogate\",\"surrogateCharacterReference\",\"isUndefinedCodePoint\",\"noncharacterCharacterReference\",\"isControlCodePoint\",\"CARRIAGE_RETURN\",\"controlCharacterReference\",\"replacement\",\"MODE\",\"DATA\",\"RCDATA\",\"RAWTEXT\",\"SCRIPT_DATA\",\"PLAINTEXT\",\"PLAINTEXT_STATE\",\"Tokenizer.getTokenAttr\",\"token\",\"attrName\"]\n}\n"]