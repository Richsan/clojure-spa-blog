["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/zwitch/index.js"],"~:js","shadow$provide.module$node_modules$zwitch$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.zwitch=function(key,options){function one(value,...parameters){var fn=one.invalid;const handlers=one.handlers;value&&own.call(value,key)&&(fn=String(value[key]),fn=own.call(handlers,fn)?handlers[fn]:one.unknown);if(fn)return fn.call(this,value,...parameters)}options=options||{};one.handlers=options.handlers||{};one.invalid=options.invalid;one.unknown=\noptions.unknown;return one};const own={}.hasOwnProperty}","~:source","shadow$provide[\"module$node_modules$zwitch$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.zwitch = zwitch;\n\n/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\nconst own = {}.hasOwnProperty;\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\n\nfunction zwitch(key, options) {\n  const settings = options || {};\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid;\n    const handlers = one.handlers;\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key]); // @ts-expect-error Indexable.\n\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown;\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters);\n    }\n  }\n\n  one.handlers = settings.handlers || {};\n  one.invalid = settings.invalid;\n  one.unknown = settings.unknown; // @ts-expect-error: matches!\n\n  return one;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["handlers","__esModule","invalid","value","unknown","zwitch"]],"~:compiled-at",1676686799587,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$zwitch$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,gCAAA,CAAqD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7FC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,MAAR,CAgEAA,QAAe,CAACC,GAAD,CAAMC,OAAN,CAAe,CA+B5BC,QAASA,IAAG,CAACJ,KAAD,CAAQ,GAAGK,UAAX,CAAuB,CAEjC,IAAIC,GAAKF,GAAIG,CAAAA,OACb,OAAMC,SAAWJ,GAAII,CAAAA,QAEjBR,MAAJ,EAAaS,GAAIC,CAAAA,IAAJ,CAASV,KAAT,CAAgBE,GAAhB,CAAb,GAEQS,EAEN,CAFWC,MAAA,CAAOZ,KAAA,CAAME,GAAN,CAAP,CAEX,CAAAI,EAAA,CAAKG,GAAIC,CAAAA,IAAJ,CAASF,QAAT,CAAmBG,EAAnB,CAAA,CAAyBH,QAAA,CAASG,EAAT,CAAzB,CAAwCP,GAAIS,CAAAA,OAJnD,CAOA,IAAIP,EAAJ,CACE,MAAOA,GAAGI,CAAAA,IAAH,CAAQ,IAAR,CAAcV,KAAd,CAAqB,GAAGK,UAAxB,CAbwB,CA9B7BS,OAAAA,CAAWX,OAAXW,EAAsB,EA+C5BV,IAAII,CAAAA,QAAJ,CAAeM,OAASN,CAAAA,QAAxB,EAAoC,EACpCJ,IAAIG,CAAAA,OAAJ,CAAcO,OAASP,CAAAA,OACvBH,IAAIS,CAAAA,OAAJ;AAAcC,OAASD,CAAAA,OAEvB,OAAOT,IApDqB,CAd9B,OAAMK,IAAM,EAAGM,CAAAA,cAxD8E;\",\n\"sources\":[\"node_modules/zwitch/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$zwitch$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.zwitch = zwitch;\\n\\n/**\\n * @callback Handler\\n *   Handle a value, with a certain ID field set to a certain value.\\n *   The ID field is passed to `zwitch`, and it\\u2019s value is this function\\u2019s\\n *   place on the `handlers` record.\\n * @param {...any} parameters\\n *   Arbitrary parameters passed to the zwitch.\\n *   The first will be an object with a certain ID field set to a certain value.\\n * @returns {any}\\n *   Anything!\\n */\\n\\n/**\\n * @callback UnknownHandler\\n *   Handle values that do have a certain ID field, but it\\u2019s set to a value\\n *   that is not listed in the `handlers` record.\\n * @param {unknown} value\\n *   An object with a certain ID field set to an unknown value.\\n * @param {...any} rest\\n *   Arbitrary parameters passed to the zwitch.\\n * @returns {any}\\n *   Anything!\\n */\\n\\n/**\\n * @callback InvalidHandler\\n *   Handle values that do not have a certain ID field.\\n * @param {unknown} value\\n *   Any unknown value.\\n * @param {...any} rest\\n *   Arbitrary parameters passed to the zwitch.\\n * @returns {void|null|undefined|never}\\n *   This should crash or return nothing.\\n */\\n\\n/**\\n * @template {InvalidHandler} [Invalid=InvalidHandler]\\n * @template {UnknownHandler} [Unknown=UnknownHandler]\\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\\n * @typedef Options\\n *   Configuration (required).\\n * @property {Invalid} [invalid]\\n *   Handler to use for invalid values.\\n * @property {Unknown} [unknown]\\n *   Handler to use for unknown values.\\n * @property {Handlers} [handlers]\\n *   Handlers to use.\\n */\\nconst own = {}.hasOwnProperty;\\n/**\\n * Handle values based on a field.\\n *\\n * @template {InvalidHandler} [Invalid=InvalidHandler]\\n * @template {UnknownHandler} [Unknown=UnknownHandler]\\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\\n * @param {string} key\\n *   Field to switch on.\\n * @param {Options<Invalid, Unknown, Handlers>} [options]\\n *   Configuration (required).\\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\\n */\\n\\nfunction zwitch(key, options) {\\n  const settings = options || {};\\n  /**\\n   * Handle one value.\\n   *\\n   * Based on the bound `key`, a respective handler will be called.\\n   * If `value` is not an object, or doesn\\u2019t have a `key` property, the special\\n   * \\u201cinvalid\\u201d handler will be called.\\n   * If `value` has an unknown `key`, the special \\u201cunknown\\u201d handler will be\\n   * called.\\n   *\\n   * All arguments, and the context object, are passed through to the handler,\\n   * and it\\u2019s result is returned.\\n   *\\n   * @this {unknown}\\n   *   Any context object.\\n   * @param {unknown} [value]\\n   *   Any value.\\n   * @param {...unknown} parameters\\n   *   Arbitrary parameters passed to the zwitch.\\n   * @property {Handler} invalid\\n   *   Handle for values that do not have a certain ID field.\\n   * @property {Handler} unknown\\n   *   Handle values that do have a certain ID field, but it\\u2019s set to a value\\n   *   that is not listed in the `handlers` record.\\n   * @property {Handlers} handlers\\n   *   Record of handlers.\\n   * @returns {unknown}\\n   *   Anything.\\n   */\\n\\n  function one(value, ...parameters) {\\n    /** @type {Handler|undefined} */\\n    let fn = one.invalid;\\n    const handlers = one.handlers;\\n\\n    if (value && own.call(value, key)) {\\n      // @ts-expect-error Indexable.\\n      const id = String(value[key]); // @ts-expect-error Indexable.\\n\\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown;\\n    }\\n\\n    if (fn) {\\n      return fn.call(this, value, ...parameters);\\n    }\\n  }\\n\\n  one.handlers = settings.handlers || {};\\n  one.invalid = settings.invalid;\\n  one.unknown = settings.unknown; // @ts-expect-error: matches!\\n\\n  return one;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"zwitch\",\"key\",\"options\",\"one\",\"parameters\",\"fn\",\"invalid\",\"handlers\",\"own\",\"call\",\"id\",\"String\",\"unknown\",\"settings\",\"hasOwnProperty\"]\n}\n"]