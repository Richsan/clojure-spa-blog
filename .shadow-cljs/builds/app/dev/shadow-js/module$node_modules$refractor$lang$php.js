["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/php.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$php=function(global,require,module,exports){function php(Prism$jscomp$0){Prism$jscomp$0.register(_markupTemplating.default);(function(Prism){var comment=/\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/,constant=[{pattern:/\\b(?:false|true)\\b/i,alias:\"boolean\"},{pattern:/(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,greedy:!0,lookbehind:!0},{pattern:/(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,greedy:!0,lookbehind:!0},/\\b(?:null)\\b/i,/\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/],number=\n/\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator=/<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/,punctuation=/[{}\\[\\](),:;]/;Prism.languages.php={delimiter:{pattern:/\\?>$|^<\\?(?:php(?=\\s)|=)?/i,alias:\"important\"},comment,variable:/\\$+(?:\\w+\\b|(?=\\{))/,package:{pattern:/(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,lookbehind:!0,inside:{punctuation:/\\\\/}},\n\"class-name-definition\":{pattern:/(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,lookbehind:!0,alias:\"class-name\"},\"function-definition\":{pattern:/(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,lookbehind:!0,alias:\"function\"},keyword:[{pattern:/(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,alias:\"type-casting\",greedy:!0,lookbehind:!0},{pattern:/([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\nalias:\"type-hint\",greedy:!0,lookbehind:!0},{pattern:/(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|never|object|self|static|string|void)\\b/i,alias:\"return-type\",greedy:!0,lookbehind:!0},{pattern:/\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,alias:\"type-declaration\",greedy:!0},{pattern:/(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,alias:\"type-declaration\",greedy:!0,lookbehind:!0},{pattern:/\\b(?:parent|self|static)(?=\\s*::)/i,\nalias:\"static-context\",greedy:!0},{pattern:/(\\byield\\s+)from\\b/i,lookbehind:!0},/\\bclass\\b/i,{pattern:/((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\nlookbehind:!0}],\"argument-name\":{pattern:/([(,]\\s*)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,lookbehind:!0},\"class-name\":[{pattern:/(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,greedy:!0,lookbehind:!0},{pattern:/(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,greedy:!0,lookbehind:!0},{pattern:/\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,greedy:!0},{pattern:/(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,alias:\"class-name-fully-qualified\",greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}},{pattern:/(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\nalias:\"class-name-fully-qualified\",greedy:!0,inside:{punctuation:/\\\\/}},{pattern:/(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,alias:\"class-name-fully-qualified\",greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}},{pattern:/\\b[a-z_]\\w*(?=\\s*\\$)/i,alias:\"type-declaration\",greedy:!0},{pattern:/(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,alias:[\"class-name-fully-qualified\",\"type-declaration\"],greedy:!0,inside:{punctuation:/\\\\/}},{pattern:/\\b[a-z_]\\w*(?=\\s*::)/i,\nalias:\"static-context\",greedy:!0},{pattern:/(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,alias:[\"class-name-fully-qualified\",\"static-context\"],greedy:!0,inside:{punctuation:/\\\\/}},{pattern:/([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,alias:\"type-hint\",greedy:!0,lookbehind:!0},{pattern:/([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,alias:[\"class-name-fully-qualified\",\"type-hint\"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}},{pattern:/(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,alias:\"return-type\",greedy:!0,lookbehind:!0},{pattern:/(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\nalias:[\"class-name-fully-qualified\",\"return-type\"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}}],constant,function:{pattern:/(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,lookbehind:!0,inside:{punctuation:/\\\\/}},property:{pattern:/(->\\s*)\\w+/,lookbehind:!0},number,operator,punctuation};var string_interpolation={pattern:/\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,lookbehind:!0,inside:Prism.languages.php};string_interpolation=[{pattern:/<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\nalias:\"nowdoc-string\",greedy:!0,inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<'?|[';]$/}}}},{pattern:/<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,alias:\"heredoc-string\",greedy:!0,inside:{delimiter:{pattern:/^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<\"?|[\";]$/}},interpolation:string_interpolation}},{pattern:/`(?:\\\\[\\s\\S]|[^\\\\`])*`/,alias:\"backtick-quoted-string\",greedy:!0},{pattern:/'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\nalias:\"single-quoted-string\",greedy:!0},{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,alias:\"double-quoted-string\",greedy:!0,inside:{interpolation:string_interpolation}}];Prism.languages.insertBefore(\"php\",\"variable\",{string:string_interpolation,attribute:{pattern:/#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,greedy:!0,inside:{\"attribute-content\":{pattern:/^(#\\[)[\\s\\S]+(?=\\]$)/,lookbehind:!0,inside:{comment,string:string_interpolation,\n\"attribute-class-name\":[{pattern:/([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,alias:\"class-name\",greedy:!0,lookbehind:!0},{pattern:/([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,alias:[\"class-name\",\"class-name-fully-qualified\"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}}],constant,number,operator,punctuation}},delimiter:{pattern:/^#\\[|\\]$/,alias:\"punctuation\"}}}});Prism.hooks.add(\"before-tokenize\",function(env){/<\\?/.test(env.code)&&Prism.languages[\"markup-templating\"].buildPlaceholders(env,\"php\",/<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g)});\nPrism.hooks.add(\"after-tokenize\",function(env){Prism.languages[\"markup-templating\"].tokenizePlaceholders(env,\"php\")})})(Prism$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=php;var _markupTemplating=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require(\"module$node_modules$refractor$lang$markup_templating\"));php.displayName=\"php\";php.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$php\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = php;\n\nvar _markupTemplating = _interopRequireDefault(require(\"./markup-templating.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-nocheck\nphp.displayName = 'php';\nphp.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction php(Prism) {\n  Prism.register(_markupTemplating.default)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;\n\n  (function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n    var constant = [{\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'boolean'\n    }, {\n      pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n      greedy: true,\n      lookbehind: true\n    }, /\\b(?:null)\\b/i, /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/];\n    var number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n    var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n    var punctuation = /[{}\\[\\](),:;]/;\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      package: {\n        pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [{\n        pattern: /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n        alias: 'type-casting',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|never|object|self|static|string|void)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n        alias: 'type-declaration',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        // yield from\n        pattern: /(\\byield\\s+)from\\b/i,\n        lookbehind: true\n      }, // `class` is always a keyword unlike other keywords\n      /\\bclass\\b/i, {\n        // https://www.php.net/manual/en/reserved.keywords.php\n        //\n        // keywords cannot be preceded by \"->\"\n        // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n        pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n        lookbehind: true\n      }],\n      'argument-name': {\n        pattern: /([(,]\\s*)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [{\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-declaration'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n        alias: ['class-name-fully-qualified', 'static-context'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-hint'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: ['class-name-fully-qualified', 'return-type'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    };\n    var string_interpolation = {\n      pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    };\n    var string = [{\n      pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n      alias: 'nowdoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    }, {\n      pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n      alias: 'heredoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: string_interpolation\n      }\n    }, {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      alias: 'backtick-quoted-string',\n      greedy: true\n    }, {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      alias: 'single-quoted-string',\n      greedy: true\n    }, {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      alias: 'double-quoted-string',\n      greedy: true,\n      inside: {\n        interpolation: string_interpolation\n      }\n    }];\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [{\n                pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                alias: 'class-name',\n                greedy: true,\n                lookbehind: true\n              }, {\n                pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                alias: ['class-name', 'class-name-fully-qualified'],\n                greedy: true,\n                lookbehind: true,\n                inside: {\n                  punctuation: /\\\\/\n                }\n              }],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    });\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return;\n      }\n\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$refractor$lang$markup_templating"]],"~:properties",["^5",["package","punctuation","string","aliases","constant","operator","displayName","__esModule","attribute","lookbehind","value","php","delimiter","variable","keyword","number","greedy","property","function","pattern","inside","alias","comment","interpolation","default"]],"~:compiled-at",1676841365374,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$php.js\",\n\"lineCount\":13,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/php.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$php\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = php;\\n\\nvar _markupTemplating = _interopRequireDefault(require(\\\"./markup-templating.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// @ts-nocheck\\nphp.displayName = 'php';\\nphp.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction php(Prism) {\\n  Prism.register(_markupTemplating.default)\\n  /**\\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\\n   * Modified by Miles Johnson: http://milesj.me\\n   * Rewritten by Tom Pavelec\\n   *\\n   * Supports PHP 5.3 - 8.0\\n   */\\n  ;\\n\\n  (function (Prism) {\\n    var comment = /\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/|\\\\/\\\\/.*|#(?!\\\\[).*/;\\n    var constant = [{\\n      pattern: /\\\\b(?:false|true)\\\\b/i,\\n      alias: 'boolean'\\n    }, {\\n      pattern: /(::\\\\s*)\\\\b[a-z_]\\\\w*\\\\b(?!\\\\s*\\\\()/i,\\n      greedy: true,\\n      lookbehind: true\\n    }, {\\n      pattern: /(\\\\b(?:case|const)\\\\s+)\\\\b[a-z_]\\\\w*(?=\\\\s*[;=])/i,\\n      greedy: true,\\n      lookbehind: true\\n    }, /\\\\b(?:null)\\\\b/i, /\\\\b[A-Z_][A-Z0-9_]*\\\\b(?!\\\\s*\\\\()/];\\n    var number = /\\\\b0b[01]+(?:_[01]+)*\\\\b|\\\\b0o[0-7]+(?:_[0-7]+)*\\\\b|\\\\b0x[\\\\da-f]+(?:_[\\\\da-f]+)*\\\\b|(?:\\\\b\\\\d+(?:_\\\\d+)*\\\\.?(?:\\\\d+(?:_\\\\d+)*)?|\\\\B\\\\.\\\\d+)(?:e[+-]?\\\\d+)?/i;\\n    var operator = /<?=>|\\\\?\\\\?=?|\\\\.{3}|\\\\??->|[!=]=?=?|::|\\\\*\\\\*=?|--|\\\\+\\\\+|&&|\\\\|\\\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\\n    var punctuation = /[{}\\\\[\\\\](),:;]/;\\n    Prism.languages.php = {\\n      delimiter: {\\n        pattern: /\\\\?>$|^<\\\\?(?:php(?=\\\\s)|=)?/i,\\n        alias: 'important'\\n      },\\n      comment: comment,\\n      variable: /\\\\$+(?:\\\\w+\\\\b|(?=\\\\{))/,\\n      package: {\\n        pattern: /(namespace\\\\s+|use\\\\s+(?:function\\\\s+)?)(?:\\\\\\\\?\\\\b[a-z_]\\\\w*)+\\\\b(?!\\\\\\\\)/i,\\n        lookbehind: true,\\n        inside: {\\n          punctuation: /\\\\\\\\/\\n        }\\n      },\\n      'class-name-definition': {\\n        pattern: /(\\\\b(?:class|enum|interface|trait)\\\\s+)\\\\b[a-z_]\\\\w*(?!\\\\\\\\)\\\\b/i,\\n        lookbehind: true,\\n        alias: 'class-name'\\n      },\\n      'function-definition': {\\n        pattern: /(\\\\bfunction\\\\s+)[a-z_]\\\\w*(?=\\\\s*\\\\()/i,\\n        lookbehind: true,\\n        alias: 'function'\\n      },\\n      keyword: [{\\n        pattern: /(\\\\(\\\\s*)\\\\b(?:array|bool|boolean|float|int|integer|object|string)\\\\b(?=\\\\s*\\\\))/i,\\n        alias: 'type-casting',\\n        greedy: true,\\n        lookbehind: true\\n      }, {\\n        pattern: /([(,?]\\\\s*)\\\\b(?:array(?!\\\\s*\\\\()|bool|callable|(?:false|null)(?=\\\\s*\\\\|)|float|int|iterable|mixed|object|self|static|string)\\\\b(?=\\\\s*\\\\$)/i,\\n        alias: 'type-hint',\\n        greedy: true,\\n        lookbehind: true\\n      }, {\\n        pattern: /(\\\\)\\\\s*:\\\\s*(?:\\\\?\\\\s*)?)\\\\b(?:array(?!\\\\s*\\\\()|bool|callable|(?:false|null)(?=\\\\s*\\\\|)|float|int|iterable|mixed|never|object|self|static|string|void)\\\\b/i,\\n        alias: 'return-type',\\n        greedy: true,\\n        lookbehind: true\\n      }, {\\n        pattern: /\\\\b(?:array(?!\\\\s*\\\\()|bool|float|int|iterable|mixed|object|string|void)\\\\b/i,\\n        alias: 'type-declaration',\\n        greedy: true\\n      }, {\\n        pattern: /(\\\\|\\\\s*)(?:false|null)\\\\b|\\\\b(?:false|null)(?=\\\\s*\\\\|)/i,\\n        alias: 'type-declaration',\\n        greedy: true,\\n        lookbehind: true\\n      }, {\\n        pattern: /\\\\b(?:parent|self|static)(?=\\\\s*::)/i,\\n        alias: 'static-context',\\n        greedy: true\\n      }, {\\n        // yield from\\n        pattern: /(\\\\byield\\\\s+)from\\\\b/i,\\n        lookbehind: true\\n      }, // `class` is always a keyword unlike other keywords\\n      /\\\\bclass\\\\b/i, {\\n        // https://www.php.net/manual/en/reserved.keywords.php\\n        //\\n        // keywords cannot be preceded by \\\"->\\\"\\n        // the complex lookbehind means `(?<!(?:->|::)\\\\s*)`\\n        pattern: /((?:^|[^\\\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\\\s*)\\\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\\\b/i,\\n        lookbehind: true\\n      }],\\n      'argument-name': {\\n        pattern: /([(,]\\\\s*)\\\\b[a-z_]\\\\w*(?=\\\\s*:(?!:))/i,\\n        lookbehind: true\\n      },\\n      'class-name': [{\\n        pattern: /(\\\\b(?:extends|implements|instanceof|new(?!\\\\s+self|\\\\s+static))\\\\s+|\\\\bcatch\\\\s*\\\\()\\\\b[a-z_]\\\\w*(?!\\\\\\\\)\\\\b/i,\\n        greedy: true,\\n        lookbehind: true\\n      }, {\\n        pattern: /(\\\\|\\\\s*)\\\\b[a-z_]\\\\w*(?!\\\\\\\\)\\\\b/i,\\n        greedy: true,\\n        lookbehind: true\\n      }, {\\n        pattern: /\\\\b[a-z_]\\\\w*(?!\\\\\\\\)\\\\b(?=\\\\s*\\\\|)/i,\\n        greedy: true\\n      }, {\\n        pattern: /(\\\\|\\\\s*)(?:\\\\\\\\?\\\\b[a-z_]\\\\w*)+\\\\b/i,\\n        alias: 'class-name-fully-qualified',\\n        greedy: true,\\n        lookbehind: true,\\n        inside: {\\n          punctuation: /\\\\\\\\/\\n        }\\n      }, {\\n        pattern: /(?:\\\\\\\\?\\\\b[a-z_]\\\\w*)+\\\\b(?=\\\\s*\\\\|)/i,\\n        alias: 'class-name-fully-qualified',\\n        greedy: true,\\n        inside: {\\n          punctuation: /\\\\\\\\/\\n        }\\n      }, {\\n        pattern: /(\\\\b(?:extends|implements|instanceof|new(?!\\\\s+self\\\\b|\\\\s+static\\\\b))\\\\s+|\\\\bcatch\\\\s*\\\\()(?:\\\\\\\\?\\\\b[a-z_]\\\\w*)+\\\\b(?!\\\\\\\\)/i,\\n        alias: 'class-name-fully-qualified',\\n        greedy: true,\\n        lookbehind: true,\\n        inside: {\\n          punctuation: /\\\\\\\\/\\n        }\\n      }, {\\n        pattern: /\\\\b[a-z_]\\\\w*(?=\\\\s*\\\\$)/i,\\n        alias: 'type-declaration',\\n        greedy: true\\n      }, {\\n        pattern: /(?:\\\\\\\\?\\\\b[a-z_]\\\\w*)+(?=\\\\s*\\\\$)/i,\\n        alias: ['class-name-fully-qualified', 'type-declaration'],\\n        greedy: true,\\n        inside: {\\n          punctuation: /\\\\\\\\/\\n        }\\n      }, {\\n        pattern: /\\\\b[a-z_]\\\\w*(?=\\\\s*::)/i,\\n        alias: 'static-context',\\n        greedy: true\\n      }, {\\n        pattern: /(?:\\\\\\\\?\\\\b[a-z_]\\\\w*)+(?=\\\\s*::)/i,\\n        alias: ['class-name-fully-qualified', 'static-context'],\\n        greedy: true,\\n        inside: {\\n          punctuation: /\\\\\\\\/\\n        }\\n      }, {\\n        pattern: /([(,?]\\\\s*)[a-z_]\\\\w*(?=\\\\s*\\\\$)/i,\\n        alias: 'type-hint',\\n        greedy: true,\\n        lookbehind: true\\n      }, {\\n        pattern: /([(,?]\\\\s*)(?:\\\\\\\\?\\\\b[a-z_]\\\\w*)+(?=\\\\s*\\\\$)/i,\\n        alias: ['class-name-fully-qualified', 'type-hint'],\\n        greedy: true,\\n        lookbehind: true,\\n        inside: {\\n          punctuation: /\\\\\\\\/\\n        }\\n      }, {\\n        pattern: /(\\\\)\\\\s*:\\\\s*(?:\\\\?\\\\s*)?)\\\\b[a-z_]\\\\w*(?!\\\\\\\\)\\\\b/i,\\n        alias: 'return-type',\\n        greedy: true,\\n        lookbehind: true\\n      }, {\\n        pattern: /(\\\\)\\\\s*:\\\\s*(?:\\\\?\\\\s*)?)(?:\\\\\\\\?\\\\b[a-z_]\\\\w*)+\\\\b(?!\\\\\\\\)/i,\\n        alias: ['class-name-fully-qualified', 'return-type'],\\n        greedy: true,\\n        lookbehind: true,\\n        inside: {\\n          punctuation: /\\\\\\\\/\\n        }\\n      }],\\n      constant: constant,\\n      function: {\\n        pattern: /(^|[^\\\\\\\\\\\\w])\\\\\\\\?[a-z_](?:[\\\\w\\\\\\\\]*\\\\w)?(?=\\\\s*\\\\()/i,\\n        lookbehind: true,\\n        inside: {\\n          punctuation: /\\\\\\\\/\\n        }\\n      },\\n      property: {\\n        pattern: /(->\\\\s*)\\\\w+/,\\n        lookbehind: true\\n      },\\n      number: number,\\n      operator: operator,\\n      punctuation: punctuation\\n    };\\n    var string_interpolation = {\\n      pattern: /\\\\{\\\\$(?:\\\\{(?:\\\\{[^{}]+\\\\}|[^{}]+)\\\\}|[^{}])+\\\\}|(^|[^\\\\\\\\{])\\\\$+(?:\\\\w+(?:\\\\[[^\\\\r\\\\n\\\\[\\\\]]+\\\\]|->\\\\w+)?)/,\\n      lookbehind: true,\\n      inside: Prism.languages.php\\n    };\\n    var string = [{\\n      pattern: /<<<'([^']+)'[\\\\r\\\\n](?:.*[\\\\r\\\\n])*?\\\\1;/,\\n      alias: 'nowdoc-string',\\n      greedy: true,\\n      inside: {\\n        delimiter: {\\n          pattern: /^<<<'[^']+'|[a-z_]\\\\w*;$/i,\\n          alias: 'symbol',\\n          inside: {\\n            punctuation: /^<<<'?|[';]$/\\n          }\\n        }\\n      }\\n    }, {\\n      pattern: /<<<(?:\\\"([^\\\"]+)\\\"[\\\\r\\\\n](?:.*[\\\\r\\\\n])*?\\\\1;|([a-z_]\\\\w*)[\\\\r\\\\n](?:.*[\\\\r\\\\n])*?\\\\2;)/i,\\n      alias: 'heredoc-string',\\n      greedy: true,\\n      inside: {\\n        delimiter: {\\n          pattern: /^<<<(?:\\\"[^\\\"]+\\\"|[a-z_]\\\\w*)|[a-z_]\\\\w*;$/i,\\n          alias: 'symbol',\\n          inside: {\\n            punctuation: /^<<<\\\"?|[\\\";]$/\\n          }\\n        },\\n        interpolation: string_interpolation\\n      }\\n    }, {\\n      pattern: /`(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\`])*`/,\\n      alias: 'backtick-quoted-string',\\n      greedy: true\\n    }, {\\n      pattern: /'(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\'])*'/,\\n      alias: 'single-quoted-string',\\n      greedy: true\\n    }, {\\n      pattern: /\\\"(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\\\\"])*\\\"/,\\n      alias: 'double-quoted-string',\\n      greedy: true,\\n      inside: {\\n        interpolation: string_interpolation\\n      }\\n    }];\\n    Prism.languages.insertBefore('php', 'variable', {\\n      string: string,\\n      attribute: {\\n        pattern: /#\\\\[(?:[^\\\"'\\\\/#]|\\\\/(?![*/])|\\\\/\\\\/.*$|#(?!\\\\[).*$|\\\\/\\\\*(?:[^*]|\\\\*(?!\\\\/))*\\\\*\\\\/|\\\"(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\\\\"])*\\\"|'(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\'])*')+\\\\](?=\\\\s*[a-z$#])/im,\\n        greedy: true,\\n        inside: {\\n          'attribute-content': {\\n            pattern: /^(#\\\\[)[\\\\s\\\\S]+(?=\\\\]$)/,\\n            lookbehind: true,\\n            // inside can appear subset of php\\n            inside: {\\n              comment: comment,\\n              string: string,\\n              'attribute-class-name': [{\\n                pattern: /([^:]|^)\\\\b[a-z_]\\\\w*(?!\\\\\\\\)\\\\b/i,\\n                alias: 'class-name',\\n                greedy: true,\\n                lookbehind: true\\n              }, {\\n                pattern: /([^:]|^)(?:\\\\\\\\?\\\\b[a-z_]\\\\w*)+/i,\\n                alias: ['class-name', 'class-name-fully-qualified'],\\n                greedy: true,\\n                lookbehind: true,\\n                inside: {\\n                  punctuation: /\\\\\\\\/\\n                }\\n              }],\\n              constant: constant,\\n              number: number,\\n              operator: operator,\\n              punctuation: punctuation\\n            }\\n          },\\n          delimiter: {\\n            pattern: /^#\\\\[|\\\\]$/,\\n            alias: 'punctuation'\\n          }\\n        }\\n      }\\n    });\\n    Prism.hooks.add('before-tokenize', function (env) {\\n      if (!/<\\\\?/.test(env.code)) {\\n        return;\\n      }\\n\\n      var phpPattern = /<\\\\?(?:[^\\\"'/#]|\\\\/(?![*/])|(\\\"|')(?:\\\\\\\\[\\\\s\\\\S]|(?!\\\\1)[^\\\\\\\\])*\\\\1|(?:\\\\/\\\\/|#(?!\\\\[))(?:[^?\\\\n\\\\r]|\\\\?(?!>))*(?=$|\\\\?>|[\\\\r\\\\n])|#\\\\[|\\\\/\\\\*(?:[^*]|\\\\*(?!\\\\/))*(?:\\\\*\\\\/|$))*?(?:\\\\?>|$)/g;\\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\\n    });\\n    Prism.hooks.add('after-tokenize', function (env) {\\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\\n    });\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"php\",\"Prism\",\"register\",\"_markupTemplating\",\"default\",\"comment\",\"constant\",\"pattern\",\"alias\",\"greedy\",\"lookbehind\",\"number\",\"operator\",\"punctuation\",\"languages\",\"delimiter\",\"variable\",\"package\",\"inside\",\"keyword\",\"function\",\"property\",\"string_interpolation\",\"string\",\"interpolation\",\"insertBefore\",\"attribute\",\"hooks\",\"add\",\"env\",\"test\",\"code\",\"buildPlaceholders\",\"phpPattern\",\"tokenizePlaceholders\",\"Object\",\"defineProperty\",\"value\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"displayName\",\"aliases\"]\n}\n"]