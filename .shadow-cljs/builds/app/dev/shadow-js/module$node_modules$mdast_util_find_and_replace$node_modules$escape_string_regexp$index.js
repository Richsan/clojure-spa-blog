["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js"],"~:js","shadow$provide.module$node_modules$mdast_util_find_and_replace$node_modules$escape_string_regexp$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(string){if(\"string\"!==typeof string)throw new TypeError(\"Expected a string\");return string.replace(/[|\\\\{}()[\\]^$+*?.]/g,\"\\\\$\\x26\").replace(/-/g,\"\\\\x2d\")}}","~:source","shadow$provide[\"module$node_modules$mdast_util_find_and_replace$node_modules$escape_string_regexp$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = escapeStringRegexp;\n\nfunction escapeStringRegexp(string) {\n  if (typeof string !== 'string') {\n    throw new TypeError('Expected a string');\n  } // Escape characters with special meaning either inside or outside character sets.\n  // Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\n\n  return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1676841365332,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_find_and_replace$node_modules$escape_string_regexp$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,uFAAA,CAA4G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpJC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAEAC,QAA2B,CAACC,MAAD,CAAS,CAClC,GAAsB,QAAtB,GAAI,MAAOA,OAAX,CACE,KAAM,KAAIC,SAAJ,CAAc,mBAAd,CAAN,CAKF,MAAOD,OAAOE,CAAAA,OAAP,CAAe,qBAAf,CAAsC,SAAtC,CAA8CA,CAAAA,OAA9C,CAAsD,IAAtD,CAA4D,OAA5D,CAP2B,CARgH;\",\n\"sources\":[\"node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_find_and_replace$node_modules$escape_string_regexp$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = escapeStringRegexp;\\n\\nfunction escapeStringRegexp(string) {\\n  if (typeof string !== 'string') {\\n    throw new TypeError('Expected a string');\\n  } // Escape characters with special meaning either inside or outside character sets.\\n  // Use a simple backslash escape when it\\u2019s always valid, and a `\\\\xnn` escape when the simpler form would be disallowed by Unicode patterns\\u2019 stricter grammar.\\n\\n\\n  return string.replace(/[|\\\\\\\\{}()[\\\\]^$+*?.]/g, '\\\\\\\\$&').replace(/-/g, '\\\\\\\\x2d');\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"escapeStringRegexp\",\"string\",\"TypeError\",\"replace\"]\n}\n"]