["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-core-commonmark/lib/block-quote.js"],"~:js","shadow$provide.module$node_modules$micromark_core_commonmark$lib$block_quote=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.blockQuote=void 0;var _micromarkFactorySpace=require(\"module$node_modules$micromark_factory_space$index\"),_micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\");const blockQuote={name:\"blockQuote\",tokenize:function(effects,ok,nok){function after(code){if((0,_micromarkUtilCharacter.markdownSpace)(code))return effects.enter(\"blockQuotePrefixWhitespace\"),\neffects.consume(code),effects.exit(\"blockQuotePrefixWhitespace\"),effects.exit(\"blockQuotePrefix\"),ok;effects.exit(\"blockQuotePrefix\");return ok(code)}const self=this;return function(code){if(62===code){const state=self.containerState;state.open||(effects.enter(\"blockQuote\",{_container:!0}),state.open=!0);effects.enter(\"blockQuotePrefix\");effects.enter(\"blockQuoteMarker\");effects.consume(code);effects.exit(\"blockQuoteMarker\");return after}return nok(code)}},continuation:{tokenize:function(effects,\nok,nok){return(0,_micromarkFactorySpace.factorySpace)(effects,effects.attempt(blockQuote,ok,nok),\"linePrefix\",this.parser.constructs.disable.null.includes(\"codeIndented\")?void 0:4)}},exit:function(effects){effects.exit(\"blockQuote\")}};exports.blockQuote=blockQuote}","~:source","shadow$provide[\"module$node_modules$micromark_core_commonmark$lib$block_quote\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.blockQuote = void 0;\n\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\n\n/** @type {Construct} */\nconst blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n/** @type {Tokenizer} */\n\nexports.blockQuote = blockQuote;\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        });\n        state.open = true;\n      }\n\n      effects.enter('blockQuotePrefix');\n      effects.enter('blockQuoteMarker');\n      effects.consume(code);\n      effects.exit('blockQuoteMarker');\n      return after;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function after(code) {\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\n      effects.enter('blockQuotePrefixWhitespace');\n      effects.consume(code);\n      effects.exit('blockQuotePrefixWhitespace');\n      effects.exit('blockQuotePrefix');\n      return ok;\n    }\n\n    effects.exit('blockQuotePrefix');\n    return ok(code);\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return (0, _micromarkFactorySpace.factorySpace)(effects, effects.attempt(blockQuote, ok, nok), 'linePrefix', this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}\n/** @type {Exiter} */\n\n\nfunction exit(effects) {\n  effects.exit('blockQuote');\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js","~$module$node_modules$micromark_factory_space$index"]],"~:properties",["^5",["tokenize","continuation","blockQuote","__esModule","name","value","_container","exit","open"]],"~:compiled-at",1676665867267,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_core_commonmark$lib$block_quote.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAAqB,IAAK,EAE1B,KAAIC,uBAAyBP,OAAA,CAAQ,mDAAR,CAA7B,CAEIQ,wBAA0BR,OAAA,CAAQ,oDAAR,CAU9B,OAAMM,WAAa,CACjBG,KAAM,YADW,CAEjBC,SAUFC,QAAgC,CAACC,OAAD,CAAUC,EAAV,CAAcC,GAAd,CAAmB,CA4BjDC,QAASA,MAAK,CAACC,IAAD,CAAO,CACnB,GAAI,GAAIR,uBAAwBS,CAAAA,aAA5B,EAA2CD,IAA3C,CAAJ,CAKE,MAJAJ,QAAQM,CAAAA,KAAR,CAAc,4BAAd,CAIOL;AAHPD,OAAQO,CAAAA,OAAR,CAAgBH,IAAhB,CAGOH,CAFPD,OAAQQ,CAAAA,IAAR,CAAa,4BAAb,CAEOP,CADPD,OAAQQ,CAAAA,IAAR,CAAa,kBAAb,CACOP,CAAAA,EAGTD,QAAQQ,CAAAA,IAAR,CAAa,kBAAb,CACA,OAAOP,GAAA,CAAGG,IAAH,CAVY,CA3BrB,MAAMK,KAAO,IACb,OAGAC,SAAc,CAACN,IAAD,CAAO,CACnB,GAAa,EAAb,GAAIA,IAAJ,CAAiB,CACf,MAAMO,MAAQF,IAAKG,CAAAA,cAEdD,MAAME,CAAAA,IAAX,GACEb,OAAQM,CAAAA,KAAR,CAAc,YAAd,CAA4B,CAC1BQ,WAAY,CAAA,CADc,CAA5B,CAGA,CAAAH,KAAME,CAAAA,IAAN,CAAa,CAAA,CAJf,CAOAb,QAAQM,CAAAA,KAAR,CAAc,kBAAd,CACAN,QAAQM,CAAAA,KAAR,CAAc,kBAAd,CACAN,QAAQO,CAAAA,OAAR,CAAgBH,IAAhB,CACAJ,QAAQQ,CAAAA,IAAR,CAAa,kBAAb,CACA,OAAOL,MAdQ,CAiBjB,MAAOD,IAAA,CAAIE,IAAJ,CAlBY,CAL4B,CAZhC,CAGjBW,aAAc,CACZjB,SAoDJkB,QAAuC,CAAChB,OAAD;AAAUC,EAAV,CAAcC,GAAd,CAAmB,CACxD,MAAO,GAAIP,sBAAuBsB,CAAAA,YAA3B,EAAyCjB,OAAzC,CAAkDA,OAAQkB,CAAAA,OAAR,CAAgBxB,UAAhB,CAA4BO,EAA5B,CAAgCC,GAAhC,CAAlD,CAAwF,YAAxF,CAAsG,IAAKiB,CAAAA,MAAOC,CAAAA,UAAWC,CAAAA,OAAQC,CAAAA,IAAKC,CAAAA,QAApC,CAA6C,cAA7C,CAAA,CAA+DC,IAAAA,EAA/D,CAA2E,CAAjL,CADiD,CArD1C,CAHG,CAMjBhB,KAwDFA,QAAa,CAACR,OAAD,CAAU,CACrBA,OAAQQ,CAAAA,IAAR,CAAa,YAAb,CADqB,CA9DJ,CAUnBlB,QAAQI,CAAAA,UAAR,CAAqBA,UA9BqG;\",\n\"sources\":[\"node_modules/micromark-core-commonmark/lib/block-quote.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_core_commonmark$lib$block_quote\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.blockQuote = void 0;\\n\\nvar _micromarkFactorySpace = require(\\\"micromark-factory-space\\\");\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Construct} Construct\\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\\n * @typedef {import('micromark-util-types').Exiter} Exiter\\n * @typedef {import('micromark-util-types').State} State\\n */\\n\\n/** @type {Construct} */\\nconst blockQuote = {\\n  name: 'blockQuote',\\n  tokenize: tokenizeBlockQuoteStart,\\n  continuation: {\\n    tokenize: tokenizeBlockQuoteContinuation\\n  },\\n  exit\\n};\\n/** @type {Tokenizer} */\\n\\nexports.blockQuote = blockQuote;\\n\\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\\n  const self = this;\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    if (code === 62) {\\n      const state = self.containerState;\\n\\n      if (!state.open) {\\n        effects.enter('blockQuote', {\\n          _container: true\\n        });\\n        state.open = true;\\n      }\\n\\n      effects.enter('blockQuotePrefix');\\n      effects.enter('blockQuoteMarker');\\n      effects.consume(code);\\n      effects.exit('blockQuoteMarker');\\n      return after;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function after(code) {\\n    if ((0, _micromarkUtilCharacter.markdownSpace)(code)) {\\n      effects.enter('blockQuotePrefixWhitespace');\\n      effects.consume(code);\\n      effects.exit('blockQuotePrefixWhitespace');\\n      effects.exit('blockQuotePrefix');\\n      return ok;\\n    }\\n\\n    effects.exit('blockQuotePrefix');\\n    return ok(code);\\n  }\\n}\\n/** @type {Tokenizer} */\\n\\n\\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\\n  return (0, _micromarkFactorySpace.factorySpace)(effects, effects.attempt(blockQuote, ok, nok), 'linePrefix', this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\\n}\\n/** @type {Exiter} */\\n\\n\\nfunction exit(effects) {\\n  effects.exit('blockQuote');\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"blockQuote\",\"_micromarkFactorySpace\",\"_micromarkUtilCharacter\",\"name\",\"tokenize\",\"tokenizeBlockQuoteStart\",\"effects\",\"ok\",\"nok\",\"after\",\"code\",\"markdownSpace\",\"enter\",\"consume\",\"exit\",\"self\",\"start\",\"state\",\"containerState\",\"open\",\"_container\",\"continuation\",\"tokenizeBlockQuoteContinuation\",\"factorySpace\",\"attempt\",\"parser\",\"constructs\",\"disable\",\"null\",\"includes\",\"undefined\"]\n}\n"]