["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-extension-gfm-autolink-literal/lib/html.js"],"~:js","shadow$provide.module$node_modules$micromark_extension_gfm_autolink_literal$lib$html=function(global,require,module,exports){function anchorFromToken(token,protocol){token=this.sliceSerialize(token);this.tag('\\x3ca href\\x3d\"'+(0,_micromarkUtilSanitizeUri.sanitizeUri)((protocol||\"\")+token)+'\"\\x3e');this.raw(this.encode(token));this.tag(\"\\x3c/a\\x3e\")}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.gfmAutolinkLiteralHtml=void 0;var _micromarkUtilSanitizeUri=require(\"module$node_modules$micromark_util_sanitize_uri$index\");\nexports.gfmAutolinkLiteralHtml={exit:{literalAutolinkEmail:function(token){anchorFromToken.call(this,token,\"mailto:\")},literalAutolinkHttp:function(token){anchorFromToken.call(this,token)},literalAutolinkWww:function(token){anchorFromToken.call(this,token,\"http://\")}}}}","~:source","shadow$provide[\"module$node_modules$micromark_extension_gfm_autolink_literal$lib$html\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gfmAutolinkLiteralHtml = void 0;\n\nvar _micromarkUtilSanitizeUri = require(\"micromark-util-sanitize-uri\");\n\n/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/** @type {HtmlExtension} */\nconst gfmAutolinkLiteralHtml = {\n  exit: {\n    literalAutolinkEmail,\n    literalAutolinkHttp,\n    literalAutolinkWww\n  }\n};\n/** @type {Handle} */\n\nexports.gfmAutolinkLiteralHtml = gfmAutolinkLiteralHtml;\n\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://');\n}\n/** @type {Handle} */\n\n\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:');\n}\n/** @type {Handle} */\n\n\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token);\n}\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string} [protocol]\n * @returns {void}\n */\n\n\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token);\n  this.tag('<a href=\"' + (0, _micromarkUtilSanitizeUri.sanitizeUri)((protocol || '') + url) + '\">');\n  this.raw(this.encode(url));\n  this.tag('</a>');\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$micromark_util_sanitize_uri$index"]],"~:properties",["^5",["literalAutolinkWww","__esModule","literalAutolinkEmail","value","gfmAutolinkLiteralHtml","literalAutolinkHttp","exit"]],"~:compiled-at",1676841365310,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_extension_gfm_autolink_literal$lib$html.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoDlIC,QAASA,gBAAe,CAACC,KAAD,CAAQC,QAAR,CAAkB,CAClCC,KAAAA,CAAM,IAAKC,CAAAA,cAAL,CAAoBH,KAApB,CACZ,KAAKI,CAAAA,GAAL,CAAS,iBAAT,CAAuB,GAAIC,yBAA0BC,CAAAA,WAA9B,GAA4CL,QAA5C,EAAwD,EAAxD,EAA8DC,KAA9D,CAAvB,CAA4F,OAA5F,CACA,KAAKK,CAAAA,GAAL,CAAS,IAAKC,CAAAA,MAAL,CAAYN,KAAZ,CAAT,CACA,KAAKE,CAAAA,GAAL,CAAS,YAAT,CAJwC,CAjD1CK,MAAOC,CAAAA,cAAP,CAAsBZ,OAAtB,CAA+B,YAA/B,CAA6C,CAC3Ca,MAAO,CAAA,CADoC,CAA7C,CAGAb,QAAQc,CAAAA,sBAAR,CAAiC,IAAK,EAEtC,KAAIP,0BAA4BT,OAAA,CAAQ,uDAAR,CAmBhCE;OAAQc,CAAAA,sBAAR,CAT+BA,CAC7BC,KAAM,CACJC,qBAeJA,QAA6B,CAACd,KAAD,CAAQ,CACnCD,eAAgBgB,CAAAA,IAAhB,CAAqB,IAArB,CAA2Bf,KAA3B,CAAkC,SAAlC,CADmC,CAhB7B,CAEJgB,oBAoBJA,QAA4B,CAAChB,KAAD,CAAQ,CAClCD,eAAgBgB,CAAAA,IAAhB,CAAqB,IAArB,CAA2Bf,KAA3B,CADkC,CAtB5B,CAGJiB,mBAOJA,QAA2B,CAACjB,KAAD,CAAQ,CACjCD,eAAgBgB,CAAAA,IAAhB,CAAqB,IAArB,CAA2Bf,KAA3B,CAAkC,SAAlC,CADiC,CAV3B,CADuBY,CAlBmG;\",\n\"sources\":[\"node_modules/micromark-extension-gfm-autolink-literal/lib/html.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_extension_gfm_autolink_literal$lib$html\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.gfmAutolinkLiteralHtml = void 0;\\n\\nvar _micromarkUtilSanitizeUri = require(\\\"micromark-util-sanitize-uri\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\\n * @typedef {import('micromark-util-types').Handle} Handle\\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\\n * @typedef {import('micromark-util-types').Token} Token\\n */\\n\\n/** @type {HtmlExtension} */\\nconst gfmAutolinkLiteralHtml = {\\n  exit: {\\n    literalAutolinkEmail,\\n    literalAutolinkHttp,\\n    literalAutolinkWww\\n  }\\n};\\n/** @type {Handle} */\\n\\nexports.gfmAutolinkLiteralHtml = gfmAutolinkLiteralHtml;\\n\\nfunction literalAutolinkWww(token) {\\n  anchorFromToken.call(this, token, 'http://');\\n}\\n/** @type {Handle} */\\n\\n\\nfunction literalAutolinkEmail(token) {\\n  anchorFromToken.call(this, token, 'mailto:');\\n}\\n/** @type {Handle} */\\n\\n\\nfunction literalAutolinkHttp(token) {\\n  anchorFromToken.call(this, token);\\n}\\n/**\\n * @this CompileContext\\n * @param {Token} token\\n * @param {string} [protocol]\\n * @returns {void}\\n */\\n\\n\\nfunction anchorFromToken(token, protocol) {\\n  const url = this.sliceSerialize(token);\\n  this.tag('<a href=\\\"' + (0, _micromarkUtilSanitizeUri.sanitizeUri)((protocol || '') + url) + '\\\">');\\n  this.raw(this.encode(url));\\n  this.tag('</a>');\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"anchorFromToken\",\"token\",\"protocol\",\"url\",\"sliceSerialize\",\"tag\",\"_micromarkUtilSanitizeUri\",\"sanitizeUri\",\"raw\",\"encode\",\"Object\",\"defineProperty\",\"value\",\"gfmAutolinkLiteralHtml\",\"exit\",\"literalAutolinkEmail\",\"call\",\"literalAutolinkHttp\",\"literalAutolinkWww\"]\n}\n"]