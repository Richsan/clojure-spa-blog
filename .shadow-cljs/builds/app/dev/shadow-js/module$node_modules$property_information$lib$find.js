["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/property-information/lib/find.js"],"~:js","shadow$provide.module$node_modules$property_information$lib$find=function(global,require,module,exports){function kebab($0){return\"-\"+$0.toLowerCase()}function camelcase($0){return $0.charAt(1).toUpperCase()}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.find=function(schema,value){const normal=(0,_normalize.normalize)(value);var prop=value;let Type=_info.Info;if(normal in schema.normal)return schema.property[schema.normal[normal]];4<normal.length&&\"data\"===normal.slice(0,4)&&valid.test(value)&&\n(\"-\"===value.charAt(4)?(prop=value.slice(5).replace(dash,camelcase),prop=\"data\"+prop.charAt(0).toUpperCase()+prop.slice(1)):(schema=value.slice(4),dash.test(schema)||(value=schema.replace(cap,kebab),\"-\"!==value.charAt(0)&&(value=\"-\"+value),value=\"data\"+value)),Type=_definedInfo.DefinedInfo);return new Type(prop,value)};var _normalize=require(\"module$node_modules$property_information$lib$normalize\"),_definedInfo=require(\"module$node_modules$property_information$lib$util$defined_info\"),_info=require(\"module$node_modules$property_information$lib$util$info\");\nconst valid=/^data[-\\w.:]+$/i,dash=/-[a-z]/g,cap=/[A-Z]/g}","~:source","shadow$provide[\"module$node_modules$property_information$lib$find\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.find = find;\n\nvar _normalize = require(\"./normalize.js\");\n\nvar _definedInfo = require(\"./util/defined-info.js\");\n\nvar _info = require(\"./util/info.js\");\n\n/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\nconst valid = /^data[-\\w.:]+$/i;\nconst dash = /-[a-z]/g;\nconst cap = /[A-Z]/g;\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\n\nfunction find(schema, value) {\n  const normal = (0, _normalize.normalize)(value);\n  let prop = value;\n  let Type = _info.Info;\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]];\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase);\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4);\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab);\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes;\n        }\n\n        value = 'data' + dashes;\n      }\n    }\n\n    Type = _definedInfo.DefinedInfo;\n  }\n\n  return new Type(prop, value);\n}\n/**\n * @param {string} $0\n * @returns {string}\n */\n\n\nfunction kebab($0) {\n  return '-' + $0.toLowerCase();\n}\n/**\n * @param {string} $0\n * @returns {string}\n */\n\n\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase();\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$property_information$lib$normalize","~$module$node_modules$property_information$lib$util$info","~$module$node_modules$property_information$lib$util$defined_info"]],"~:properties",["^5",["find","__esModule","value"]],"~:compiled-at",1676665867334,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$property_information$lib$find.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmE9GC,QAASA,MAAK,CAACC,EAAD,CAAK,CACjB,MAAO,GAAP,CAAaA,EAAGC,CAAAA,WAAH,EADI,CASnBC,QAASA,UAAS,CAACF,EAAD,CAAK,CACrB,MAAOA,GAAGG,CAAAA,MAAH,CAAU,CAAV,CAAaC,CAAAA,WAAb,EADc,CAzEvBC,MAAOC,CAAAA,cAAP,CAAsBR,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CS,MAAO,CAAA,CADoC,CAA7C,CAGAT,QAAQU,CAAAA,IAAR,CAoBAA,QAAa,CAACC,MAAD,CAASF,KAAT,CAAgB,CAC3B,MAAMG,OAAS,GAAIC,UAAWC,CAAAA,SAAf,EAA0BL,KAA1B,CACf,KAAIM,KAAON,KACX,KAAIO,KAAOC,KAAMC,CAAAA,IAEjB,IAAIN,MAAJ,GAAcD,OAAOC,CAAAA,MAArB,CACE,MAAOD,OAAOQ,CAAAA,QAAP,CAAgBR,MAAOC,CAAAA,MAAP,CAAcA,MAAd,CAAhB,CAGW,EAApB,CAAIA,MAAOQ,CAAAA,MAAX,EAAgD,MAAhD,GAAyBR,MAAOS,CAAAA,KAAP,CAAa,CAAb,CAAgB,CAAhB,CAAzB,EAA0DC,KAAMC,CAAAA,IAAN,CAAWd,KAAX,CAA1D;CAE0B,GAAxB,GAAIA,KAAMJ,CAAAA,MAAN,CAAa,CAAb,CAAJ,EAEQmB,IACN,CADaf,KAAMY,CAAAA,KAAN,CAAY,CAAZ,CAAeI,CAAAA,OAAf,CAAuBC,IAAvB,CAA6BtB,SAA7B,CACb,CAAAW,IAAA,CAAO,MAAP,CAAgBS,IAAKnB,CAAAA,MAAL,CAAY,CAAZ,CAAeC,CAAAA,WAAf,EAAhB,CAA+CkB,IAAKH,CAAAA,KAAL,CAAW,CAAX,CAHjD,GAMQG,MAEN,CAFaf,KAAMY,CAAAA,KAAN,CAAY,CAAZ,CAEb,CAAKK,IAAKH,CAAAA,IAAL,CAAUC,MAAV,CAAL,GACMG,KAMJ,CANaH,MAAKC,CAAAA,OAAL,CAAaG,GAAb,CAAkB3B,KAAlB,CAMb,CAJyB,GAIzB,GAJI0B,KAAOtB,CAAAA,MAAP,CAAc,CAAd,CAIJ,GAHEsB,KAGF,CAHW,GAGX,CAHiBA,KAGjB,EAAAlB,KAAA,CAAQ,MAAR,CAAiBkB,KAPnB,CARF,CAmBA,CAAAX,IAAA,CAAOa,YAAaC,CAAAA,WArBtB,CAwBA,OAAO,KAAId,IAAJ,CAASD,IAAT,CAAeN,KAAf,CAjCoB,CAlB7B,KAAII,WAAaf,OAAA,CAAQ,wDAAR,CAAjB,CAEI+B,aAAe/B,OAAA,CAAQ,gEAAR,CAFnB,CAIImB,MAAQnB,OAAA,CAAQ,wDAAR,CAKZ;MAAMwB,MAAQ,iBAAd,CACMI,KAAO,SADb,CAEME,IAAM,QAnBkG;\",\n\"sources\":[\"node_modules/property-information/lib/find.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$property_information$lib$find\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.find = find;\\n\\nvar _normalize = require(\\\"./normalize.js\\\");\\n\\nvar _definedInfo = require(\\\"./util/defined-info.js\\\");\\n\\nvar _info = require(\\\"./util/info.js\\\");\\n\\n/**\\n * @typedef {import('./util/schema.js').Schema} Schema\\n */\\nconst valid = /^data[-\\\\w.:]+$/i;\\nconst dash = /-[a-z]/g;\\nconst cap = /[A-Z]/g;\\n/**\\n * @param {Schema} schema\\n * @param {string} value\\n * @returns {Info}\\n */\\n\\nfunction find(schema, value) {\\n  const normal = (0, _normalize.normalize)(value);\\n  let prop = value;\\n  let Type = _info.Info;\\n\\n  if (normal in schema.normal) {\\n    return schema.property[schema.normal[normal]];\\n  }\\n\\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\\n    // Attribute or property.\\n    if (value.charAt(4) === '-') {\\n      // Turn it into a property.\\n      const rest = value.slice(5).replace(dash, camelcase);\\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);\\n    } else {\\n      // Turn it into an attribute.\\n      const rest = value.slice(4);\\n\\n      if (!dash.test(rest)) {\\n        let dashes = rest.replace(cap, kebab);\\n\\n        if (dashes.charAt(0) !== '-') {\\n          dashes = '-' + dashes;\\n        }\\n\\n        value = 'data' + dashes;\\n      }\\n    }\\n\\n    Type = _definedInfo.DefinedInfo;\\n  }\\n\\n  return new Type(prop, value);\\n}\\n/**\\n * @param {string} $0\\n * @returns {string}\\n */\\n\\n\\nfunction kebab($0) {\\n  return '-' + $0.toLowerCase();\\n}\\n/**\\n * @param {string} $0\\n * @returns {string}\\n */\\n\\n\\nfunction camelcase($0) {\\n  return $0.charAt(1).toUpperCase();\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"kebab\",\"$0\",\"toLowerCase\",\"camelcase\",\"charAt\",\"toUpperCase\",\"Object\",\"defineProperty\",\"value\",\"find\",\"schema\",\"normal\",\"_normalize\",\"normalize\",\"prop\",\"Type\",\"_info\",\"Info\",\"property\",\"length\",\"slice\",\"valid\",\"test\",\"rest\",\"replace\",\"dash\",\"dashes\",\"cap\",\"_definedInfo\",\"DefinedInfo\"]\n}\n"]