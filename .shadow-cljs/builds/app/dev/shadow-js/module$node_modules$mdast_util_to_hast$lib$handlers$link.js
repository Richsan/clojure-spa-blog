["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-hast/lib/handlers/link.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_hast$lib$handlers$link=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.link=function(state,node){var properties={href:(0,_micromarkUtilSanitizeUri.normalizeUri)(node.url)};null!==node.title&&void 0!==node.title&&(properties.title=node.title);properties={type:\"element\",tagName:\"a\",properties,children:state.all(node)};state.patch(node,properties);return state.applyData(node,properties)};var _micromarkUtilSanitizeUri=\nrequire(\"module$node_modules$micromark_util_sanitize_uri$index\")}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_hast$lib$handlers$link\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.link = link;\n\nvar _micromarkUtilSanitizeUri = require(\"micromark-util-sanitize-uri\");\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nfunction link(state, node) {\n  /** @type {Properties} */\n  const properties = {\n    href: (0, _micromarkUtilSanitizeUri.normalizeUri)(node.url)\n  };\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title;\n  }\n  /** @type {Element} */\n\n\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$micromark_util_sanitize_uri$index"]],"~:properties",["^5",["properties","children","__esModule","href","value","title","link","type","tagName"]],"~:compiled-at",1676665867313,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_hast$lib$handlers$link.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,IAAR,CAqBAA,QAAa,CAACC,KAAD,CAAQC,IAAR,CAAc,CAEzB,IAAMC,WAAa,CACjBC,KAAM,GAAIC,yBAA0BC,CAAAA,YAA9B,EAA4CJ,IAAKK,CAAAA,GAAjD,CADW,CAIA,KAAnB,GAAIL,IAAKM,CAAAA,KAAT,EAA0CC,IAAAA,EAA1C,GAA2BP,IAAKM,CAAAA,KAAhC,GACEL,UAAWK,CAAAA,KADb,CACqBN,IAAKM,CAAAA,KAD1B,CAMME,WAAAA,CAAS,CACbC,KAAM,SADO,CAEbC,QAAS,GAFI,CAGbT,UAHa,CAIbU,SAAUZ,KAAMa,CAAAA,GAAN,CAAUZ,IAAV,CAJG,CAMfD,MAAMc,CAAAA,KAAN,CAAYb,IAAZ,CAAkBQ,UAAlB,CACA,OAAOT,MAAMe,CAAAA,SAAN,CAAgBd,IAAhB,CAAsBQ,UAAtB,CAnBkB,CAnB3B,KAAIL;AAA4BX,OAAA,CAAQ,uDAAR,CARqF;\",\n\"sources\":[\"node_modules/mdast-util-to-hast/lib/handlers/link.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_hast$lib$handlers$link\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.link = link;\\n\\nvar _micromarkUtilSanitizeUri = require(\\\"micromark-util-sanitize-uri\\\");\\n\\n/**\\n * @typedef {import('hast').Element} Element\\n * @typedef {import('hast').Properties} Properties\\n * @typedef {import('mdast').Link} Link\\n * @typedef {import('../state.js').State} State\\n */\\n\\n/**\\n * Turn an mdast `link` node into hast.\\n *\\n * @param {State} state\\n *   Info passed around.\\n * @param {Link} node\\n *   mdast node.\\n * @returns {Element}\\n *   hast node.\\n */\\nfunction link(state, node) {\\n  /** @type {Properties} */\\n  const properties = {\\n    href: (0, _micromarkUtilSanitizeUri.normalizeUri)(node.url)\\n  };\\n\\n  if (node.title !== null && node.title !== undefined) {\\n    properties.title = node.title;\\n  }\\n  /** @type {Element} */\\n\\n\\n  const result = {\\n    type: 'element',\\n    tagName: 'a',\\n    properties,\\n    children: state.all(node)\\n  };\\n  state.patch(node, result);\\n  return state.applyData(node, result);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"link\",\"state\",\"node\",\"properties\",\"href\",\"_micromarkUtilSanitizeUri\",\"normalizeUri\",\"url\",\"title\",\"undefined\",\"result\",\"type\",\"tagName\",\"children\",\"all\",\"patch\",\"applyData\"]\n}\n"]