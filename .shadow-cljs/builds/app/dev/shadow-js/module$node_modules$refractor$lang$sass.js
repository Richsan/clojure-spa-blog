["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/sass.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$sass=function(global,require,module,exports){function sass(Prism){Prism.register(_css.default);Prism.languages.sass=Prism.languages.extend(\"css\",{comment:{pattern:/^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,lookbehind:!0,greedy:!0}});Prism.languages.insertBefore(\"sass\",\"atrule\",{\"atrule-line\":{pattern:/^(?:[ \\t]*)[@+=].+/m,greedy:!0,inside:{atrule:/(?:@[\\w-]+|[+=])/}}});delete Prism.languages.sass.atrule;var variable=/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/,operator=\n[/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,{pattern:/(\\s)-(?=\\s)/,lookbehind:!0}];Prism.languages.insertBefore(\"sass\",\"property\",{\"variable-line\":{pattern:/^[ \\t]*\\$.+/m,greedy:!0,inside:{punctuation:/:/,variable,operator}},\"property-line\":{pattern:/^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,greedy:!0,inside:{property:[/[^:\\s]+(?=\\s*:)/,{pattern:/(:)[^:\\s]+/,lookbehind:!0}],punctuation:/:/,variable,operator,important:Prism.languages.sass.important}}});delete Prism.languages.sass.property;delete Prism.languages.sass.important;\nPrism.languages.insertBefore(\"sass\",\"punctuation\",{selector:{pattern:/^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,lookbehind:!0,greedy:!0}})}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=sass;var _css=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require(\"module$node_modules$refractor$lang$css\"));sass.displayName=\"sass\";sass.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$sass\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sass;\n\nvar _css = _interopRequireDefault(require(\"./css.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-nocheck\nsass.displayName = 'sass';\nsass.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction sass(Prism) {\n  Prism.register(_css.default);\n\n  (function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    });\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        greedy: true,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/\n        }\n      }\n    });\n    delete Prism.languages.sass.atrule;\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n    var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n      pattern: /(\\s)-(?=\\s)/,\n      lookbehind: true\n    }];\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        greedy: true,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        greedy: true,\n        inside: {\n          property: [/[^:\\s]+(?=\\s*:)/, {\n            pattern: /(:)[^:\\s]+/,\n            lookbehind: true\n          }],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    });\n    delete Prism.languages.sass.property;\n    delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    });\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$refractor$lang$css"]],"~:properties",["^5",["punctuation","aliases","atrule","important","operator","displayName","__esModule","lookbehind","value","sass","variable","greedy","property","pattern","inside","selector","comment","default"]],"~:compiled-at",1676841365376,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$sass.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBpGC,QAASA,KAAI,CAACC,KAAD,CAAQ,CACnBA,KAAMC,CAAAA,QAAN,CAAeC,IAAKC,CAAAA,OAApB,CAkEGH,MA/DKI,CAAAA,SAAUL,CAAAA,IAAhB,CA+DCC,KA/D4BI,CAAAA,SAAUC,CAAAA,MAAhB,CAAuB,KAAvB,CAA8B,CAEnDC,QAAS,CACPC,QAAS,+CADF,CAEPC,WAAY,CAAA,CAFL,CAGPC,OAAQ,CAAA,CAHD,CAF0C,CAA9B,CA+DtBT,MAvDKI,CAAAA,SAAUM,CAAAA,YAAhB,CAA6B,MAA7B,CAAqC,QAArC,CAA+C,CAE7C,cAAe,CAEbH,QAAS,qBAFI,CAGbE,OAAQ,CAAA,CAHK,CAIbE,OAAQ,CACNC,OAAQ,kBADF,CAJK,CAF8B,CAA/C,CAWA,QA4CCZ,KA5CYI,CAAAA,SAAUL,CAAAA,IAAKa,CAAAA,MAC5B,KAAIC,SAAW,wBAAf,CACIC;AAAW,CAAC,0CAAD,CAA6C,CAC1DP,QAAS,aADiD,CAE1DC,WAAY,CAAA,CAF8C,CAA7C,CA0CdR,MAtCKI,CAAAA,SAAUM,CAAAA,YAAhB,CAA6B,MAA7B,CAAqC,UAArC,CAAiD,CAE/C,gBAAiB,CACfH,QAAS,cADM,CAEfE,OAAQ,CAAA,CAFO,CAGfE,OAAQ,CACNI,YAAa,GADP,CAEIF,QAFJ,CAGIC,QAHJ,CAHO,CAF8B,CAY/C,gBAAiB,CACfP,QAAS,oCADM,CAEfE,OAAQ,CAAA,CAFO,CAGfE,OAAQ,CACNK,SAAU,CAAC,iBAAD,CAAoB,CAC5BT,QAAS,YADmB,CAE5BC,WAAY,CAAA,CAFgB,CAApB,CADJ,CAKNO,YAAa,GALP,CAMIF,QANJ,CAOIC,QAPJ,CAQNG,UAeLjB,KAfsBI,CAAAA,SAAUL,CAAAA,IAAKkB,CAAAA,SAR1B,CAHO,CAZ8B,CAAjD,CA2BA,QAWCjB,KAXYI,CAAAA,SAAUL,CAAAA,IAAKiB,CAAAA,QAC5B,QAUChB,KAVYI,CAAAA,SAAUL,CAAAA,IAAKkB,CAAAA,SAU3BjB;KAPKI,CAAAA,SAAUM,CAAAA,YAAhB,CAA6B,MAA7B,CAAqC,aAArC,CAAoD,CAClDQ,SAAU,CACRX,QAAS,wHADD,CAERC,WAAY,CAAA,CAFJ,CAGRC,OAAQ,CAAA,CAHA,CADwC,CAApD,CA5DiB,CAdrBU,MAAOC,CAAAA,cAAP,CAAsBtB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CuB,MAAO,CAAA,CADoC,CAA7C,CAGAvB,QAAQK,CAAAA,OAAR,CAAkBJ,IAElB,KAAIG,KAEJoB,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEpB,QAASoB,GAAX,CAAvC,CAF1B,CAAuB3B,OAAA,CAAQ,wCAAR,CAAvB,CAKXG,KAAK0B,CAAAA,WAAL,CAAmB,MACnB1B,KAAK2B,CAAAA,OAAL,CAAe,EAdqF;\",\n\"sources\":[\"node_modules/refractor/lang/sass.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$sass\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = sass;\\n\\nvar _css = _interopRequireDefault(require(\\\"./css.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// @ts-nocheck\\nsass.displayName = 'sass';\\nsass.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction sass(Prism) {\\n  Prism.register(_css.default);\\n\\n  (function (Prism) {\\n    Prism.languages.sass = Prism.languages.extend('css', {\\n      // Sass comments don't need to be closed, only indented\\n      comment: {\\n        pattern: /^([ \\\\t]*)\\\\/[\\\\/*].*(?:(?:\\\\r?\\\\n|\\\\r)\\\\1[ \\\\t].+)*/m,\\n        lookbehind: true,\\n        greedy: true\\n      }\\n    });\\n    Prism.languages.insertBefore('sass', 'atrule', {\\n      // We want to consume the whole line\\n      'atrule-line': {\\n        // Includes support for = and + shortcuts\\n        pattern: /^(?:[ \\\\t]*)[@+=].+/m,\\n        greedy: true,\\n        inside: {\\n          atrule: /(?:@[\\\\w-]+|[+=])/\\n        }\\n      }\\n    });\\n    delete Prism.languages.sass.atrule;\\n    var variable = /\\\\$[-\\\\w]+|#\\\\{\\\\$[-\\\\w]+\\\\}/;\\n    var operator = [/[+*\\\\/%]|[=!]=|<=?|>=?|\\\\b(?:and|not|or)\\\\b/, {\\n      pattern: /(\\\\s)-(?=\\\\s)/,\\n      lookbehind: true\\n    }];\\n    Prism.languages.insertBefore('sass', 'property', {\\n      // We want to consume the whole line\\n      'variable-line': {\\n        pattern: /^[ \\\\t]*\\\\$.+/m,\\n        greedy: true,\\n        inside: {\\n          punctuation: /:/,\\n          variable: variable,\\n          operator: operator\\n        }\\n      },\\n      // We want to consume the whole line\\n      'property-line': {\\n        pattern: /^[ \\\\t]*(?:[^:\\\\s]+ *:.*|:[^:\\\\s].*)/m,\\n        greedy: true,\\n        inside: {\\n          property: [/[^:\\\\s]+(?=\\\\s*:)/, {\\n            pattern: /(:)[^:\\\\s]+/,\\n            lookbehind: true\\n          }],\\n          punctuation: /:/,\\n          variable: variable,\\n          operator: operator,\\n          important: Prism.languages.sass.important\\n        }\\n      }\\n    });\\n    delete Prism.languages.sass.property;\\n    delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\\n    // what's left should be selectors\\n\\n    Prism.languages.insertBefore('sass', 'punctuation', {\\n      selector: {\\n        pattern: /^([ \\\\t]*)\\\\S(?:,[^,\\\\r\\\\n]+|[^,\\\\r\\\\n]*)(?:,[^,\\\\r\\\\n]+)*(?:,(?:\\\\r?\\\\n|\\\\r)\\\\1[ \\\\t]+\\\\S(?:,[^,\\\\r\\\\n]+|[^,\\\\r\\\\n]*)(?:,[^,\\\\r\\\\n]+)*)*/m,\\n        lookbehind: true,\\n        greedy: true\\n      }\\n    });\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"sass\",\"Prism\",\"register\",\"_css\",\"default\",\"languages\",\"extend\",\"comment\",\"pattern\",\"lookbehind\",\"greedy\",\"insertBefore\",\"inside\",\"atrule\",\"variable\",\"operator\",\"punctuation\",\"property\",\"important\",\"selector\",\"Object\",\"defineProperty\",\"value\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"displayName\",\"aliases\"]\n}\n"]