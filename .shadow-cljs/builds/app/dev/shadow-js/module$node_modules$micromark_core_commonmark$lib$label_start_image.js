["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-core-commonmark/lib/label-start-image.js"],"~:js","shadow$provide.module$node_modules$micromark_core_commonmark$lib$label_start_image=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.labelStartImage=void 0;global={name:\"labelStartImage\",tokenize:function(effects,ok,nok){function open(code){return 91===code?(effects.enter(\"labelMarker\"),effects.consume(code),effects.exit(\"labelMarker\"),effects.exit(\"labelImage\"),after):nok(code)}function after(code){return 94===code&&\"_hiddenFootnoteSupport\"in self.parser.constructs?\nnok(code):ok(code)}const self=this;return function(code){effects.enter(\"labelImage\");effects.enter(\"labelImageMarker\");effects.consume(code);effects.exit(\"labelImageMarker\");return open}},resolveAll:require(\"module$node_modules$micromark_core_commonmark$lib$label_end\").labelEnd.resolveAll};exports.labelStartImage=global}","~:source","shadow$provide[\"module$node_modules$micromark_core_commonmark$lib$label_start_image\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.labelStartImage = void 0;\n\nvar _labelEnd = require(\"./label-end.js\");\n\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\n/** @type {Construct} */\nconst labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: _labelEnd.labelEnd.resolveAll\n};\n/** @type {Tokenizer} */\n\nexports.labelStartImage = labelStartImage;\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage');\n    effects.enter('labelImageMarker');\n    effects.consume(code);\n    effects.exit('labelImageMarker');\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker');\n      effects.consume(code);\n      effects.exit('labelMarker');\n      effects.exit('labelImage');\n      return after;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_core_commonmark$lib$label_end","~$shadow.js"]],"~:properties",["^5",["resolveAll","tokenize","__esModule","name","value","labelStartImage"]],"~:compiled-at",1676665867294,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_core_commonmark$lib$label_start_image.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,mEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0B,IAAK,EAWzBA,OAAAA,CAAkB,CACtBC,KAAM,iBADgB,CAEtBC,SAOFC,QAAgC,CAACC,OAAD,CAAUC,EAAV,CAAcC,GAAd,CAAmB,CAejDC,QAASA,KAAI,CAACC,IAAD,CAAO,CAClB,MAAa,GAAb,GAAIA,IAAJ,EACEJ,OAAQK,CAAAA,KAAR,CAAc,aAAd,CAIOC,CAHPN,OAAQO,CAAAA,OAAR,CAAgBH,IAAhB,CAGOE,CAFPN,OAAQQ,CAAAA,IAAR,CAAa,aAAb,CAEOF,CADPN,OAAQQ,CAAAA,IAAR,CAAa,YAAb,CACOF,CAAAA,KALT,EAQOJ,GAAA,CAAIE,IAAJ,CATW,CAcpBE,QAASA,MAAK,CAACF,IAAD,CAAO,CAQnB,MAAgB,GAAT,GAAAA,IAAA,EAAe,wBAAf,EAA2CK,KAAKC,CAAAA,MAAOC,CAAAA,UAAvD;AAAoET,GAAA,CAAIE,IAAJ,CAApE,CAAgFH,EAAA,CAAGG,IAAH,CARpE,CA5BrB,MAAMK,KAAO,IACb,OAGAG,SAAc,CAACR,IAAD,CAAO,CACnBJ,OAAQK,CAAAA,KAAR,CAAc,YAAd,CACAL,QAAQK,CAAAA,KAAR,CAAc,kBAAd,CACAL,QAAQO,CAAAA,OAAR,CAAgBH,IAAhB,CACAJ,QAAQQ,CAAAA,IAAR,CAAa,kBAAb,CACA,OAAOL,KALY,CAL4B,CAT3B,CAGtBU,WAZcvB,OAAAwB,CAAQ,6DAARA,CAYQC,CAAAA,QAASF,CAAAA,UAHT,CAOxBrB,QAAQI,CAAAA,eAAR,CAA0BA,MAxBsG;\",\n\"sources\":[\"node_modules/micromark-core-commonmark/lib/label-start-image.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_core_commonmark$lib$label_start_image\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.labelStartImage = void 0;\\n\\nvar _labelEnd = require(\\\"./label-end.js\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Construct} Construct\\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\\n * @typedef {import('micromark-util-types').State} State\\n */\\n\\n/** @type {Construct} */\\nconst labelStartImage = {\\n  name: 'labelStartImage',\\n  tokenize: tokenizeLabelStartImage,\\n  resolveAll: _labelEnd.labelEnd.resolveAll\\n};\\n/** @type {Tokenizer} */\\n\\nexports.labelStartImage = labelStartImage;\\n\\nfunction tokenizeLabelStartImage(effects, ok, nok) {\\n  const self = this;\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    effects.enter('labelImage');\\n    effects.enter('labelImageMarker');\\n    effects.consume(code);\\n    effects.exit('labelImageMarker');\\n    return open;\\n  }\\n  /** @type {State} */\\n\\n\\n  function open(code) {\\n    if (code === 91) {\\n      effects.enter('labelMarker');\\n      effects.consume(code);\\n      effects.exit('labelMarker');\\n      effects.exit('labelImage');\\n      return after;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function after(code) {\\n    /* To do: remove in the future once we\\u2019ve switched from\\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\\n     * which doesn\\u2019t need this */\\n\\n    /* Hidden footnotes hook */\\n\\n    /* c8 ignore next 3 */\\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"labelStartImage\",\"name\",\"tokenize\",\"tokenizeLabelStartImage\",\"effects\",\"ok\",\"nok\",\"open\",\"code\",\"enter\",\"after\",\"consume\",\"exit\",\"self\",\"parser\",\"constructs\",\"start\",\"resolveAll\",\"_labelEnd\",\"labelEnd\"]\n}\n"]