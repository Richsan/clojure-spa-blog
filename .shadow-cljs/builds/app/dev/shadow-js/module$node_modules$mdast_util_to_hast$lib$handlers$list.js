["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-hast/lib/handlers/list.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_hast$lib$handlers$list=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.list=function(state,node){var properties={};const results=state.all(node);let index=-1;\"number\"===typeof node.start&&1!==node.start&&(properties.start=node.start);for(;++index<results.length;){const child=results[index];if(\"element\"===child.type&&\"li\"===child.tagName&&child.properties&&Array.isArray(child.properties.className)&&\nchild.properties.className.includes(\"task-list-item\")){properties.className=[\"contains-task-list\"];break}}properties={type:\"element\",tagName:node.ordered?\"ol\":\"ul\",properties,children:state.wrap(results,!0)};state.patch(node,properties);return state.applyData(node,properties)}}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_hast$lib$handlers$list\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.list = list;\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nfunction list(state, node) {\n  /** @type {Properties} */\n  const properties = {};\n  const results = state.all(node);\n  let index = -1;\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start;\n  } // Like GitHub, add a class for custom styling.\n\n\n  while (++index < results.length) {\n    const child = results[index];\n\n    if (child.type === 'element' && child.tagName === 'li' && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes('task-list-item')) {\n      properties.className = ['contains-task-list'];\n      break;\n    }\n  }\n  /** @type {Element} */\n\n\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["properties","list","className","children","__esModule","value","start","type","tagName"]],"~:compiled-at",1676665867314,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_hast$lib$handlers$list.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,IAAR,CAmBAA,QAAa,CAACC,KAAD,CAAQC,IAAR,CAAc,CAEzB,IAAMC,WAAa,EACnB,OAAMC,QAAUH,KAAMI,CAAAA,GAAN,CAAUH,IAAV,CAChB,KAAII,MAAQ,CAAC,CAEa,SAA1B,GAAI,MAAOJ,KAAKK,CAAAA,KAAhB,EAAqD,CAArD,GAAsCL,IAAKK,CAAAA,KAA3C,GACEJ,UAAWI,CAAAA,KADb,CACqBL,IAAKK,CAAAA,KAD1B,CAKA,KAAA,CAAO,EAAED,KAAT,CAAiBF,OAAQI,CAAAA,MAAzB,CAAA,CAAiC,CAC/B,MAAMC,MAAQL,OAAA,CAAQE,KAAR,CAEd,IAAmB,SAAnB,GAAIG,KAAMC,CAAAA,IAAV,EAAkD,IAAlD,GAAgCD,KAAME,CAAAA,OAAtC,EAA0DF,KAAMN,CAAAA,UAAhE,EAA8ES,KAAMC,CAAAA,OAAN,CAAcJ,KAAMN,CAAAA,UAAWW,CAAAA,SAA/B,CAA9E;AAA2HL,KAAMN,CAAAA,UAAWW,CAAAA,SAAUC,CAAAA,QAA3B,CAAoC,gBAApC,CAA3H,CAAkL,CAChLZ,UAAWW,CAAAA,SAAX,CAAuB,CAAC,oBAAD,CACvB,MAFgL,CAHnJ,CAW3BE,UAAAA,CAAS,CACbN,KAAM,SADO,CAEbC,QAAST,IAAKe,CAAAA,OAAL,CAAe,IAAf,CAAsB,IAFlB,CAGbd,UAHa,CAIbe,SAAUjB,KAAMkB,CAAAA,IAAN,CAAWf,OAAX,CAAoB,CAAA,CAApB,CAJG,CAMfH,MAAMmB,CAAAA,KAAN,CAAYlB,IAAZ,CAAkBc,UAAlB,CACA,OAAOf,MAAMoB,CAAAA,SAAN,CAAgBnB,IAAhB,CAAsBc,UAAtB,CA7BkB,CAzB0F;\",\n\"sources\":[\"node_modules/mdast-util-to-hast/lib/handlers/list.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_hast$lib$handlers$list\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.list = list;\\n\\n/**\\n * @typedef {import('hast').Element} Element\\n * @typedef {import('hast').Properties} Properties\\n * @typedef {import('mdast').List} List\\n * @typedef {import('../state.js').State} State\\n */\\n\\n/**\\n * Turn an mdast `list` node into hast.\\n *\\n * @param {State} state\\n *   Info passed around.\\n * @param {List} node\\n *   mdast node.\\n * @returns {Element}\\n *   hast node.\\n */\\nfunction list(state, node) {\\n  /** @type {Properties} */\\n  const properties = {};\\n  const results = state.all(node);\\n  let index = -1;\\n\\n  if (typeof node.start === 'number' && node.start !== 1) {\\n    properties.start = node.start;\\n  } // Like GitHub, add a class for custom styling.\\n\\n\\n  while (++index < results.length) {\\n    const child = results[index];\\n\\n    if (child.type === 'element' && child.tagName === 'li' && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes('task-list-item')) {\\n      properties.className = ['contains-task-list'];\\n      break;\\n    }\\n  }\\n  /** @type {Element} */\\n\\n\\n  const result = {\\n    type: 'element',\\n    tagName: node.ordered ? 'ol' : 'ul',\\n    properties,\\n    children: state.wrap(results, true)\\n  };\\n  state.patch(node, result);\\n  return state.applyData(node, result);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"list\",\"state\",\"node\",\"properties\",\"results\",\"all\",\"index\",\"start\",\"length\",\"child\",\"type\",\"tagName\",\"Array\",\"isArray\",\"className\",\"includes\",\"result\",\"ordered\",\"children\",\"wrap\",\"patch\",\"applyData\"]\n}\n"]