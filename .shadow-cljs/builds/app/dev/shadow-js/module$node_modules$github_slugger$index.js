["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/github-slugger/index.js"],"~:js","shadow$provide.module$node_modules$github_slugger$index=function(global,require,module,exports){function slug(value,maintainCase){if(\"string\"!==typeof value)return\"\";maintainCase||(value=value.toLowerCase());return value.replace(_regex.regex,\"\").replace(/ /g,\"-\")}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.slug=slug;exports.default=void 0;var _regex=require(\"module$node_modules$github_slugger$regex\");const own=Object.hasOwnProperty;class BananaSlug{constructor(){this.reset()}slug(value,\nmaintainCase){for(maintainCase=value=slug(value,!0===maintainCase);own.call(this.occurrences,value);)this.occurrences[maintainCase]++,value=maintainCase+\"-\"+this.occurrences[maintainCase];this.occurrences[value]=0;return value}reset(){this.occurrences=Object.create(null)}}exports.default=BananaSlug}","~:source","shadow$provide[\"module$node_modules$github_slugger$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.slug = slug;\nexports.default = void 0;\n\nvar _regex = require(\"./regex.js\");\n\nconst own = Object.hasOwnProperty;\n/**\n * Slugger.\n */\n\nclass BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor() {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences;\n    this.reset();\n  }\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n\n\n  slug(value, maintainCase) {\n    const self = this;\n    let result = slug(value, maintainCase === true);\n    const originalSlug = result;\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++;\n      result = originalSlug + '-' + self.occurrences[originalSlug];\n    }\n\n    self.occurrences[result] = 0;\n    return result;\n  }\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n\n\n  reset() {\n    this.occurrences = Object.create(null);\n  }\n\n}\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\n\n\nexports.default = BananaSlug;\n\nfunction slug(value, maintainCase) {\n  if (typeof value !== 'string') return '';\n  if (!maintainCase) value = value.toLowerCase();\n  return value.replace(_regex.regex, '').replace(/ /g, '-');\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$github_slugger$regex"]],"~:properties",["^5",["__esModule","slug","value","occurrences","default"]],"~:compiled-at",1676841365350,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$github_slugger$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,wCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqFrGC,QAASA,KAAI,CAACC,KAAD,CAAQC,YAAR,CAAsB,CACjC,GAAqB,QAArB,GAAI,MAAOD,MAAX,CAA+B,MAAO,EACjCC,aAAL,GAAmBD,KAAnB,CAA2BA,KAAME,CAAAA,WAAN,EAA3B,CACA,OAAOF,MAAMG,CAAAA,OAAN,CAAcC,MAAOC,CAAAA,KAArB,CAA4B,EAA5B,CAAgCF,CAAAA,OAAhC,CAAwC,IAAxC,CAA8C,GAA9C,CAH0B,CAlFnCG,MAAOC,CAAAA,cAAP,CAAsBT,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CE,MAAO,CAAA,CADoC,CAA7C,CAGAF,QAAQC,CAAAA,IAAR,CAAeA,IACfD,QAAQU,CAAAA,OAAR,CAAkB,IAAK,EAEvB,KAAIJ,OAASR,OAAA,CAAQ,0CAAR,CAEb,OAAMa,IAAMH,MAAOI,CAAAA,cAKnB,MAAMC,WAAN,CAIEC,WAAW,EAAG,CAIZ,IAAKC,CAAAA,KAAL,EAJY,CAsBdd,IAAI,CAACC,KAAD;AAAQC,YAAR,CAAsB,CAKxB,IAFMa,YAEN,CAHIC,KAGJ,CAHahB,IAAA,CAAKC,KAAL,CAA6B,CAAA,CAA7B,GAAYC,YAAZ,CAGb,CAAOQ,GAAIO,CAAAA,IAAJ,CAJMC,IAIQC,CAAAA,WAAd,CAA2BH,KAA3B,CAAP,CAAA,CAJaE,IAKNC,CAAAA,WAAL,CAAiBJ,YAAjB,CAAA,EACA,CAAAC,KAAA,CAASD,YAAT,CAAwB,GAAxB,CANWG,IAMwBC,CAAAA,WAAL,CAAiBJ,YAAjB,CANnBG,KASRC,CAAAA,WAAL,CAAiBH,KAAjB,CAAA,CAA2B,CAC3B,OAAOA,MAXiB,CAoB1BF,KAAK,EAAG,CACN,IAAKK,CAAAA,WAAL,CAAmBZ,MAAOa,CAAAA,MAAP,CAAc,IAAd,CADb,CA9CV,CAmEArB,OAAQU,CAAAA,OAAR,CAAkBG,UAnFmF;\",\n\"sources\":[\"node_modules/github-slugger/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$github_slugger$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.slug = slug;\\nexports.default = void 0;\\n\\nvar _regex = require(\\\"./regex.js\\\");\\n\\nconst own = Object.hasOwnProperty;\\n/**\\n * Slugger.\\n */\\n\\nclass BananaSlug {\\n  /**\\n   * Create a new slug class.\\n   */\\n  constructor() {\\n    /** @type {Record<string, number>} */\\n    // eslint-disable-next-line no-unused-expressions\\n    this.occurrences;\\n    this.reset();\\n  }\\n  /**\\n   * Generate a unique slug.\\n  *\\n  * Tracks previously generated slugs: repeated calls with the same value\\n  * will result in different slugs.\\n  * Use the `slug` function to get same slugs.\\n   *\\n   * @param  {string} value\\n   *   String of text to slugify\\n   * @param  {boolean} [maintainCase=false]\\n   *   Keep the current case, otherwise make all lowercase\\n   * @return {string}\\n   *   A unique slug string\\n   */\\n\\n\\n  slug(value, maintainCase) {\\n    const self = this;\\n    let result = slug(value, maintainCase === true);\\n    const originalSlug = result;\\n\\n    while (own.call(self.occurrences, result)) {\\n      self.occurrences[originalSlug]++;\\n      result = originalSlug + '-' + self.occurrences[originalSlug];\\n    }\\n\\n    self.occurrences[result] = 0;\\n    return result;\\n  }\\n  /**\\n   * Reset - Forget all previous slugs\\n   *\\n   * @return void\\n   */\\n\\n\\n  reset() {\\n    this.occurrences = Object.create(null);\\n  }\\n\\n}\\n/**\\n * Generate a slug.\\n *\\n * Does not track previously generated slugs: repeated calls with the same value\\n * will result in the exact same slug.\\n * Use the `GithubSlugger` class to get unique slugs.\\n *\\n * @param  {string} value\\n *   String of text to slugify\\n * @param  {boolean} [maintainCase=false]\\n *   Keep the current case, otherwise make all lowercase\\n * @return {string}\\n *   A unique slug string\\n */\\n\\n\\nexports.default = BananaSlug;\\n\\nfunction slug(value, maintainCase) {\\n  if (typeof value !== 'string') return '';\\n  if (!maintainCase) value = value.toLowerCase();\\n  return value.replace(_regex.regex, '').replace(/ /g, '-');\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"slug\",\"value\",\"maintainCase\",\"toLowerCase\",\"replace\",\"_regex\",\"regex\",\"Object\",\"defineProperty\",\"default\",\"own\",\"hasOwnProperty\",\"BananaSlug\",\"constructor\",\"reset\",\"originalSlug\",\"result\",\"call\",\"self\",\"occurrences\",\"create\"]\n}\n"]