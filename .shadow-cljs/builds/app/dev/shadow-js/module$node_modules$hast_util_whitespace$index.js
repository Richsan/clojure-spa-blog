["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/hast-util-whitespace/index.js"],"~:js","shadow$provide.module$node_modules$hast_util_whitespace$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.whitespace=function(thing){thing=thing&&\"object\"===typeof thing&&\"text\"===thing.type?thing.value||\"\":thing;return\"string\"===typeof thing&&\"\"===thing.replace(/[ \\t\\n\\f\\r]/g,\"\")}}","~:source","shadow$provide[\"module$node_modules$hast_util_whitespace$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.whitespace = whitespace;\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nfunction whitespace(thing) {\n  /** @type {string} */\n  const value = // @ts-expect-error looks like a node.\n  thing && typeof thing === 'object' && thing.type === 'text' ? // @ts-expect-error looks like a text.\n  thing.value || '' : thing; // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === '';\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","whitespace"]],"~:compiled-at",1676665867335,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$hast_util_whitespace$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAcAA,QAAmB,CAACC,KAAD,CAAQ,CAEnBF,KAAAA,CACNE,KAAA,EAA0B,QAA1B,GAAS,MAAOA,MAAhB,EAAqD,MAArD,GAAsCA,KAAMC,CAAAA,IAA5C,CACAD,KAAMF,CAAAA,KADN,EACe,EADf,CACoBE,KAGpB,OAAwB,QAAxB,GAAO,MAAOF,MAAd,EAA0E,EAA1E,GAAoCA,KAAMI,CAAAA,OAAN,CAAc,cAAd,CAA8B,EAA9B,CAPX,CApBgF;\",\n\"sources\":[\"node_modules/hast-util-whitespace/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$hast_util_whitespace$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.whitespace = whitespace;\\n\\n/**\\n * Check if the given value is *inter-element whitespace*.\\n *\\n * @param {unknown} thing\\n *   Thing to check (typically `Node` or `string`).\\n * @returns {boolean}\\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\\n *   zero or more of space, tab (`\\\\t`), line feed (`\\\\n`), carriage return\\n *   (`\\\\r`), or form feed (`\\\\f`).\\n *   If a node is passed it must be a `Text` node, whose `value` field is\\n *   checked.\\n */\\nfunction whitespace(thing) {\\n  /** @type {string} */\\n  const value = // @ts-expect-error looks like a node.\\n  thing && typeof thing === 'object' && thing.type === 'text' ? // @ts-expect-error looks like a text.\\n  thing.value || '' : thing; // HTML whitespace expression.\\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\\n\\n  return typeof value === 'string' && value.replace(/[ \\\\t\\\\n\\\\f\\\\r]/g, '') === '';\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"whitespace\",\"thing\",\"type\",\"replace\"]\n}\n"]