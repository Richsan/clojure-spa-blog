["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/cpp.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$cpp=function(global,require,module,exports){module.exports=function(hljs){var regex=hljs.regex;const C_LINE_COMMENT_MODE=hljs.COMMENT(\"//\",\"$\",{contains:[{begin:/\\\\\\n/}]}),FUNCTION_TYPE_RE=\"(?!struct)(decltype\\\\(auto\\\\)|\"+regex.optional(\"[a-zA-Z_]\\\\w*::\")+\"[a-zA-Z_]\\\\w*\"+regex.optional(\"\\x3c[^\\x3c\\x3e]+\\x3e\")+\")\",CPP_PRIMITIVE_TYPES={className:\"type\",begin:\"\\\\b[a-z\\\\d_]*_t\\\\b\"},STRINGS={className:\"string\",variants:[{begin:'(u8?|U|L)?\"',\nend:'\"',illegal:\"\\\\n\",contains:[hljs.BACKSLASH_ESCAPE]},{begin:\"(u8?|U|L)?'(\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)|.)\",end:\"'\",illegal:\".\"},hljs.END_SAME_AS_BEGIN({begin:/(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,end:/\\)([^()\\\\ ]{0,16})\"/})]},NUMBERS={className:\"number\",variants:[{begin:\"\\\\b(0b[01']+)\"},{begin:\"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)\"},{begin:\"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"}],\nrelevance:0},PREPROCESSOR={className:\"meta\",begin:/#\\s*[a-z]+\\b/,end:/$/,keywords:{keyword:\"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include\"},contains:[{begin:/\\\\\\n/,relevance:0},hljs.inherit(STRINGS,{className:\"string\"}),{className:\"string\",begin:/<.*?>/},C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE]},TITLE_MODE={className:\"title\",begin:regex.optional(\"[a-zA-Z_]\\\\w*::\")+hljs.IDENT_RE,relevance:0},FUNCTION_TITLE=regex.optional(\"[a-zA-Z_]\\\\w*::\")+hljs.IDENT_RE+\n\"\\\\s*\\\\(\",CPP_KEYWORDS={type:\"bool char char16_t char32_t char8_t double float int long short void wchar_t unsigned signed const static\".split(\" \"),keyword:\"alignas alignof and and_eq asm atomic_cancel atomic_commit atomic_noexcept auto bitand bitor break case catch class co_await co_return co_yield compl concept const_cast|10 consteval constexpr constinit continue decltype default delete do dynamic_cast|10 else enum explicit export extern false final for friend goto if import inline module mutable namespace new noexcept not not_eq nullptr operator or or_eq override private protected public reflexpr register reinterpret_cast|10 requires return sizeof static_assert static_cast|10 struct switch synchronized template this thread_local throw transaction_safe transaction_safe_dynamic true try typedef typeid typename union using virtual volatile while xor xor_eq\".split(\" \"),\nliteral:[\"NULL\",\"false\",\"nullopt\",\"nullptr\",\"true\"],built_in:[\"_Pragma\"],_type_hints:\"any auto_ptr barrier binary_semaphore bitset complex condition_variable condition_variable_any counting_semaphore deque false_type future imaginary initializer_list istringstream jthread latch lock_guard multimap multiset mutex optional ostringstream packaged_task pair promise priority_queue queue recursive_mutex recursive_timed_mutex scoped_lock set shared_future shared_lock shared_mutex shared_timed_mutex shared_ptr stack string_view stringstream timed_mutex thread true_type tuple unique_lock unique_ptr unordered_map unordered_multimap unordered_multiset unordered_set variant vector weak_ptr wstring wstring_view\".split(\" \")};\nregex={className:\"function.dispatch\",relevance:0,keywords:{_hint:\"abort abs acos apply as_const asin atan atan2 calloc ceil cerr cin clog cos cosh cout declval endl exchange exit exp fabs floor fmod forward fprintf fputs free frexp fscanf future invoke isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit labs launder ldexp log log10 make_pair make_shared make_shared_for_overwrite make_tuple make_unique malloc memchr memcmp memcpy memset modf move pow printf putchar puts realloc scanf sin sinh snprintf sprintf sqrt sscanf std stderr stdin stdout strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr swap tan tanh terminate to_underlying tolower toupper vfprintf visit vprintf vsprintf\".split(\" \")},\nbegin:regex.concat(/\\b/,/(?!decltype)/,/(?!if)/,/(?!for)/,/(?!switch)/,/(?!while)/,hljs.IDENT_RE,regex.lookahead(/(<[^<>]+>|)\\s*\\(/))};const EXPRESSION_CONTAINS=[regex,PREPROCESSOR,CPP_PRIMITIVE_TYPES,C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,NUMBERS,STRINGS],EXPRESSION_CONTEXT={variants:[{begin:/=/,end:/;/},{begin:/\\(/,end:/\\)/},{beginKeywords:\"new throw return else\",end:/;/}],keywords:CPP_KEYWORDS,contains:EXPRESSION_CONTAINS.concat([{begin:/\\(/,end:/\\)/,keywords:CPP_KEYWORDS,contains:EXPRESSION_CONTAINS.concat([\"self\"]),\nrelevance:0}]),relevance:0};return{name:\"C++\",aliases:\"cc c++ h++ hpp hh hxx cxx\".split(\" \"),keywords:CPP_KEYWORDS,illegal:\"\\x3c/\",classNameAliases:{\"function.dispatch\":\"built_in\"},contains:[].concat(EXPRESSION_CONTEXT,{className:\"function\",begin:\"(\"+FUNCTION_TYPE_RE+\"[\\\\*\\x26\\\\s]+)+\"+FUNCTION_TITLE,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:CPP_KEYWORDS,illegal:/[^\\w\\s\\*&:<>.]/,contains:[{begin:\"decltype\\\\(auto\\\\)\",keywords:CPP_KEYWORDS,relevance:0},{begin:FUNCTION_TITLE,returnBegin:!0,contains:[TITLE_MODE],\nrelevance:0},{begin:/::/,relevance:0},{begin:/:/,endsWithParent:!0,contains:[STRINGS,NUMBERS]},{relevance:0,match:/,/},{className:\"params\",begin:/\\(/,end:/\\)/,keywords:CPP_KEYWORDS,relevance:0,contains:[C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,STRINGS,NUMBERS,CPP_PRIMITIVE_TYPES,{begin:/\\(/,end:/\\)/,keywords:CPP_KEYWORDS,relevance:0,contains:[\"self\",C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,STRINGS,NUMBERS,CPP_PRIMITIVE_TYPES]}]},CPP_PRIMITIVE_TYPES,C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,\nPREPROCESSOR]},regex,EXPRESSION_CONTAINS,[PREPROCESSOR,{begin:\"\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\\\s*\\x3c(?!\\x3c)\",end:\"\\x3e\",keywords:CPP_KEYWORDS,contains:[\"self\",CPP_PRIMITIVE_TYPES]},{begin:hljs.IDENT_RE+\"::\",keywords:CPP_KEYWORDS},{match:[/\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/,/\\s+/,/\\w+/],className:{1:\"keyword\",3:\"title.class\"}}])}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$cpp\"] = function(global,require,module,exports) {\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/\n\n/** @type LanguageFn */\nfunction cpp(hljs) {\n  const regex = hljs.regex;\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\\\\n/ } ] });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(?!struct)('\n    + DECLTYPE_AUTO_RE + '|'\n    + regex.optional(NAMESPACE_RE)\n    + '[a-zA-Z_]\\\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)\n  + ')';\n\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'type',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + '|.)',\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: { keyword:\n        'if else elif endif define undef warning error line '\n        + 'pragma _Pragma ifdef ifndef include' },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, { className: 'string' }),\n      {\n        className: 'string',\n        begin: /<.*?>/\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const RESERVED_KEYWORDS = [\n    'alignas',\n    'alignof',\n    'and',\n    'and_eq',\n    'asm',\n    'atomic_cancel',\n    'atomic_commit',\n    'atomic_noexcept',\n    'auto',\n    'bitand',\n    'bitor',\n    'break',\n    'case',\n    'catch',\n    'class',\n    'co_await',\n    'co_return',\n    'co_yield',\n    'compl',\n    'concept',\n    'const_cast|10',\n    'consteval',\n    'constexpr',\n    'constinit',\n    'continue',\n    'decltype',\n    'default',\n    'delete',\n    'do',\n    'dynamic_cast|10',\n    'else',\n    'enum',\n    'explicit',\n    'export',\n    'extern',\n    'false',\n    'final',\n    'for',\n    'friend',\n    'goto',\n    'if',\n    'import',\n    'inline',\n    'module',\n    'mutable',\n    'namespace',\n    'new',\n    'noexcept',\n    'not',\n    'not_eq',\n    'nullptr',\n    'operator',\n    'or',\n    'or_eq',\n    'override',\n    'private',\n    'protected',\n    'public',\n    'reflexpr',\n    'register',\n    'reinterpret_cast|10',\n    'requires',\n    'return',\n    'sizeof',\n    'static_assert',\n    'static_cast|10',\n    'struct',\n    'switch',\n    'synchronized',\n    'template',\n    'this',\n    'thread_local',\n    'throw',\n    'transaction_safe',\n    'transaction_safe_dynamic',\n    'true',\n    'try',\n    'typedef',\n    'typeid',\n    'typename',\n    'union',\n    'using',\n    'virtual',\n    'volatile',\n    'while',\n    'xor',\n    'xor_eq'\n  ];\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const RESERVED_TYPES = [\n    'bool',\n    'char',\n    'char16_t',\n    'char32_t',\n    'char8_t',\n    'double',\n    'float',\n    'int',\n    'long',\n    'short',\n    'void',\n    'wchar_t',\n    'unsigned',\n    'signed',\n    'const',\n    'static'\n  ];\n\n  const TYPE_HINTS = [\n    'any',\n    'auto_ptr',\n    'barrier',\n    'binary_semaphore',\n    'bitset',\n    'complex',\n    'condition_variable',\n    'condition_variable_any',\n    'counting_semaphore',\n    'deque',\n    'false_type',\n    'future',\n    'imaginary',\n    'initializer_list',\n    'istringstream',\n    'jthread',\n    'latch',\n    'lock_guard',\n    'multimap',\n    'multiset',\n    'mutex',\n    'optional',\n    'ostringstream',\n    'packaged_task',\n    'pair',\n    'promise',\n    'priority_queue',\n    'queue',\n    'recursive_mutex',\n    'recursive_timed_mutex',\n    'scoped_lock',\n    'set',\n    'shared_future',\n    'shared_lock',\n    'shared_mutex',\n    'shared_timed_mutex',\n    'shared_ptr',\n    'stack',\n    'string_view',\n    'stringstream',\n    'timed_mutex',\n    'thread',\n    'true_type',\n    'tuple',\n    'unique_lock',\n    'unique_ptr',\n    'unordered_map',\n    'unordered_multimap',\n    'unordered_multiset',\n    'unordered_set',\n    'variant',\n    'vector',\n    'weak_ptr',\n    'wstring',\n    'wstring_view'\n  ];\n\n  const FUNCTION_HINTS = [\n    'abort',\n    'abs',\n    'acos',\n    'apply',\n    'as_const',\n    'asin',\n    'atan',\n    'atan2',\n    'calloc',\n    'ceil',\n    'cerr',\n    'cin',\n    'clog',\n    'cos',\n    'cosh',\n    'cout',\n    'declval',\n    'endl',\n    'exchange',\n    'exit',\n    'exp',\n    'fabs',\n    'floor',\n    'fmod',\n    'forward',\n    'fprintf',\n    'fputs',\n    'free',\n    'frexp',\n    'fscanf',\n    'future',\n    'invoke',\n    'isalnum',\n    'isalpha',\n    'iscntrl',\n    'isdigit',\n    'isgraph',\n    'islower',\n    'isprint',\n    'ispunct',\n    'isspace',\n    'isupper',\n    'isxdigit',\n    'labs',\n    'launder',\n    'ldexp',\n    'log',\n    'log10',\n    'make_pair',\n    'make_shared',\n    'make_shared_for_overwrite',\n    'make_tuple',\n    'make_unique',\n    'malloc',\n    'memchr',\n    'memcmp',\n    'memcpy',\n    'memset',\n    'modf',\n    'move',\n    'pow',\n    'printf',\n    'putchar',\n    'puts',\n    'realloc',\n    'scanf',\n    'sin',\n    'sinh',\n    'snprintf',\n    'sprintf',\n    'sqrt',\n    'sscanf',\n    'std',\n    'stderr',\n    'stdin',\n    'stdout',\n    'strcat',\n    'strchr',\n    'strcmp',\n    'strcpy',\n    'strcspn',\n    'strlen',\n    'strncat',\n    'strncmp',\n    'strncpy',\n    'strpbrk',\n    'strrchr',\n    'strspn',\n    'strstr',\n    'swap',\n    'tan',\n    'tanh',\n    'terminate',\n    'to_underlying',\n    'tolower',\n    'toupper',\n    'vfprintf',\n    'visit',\n    'vprintf',\n    'vsprintf'\n  ];\n\n  const LITERALS = [\n    'NULL',\n    'false',\n    'nullopt',\n    'nullptr',\n    'true'\n  ];\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const BUILT_IN = [ '_Pragma' ];\n\n  const CPP_KEYWORDS = {\n    type: RESERVED_TYPES,\n    keyword: RESERVED_KEYWORDS,\n    literal: LITERALS,\n    built_in: BUILT_IN,\n    _type_hints: TYPE_HINTS\n  };\n\n  const FUNCTION_DISPATCH = {\n    className: 'function.dispatch',\n    relevance: 0,\n    keywords: {\n      // Only for relevance, not highlighting.\n      _hint: FUNCTION_HINTS },\n    begin: regex.concat(\n      /\\b/,\n      /(?!decltype)/,\n      /(?!if)/,\n      /(?!for)/,\n      /(?!switch)/,\n      /(?!while)/,\n      hljs.IDENT_RE,\n      regex.lookahead(/(<[^<>]+>|)\\s*\\(/))\n  };\n\n  const EXPRESSION_CONTAINS = [\n    FUNCTION_DISPATCH,\n    PREPROCESSOR,\n    CPP_PRIMITIVE_TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [ TITLE_MODE ],\n        relevance: 0\n      },\n      // needed because we do not have look-behind on the below rule\n      // to prevent it from grabbing the final : in a :: pair\n      {\n        begin: /::/,\n        relevance: 0\n      },\n      // initializers\n      {\n        begin: /:/,\n        endsWithParent: true,\n        contains: [\n          STRINGS,\n          NUMBERS\n        ]\n      },\n      // allow for multiple declarations, e.g.:\n      // extern void f(int), g(char);\n      {\n        relevance: 0,\n        match: /,/\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: 'C++',\n    aliases: [\n      'cc',\n      'c++',\n      'h++',\n      'hpp',\n      'hh',\n      'hxx',\n      'cxx'\n    ],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    classNameAliases: { 'function.dispatch': 'built_in' },\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      FUNCTION_DISPATCH,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        { // containers: ie, `vector <int> rooms (9);`\n          begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\\\s*<(?!<)',\n          end: '>',\n          keywords: CPP_KEYWORDS,\n          contains: [\n            'self',\n            CPP_PRIMITIVE_TYPES\n          ]\n        },\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: CPP_KEYWORDS\n        },\n        {\n          match: [\n            // extra complexity to deal with `enum class` and `enum struct`\n            /\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/,\n            /\\s+/,\n            /\\w+/\n          ],\n          className: {\n            1: 'keyword',\n            3: 'title.class'\n          }\n        }\n      ])\n  };\n}\n\nmodule.exports = cpp;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["variants","_hint","begin","aliases","className","contains","relevance","_type_hints","returnBegin","classNameAliases","name","built_in","keyword","keywords","beginKeywords","type","match","excludeEnd","illegal","endsWithParent","literal","end"]],"~:compiled-at",1676671710129,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$cpp.js\",\n\"lineCount\":10,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwjBnHD,MAAOC,CAAAA,OAAP,CAhjBAC,QAAY,CAACC,IAAD,CAAO,CACjB,IAAMC,MAAQD,IAAKC,CAAAA,KAInB,OAAMC,oBAAsBF,IAAKG,CAAAA,OAAL,CAAa,IAAb,CAAmB,GAAnB,CAAwB,CAAEC,SAAU,CAAE,CAAEC,MAAO,MAAT,CAAF,CAAZ,CAAxB,CAA5B,CAIMC,iBAAmB,gCAAnBA,CAEFL,KAAMM,CAAAA,QAAN,CAJiBC,iBAIjB,CAFEF,CAGF,eAHEA,CAGgBL,KAAMM,CAAAA,QAAN,CAJOE,sBAIP,CAHhBH,CAIJ,GARF,CAUMI,oBAAsB,CAC1BC,UAAW,MADe,CAE1BN,MAAO,oBAFmB,CAV5B,CAkBMO,QAAU,CACdD,UAAW,QADG,CAEdE,SAAU,CACR,CACER,MAAO,aADT;AAEES,IAAK,GAFP,CAGEC,QAAS,KAHX,CAIEX,SAAU,CAAEJ,IAAKgB,CAAAA,gBAAP,CAJZ,CADQ,CAOR,CACEX,MAAO,qEADT,CAEES,IAAK,GAFP,CAGEC,QAAS,GAHX,CAPQ,CAYRf,IAAKiB,CAAAA,iBAAL,CAAuB,CACrBZ,MAAO,kCADc,CAErBS,IAAK,qBAFgB,CAAvB,CAZQ,CAFI,CAlBhB,CAuCMI,QAAU,CACdP,UAAW,QADG,CAEdE,SAAU,CACR,CAAER,MAAO,eAAT,CADQ,CAER,CAAEA,MAAO,uFAAT,CAFQ,CAGR,CAAEA,MAAO,qFAAT,CAHQ,CAFI;AAOdc,UAAW,CAPG,CAvChB,CAiDMC,aAAe,CACnBT,UAAW,MADQ,CAEnBN,MAAO,cAFY,CAGnBS,IAAK,GAHc,CAInBO,SAAU,CAAEC,QACR,wFADM,CAJS,CAOnBlB,SAAU,CACR,CACEC,MAAO,MADT,CAEEc,UAAW,CAFb,CADQ,CAKRnB,IAAKuB,CAAAA,OAAL,CAAaX,OAAb,CAAsB,CAAED,UAAW,QAAb,CAAtB,CALQ,CAMR,CACEA,UAAW,QADb,CAEEN,MAAO,OAFT,CANQ,CAURH,mBAVQ,CAWRF,IAAKwB,CAAAA,oBAXG,CAPS,CAjDrB,CAuEMC,WAAa,CACjBd,UAAW,OADM,CAEjBN,MAAOJ,KAAMM,CAAAA,QAAN,CAvEYC,iBAuEZ,CAAPH,CAAsCL,IAAK0B,CAAAA,QAF1B,CAGjBP,UAAW,CAHM,CAvEnB,CA6EMQ,eAAiB1B,KAAMM,CAAAA,QAAN,CA3EFC,iBA2EE,CAAjBmB,CAAgD3B,IAAK0B,CAAAA,QAArDC;AAAgE,SA7EtE,CA0WMC,aAAe,CACnBC,KAhMqBC,2GAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CA+LF,CAEnBR,QA5RwBS,ysBAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CA0RL;AAGnBC,QAdeC,CACf,MADeA,CAEf,OAFeA,CAGf,SAHeA,CAIf,SAJeA,CAKf,MALeA,CAWI,CAInBC,SANeC,CAAE,SAAFA,CAEI,CAKnBC,YAjLiBC,+mBAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CA4KE,CAQfC;KAAAA,CAAoB,CACxB3B,UAAW,mBADa,CAExBQ,UAAW,CAFa,CAGxBE,SAAU,CAERkB,MA/HmBC,isBAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CA6HX,CAHc;AAMxBnC,MAAOJ,KAAMwC,CAAAA,MAAN,CACL,IADK,CAEL,cAFK,CAGL,QAHK,CAIL,SAJK,CAKL,YALK,CAML,WANK,CAOLzC,IAAK0B,CAAAA,QAPA,CAQLzB,KAAMyC,CAAAA,SAAN,CAAgB,kBAAhB,CARK,CANiB,CAiB1B,OAAMC,oBAAsB,CAC1BL,KAD0B,CAE1BlB,YAF0B,CAG1BV,mBAH0B,CAI1BR,mBAJ0B,CAK1BF,IAAKwB,CAAAA,oBALqB,CAM1BN,OAN0B,CAO1BN,OAP0B,CAA5B,CAUMgC,mBAAqB,CAIzB/B,SAAU,CACR,CACER,MAAO,GADT,CAEES,IAAK,GAFP,CADQ,CAKR,CACET,MAAO,IADT,CAEES,IAAK,IAFP,CALQ,CASR,CACE+B,cAAe,uBADjB,CAEE/B,IAAK,GAFP,CATQ,CAJe,CAkBzBO,SAAUO,YAlBe,CAmBzBxB,SAAUuC,mBAAoBF,CAAAA,MAApB,CAA2B,CACnC,CACEpC,MAAO,IADT,CAEES,IAAK,IAFP,CAGEO,SAAUO,YAHZ,CAIExB,SAAUuC,mBAAoBF,CAAAA,MAApB,CAA2B,CAAE,MAAF,CAA3B,CAJZ;AAKEtB,UAAW,CALb,CADmC,CAA3B,CAnBe,CA4BzBA,UAAW,CA5Bc,CA4G3B,OAAO,CACL2B,KAAM,KADD,CAELC,QAAS,2BAAA,CAAA,KAAA,CAAA,GAAA,CAFJ,CAWL1B,SAAUO,YAXL,CAYLb,QAAS,OAZJ,CAaLiC,iBAAkB,CAAE,oBAAqB,UAAvB,CAbb,CAcL5C,SAAU,EAAGqC,CAAAA,MAAH,CACRG,kBADQ,CA3FiBK,CAC3BtC,UAAW,UADgBsC,CAE3B5C,MAAO,GAAPA,CAAaC,gBAAbD,CAAgC,iBAAhCA,CAAiDsB,cAFtBsB,CAG3BC,YAAa,CAAA,CAHcD,CAI3BnC,IAAK,OAJsBmC,CAK3BE,WAAY,CAAA,CALeF,CAM3B5B,SAAUO,YANiBqB,CAO3BlC,QAAS,gBAPkBkC,CAQ3B7C,SAAU,CACR,CACEC,MArbmB+C,oBAobrB,CAEE/B,SAAUO,YAFZ,CAGET,UAAW,CAHb,CADQ,CAMR,CACEd,MAAOsB,cADT,CAEEuB,YAAa,CAAA,CAFf,CAGE9C,SAAU,CAAEqB,UAAF,CAHZ;AAIEN,UAAW,CAJb,CANQ,CAcR,CACEd,MAAO,IADT,CAEEc,UAAW,CAFb,CAdQ,CAmBR,CACEd,MAAO,GADT,CAEEgD,eAAgB,CAAA,CAFlB,CAGEjD,SAAU,CACRQ,OADQ,CAERM,OAFQ,CAHZ,CAnBQ,CA6BR,CACEC,UAAW,CADb,CAEEmC,MAAO,GAFT,CA7BQ,CAiCR,CACE3C,UAAW,QADb,CAEEN,MAAO,IAFT,CAGES,IAAK,IAHP,CAIEO,SAAUO,YAJZ,CAKET,UAAW,CALb,CAMEf,SAAU,CACRF,mBADQ,CAERF,IAAKwB,CAAAA,oBAFG,CAGRZ,OAHQ,CAIRM,OAJQ,CAKRR,mBALQ,CAOR,CACEL,MAAO,IADT,CAEES,IAAK,IAFP,CAGEO,SAAUO,YAHZ,CAIET,UAAW,CAJb,CAKEf,SAAU,CACR,MADQ,CAERF,mBAFQ,CAGRF,IAAKwB,CAAAA,oBAHG,CAIRZ,OAJQ,CAKRM,OALQ,CAMRR,mBANQ,CALZ,CAPQ,CANZ,CAjCQ,CA8DRA,mBA9DQ,CA+DRR,mBA/DQ,CAgERF,IAAKwB,CAAAA,oBAhEG;AAiERJ,YAjEQ,CARiB6B,CA2FjB,CAGRX,KAHQ,CAIRK,mBAJQ,CAKR,CACEvB,YADF,CAEE,CACEf,MAAO,iNADT,CAEES,IAAK,MAFP,CAGEO,SAAUO,YAHZ,CAIExB,SAAU,CACR,MADQ,CAERM,mBAFQ,CAJZ,CAFF,CAWE,CACEL,MAAOL,IAAK0B,CAAAA,QAAZrB,CAAuB,IADzB,CAEEgB,SAAUO,YAFZ,CAXF,CAeE,CACE0B,MAAO,CAEL,uDAFK,CAGL,KAHK,CAIL,KAJK,CADT,CAOE3C,UAAW,CACT,EAAG,SADM,CAET,EAAG,aAFM,CAPb,CAfF,CALQ,CAdL,CA9fU,CARgG;\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/cpp.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$cpp\\\"] = function(global,require,module,exports) {\\n/*\\nLanguage: C++\\nCategory: common, system\\nWebsite: https://isocpp.org\\n*/\\n\\n/** @type LanguageFn */\\nfunction cpp(hljs) {\\n  const regex = hljs.regex;\\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\\n  // not include such support nor can we be sure all the grammars depending\\n  // on it would desire this behavior\\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\\\\\\\\\\n/ } ] });\\n  const DECLTYPE_AUTO_RE = 'decltype\\\\\\\\(auto\\\\\\\\)';\\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\\\\\w*::';\\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\\n  const FUNCTION_TYPE_RE = '(?!struct)('\\n    + DECLTYPE_AUTO_RE + '|'\\n    + regex.optional(NAMESPACE_RE)\\n    + '[a-zA-Z_]\\\\\\\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)\\n  + ')';\\n\\n  const CPP_PRIMITIVE_TYPES = {\\n    className: 'type',\\n    begin: '\\\\\\\\b[a-z\\\\\\\\d_]*_t\\\\\\\\b'\\n  };\\n\\n  // https://en.cppreference.com/w/cpp/language/escape\\n  // \\\\\\\\ \\\\x \\\\xFF \\\\u2837 \\\\u00323747 \\\\374\\n  const CHARACTER_ESCAPES = '\\\\\\\\\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\\\\\S)';\\n  const STRINGS = {\\n    className: 'string',\\n    variants: [\\n      {\\n        begin: '(u8?|U|L)?\\\"',\\n        end: '\\\"',\\n        illegal: '\\\\\\\\n',\\n        contains: [ hljs.BACKSLASH_ESCAPE ]\\n      },\\n      {\\n        begin: '(u8?|U|L)?\\\\'(' + CHARACTER_ESCAPES + '|.)',\\n        end: '\\\\'',\\n        illegal: '.'\\n      },\\n      hljs.END_SAME_AS_BEGIN({\\n        begin: /(?:u8?|U|L)?R\\\"([^()\\\\\\\\ ]{0,16})\\\\(/,\\n        end: /\\\\)([^()\\\\\\\\ ]{0,16})\\\"/\\n      })\\n    ]\\n  };\\n\\n  const NUMBERS = {\\n    className: 'number',\\n    variants: [\\n      { begin: '\\\\\\\\b(0b[01\\\\']+)' },\\n      { begin: '(-?)\\\\\\\\b([\\\\\\\\d\\\\']+(\\\\\\\\.[\\\\\\\\d\\\\']*)?|\\\\\\\\.[\\\\\\\\d\\\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },\\n      { begin: '(-?)(\\\\\\\\b0[xX][a-fA-F0-9\\\\']+|(\\\\\\\\b[\\\\\\\\d\\\\']+(\\\\\\\\.[\\\\\\\\d\\\\']*)?|\\\\\\\\.[\\\\\\\\d\\\\']+)([eE][-+]?[\\\\\\\\d\\\\']+)?)' }\\n    ],\\n    relevance: 0\\n  };\\n\\n  const PREPROCESSOR = {\\n    className: 'meta',\\n    begin: /#\\\\s*[a-z]+\\\\b/,\\n    end: /$/,\\n    keywords: { keyword:\\n        'if else elif endif define undef warning error line '\\n        + 'pragma _Pragma ifdef ifndef include' },\\n    contains: [\\n      {\\n        begin: /\\\\\\\\\\\\n/,\\n        relevance: 0\\n      },\\n      hljs.inherit(STRINGS, { className: 'string' }),\\n      {\\n        className: 'string',\\n        begin: /<.*?>/\\n      },\\n      C_LINE_COMMENT_MODE,\\n      hljs.C_BLOCK_COMMENT_MODE\\n    ]\\n  };\\n\\n  const TITLE_MODE = {\\n    className: 'title',\\n    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\\n    relevance: 0\\n  };\\n\\n  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\\\\\s*\\\\\\\\(';\\n\\n  // https://en.cppreference.com/w/cpp/keyword\\n  const RESERVED_KEYWORDS = [\\n    'alignas',\\n    'alignof',\\n    'and',\\n    'and_eq',\\n    'asm',\\n    'atomic_cancel',\\n    'atomic_commit',\\n    'atomic_noexcept',\\n    'auto',\\n    'bitand',\\n    'bitor',\\n    'break',\\n    'case',\\n    'catch',\\n    'class',\\n    'co_await',\\n    'co_return',\\n    'co_yield',\\n    'compl',\\n    'concept',\\n    'const_cast|10',\\n    'consteval',\\n    'constexpr',\\n    'constinit',\\n    'continue',\\n    'decltype',\\n    'default',\\n    'delete',\\n    'do',\\n    'dynamic_cast|10',\\n    'else',\\n    'enum',\\n    'explicit',\\n    'export',\\n    'extern',\\n    'false',\\n    'final',\\n    'for',\\n    'friend',\\n    'goto',\\n    'if',\\n    'import',\\n    'inline',\\n    'module',\\n    'mutable',\\n    'namespace',\\n    'new',\\n    'noexcept',\\n    'not',\\n    'not_eq',\\n    'nullptr',\\n    'operator',\\n    'or',\\n    'or_eq',\\n    'override',\\n    'private',\\n    'protected',\\n    'public',\\n    'reflexpr',\\n    'register',\\n    'reinterpret_cast|10',\\n    'requires',\\n    'return',\\n    'sizeof',\\n    'static_assert',\\n    'static_cast|10',\\n    'struct',\\n    'switch',\\n    'synchronized',\\n    'template',\\n    'this',\\n    'thread_local',\\n    'throw',\\n    'transaction_safe',\\n    'transaction_safe_dynamic',\\n    'true',\\n    'try',\\n    'typedef',\\n    'typeid',\\n    'typename',\\n    'union',\\n    'using',\\n    'virtual',\\n    'volatile',\\n    'while',\\n    'xor',\\n    'xor_eq'\\n  ];\\n\\n  // https://en.cppreference.com/w/cpp/keyword\\n  const RESERVED_TYPES = [\\n    'bool',\\n    'char',\\n    'char16_t',\\n    'char32_t',\\n    'char8_t',\\n    'double',\\n    'float',\\n    'int',\\n    'long',\\n    'short',\\n    'void',\\n    'wchar_t',\\n    'unsigned',\\n    'signed',\\n    'const',\\n    'static'\\n  ];\\n\\n  const TYPE_HINTS = [\\n    'any',\\n    'auto_ptr',\\n    'barrier',\\n    'binary_semaphore',\\n    'bitset',\\n    'complex',\\n    'condition_variable',\\n    'condition_variable_any',\\n    'counting_semaphore',\\n    'deque',\\n    'false_type',\\n    'future',\\n    'imaginary',\\n    'initializer_list',\\n    'istringstream',\\n    'jthread',\\n    'latch',\\n    'lock_guard',\\n    'multimap',\\n    'multiset',\\n    'mutex',\\n    'optional',\\n    'ostringstream',\\n    'packaged_task',\\n    'pair',\\n    'promise',\\n    'priority_queue',\\n    'queue',\\n    'recursive_mutex',\\n    'recursive_timed_mutex',\\n    'scoped_lock',\\n    'set',\\n    'shared_future',\\n    'shared_lock',\\n    'shared_mutex',\\n    'shared_timed_mutex',\\n    'shared_ptr',\\n    'stack',\\n    'string_view',\\n    'stringstream',\\n    'timed_mutex',\\n    'thread',\\n    'true_type',\\n    'tuple',\\n    'unique_lock',\\n    'unique_ptr',\\n    'unordered_map',\\n    'unordered_multimap',\\n    'unordered_multiset',\\n    'unordered_set',\\n    'variant',\\n    'vector',\\n    'weak_ptr',\\n    'wstring',\\n    'wstring_view'\\n  ];\\n\\n  const FUNCTION_HINTS = [\\n    'abort',\\n    'abs',\\n    'acos',\\n    'apply',\\n    'as_const',\\n    'asin',\\n    'atan',\\n    'atan2',\\n    'calloc',\\n    'ceil',\\n    'cerr',\\n    'cin',\\n    'clog',\\n    'cos',\\n    'cosh',\\n    'cout',\\n    'declval',\\n    'endl',\\n    'exchange',\\n    'exit',\\n    'exp',\\n    'fabs',\\n    'floor',\\n    'fmod',\\n    'forward',\\n    'fprintf',\\n    'fputs',\\n    'free',\\n    'frexp',\\n    'fscanf',\\n    'future',\\n    'invoke',\\n    'isalnum',\\n    'isalpha',\\n    'iscntrl',\\n    'isdigit',\\n    'isgraph',\\n    'islower',\\n    'isprint',\\n    'ispunct',\\n    'isspace',\\n    'isupper',\\n    'isxdigit',\\n    'labs',\\n    'launder',\\n    'ldexp',\\n    'log',\\n    'log10',\\n    'make_pair',\\n    'make_shared',\\n    'make_shared_for_overwrite',\\n    'make_tuple',\\n    'make_unique',\\n    'malloc',\\n    'memchr',\\n    'memcmp',\\n    'memcpy',\\n    'memset',\\n    'modf',\\n    'move',\\n    'pow',\\n    'printf',\\n    'putchar',\\n    'puts',\\n    'realloc',\\n    'scanf',\\n    'sin',\\n    'sinh',\\n    'snprintf',\\n    'sprintf',\\n    'sqrt',\\n    'sscanf',\\n    'std',\\n    'stderr',\\n    'stdin',\\n    'stdout',\\n    'strcat',\\n    'strchr',\\n    'strcmp',\\n    'strcpy',\\n    'strcspn',\\n    'strlen',\\n    'strncat',\\n    'strncmp',\\n    'strncpy',\\n    'strpbrk',\\n    'strrchr',\\n    'strspn',\\n    'strstr',\\n    'swap',\\n    'tan',\\n    'tanh',\\n    'terminate',\\n    'to_underlying',\\n    'tolower',\\n    'toupper',\\n    'vfprintf',\\n    'visit',\\n    'vprintf',\\n    'vsprintf'\\n  ];\\n\\n  const LITERALS = [\\n    'NULL',\\n    'false',\\n    'nullopt',\\n    'nullptr',\\n    'true'\\n  ];\\n\\n  // https://en.cppreference.com/w/cpp/keyword\\n  const BUILT_IN = [ '_Pragma' ];\\n\\n  const CPP_KEYWORDS = {\\n    type: RESERVED_TYPES,\\n    keyword: RESERVED_KEYWORDS,\\n    literal: LITERALS,\\n    built_in: BUILT_IN,\\n    _type_hints: TYPE_HINTS\\n  };\\n\\n  const FUNCTION_DISPATCH = {\\n    className: 'function.dispatch',\\n    relevance: 0,\\n    keywords: {\\n      // Only for relevance, not highlighting.\\n      _hint: FUNCTION_HINTS },\\n    begin: regex.concat(\\n      /\\\\b/,\\n      /(?!decltype)/,\\n      /(?!if)/,\\n      /(?!for)/,\\n      /(?!switch)/,\\n      /(?!while)/,\\n      hljs.IDENT_RE,\\n      regex.lookahead(/(<[^<>]+>|)\\\\s*\\\\(/))\\n  };\\n\\n  const EXPRESSION_CONTAINS = [\\n    FUNCTION_DISPATCH,\\n    PREPROCESSOR,\\n    CPP_PRIMITIVE_TYPES,\\n    C_LINE_COMMENT_MODE,\\n    hljs.C_BLOCK_COMMENT_MODE,\\n    NUMBERS,\\n    STRINGS\\n  ];\\n\\n  const EXPRESSION_CONTEXT = {\\n    // This mode covers expression context where we can't expect a function\\n    // definition and shouldn't highlight anything that looks like one:\\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\\n    variants: [\\n      {\\n        begin: /=/,\\n        end: /;/\\n      },\\n      {\\n        begin: /\\\\(/,\\n        end: /\\\\)/\\n      },\\n      {\\n        beginKeywords: 'new throw return else',\\n        end: /;/\\n      }\\n    ],\\n    keywords: CPP_KEYWORDS,\\n    contains: EXPRESSION_CONTAINS.concat([\\n      {\\n        begin: /\\\\(/,\\n        end: /\\\\)/,\\n        keywords: CPP_KEYWORDS,\\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\\n        relevance: 0\\n      }\\n    ]),\\n    relevance: 0\\n  };\\n\\n  const FUNCTION_DECLARATION = {\\n    className: 'function',\\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\\\\\*&\\\\\\\\s]+)+' + FUNCTION_TITLE,\\n    returnBegin: true,\\n    end: /[{;=]/,\\n    excludeEnd: true,\\n    keywords: CPP_KEYWORDS,\\n    illegal: /[^\\\\w\\\\s\\\\*&:<>.]/,\\n    contains: [\\n      { // to prevent it from being confused as the function title\\n        begin: DECLTYPE_AUTO_RE,\\n        keywords: CPP_KEYWORDS,\\n        relevance: 0\\n      },\\n      {\\n        begin: FUNCTION_TITLE,\\n        returnBegin: true,\\n        contains: [ TITLE_MODE ],\\n        relevance: 0\\n      },\\n      // needed because we do not have look-behind on the below rule\\n      // to prevent it from grabbing the final : in a :: pair\\n      {\\n        begin: /::/,\\n        relevance: 0\\n      },\\n      // initializers\\n      {\\n        begin: /:/,\\n        endsWithParent: true,\\n        contains: [\\n          STRINGS,\\n          NUMBERS\\n        ]\\n      },\\n      // allow for multiple declarations, e.g.:\\n      // extern void f(int), g(char);\\n      {\\n        relevance: 0,\\n        match: /,/\\n      },\\n      {\\n        className: 'params',\\n        begin: /\\\\(/,\\n        end: /\\\\)/,\\n        keywords: CPP_KEYWORDS,\\n        relevance: 0,\\n        contains: [\\n          C_LINE_COMMENT_MODE,\\n          hljs.C_BLOCK_COMMENT_MODE,\\n          STRINGS,\\n          NUMBERS,\\n          CPP_PRIMITIVE_TYPES,\\n          // Count matching parentheses.\\n          {\\n            begin: /\\\\(/,\\n            end: /\\\\)/,\\n            keywords: CPP_KEYWORDS,\\n            relevance: 0,\\n            contains: [\\n              'self',\\n              C_LINE_COMMENT_MODE,\\n              hljs.C_BLOCK_COMMENT_MODE,\\n              STRINGS,\\n              NUMBERS,\\n              CPP_PRIMITIVE_TYPES\\n            ]\\n          }\\n        ]\\n      },\\n      CPP_PRIMITIVE_TYPES,\\n      C_LINE_COMMENT_MODE,\\n      hljs.C_BLOCK_COMMENT_MODE,\\n      PREPROCESSOR\\n    ]\\n  };\\n\\n  return {\\n    name: 'C++',\\n    aliases: [\\n      'cc',\\n      'c++',\\n      'h++',\\n      'hpp',\\n      'hh',\\n      'hxx',\\n      'cxx'\\n    ],\\n    keywords: CPP_KEYWORDS,\\n    illegal: '</',\\n    classNameAliases: { 'function.dispatch': 'built_in' },\\n    contains: [].concat(\\n      EXPRESSION_CONTEXT,\\n      FUNCTION_DECLARATION,\\n      FUNCTION_DISPATCH,\\n      EXPRESSION_CONTAINS,\\n      [\\n        PREPROCESSOR,\\n        { // containers: ie, `vector <int> rooms (9);`\\n          begin: '\\\\\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\\\\\\\s*<(?!<)',\\n          end: '>',\\n          keywords: CPP_KEYWORDS,\\n          contains: [\\n            'self',\\n            CPP_PRIMITIVE_TYPES\\n          ]\\n        },\\n        {\\n          begin: hljs.IDENT_RE + '::',\\n          keywords: CPP_KEYWORDS\\n        },\\n        {\\n          match: [\\n            // extra complexity to deal with `enum class` and `enum struct`\\n            /\\\\b(?:enum(?:\\\\s+(?:class|struct))?|class|struct|union)/,\\n            /\\\\s+/,\\n            /\\\\w+/\\n          ],\\n          className: {\\n            1: 'keyword',\\n            3: 'title.class'\\n          }\\n        }\\n      ])\\n  };\\n}\\n\\nmodule.exports = cpp;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"cpp\",\"hljs\",\"regex\",\"C_LINE_COMMENT_MODE\",\"COMMENT\",\"contains\",\"begin\",\"FUNCTION_TYPE_RE\",\"optional\",\"NAMESPACE_RE\",\"TEMPLATE_ARGUMENT_RE\",\"CPP_PRIMITIVE_TYPES\",\"className\",\"STRINGS\",\"variants\",\"end\",\"illegal\",\"BACKSLASH_ESCAPE\",\"END_SAME_AS_BEGIN\",\"NUMBERS\",\"relevance\",\"PREPROCESSOR\",\"keywords\",\"keyword\",\"inherit\",\"C_BLOCK_COMMENT_MODE\",\"TITLE_MODE\",\"IDENT_RE\",\"FUNCTION_TITLE\",\"CPP_KEYWORDS\",\"type\",\"RESERVED_TYPES\",\"RESERVED_KEYWORDS\",\"literal\",\"LITERALS\",\"built_in\",\"BUILT_IN\",\"_type_hints\",\"TYPE_HINTS\",\"FUNCTION_DISPATCH\",\"_hint\",\"FUNCTION_HINTS\",\"concat\",\"lookahead\",\"EXPRESSION_CONTAINS\",\"EXPRESSION_CONTEXT\",\"beginKeywords\",\"name\",\"aliases\",\"classNameAliases\",\"FUNCTION_DECLARATION\",\"returnBegin\",\"excludeEnd\",\"DECLTYPE_AUTO_RE\",\"endsWithParent\",\"match\"]\n}\n"]