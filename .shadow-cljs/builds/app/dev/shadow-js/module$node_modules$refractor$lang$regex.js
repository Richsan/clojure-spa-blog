["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/regex.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$regex=function(global,require,module,exports){function regex(Prism){var specialEscape={pattern:/\\\\[\\\\(){}[\\]^$+*?|.]/,alias:\"escape\"},escape=/\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/,rangeChar=\"(?:[^\\\\\\\\-]|\"+escape.source+\")\",groupName={pattern:/(<|')[^<>']+(?=[>']$)/,lookbehind:!0,alias:\"variable\"};Prism.languages.regex={\"char-class\":{pattern:/((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,lookbehind:!0,\ninside:{\"char-class-negation\":{pattern:/(^\\[)\\^/,lookbehind:!0,alias:\"operator\"},\"char-class-punctuation\":{pattern:/^\\[|\\]$/,alias:\"punctuation\"},range:{pattern:RegExp(rangeChar+\"-\"+rangeChar),inside:{escape,\"range-punctuation\":{pattern:/-/,alias:\"operator\"}}},\"special-escape\":specialEscape,\"char-set\":{pattern:/\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,alias:\"class-name\"},escape}},\"special-escape\":specialEscape,\"char-set\":{pattern:/\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,alias:\"class-name\"},backreference:[{pattern:/\\\\(?![123][0-7]{2})[1-9]/,\nalias:\"keyword\"},{pattern:/\\\\k<[^<>']+>/,alias:\"keyword\",inside:{\"group-name\":groupName}}],anchor:{pattern:/[$^]|\\\\[ABbGZz]/,alias:\"function\"},escape,group:[{pattern:/\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,alias:\"punctuation\",inside:{\"group-name\":groupName}},{pattern:/\\)/,alias:\"punctuation\"}],quantifier:{pattern:/(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,alias:\"number\"},alternation:{pattern:/\\|/,alias:\"keyword\"}}}Object.defineProperty(exports,\"__esModule\",{value:!0});\nexports.default=regex;regex.displayName=\"regex\";regex.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$regex\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = regex;\n// @ts-nocheck\nregex.displayName = 'regex';\nregex.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction regex(Prism) {\n  ;\n\n  (function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    };\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/;\n    var charSet = {\n      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    };\n    var charSetWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    };\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n    var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\n\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    };\n    Prism.languages.regex = {\n      'char-class': {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'char-class-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'char-class-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          'char-set': charSetWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      'char-set': charSet,\n      backreference: [{\n        // a backreference which is not an octal escape\n        pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n        alias: 'keyword'\n      }, {\n        pattern: /\\\\k<[^<>']+>/,\n        alias: 'keyword',\n        inside: {\n          'group-name': groupName\n        }\n      }],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [{\n        // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n        // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n        // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n        pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n        alias: 'punctuation',\n        inside: {\n          'group-name': groupName\n        }\n      }, {\n        pattern: /\\)/,\n        alias: 'punctuation'\n      }],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    };\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["quantifier","range","aliases","group","displayName","__esModule","regex","lookbehind","anchor","escape","value","pattern","inside","alias","backreference","default","alternation"]],"~:compiled-at",1676841365363,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$regex.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,wCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYrGC,QAASA,MAAK,CAACC,KAAD,CAAQ,CAIlB,IAAIC,cAAgB,CAClBC,QAAS,sBADS,CAElBC,MAAO,QAFW,CAApB,CAIIC,OAAS,4FAJb,CAaIC,UAAY,cAAZA,CAA6BD,MAAOE,CAAAA,MAApCD,CAA6C,GAbjD,CAgBIE,UAAY,CACdL,QAAS,uBADK,CAEdM,WAAY,CAAA,CAFE,CAGdL,MAAO,UAHO,CA0EfH,MArEKS,CAAAA,SAAUV,CAAAA,KAAhB,CAAwB,CACtB,aAAc,CACZG,QAAS,iDADG,CAEZM,WAAY,CAAA,CAFA;AAGZE,OAAQ,CACN,sBAAuB,CACrBR,QAAS,SADY,CAErBM,WAAY,CAAA,CAFS,CAGrBL,MAAO,UAHc,CADjB,CAMN,yBAA0B,CACxBD,QAAS,SADe,CAExBC,MAAO,aAFiB,CANpB,CAUNQ,MAAO,CACLT,QAtBIU,MAAAD,CAAON,SAAPM,CAAmB,GAAnBA,CAAyBN,SAAzBM,CAqBC,CAELD,OAAQ,CACEN,MADF,CAEN,oBAAqB,CACnBF,QAAS,GADU,CAEnBC,MAAO,UAFY,CAFf,CAFH,CAVD,CAoBN,iBAAkBF,aApBZ,CAqBN,WArCkBY,CACtBX,QAAS,wBADaW,CAEtBV,MAAO,YAFeU,CAgBZ,CAsBET,MAtBF,CAHI,CADQ,CA6BtB,iBAAkBH,aA7BI,CA8BtB,WA9CYa,CACZZ,QAAS,2BADGY,CAEZX,MAAO,YAFKW,CAgBU,CA+BtBC,cAAe,CAAC,CAEdb,QAAS,0BAFK;AAGdC,MAAO,SAHO,CAAD,CAIZ,CACDD,QAAS,cADR,CAEDC,MAAO,SAFN,CAGDO,OAAQ,CACN,aAAcH,SADR,CAHP,CAJY,CA/BO,CA0CtBS,OAAQ,CACNd,QAAS,iBADH,CAENC,MAAO,UAFD,CA1Cc,CA8CdC,MA9Cc,CA+CtBa,MAAO,CAAC,CAINf,QAAS,6EAJH,CAKNC,MAAO,aALD,CAMNO,OAAQ,CACN,aAAcH,SADR,CANF,CAAD,CASJ,CACDL,QAAS,IADR,CAEDC,MAAO,aAFN,CATI,CA/Ce,CA4DtBe,WAAY,CACVhB,QAAS,iCADC,CAEVC,MAAO,QAFG,CA5DU,CAgEtBgB,YAAa,CACXjB,QAAS,IADE,CAEXC,MAAO,SAFI,CAhES,CAzBN,CATtBiB,MAAOC,CAAAA,cAAP,CAAsBvB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CwB,MAAO,CAAA,CADoC,CAA7C,CAGAxB;OAAQyB,CAAAA,OAAR,CAAkBxB,KAElBA,MAAMyB,CAAAA,WAAN,CAAoB,OACpBzB,MAAM0B,CAAAA,OAAN,CAAgB,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/regex.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$regex\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = regex;\\n// @ts-nocheck\\nregex.displayName = 'regex';\\nregex.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction regex(Prism) {\\n  ;\\n\\n  (function (Prism) {\\n    var specialEscape = {\\n      pattern: /\\\\\\\\[\\\\\\\\(){}[\\\\]^$+*?|.]/,\\n      alias: 'escape'\\n    };\\n    var escape = /\\\\\\\\(?:x[\\\\da-fA-F]{2}|u[\\\\da-fA-F]{4}|u\\\\{[\\\\da-fA-F]+\\\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/;\\n    var charSet = {\\n      pattern: /\\\\.|\\\\\\\\[wsd]|\\\\\\\\p\\\\{[^{}]+\\\\}/i,\\n      alias: 'class-name'\\n    };\\n    var charSetWithoutDot = {\\n      pattern: /\\\\\\\\[wsd]|\\\\\\\\p\\\\{[^{}]+\\\\}/i,\\n      alias: 'class-name'\\n    };\\n    var rangeChar = '(?:[^\\\\\\\\\\\\\\\\-]|' + escape.source + ')';\\n    var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\\n\\n    var groupName = {\\n      pattern: /(<|')[^<>']+(?=[>']$)/,\\n      lookbehind: true,\\n      alias: 'variable'\\n    };\\n    Prism.languages.regex = {\\n      'char-class': {\\n        pattern: /((?:^|[^\\\\\\\\])(?:\\\\\\\\\\\\\\\\)*)\\\\[(?:[^\\\\\\\\\\\\]]|\\\\\\\\[\\\\s\\\\S])*\\\\]/,\\n        lookbehind: true,\\n        inside: {\\n          'char-class-negation': {\\n            pattern: /(^\\\\[)\\\\^/,\\n            lookbehind: true,\\n            alias: 'operator'\\n          },\\n          'char-class-punctuation': {\\n            pattern: /^\\\\[|\\\\]$/,\\n            alias: 'punctuation'\\n          },\\n          range: {\\n            pattern: range,\\n            inside: {\\n              escape: escape,\\n              'range-punctuation': {\\n                pattern: /-/,\\n                alias: 'operator'\\n              }\\n            }\\n          },\\n          'special-escape': specialEscape,\\n          'char-set': charSetWithoutDot,\\n          escape: escape\\n        }\\n      },\\n      'special-escape': specialEscape,\\n      'char-set': charSet,\\n      backreference: [{\\n        // a backreference which is not an octal escape\\n        pattern: /\\\\\\\\(?![123][0-7]{2})[1-9]/,\\n        alias: 'keyword'\\n      }, {\\n        pattern: /\\\\\\\\k<[^<>']+>/,\\n        alias: 'keyword',\\n        inside: {\\n          'group-name': groupName\\n        }\\n      }],\\n      anchor: {\\n        pattern: /[$^]|\\\\\\\\[ABbGZz]/,\\n        alias: 'function'\\n      },\\n      escape: escape,\\n      group: [{\\n        // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\\n        // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\\n        // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\\n        pattern: /\\\\((?:\\\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\\n        alias: 'punctuation',\\n        inside: {\\n          'group-name': groupName\\n        }\\n      }, {\\n        pattern: /\\\\)/,\\n        alias: 'punctuation'\\n      }],\\n      quantifier: {\\n        pattern: /(?:[+*?]|\\\\{\\\\d+(?:,\\\\d*)?\\\\})[?+]?/,\\n        alias: 'number'\\n      },\\n      alternation: {\\n        pattern: /\\\\|/,\\n        alias: 'keyword'\\n      }\\n    };\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"regex\",\"Prism\",\"specialEscape\",\"pattern\",\"alias\",\"escape\",\"rangeChar\",\"source\",\"groupName\",\"lookbehind\",\"languages\",\"inside\",\"range\",\"RegExp\",\"charSetWithoutDot\",\"charSet\",\"backreference\",\"anchor\",\"group\",\"quantifier\",\"alternation\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]