["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/mongodb.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$mongodb=function(global,require,module,exports){function mongodb(Prism$jscomp$0){Prism$jscomp$0.register(_javascript.default);(function(Prism){var operators=\"$eq $gt $gte $in $lt $lte $ne $nin $and $not $nor $or $exists $type $expr $jsonSchema $mod $regex $text $where $geoIntersects $geoWithin $near $nearSphere $all $elemMatch $size $bitsAllClear $bitsAllSet $bitsAnyClear $bitsAnySet $comment $elemMatch $meta $slice $currentDate $inc $min $max $mul $rename $set $setOnInsert $unset $addToSet $pop $pull $push $pullAll $each $position $slice $sort $bit $addFields $bucket $bucketAuto $collStats $count $currentOp $facet $geoNear $graphLookup $group $indexStats $limit $listLocalSessions $listSessions $lookup $match $merge $out $planCacheStats $project $redact $replaceRoot $replaceWith $sample $set $skip $sort $sortByCount $unionWith $unset $unwind $setWindowFields $abs $accumulator $acos $acosh $add $addToSet $allElementsTrue $and $anyElementTrue $arrayElemAt $arrayToObject $asin $asinh $atan $atan2 $atanh $avg $binarySize $bsonSize $ceil $cmp $concat $concatArrays $cond $convert $cos $dateFromParts $dateToParts $dateFromString $dateToString $dayOfMonth $dayOfWeek $dayOfYear $degreesToRadians $divide $eq $exp $filter $first $floor $function $gt $gte $hour $ifNull $in $indexOfArray $indexOfBytes $indexOfCP $isArray $isNumber $isoDayOfWeek $isoWeek $isoWeekYear $last $last $let $literal $ln $log $log10 $lt $lte $ltrim $map $max $mergeObjects $meta $min $millisecond $minute $mod $month $multiply $ne $not $objectToArray $or $pow $push $radiansToDegrees $range $reduce $regexFind $regexFindAll $regexMatch $replaceOne $replaceAll $reverseArray $round $rtrim $second $setDifference $setEquals $setIntersection $setIsSubset $setUnion $size $sin $slice $split $sqrt $stdDevPop $stdDevSamp $strcasecmp $strLenBytes $strLenCP $substr $substrBytes $substrCP $subtract $sum $switch $tan $toBool $toDate $toDecimal $toDouble $toInt $toLong $toObjectId $toString $toLower $toUpper $trim $trunc $type $week $year $zip $count $dateAdd $dateDiff $dateSubtract $dateTrunc $getField $rand $sampleRate $setField $unsetField $comment $explain $hint $max $maxTimeMS $min $orderby $query $returnKey $showDiskLoc $natural\".split(\" \");\noperators=operators.map(function(operator){return operator.replace(\"$\",\"\\\\$\")});operators=\"(?:\"+operators.join(\"|\")+\")\\\\b\";Prism.languages.mongodb=Prism.languages.extend(\"javascript\",{});Prism.languages.insertBefore(\"mongodb\",\"string\",{property:{pattern:/(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,greedy:!0,inside:{keyword:RegExp(\"^(['\\\"])?\"+operators+\"(?:\\\\1)?$\")}}});Prism.languages.mongodb.string.inside={url:{pattern:/https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\ngreedy:!0},entity:{pattern:/\\b(?:(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\b/,greedy:!0}};Prism.languages.insertBefore(\"mongodb\",\"constant\",{builtin:{pattern:RegExp(\"\\\\b(?:ObjectId|Code|BinData|DBRef|Timestamp|NumberLong|NumberDecimal|MaxKey|MinKey|RegExp|ISODate|UUID)\\\\b\"),alias:\"keyword\"}})})(Prism$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=mongodb;var _javascript=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require(\"module$node_modules$refractor$lang$javascript\"));\nmongodb.displayName=\"mongodb\";mongodb.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$mongodb\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mongodb;\n\nvar _javascript = _interopRequireDefault(require(\"./javascript.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-nocheck\nmongodb.displayName = 'mongodb';\nmongodb.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction mongodb(Prism) {\n  Prism.register(_javascript.default);\n\n  (function (Prism) {\n    var operators = [// query and projection\n    '$eq', '$gt', '$gte', '$in', '$lt', '$lte', '$ne', '$nin', '$and', '$not', '$nor', '$or', '$exists', '$type', '$expr', '$jsonSchema', '$mod', '$regex', '$text', '$where', '$geoIntersects', '$geoWithin', '$near', '$nearSphere', '$all', '$elemMatch', '$size', '$bitsAllClear', '$bitsAllSet', '$bitsAnyClear', '$bitsAnySet', '$comment', '$elemMatch', '$meta', '$slice', // update\n    '$currentDate', '$inc', '$min', '$max', '$mul', '$rename', '$set', '$setOnInsert', '$unset', '$addToSet', '$pop', '$pull', '$push', '$pullAll', '$each', '$position', '$slice', '$sort', '$bit', // aggregation pipeline stages\n    '$addFields', '$bucket', '$bucketAuto', '$collStats', '$count', '$currentOp', '$facet', '$geoNear', '$graphLookup', '$group', '$indexStats', '$limit', '$listLocalSessions', '$listSessions', '$lookup', '$match', '$merge', '$out', '$planCacheStats', '$project', '$redact', '$replaceRoot', '$replaceWith', '$sample', '$set', '$skip', '$sort', '$sortByCount', '$unionWith', '$unset', '$unwind', '$setWindowFields', // aggregation pipeline operators\n    '$abs', '$accumulator', '$acos', '$acosh', '$add', '$addToSet', '$allElementsTrue', '$and', '$anyElementTrue', '$arrayElemAt', '$arrayToObject', '$asin', '$asinh', '$atan', '$atan2', '$atanh', '$avg', '$binarySize', '$bsonSize', '$ceil', '$cmp', '$concat', '$concatArrays', '$cond', '$convert', '$cos', '$dateFromParts', '$dateToParts', '$dateFromString', '$dateToString', '$dayOfMonth', '$dayOfWeek', '$dayOfYear', '$degreesToRadians', '$divide', '$eq', '$exp', '$filter', '$first', '$floor', '$function', '$gt', '$gte', '$hour', '$ifNull', '$in', '$indexOfArray', '$indexOfBytes', '$indexOfCP', '$isArray', '$isNumber', '$isoDayOfWeek', '$isoWeek', '$isoWeekYear', '$last', '$last', '$let', '$literal', '$ln', '$log', '$log10', '$lt', '$lte', '$ltrim', '$map', '$max', '$mergeObjects', '$meta', '$min', '$millisecond', '$minute', '$mod', '$month', '$multiply', '$ne', '$not', '$objectToArray', '$or', '$pow', '$push', '$radiansToDegrees', '$range', '$reduce', '$regexFind', '$regexFindAll', '$regexMatch', '$replaceOne', '$replaceAll', '$reverseArray', '$round', '$rtrim', '$second', '$setDifference', '$setEquals', '$setIntersection', '$setIsSubset', '$setUnion', '$size', '$sin', '$slice', '$split', '$sqrt', '$stdDevPop', '$stdDevSamp', '$strcasecmp', '$strLenBytes', '$strLenCP', '$substr', '$substrBytes', '$substrCP', '$subtract', '$sum', '$switch', '$tan', '$toBool', '$toDate', '$toDecimal', '$toDouble', '$toInt', '$toLong', '$toObjectId', '$toString', '$toLower', '$toUpper', '$trim', '$trunc', '$type', '$week', '$year', '$zip', '$count', '$dateAdd', '$dateDiff', '$dateSubtract', '$dateTrunc', '$getField', '$rand', '$sampleRate', '$setField', '$unsetField', // aggregation pipeline query modifiers\n    '$comment', '$explain', '$hint', '$max', '$maxTimeMS', '$min', '$orderby', '$query', '$returnKey', '$showDiskLoc', '$natural'];\n    var builtinFunctions = ['ObjectId', 'Code', 'BinData', 'DBRef', 'Timestamp', 'NumberLong', 'NumberDecimal', 'MaxKey', 'MinKey', 'RegExp', 'ISODate', 'UUID'];\n    operators = operators.map(function (operator) {\n      return operator.replace('$', '\\\\$');\n    });\n    var operatorsSource = '(?:' + operators.join('|') + ')\\\\b';\n    Prism.languages.mongodb = Prism.languages.extend('javascript', {});\n    Prism.languages.insertBefore('mongodb', 'string', {\n      property: {\n        pattern: /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,\n        greedy: true,\n        inside: {\n          keyword: RegExp('^([\\'\"])?' + operatorsSource + '(?:\\\\1)?$')\n        }\n      }\n    });\n    Prism.languages.mongodb.string.inside = {\n      url: {\n        // url pattern\n        pattern: /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\n        greedy: true\n      },\n      entity: {\n        // ipv4\n        pattern: /\\b(?:(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\b/,\n        greedy: true\n      }\n    };\n    Prism.languages.insertBefore('mongodb', 'constant', {\n      builtin: {\n        pattern: RegExp('\\\\b(?:' + builtinFunctions.join('|') + ')\\\\b'),\n        alias: 'keyword'\n      }\n    });\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$refractor$lang$javascript","~$shadow.js"]],"~:properties",["^5",["url","aliases","mongodb","displayName","__esModule","value","keyword","greedy","property","pattern","inside","alias","builtin","entity","default"]],"~:compiled-at",1676841365438,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$mongodb.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,0CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBvGC,QAASA,QAAO,CAACC,cAAD,CAAQ,CACtBA,cAAMC,CAAAA,QAAN,CAAeC,WAAYC,CAAAA,OAA3B,CAEC,UAAS,CAACH,KAAD,CAAQ,CAChB,IAAII,UAAY,6gEAAA,CAAA,KAAA,CAAA,GAAA,CAOhBA;SAAA,CAAYA,SAAUC,CAAAA,GAAV,CAAc,QAAS,CAACC,QAAD,CAAW,CAC5C,MAAOA,SAASC,CAAAA,OAAT,CAAiB,GAAjB,CAAsB,KAAtB,CADqC,CAAlC,CAGRC,UAAAA,CAAkB,KAAlBA,CAA0BJ,SAAUK,CAAAA,IAAV,CAAe,GAAf,CAA1BD,CAAgD,MACpDR,MAAMU,CAAAA,SAAUX,CAAAA,OAAhB,CAA0BC,KAAMU,CAAAA,SAAUC,CAAAA,MAAhB,CAAuB,YAAvB,CAAqC,EAArC,CAC1BX,MAAMU,CAAAA,SAAUE,CAAAA,YAAhB,CAA6B,SAA7B,CAAwC,QAAxC,CAAkD,CAChDC,SAAU,CACRC,QAAS,mHADD,CAERC,OAAQ,CAAA,CAFA,CAGRC,OAAQ,CACNC,QAASC,MAAA,CAAO,WAAP,CAAqBV,SAArB,CAAuC,WAAvC,CADH,CAHA,CADsC,CAAlD,CASAR,MAAMU,CAAAA,SAAUX,CAAAA,OAAQoB,CAAAA,MAAOH,CAAAA,MAA/B,CAAwC,CACtCI,IAAK,CAEHN,QAAS,wEAFN;AAGHC,OAAQ,CAAA,CAHL,CADiC,CAMtCM,OAAQ,CAENP,QAAS,6EAFH,CAGNC,OAAQ,CAAA,CAHF,CAN8B,CAYxCf,MAAMU,CAAAA,SAAUE,CAAAA,YAAhB,CAA6B,SAA7B,CAAwC,UAAxC,CAAoD,CAClDU,QAAS,CACPR,QAASI,MAAA,CAAO,4GAAP,CADF,CAEPK,MAAO,SAFA,CADyC,CAApD,CAlCgB,CAAjB,CAAD,CAwCGvB,cAxCH,CAHsB,CAdxBwB,MAAOC,CAAAA,cAAP,CAAsB3B,OAAtB,CAA+B,YAA/B,CAA6C,CAC3C4B,MAAO,CAAA,CADoC,CAA7C,CAGA5B,QAAQK,CAAAA,OAAR,CAAkBJ,OAElB,KAAIG,YAEJyB,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEzB,QAASyB,GAAX,CAAvC,CAFnB,CAAuBhC,OAAA,CAAQ,+CAAR,CAAvB,CAKlBG;OAAQ+B,CAAAA,WAAR,CAAsB,SACtB/B,QAAQgC,CAAAA,OAAR,CAAkB,EAdqF;\",\n\"sources\":[\"node_modules/refractor/lang/mongodb.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$mongodb\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = mongodb;\\n\\nvar _javascript = _interopRequireDefault(require(\\\"./javascript.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// @ts-nocheck\\nmongodb.displayName = 'mongodb';\\nmongodb.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction mongodb(Prism) {\\n  Prism.register(_javascript.default);\\n\\n  (function (Prism) {\\n    var operators = [// query and projection\\n    '$eq', '$gt', '$gte', '$in', '$lt', '$lte', '$ne', '$nin', '$and', '$not', '$nor', '$or', '$exists', '$type', '$expr', '$jsonSchema', '$mod', '$regex', '$text', '$where', '$geoIntersects', '$geoWithin', '$near', '$nearSphere', '$all', '$elemMatch', '$size', '$bitsAllClear', '$bitsAllSet', '$bitsAnyClear', '$bitsAnySet', '$comment', '$elemMatch', '$meta', '$slice', // update\\n    '$currentDate', '$inc', '$min', '$max', '$mul', '$rename', '$set', '$setOnInsert', '$unset', '$addToSet', '$pop', '$pull', '$push', '$pullAll', '$each', '$position', '$slice', '$sort', '$bit', // aggregation pipeline stages\\n    '$addFields', '$bucket', '$bucketAuto', '$collStats', '$count', '$currentOp', '$facet', '$geoNear', '$graphLookup', '$group', '$indexStats', '$limit', '$listLocalSessions', '$listSessions', '$lookup', '$match', '$merge', '$out', '$planCacheStats', '$project', '$redact', '$replaceRoot', '$replaceWith', '$sample', '$set', '$skip', '$sort', '$sortByCount', '$unionWith', '$unset', '$unwind', '$setWindowFields', // aggregation pipeline operators\\n    '$abs', '$accumulator', '$acos', '$acosh', '$add', '$addToSet', '$allElementsTrue', '$and', '$anyElementTrue', '$arrayElemAt', '$arrayToObject', '$asin', '$asinh', '$atan', '$atan2', '$atanh', '$avg', '$binarySize', '$bsonSize', '$ceil', '$cmp', '$concat', '$concatArrays', '$cond', '$convert', '$cos', '$dateFromParts', '$dateToParts', '$dateFromString', '$dateToString', '$dayOfMonth', '$dayOfWeek', '$dayOfYear', '$degreesToRadians', '$divide', '$eq', '$exp', '$filter', '$first', '$floor', '$function', '$gt', '$gte', '$hour', '$ifNull', '$in', '$indexOfArray', '$indexOfBytes', '$indexOfCP', '$isArray', '$isNumber', '$isoDayOfWeek', '$isoWeek', '$isoWeekYear', '$last', '$last', '$let', '$literal', '$ln', '$log', '$log10', '$lt', '$lte', '$ltrim', '$map', '$max', '$mergeObjects', '$meta', '$min', '$millisecond', '$minute', '$mod', '$month', '$multiply', '$ne', '$not', '$objectToArray', '$or', '$pow', '$push', '$radiansToDegrees', '$range', '$reduce', '$regexFind', '$regexFindAll', '$regexMatch', '$replaceOne', '$replaceAll', '$reverseArray', '$round', '$rtrim', '$second', '$setDifference', '$setEquals', '$setIntersection', '$setIsSubset', '$setUnion', '$size', '$sin', '$slice', '$split', '$sqrt', '$stdDevPop', '$stdDevSamp', '$strcasecmp', '$strLenBytes', '$strLenCP', '$substr', '$substrBytes', '$substrCP', '$subtract', '$sum', '$switch', '$tan', '$toBool', '$toDate', '$toDecimal', '$toDouble', '$toInt', '$toLong', '$toObjectId', '$toString', '$toLower', '$toUpper', '$trim', '$trunc', '$type', '$week', '$year', '$zip', '$count', '$dateAdd', '$dateDiff', '$dateSubtract', '$dateTrunc', '$getField', '$rand', '$sampleRate', '$setField', '$unsetField', // aggregation pipeline query modifiers\\n    '$comment', '$explain', '$hint', '$max', '$maxTimeMS', '$min', '$orderby', '$query', '$returnKey', '$showDiskLoc', '$natural'];\\n    var builtinFunctions = ['ObjectId', 'Code', 'BinData', 'DBRef', 'Timestamp', 'NumberLong', 'NumberDecimal', 'MaxKey', 'MinKey', 'RegExp', 'ISODate', 'UUID'];\\n    operators = operators.map(function (operator) {\\n      return operator.replace('$', '\\\\\\\\$');\\n    });\\n    var operatorsSource = '(?:' + operators.join('|') + ')\\\\\\\\b';\\n    Prism.languages.mongodb = Prism.languages.extend('javascript', {});\\n    Prism.languages.insertBefore('mongodb', 'string', {\\n      property: {\\n        pattern: /(?:([\\\"'])(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1|(?!\\\\s)[_$a-zA-Z\\\\xA0-\\\\uFFFF](?:(?!\\\\s)[$\\\\w\\\\xA0-\\\\uFFFF])*)(?=\\\\s*:)/,\\n        greedy: true,\\n        inside: {\\n          keyword: RegExp('^([\\\\'\\\"])?' + operatorsSource + '(?:\\\\\\\\1)?$')\\n        }\\n      }\\n    });\\n    Prism.languages.mongodb.string.inside = {\\n      url: {\\n        // url pattern\\n        pattern: /https?:\\\\/\\\\/[-\\\\w@:%.+~#=]{1,256}\\\\.[a-z0-9()]{1,6}\\\\b[-\\\\w()@:%+.~#?&/=]*/i,\\n        greedy: true\\n      },\\n      entity: {\\n        // ipv4\\n        pattern: /\\\\b(?:(?:[01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.){3}(?:[01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\b/,\\n        greedy: true\\n      }\\n    };\\n    Prism.languages.insertBefore('mongodb', 'constant', {\\n      builtin: {\\n        pattern: RegExp('\\\\\\\\b(?:' + builtinFunctions.join('|') + ')\\\\\\\\b'),\\n        alias: 'keyword'\\n      }\\n    });\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"mongodb\",\"Prism\",\"register\",\"_javascript\",\"default\",\"operators\",\"map\",\"operator\",\"replace\",\"operatorsSource\",\"join\",\"languages\",\"extend\",\"insertBefore\",\"property\",\"pattern\",\"greedy\",\"inside\",\"keyword\",\"RegExp\",\"string\",\"url\",\"entity\",\"builtin\",\"alias\",\"Object\",\"defineProperty\",\"value\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"displayName\",\"aliases\"]\n}\n"]