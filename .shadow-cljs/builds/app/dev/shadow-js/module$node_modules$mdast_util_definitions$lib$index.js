["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-definitions/lib/index.js"],"~:js","shadow$provide.module$node_modules$mdast_util_definitions$lib$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.definitions=function(tree){const cache=Object.create(null);if(!tree||!tree.type)throw Error(\"mdast-util-definitions expected node\");(0,_unistUtilVisit.visit)(tree,\"definition\",definition=>{const id=String(definition.identifier||\"\").toUpperCase();id&&!own.call(cache,id)&&(cache[id]=definition)});return function(identifier){return(identifier=\nString(identifier||\"\").toUpperCase())&&own.call(cache,identifier)?cache[identifier]:null}};var _unistUtilVisit=require(\"module$node_modules$unist_util_visit$index\");const own={}.hasOwnProperty}","~:source","shadow$provide[\"module$node_modules$mdast_util_definitions$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.definitions = definitions;\n\nvar _unistUtilVisit = require(\"unist-util-visit\");\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\nconst own = {}.hasOwnProperty;\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\n\nfunction definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null);\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node');\n  }\n\n  (0, _unistUtilVisit.visit)(tree, 'definition', definition => {\n    const id = clean(definition.identifier);\n\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition;\n    }\n  });\n  return definition;\n  /** @type {GetDefinition} */\n\n  function definition(identifier) {\n    const id = clean(identifier); // To do: next major: return `undefined` when not found.\n\n    return id && own.call(cache, id) ? cache[id] : null;\n  }\n}\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\n\n\nfunction clean(value) {\n  return String(value || '').toUpperCase();\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$unist_util_visit$index","~$shadow.js"]],"~:properties",["^5",["definitions","__esModule","value"]],"~:compiled-at",1676665867320,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_definitions$lib$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAiCAA,QAAoB,CAACC,IAAD,CAAO,CAEzB,MAAMC,MAAQL,MAAOM,CAAAA,MAAP,CAAc,IAAd,CAEd,IAAI,CAACF,IAAL,EAAa,CAACA,IAAKG,CAAAA,IAAnB,CACE,KAAUC,MAAJ,CAAU,sCAAV,CAAN,CAGF,GAAIC,eAAgBC,CAAAA,KAApB,EAA2BN,IAA3B,CAAiC,YAAjC,CAA+CO,UAAA,EAAc,CAC3D,MAAMC,GAsBDC,MAAA,CAtBYF,UAAWG,CAAAA,UAsBvB,EAAgB,EAAhB,CAAoBC,CAAAA,WAApB,EApBDH,GAAJ,EAAU,CAACI,GAAIC,CAAAA,IAAJ,CAASZ,KAAT,CAAgBO,EAAhB,CAAX,GACEP,KAAA,CAAMO,EAAN,CADF,CACcD,UADd,CAH2D,CAA7D,CAOA,OAGAA,SAAmB,CAACG,UAAD,CAAa,CAG9B,MAAO,CAFDF,UAEC;AAUFC,MAAA,CAZYC,UAYZ,EAAgB,EAAhB,CAAoBC,CAAAA,WAApB,EAVE,GAAMC,GAAIC,CAAAA,IAAJ,CAASZ,KAAT,CAAgBO,UAAhB,CAAN,CAA4BP,KAAA,CAAMO,UAAN,CAA5B,CAAwC,IAHjB,CAlBP,CA/B3B,KAAIH,gBAAkBZ,OAAA,CAAQ,4CAAR,CAkBtB,OAAMmB,IAAM,EAAGE,CAAAA,cA1BkG;\",\n\"sources\":[\"node_modules/mdast-util-definitions/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_definitions$lib$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.definitions = definitions;\\n\\nvar _unistUtilVisit = require(\\\"unist-util-visit\\\");\\n\\n/**\\n * @typedef {import('mdast').Root} Root\\n * @typedef {import('mdast').Content} Content\\n * @typedef {import('mdast').Definition} Definition\\n */\\n\\n/**\\n * @typedef {Root | Content} Node\\n *\\n * @callback GetDefinition\\n *   Get a definition by identifier.\\n * @param {string | null | undefined} [identifier]\\n *   Identifier of definition.\\n * @returns {Definition | null}\\n *   Definition corresponding to `identifier` or `null`.\\n */\\nconst own = {}.hasOwnProperty;\\n/**\\n * Find definitions in `tree`.\\n *\\n * Uses CommonMark precedence, which means that earlier definitions are\\n * preferred over duplicate later definitions.\\n *\\n * @param {Node} tree\\n *   Tree to check.\\n * @returns {GetDefinition}\\n *   Getter.\\n */\\n\\nfunction definitions(tree) {\\n  /** @type {Record<string, Definition>} */\\n  const cache = Object.create(null);\\n\\n  if (!tree || !tree.type) {\\n    throw new Error('mdast-util-definitions expected node');\\n  }\\n\\n  (0, _unistUtilVisit.visit)(tree, 'definition', definition => {\\n    const id = clean(definition.identifier);\\n\\n    if (id && !own.call(cache, id)) {\\n      cache[id] = definition;\\n    }\\n  });\\n  return definition;\\n  /** @type {GetDefinition} */\\n\\n  function definition(identifier) {\\n    const id = clean(identifier); // To do: next major: return `undefined` when not found.\\n\\n    return id && own.call(cache, id) ? cache[id] : null;\\n  }\\n}\\n/**\\n * @param {string | null | undefined} [value]\\n * @returns {string}\\n */\\n\\n\\nfunction clean(value) {\\n  return String(value || '').toUpperCase();\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"definitions\",\"tree\",\"cache\",\"create\",\"type\",\"Error\",\"_unistUtilVisit\",\"visit\",\"definition\",\"id\",\"String\",\"identifier\",\"toUpperCase\",\"own\",\"call\",\"hasOwnProperty\"]\n}\n"]