["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/perl.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$perl=function(global,require,module,exports){function perl(Prism){var brackets=/(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/.source;Prism.languages.perl={comment:[{pattern:/(^\\s*)=\\w[\\s\\S]*?=cut.*/m,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\\\$])#.*/,lookbehind:!0,greedy:!0}],string:[{pattern:RegExp(/\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source+\"(?:\"+[/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n/([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,brackets].join(\"|\")+\")\"),greedy:!0},{pattern:/(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,greedy:!0},{pattern:/'(?:[^'\\\\\\r\\n]|\\\\.)*'/,greedy:!0}],regex:[{pattern:RegExp(/\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source+\"(?:\"+[/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,/([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,brackets].join(\"|\")+\")\"+/[msixpodualngc]*/.source),greedy:!0},{pattern:RegExp(/(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source+\"(?:\"+[/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n/([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/.source,brackets+/\\s*/.source+brackets].join(\"|\")+\")\"+/[msixpodualngcer]*/.source),lookbehind:!0,greedy:!0},{pattern:/\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,greedy:!0}],variable:[/[&*$@%]\\{\\^[A-Z]+\\}/,/[&*$@%]\\^[A-Z_]/,/[&*$@%]#?(?=\\{)/,/[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/,/[&*$@%]\\d+/,/(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/],\nfilehandle:{pattern:/<(?![<=])\\S*?>|\\b_\\b/,alias:\"symbol\"},\"v-string\":{pattern:/v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,alias:\"string\"},function:{pattern:/(\\bsub[ \\t]+)\\w+/,lookbehind:!0},keyword:/\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,number:/\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\noperator:/-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,punctuation:/[{}[\\];(),:]/}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=perl;perl.displayName=\"perl\";perl.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$perl\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = perl;\n// @ts-nocheck\nperl.displayName = 'perl';\nperl.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction perl(Prism) {\n  ;\n\n  (function (Prism) {\n    var brackets = /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/.source;\n    Prism.languages.perl = {\n      comment: [{\n        // POD\n        pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n        lookbehind: true,\n        greedy: true\n      }, {\n        pattern: /(^|[^\\\\$])#.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      // TODO Could be nice to handle Heredoc too.\n      string: [{\n        pattern: RegExp(/\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source + '(?:' + [// q/.../\n        /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // q a...a\n        // eslint-disable-next-line regexp/strict\n        /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // q(...)\n        // q{...}\n        // q[...]\n        // q<...>\n        brackets].join('|') + ')'),\n        greedy: true\n      }, // \"...\", `...`\n      {\n        pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true\n      }, // '...'\n      // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n      {\n        pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n        greedy: true\n      }],\n      regex: [{\n        pattern: RegExp(/\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source + '(?:' + [// m/.../\n        /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // m a...a\n        // eslint-disable-next-line regexp/strict\n        /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // m(...)\n        // m{...}\n        // m[...]\n        // m<...>\n        brackets].join('|') + ')' + /[msixpodualngc]*/.source),\n        greedy: true\n      }, // The lookbehinds prevent -s from breaking\n      {\n        pattern: RegExp(/(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source + '(?:' + [// s/.../.../\n        // eslint-disable-next-line regexp/strict\n        /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // s a...a...a\n        // eslint-disable-next-line regexp/strict\n        /([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/.source, // s(...)(...)\n        // s{...}{...}\n        // s[...][...]\n        // s<...><...>\n        // s(...)[...]\n        brackets + /\\s*/.source + brackets].join('|') + ')' + /[msixpodualngcer]*/.source),\n        lookbehind: true,\n        greedy: true\n      }, // /.../\n      // The look-ahead tries to prevent two divisions on\n      // the same line from being highlighted as regex.\n      // This does not support multi-line regex.\n      {\n        pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n        greedy: true\n      }],\n      // FIXME Not sure about the handling of ::, ', and #\n      variable: [// ${^POSTMATCH}\n      /[&*$@%]\\{\\^[A-Z]+\\}/, // $^V\n      /[&*$@%]\\^[A-Z_]/, // ${...}\n      /[&*$@%]#?(?=\\{)/, // $foo\n      /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/, // $1\n      /[&*$@%]\\d+/, // $_, @_, %!\n      // The negative lookahead prevents from breaking the %= operator\n      /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/],\n      filehandle: {\n        // <>, <FOO>, _\n        pattern: /<(?![<=])\\S*?>|\\b_\\b/,\n        alias: 'symbol'\n      },\n      'v-string': {\n        // v1.2, 1.2.3\n        pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n        alias: 'string'\n      },\n      function: {\n        pattern: /(\\bsub[ \\t]+)\\w+/,\n        lookbehind: true\n      },\n      keyword: /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n      number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n      operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n      punctuation: /[{}[\\];(),:]/\n    };\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["punctuation","string","aliases","filehandle","operator","displayName","__esModule","regex","lookbehind","perl","value","variable","keyword","number","greedy","function","pattern","alias","comment","default"]],"~:compiled-at",1676841365371,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$perl.js\",\n\"lineCount\":5,\n\"mappings\":\"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYpGC,QAASA,KAAI,CAACC,KAAD,CAAQ,CAIjB,IAAIC,SAAW,4GAA6GC,CAAAA,MA6F3HF,MA5FKG,CAAAA,SAAUJ,CAAAA,IAAhB,CAAuB,CACrBK,QAAS,CAAC,CAERC,QAAS,0BAFD,CAGRC,WAAY,CAAA,CAHJ,CAIRC,OAAQ,CAAA,CAJA,CAAD,CAKN,CACDF,QAAS,eADR,CAEDC,WAAY,CAAA,CAFX,CAGDC,OAAQ,CAAA,CAHP,CALM,CADY,CAYrBC,OAAQ,CAAC,CACPH,QAASI,MAAA,CAAO,oCAAqCP,CAAAA,MAA5C,CAAqD,KAArD,CAA6D,CACtE,kDAAmDA,CAAAA,MADmB;AAGtE,0CAA2CA,CAAAA,MAH2B,CAOtED,QAPsE,CAO5DS,CAAAA,IAP4D,CAOvD,GAPuD,CAA7D,CAOa,GAPb,CADF,CASPH,OAAQ,CAAA,CATD,CAAD,CAWR,CACEF,QAAS,kCADX,CAEEE,OAAQ,CAAA,CAFV,CAXQ,CAgBR,CACEF,QAAS,uBADX,CAEEE,OAAQ,CAAA,CAFV,CAhBQ,CAZa,CAgCrBI,MAAO,CAAC,CACNN,QAASI,MAAA,CAAO,8BAA+BP,CAAAA,MAAtC,CAA+C,KAA/C,CAAuD,CAChE,kDAAmDA,CAAAA,MADa,CAGhE,0CAA2CA,CAAAA,MAHqB,CAOhED,QAPgE,CAOtDS,CAAAA,IAPsD,CAOjD,GAPiD,CAAvD,CAOa,GAPb,CAOmB,kBAAmBR,CAAAA,MAPtC,CADH,CASNK,OAAQ,CAAA,CATF,CAAD,CAWP,CACEF,QAASI,MAAA,CAAO,wCAAyCP,CAAAA,MAAhD,CAAyD,KAAzD,CAAiE,CAE1E,6EAA8EA,CAAAA,MAFJ;AAI1E,qEAAsEA,CAAAA,MAJI,CAS1ED,QAT0E,CAS/D,KAAMC,CAAAA,MATyD,CAShDD,QATgD,CAStCS,CAAAA,IATsC,CASjC,GATiC,CAAjE,CASuC,GATvC,CAS6C,oBAAqBR,CAAAA,MATlE,CADX,CAWEI,WAAY,CAAA,CAXd,CAYEC,OAAQ,CAAA,CAZV,CAXO,CA4BP,CACEF,QAAS,2HADX,CAEEE,OAAQ,CAAA,CAFV,CA5BO,CAhCc,CAiErBK,SAAU,CACV,qBADU,CAEV,iBAFU,CAGV,iBAHU,CAIV,qDAJU,CAKV,YALU,CAOV,mDAPU,CAjEW;AAyErBC,WAAY,CAEVR,QAAS,sBAFC,CAGVS,MAAO,QAHG,CAzES,CA8ErB,WAAY,CAEVT,QAAS,iCAFC,CAGVS,MAAO,QAHG,CA9ES,CAmFrBC,SAAU,CACRV,QAAS,kBADD,CAERC,WAAY,CAAA,CAFJ,CAnFW,CAuFrBU,QAAS,4MAvFY,CAwFrBC,OAAQ,6GAxFa;AAyFrBC,SAAU,+MAzFW,CA0FrBC,YAAa,cA1FQ,CALN,CATrBC,MAAOC,CAAAA,cAAP,CAAsBvB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CwB,MAAO,CAAA,CADoC,CAA7C,CAGAxB,QAAQyB,CAAAA,OAAR,CAAkBxB,IAElBA,KAAKyB,CAAAA,WAAL,CAAmB,MACnBzB,KAAK0B,CAAAA,OAAL,CAAe,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/perl.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$perl\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = perl;\\n// @ts-nocheck\\nperl.displayName = 'perl';\\nperl.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction perl(Prism) {\\n  ;\\n\\n  (function (Prism) {\\n    var brackets = /(?:\\\\((?:[^()\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\)|\\\\{(?:[^{}\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\}|\\\\[(?:[^[\\\\]\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\]|<(?:[^<>\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*>)/.source;\\n    Prism.languages.perl = {\\n      comment: [{\\n        // POD\\n        pattern: /(^\\\\s*)=\\\\w[\\\\s\\\\S]*?=cut.*/m,\\n        lookbehind: true,\\n        greedy: true\\n      }, {\\n        pattern: /(^|[^\\\\\\\\$])#.*/,\\n        lookbehind: true,\\n        greedy: true\\n      }],\\n      // TODO Could be nice to handle Heredoc too.\\n      string: [{\\n        pattern: RegExp(/\\\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\\\s*/.source + '(?:' + [// q/.../\\n        /([^a-zA-Z0-9\\\\s{(\\\\[<])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\1/.source, // q a...a\\n        // eslint-disable-next-line regexp/strict\\n        /([a-zA-Z0-9])(?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\2/.source, // q(...)\\n        // q{...}\\n        // q[...]\\n        // q<...>\\n        brackets].join('|') + ')'),\\n        greedy: true\\n      }, // \\\"...\\\", `...`\\n      {\\n        pattern: /(\\\"|`)(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\1/,\\n        greedy: true\\n      }, // '...'\\n      // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\\n      {\\n        pattern: /'(?:[^'\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)*'/,\\n        greedy: true\\n      }],\\n      regex: [{\\n        pattern: RegExp(/\\\\b(?:m|qr)(?![a-zA-Z0-9])\\\\s*/.source + '(?:' + [// m/.../\\n        /([^a-zA-Z0-9\\\\s{(\\\\[<])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\1/.source, // m a...a\\n        // eslint-disable-next-line regexp/strict\\n        /([a-zA-Z0-9])(?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\2/.source, // m(...)\\n        // m{...}\\n        // m[...]\\n        // m<...>\\n        brackets].join('|') + ')' + /[msixpodualngc]*/.source),\\n        greedy: true\\n      }, // The lookbehinds prevent -s from breaking\\n      {\\n        pattern: RegExp(/(^|[^-])\\\\b(?:s|tr|y)(?![a-zA-Z0-9])\\\\s*/.source + '(?:' + [// s/.../.../\\n        // eslint-disable-next-line regexp/strict\\n        /([^a-zA-Z0-9\\\\s{(\\\\[<])(?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\2(?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\2/.source, // s a...a...a\\n        // eslint-disable-next-line regexp/strict\\n        /([a-zA-Z0-9])(?:(?!\\\\3)[^\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\3(?:(?!\\\\3)[^\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\3/.source, // s(...)(...)\\n        // s{...}{...}\\n        // s[...][...]\\n        // s<...><...>\\n        // s(...)[...]\\n        brackets + /\\\\s*/.source + brackets].join('|') + ')' + /[msixpodualngcer]*/.source),\\n        lookbehind: true,\\n        greedy: true\\n      }, // /.../\\n      // The look-ahead tries to prevent two divisions on\\n      // the same line from being highlighted as regex.\\n      // This does not support multi-line regex.\\n      {\\n        pattern: /\\\\/(?:[^\\\\/\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)*\\\\/[msixpodualngc]*(?=\\\\s*(?:$|[\\\\r\\\\n,.;})&|\\\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\\\b))/,\\n        greedy: true\\n      }],\\n      // FIXME Not sure about the handling of ::, ', and #\\n      variable: [// ${^POSTMATCH}\\n      /[&*$@%]\\\\{\\\\^[A-Z]+\\\\}/, // $^V\\n      /[&*$@%]\\\\^[A-Z_]/, // ${...}\\n      /[&*$@%]#?(?=\\\\{)/, // $foo\\n      /[&*$@%]#?(?:(?:::)*'?(?!\\\\d)[\\\\w$]+(?![\\\\w$]))+(?:::)*/, // $1\\n      /[&*$@%]\\\\d+/, // $_, @_, %!\\n      // The negative lookahead prevents from breaking the %= operator\\n      /(?!%=)[$@%][!\\\"#$%&'()*+,\\\\-.\\\\/:;<=>?@[\\\\\\\\\\\\]^_`{|}~]/],\\n      filehandle: {\\n        // <>, <FOO>, _\\n        pattern: /<(?![<=])\\\\S*?>|\\\\b_\\\\b/,\\n        alias: 'symbol'\\n      },\\n      'v-string': {\\n        // v1.2, 1.2.3\\n        pattern: /v\\\\d+(?:\\\\.\\\\d+)*|\\\\d+(?:\\\\.\\\\d+){2,}/,\\n        alias: 'string'\\n      },\\n      function: {\\n        pattern: /(\\\\bsub[ \\\\t]+)\\\\w+/,\\n        lookbehind: true\\n      },\\n      keyword: /\\\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\\\b/,\\n      number: /\\\\b(?:0x[\\\\dA-Fa-f](?:_?[\\\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\\\d(?:_?\\\\d)*)?\\\\.)?\\\\d(?:_?\\\\d)*(?:[Ee][+-]?\\\\d+)?)\\\\b/,\\n      operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\\\b|\\\\+[+=]?|-[-=>]?|\\\\*\\\\*?=?|\\\\/\\\\/?=?|=[=~>]?|~[~=]?|\\\\|\\\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\\\.(?:=|\\\\.\\\\.?)?|[\\\\\\\\?]|\\\\bx(?:=|\\\\b)|\\\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\\\b/,\\n      punctuation: /[{}[\\\\];(),:]/\\n    };\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"perl\",\"Prism\",\"brackets\",\"source\",\"languages\",\"comment\",\"pattern\",\"lookbehind\",\"greedy\",\"string\",\"RegExp\",\"join\",\"regex\",\"variable\",\"filehandle\",\"alias\",\"function\",\"keyword\",\"number\",\"operator\",\"punctuation\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]