["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-extension-math/lib/html.js"],"~:js","shadow$provide.module$node_modules$micromark_extension_math$lib$html=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.mathHtml=function(options){return{enter:{mathFlow(){this.lineEndingIfNeeded();this.tag('\\x3cdiv class\\x3d\"math math-display\"\\x3e')},mathFlowFenceMeta(){this.buffer()},mathText(){this.tag('\\x3cspan class\\x3d\"math math-inline\"\\x3e');this.buffer()}},exit:{mathFlow(){var value=this.resume(),JSCompiler_temp_const=this.tag;value=value.replace(/(?:\\r?\\n|\\r)$/,\n\"\");value=_katex.default.renderToString(value,Object.assign({},options,{displayMode:!0}));JSCompiler_temp_const.call(this,value);this.tag(\"\\x3c/div\\x3e\");this.setData(\"mathFlowOpen\");this.setData(\"slurpOneLineEnding\")},mathFlowFence(){this.getData(\"mathFlowOpen\")||(this.setData(\"mathFlowOpen\",!0),this.setData(\"slurpOneLineEnding\",!0),this.buffer())},mathFlowFenceMeta(){this.resume()},mathFlowValue(token){this.raw(this.sliceSerialize(token))},mathText(){const value=this.resume();this.tag(_katex.default.renderToString(value,\nObject.assign({},options,{displayMode:!1})));this.tag(\"\\x3c/span\\x3e\")},mathTextData(token){this.raw(this.sliceSerialize(token))}}}};var _katex=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require(\"module$node_modules$micromark_extension_math$node_modules$katex$dist$katex\"))}","~:source","shadow$provide[\"module$node_modules$micromark_extension_math$lib$html\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mathHtml = mathHtml;\n\nvar _katex = _interopRequireDefault(require(\"katex\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('katex').KatexOptions} KatexOptions\n */\n\n/**\n * @typedef {Omit<KatexOptions, 'displayMode'>} Options\n */\n\n/**\n * @param {Options} [options]\n * @returns {HtmlExtension}\n */\nfunction mathHtml(options) {\n  return {\n    enter: {\n      mathFlow() {\n        this.lineEndingIfNeeded();\n        this.tag('<div class=\"math math-display\">');\n      },\n\n      mathFlowFenceMeta() {\n        this.buffer();\n      },\n\n      mathText() {\n        // Double?\n        this.tag('<span class=\"math math-inline\">');\n        this.buffer();\n      }\n\n    },\n    exit: {\n      mathFlow() {\n        const value = this.resume();\n        this.tag(math(value.replace(/(?:\\r?\\n|\\r)$/, ''), true));\n        this.tag('</div>');\n        this.setData('mathFlowOpen');\n        this.setData('slurpOneLineEnding');\n      },\n\n      mathFlowFence() {\n        // After the first fence.\n        if (!this.getData('mathFlowOpen')) {\n          this.setData('mathFlowOpen', true);\n          this.setData('slurpOneLineEnding', true);\n          this.buffer();\n        }\n      },\n\n      mathFlowFenceMeta() {\n        this.resume();\n      },\n\n      mathFlowValue(token) {\n        this.raw(this.sliceSerialize(token));\n      },\n\n      mathText() {\n        const value = this.resume();\n        this.tag(math(value, false));\n        this.tag('</span>');\n      },\n\n      mathTextData(token) {\n        this.raw(this.sliceSerialize(token));\n      }\n\n    }\n  };\n  /**\n   * @param {string} value\n   * @param {boolean} displayMode\n   * @returns {string}\n   */\n\n  function math(value, displayMode) {\n    return _katex.default.renderToString(value, Object.assign({}, options, {\n      displayMode\n    }));\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$micromark_extension_math$node_modules$katex$dist$katex"]],"~:properties",["^5",["displayMode","mathHtml","__esModule","value","exit","enter","default"]],"~:compiled-at",1676667584525,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_extension_math$lib$html.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,QAAR,CAmBAA,QAAiB,CAACC,OAAD,CAAU,CACzB,MAAO,CACLC,MAAO,CACLC,QAAQ,EAAG,CACT,IAAKC,CAAAA,kBAAL,EACA,KAAKC,CAAAA,GAAL,CAAS,0CAAT,CAFS,CADN,CAMLC,iBAAiB,EAAG,CAClB,IAAKC,CAAAA,MAAL,EADkB,CANf,CAULC,QAAQ,EAAG,CAET,IAAKH,CAAAA,GAAL,CAAS,0CAAT,CACA,KAAKE,CAAAA,MAAL,EAHS,CAVN,CADF,CAkBLE,KAAM,CACJN,QAAQ,EAAG,CACT,IAAMJ,MAAQ,IAAKW,CAAAA,MAAL,EAAd,CACKL,sBAAL,IAAKA,CAAAA,GAAS,MAAA,CAAAN,KAAMY,CAAAA,OAAN,CAAc,eAAd;AAA+B,EAA/B,CA0ClB,MAAA,CAAOC,MAAOC,CAAAA,OAAQC,CAAAA,cAAf,CAA8Bf,KAA9B,CAAqCF,MAAOkB,CAAAA,MAAP,CAAc,EAAd,CAAkBd,OAAlB,CAA2B,CACrEe,YA3CoDA,CAAAA,CA0CiB,CAA3B,CAArC,CA1CEX,sBAAL,CAAA,IAAA,CAAA,IAAA,CAAS,KAAT,CACA,KAAKA,CAAAA,GAAL,CAAS,cAAT,CACA,KAAKY,CAAAA,OAAL,CAAa,cAAb,CACA,KAAKA,CAAAA,OAAL,CAAa,oBAAb,CALS,CADP,CASJC,aAAa,EAAG,CAET,IAAKC,CAAAA,OAAL,CAAa,cAAb,CAAL,GACE,IAAKF,CAAAA,OAAL,CAAa,cAAb,CAA6B,CAAA,CAA7B,CAEA,CADA,IAAKA,CAAAA,OAAL,CAAa,oBAAb,CAAmC,CAAA,CAAnC,CACA,CAAA,IAAKV,CAAAA,MAAL,EAHF,CAFc,CATZ,CAkBJD,iBAAiB,EAAG,CAClB,IAAKI,CAAAA,MAAL,EADkB,CAlBhB,CAsBJU,aAAa,CAACC,KAAD,CAAQ,CACnB,IAAKC,CAAAA,GAAL,CAAS,IAAKC,CAAAA,cAAL,CAAoBF,KAApB,CAAT,CADmB,CAtBjB,CA0BJb,QAAQ,EAAG,CACT,MAAMT,MAAQ,IAAKW,CAAAA,MAAL,EACd,KAAKL,CAAAA,GAAL,CAiBGO,MAAOC,CAAAA,OAAQC,CAAAA,cAAf,CAjBWf,KAiBX;AAAqCF,MAAOkB,CAAAA,MAAP,CAAc,EAAd,CAAkBd,OAAlB,CAA2B,CACrEe,YAlBuBA,CAAAA,CAiB8C,CAA3B,CAArC,CAjBH,CACA,KAAKX,CAAAA,GAAL,CAAS,eAAT,CAHS,CA1BP,CAgCJmB,YAAY,CAACH,KAAD,CAAQ,CAClB,IAAKC,CAAAA,GAAL,CAAS,IAAKC,CAAAA,cAAL,CAAoBF,KAApB,CAAT,CADkB,CAhChB,CAlBD,CADkB,CAjB3B,KAAIT,OAEJa,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEb,QAASa,GAAX,CAAvC,CAFxB,CAAuBhC,OAAA,CAAQ,4EAAR,CAAvB,CARqG;\",\n\"sources\":[\"node_modules/micromark-extension-math/lib/html.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_extension_math$lib$html\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.mathHtml = mathHtml;\\n\\nvar _katex = _interopRequireDefault(require(\\\"katex\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/**\\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\\n * @typedef {import('katex').KatexOptions} KatexOptions\\n */\\n\\n/**\\n * @typedef {Omit<KatexOptions, 'displayMode'>} Options\\n */\\n\\n/**\\n * @param {Options} [options]\\n * @returns {HtmlExtension}\\n */\\nfunction mathHtml(options) {\\n  return {\\n    enter: {\\n      mathFlow() {\\n        this.lineEndingIfNeeded();\\n        this.tag('<div class=\\\"math math-display\\\">');\\n      },\\n\\n      mathFlowFenceMeta() {\\n        this.buffer();\\n      },\\n\\n      mathText() {\\n        // Double?\\n        this.tag('<span class=\\\"math math-inline\\\">');\\n        this.buffer();\\n      }\\n\\n    },\\n    exit: {\\n      mathFlow() {\\n        const value = this.resume();\\n        this.tag(math(value.replace(/(?:\\\\r?\\\\n|\\\\r)$/, ''), true));\\n        this.tag('</div>');\\n        this.setData('mathFlowOpen');\\n        this.setData('slurpOneLineEnding');\\n      },\\n\\n      mathFlowFence() {\\n        // After the first fence.\\n        if (!this.getData('mathFlowOpen')) {\\n          this.setData('mathFlowOpen', true);\\n          this.setData('slurpOneLineEnding', true);\\n          this.buffer();\\n        }\\n      },\\n\\n      mathFlowFenceMeta() {\\n        this.resume();\\n      },\\n\\n      mathFlowValue(token) {\\n        this.raw(this.sliceSerialize(token));\\n      },\\n\\n      mathText() {\\n        const value = this.resume();\\n        this.tag(math(value, false));\\n        this.tag('</span>');\\n      },\\n\\n      mathTextData(token) {\\n        this.raw(this.sliceSerialize(token));\\n      }\\n\\n    }\\n  };\\n  /**\\n   * @param {string} value\\n   * @param {boolean} displayMode\\n   * @returns {string}\\n   */\\n\\n  function math(value, displayMode) {\\n    return _katex.default.renderToString(value, Object.assign({}, options, {\\n      displayMode\\n    }));\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"mathHtml\",\"options\",\"enter\",\"mathFlow\",\"lineEndingIfNeeded\",\"tag\",\"mathFlowFenceMeta\",\"buffer\",\"mathText\",\"exit\",\"resume\",\"replace\",\"_katex\",\"default\",\"renderToString\",\"assign\",\"displayMode\",\"setData\",\"mathFlowFence\",\"getData\",\"mathFlowValue\",\"token\",\"raw\",\"sliceSerialize\",\"mathTextData\",\"_interopRequireDefault\",\"obj\",\"__esModule\"]\n}\n"]