["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/clojure.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$clojure=function(global,require,module,exports){function clojure(Prism){Prism.languages.clojure={comment:{pattern:/;.*/,greedy:!0},string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0},char:/\\\\\\w+/,symbol:{pattern:/(^|[\\s()\\[\\]{},])::?[\\w*+!?'<>=/.-]+/,lookbehind:!0},keyword:{pattern:/(\\()(?:-|->|->>|\\.|\\.\\.|\\*|\\/|\\+|<|<=|=|==|>|>=|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|cond|conj|cons|constantly|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|declare|def|def-|definline|definterface|defmacro|defmethod|defmulti|defn|defn-|defonce|defproject|defprotocol|defrecord|defstruct|deftype|deref|difference|disj|dissoc|distinct|do|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|fn|fnseq|for|frest|gensym|get|get-proxy-class|hash-map|hash-set|identical\\?|identity|if|if-let|if-not|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|let|line-seq|list|list\\*|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|monitor-enter|name|namespace|neg\\?|new|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|quote|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|recur|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|set!|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|throw|time|to-array|to-array-2d|tree-seq|true\\?|try|union|up|update-proxy|val|vals|var|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[\\s)]|$)/,\nlookbehind:!0},boolean:/\\b(?:false|nil|true)\\b/,number:{pattern:/(^|[^\\w$@])(?:\\d+(?:[/.]\\d+)?(?:e[+-]?\\d+)?|0x[a-f0-9]+|[1-9]\\d?r[a-z0-9]+)[lmn]?(?![\\w$@])/i,lookbehind:!0},function:{pattern:/((?:^|[^'])\\()[\\w*+!?'<>=/.-]+(?=[\\s)]|$)/,lookbehind:!0},operator:/[#@^`~]/,punctuation:/[{}\\[\\](),]/}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=clojure;clojure.displayName=\"clojure\";clojure.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$clojure\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = clojure;\n// @ts-nocheck\nclojure.displayName = 'clojure';\nclojure.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction clojure(Prism) {\n  // Copied from https://github.com/jeluard/prism-clojure\n  Prism.languages.clojure = {\n    comment: {\n      pattern: /;.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    char: /\\\\\\w+/,\n    symbol: {\n      pattern: /(^|[\\s()\\[\\]{},])::?[\\w*+!?'<>=/.-]+/,\n      lookbehind: true\n    },\n    keyword: {\n      pattern: /(\\()(?:-|->|->>|\\.|\\.\\.|\\*|\\/|\\+|<|<=|=|==|>|>=|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|cond|conj|cons|constantly|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|declare|def|def-|definline|definterface|defmacro|defmethod|defmulti|defn|defn-|defonce|defproject|defprotocol|defrecord|defstruct|deftype|deref|difference|disj|dissoc|distinct|do|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|fn|fnseq|for|frest|gensym|get|get-proxy-class|hash-map|hash-set|identical\\?|identity|if|if-let|if-not|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|let|line-seq|list|list\\*|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|monitor-enter|name|namespace|neg\\?|new|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|quote|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|recur|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|set!|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|throw|time|to-array|to-array-2d|tree-seq|true\\?|try|union|up|update-proxy|val|vals|var|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[\\s)]|$)/,\n      lookbehind: true\n    },\n    boolean: /\\b(?:false|nil|true)\\b/,\n    number: {\n      pattern: /(^|[^\\w$@])(?:\\d+(?:[/.]\\d+)?(?:e[+-]?\\d+)?|0x[a-f0-9]+|[1-9]\\d?r[a-z0-9]+)[lmn]?(?![\\w$@])/i,\n      lookbehind: true\n    },\n    function: {\n      pattern: /((?:^|[^'])\\()[\\w*+!?'<>=/.-]+(?=[\\s)]|$)/,\n      lookbehind: true\n    },\n    operator: /[#@^`~]/,\n    punctuation: /[{}\\[\\](),]/\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","punctuation","string","aliases","clojure","operator","displayName","__esModule","lookbehind","value","char","keyword","number","greedy","symbol","function","pattern","comment","default"]],"~:compiled-at",1676841365399,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$clojure.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,0CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYvGC,QAASA,QAAO,CAACC,KAAD,CAAQ,CAEtBA,KAAMC,CAAAA,SAAUF,CAAAA,OAAhB,CAA0B,CACxBG,QAAS,CACPC,QAAS,KADF,CAEPC,OAAQ,CAAA,CAFD,CADe,CAKxBC,OAAQ,CACNF,QAAS,mBADH,CAENC,OAAQ,CAAA,CAFF,CALgB,CASxBE,KAAM,OATkB,CAUxBC,OAAQ,CACNJ,QAAS,sCADH,CAENK,WAAY,CAAA,CAFN,CAVgB,CAcxBC,QAAS,CACPN,QAAS,6+EADF;AAEPK,WAAY,CAAA,CAFL,CAde,CAkBxBE,QAAS,wBAlBe,CAmBxBC,OAAQ,CACNR,QAAS,8FADH,CAENK,WAAY,CAAA,CAFN,CAnBgB,CAuBxBI,SAAU,CACRT,QAAS,2CADD,CAERK,WAAY,CAAA,CAFJ,CAvBc,CA2BxBK,SAAU,SA3Bc,CA4BxBC,YAAa,aA5BW,CAFJ,CATxBC,MAAOC,CAAAA,cAAP,CAAsBlB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CmB,MAAO,CAAA,CADoC,CAA7C,CAGAnB,QAAQoB,CAAAA,OAAR,CAAkBnB,OAElBA,QAAQoB,CAAAA,WAAR,CAAsB,SACtBpB,QAAQqB,CAAAA,OAAR,CAAkB,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/clojure.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$clojure\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = clojure;\\n// @ts-nocheck\\nclojure.displayName = 'clojure';\\nclojure.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction clojure(Prism) {\\n  // Copied from https://github.com/jeluard/prism-clojure\\n  Prism.languages.clojure = {\\n    comment: {\\n      pattern: /;.*/,\\n      greedy: true\\n    },\\n    string: {\\n      pattern: /\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"/,\\n      greedy: true\\n    },\\n    char: /\\\\\\\\\\\\w+/,\\n    symbol: {\\n      pattern: /(^|[\\\\s()\\\\[\\\\]{},])::?[\\\\w*+!?'<>=/.-]+/,\\n      lookbehind: true\\n    },\\n    keyword: {\\n      pattern: /(\\\\()(?:-|->|->>|\\\\.|\\\\.\\\\.|\\\\*|\\\\/|\\\\+|<|<=|=|==|>|>=|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|cond|conj|cons|constantly|construct-proxy|contains\\\\?|count|create-ns|create-struct|cycle|dec|declare|def|def-|definline|definterface|defmacro|defmethod|defmulti|defn|defn-|defonce|defproject|defprotocol|defrecord|defstruct|deftype|deref|difference|disj|dissoc|distinct|do|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\\\?|ensure|eval|every\\\\?|false\\\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|fn|fnseq|for|frest|gensym|get|get-proxy-class|hash-map|hash-set|identical\\\\?|identity|if|if-let|if-not|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\\\?|last|lazy-cat|lazy-cons|left|lefts|let|line-seq|list|list\\\\*|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|monitor-enter|name|namespace|neg\\\\?|new|newline|next|nil\\\\?|node|not|not-any\\\\?|not-every\\\\?|not=|ns|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|quote|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|recur|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\\\?|set|set!|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\\\?|split-at|split-with|str|string\\\\?|struct|struct-map|subs|subvec|symbol|symbol\\\\?|sync|take|take-nth|take-while|test|throw|time|to-array|to-array-2d|tree-seq|true\\\\?|try|union|up|update-proxy|val|vals|var|var-get|var-set|var\\\\?|vector|vector-zip|vector\\\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\\\?|zipmap|zipper)(?=[\\\\s)]|$)/,\\n      lookbehind: true\\n    },\\n    boolean: /\\\\b(?:false|nil|true)\\\\b/,\\n    number: {\\n      pattern: /(^|[^\\\\w$@])(?:\\\\d+(?:[/.]\\\\d+)?(?:e[+-]?\\\\d+)?|0x[a-f0-9]+|[1-9]\\\\d?r[a-z0-9]+)[lmn]?(?![\\\\w$@])/i,\\n      lookbehind: true\\n    },\\n    function: {\\n      pattern: /((?:^|[^'])\\\\()[\\\\w*+!?'<>=/.-]+(?=[\\\\s)]|$)/,\\n      lookbehind: true\\n    },\\n    operator: /[#@^`~]/,\\n    punctuation: /[{}\\\\[\\\\](),]/\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"clojure\",\"Prism\",\"languages\",\"comment\",\"pattern\",\"greedy\",\"string\",\"char\",\"symbol\",\"lookbehind\",\"keyword\",\"boolean\",\"number\",\"function\",\"operator\",\"punctuation\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]