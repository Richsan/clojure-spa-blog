["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/parse5/lib/utils/mixin.js"],"~:js","shadow$provide.module$node_modules$parse5$lib$utils$mixin=function(global,require,module,exports){class Mixin{constructor(host){const originalMethods={},overriddenMethods=this._getOverriddenMethods(this,originalMethods);for(const key of Object.keys(overriddenMethods))\"function\"===typeof overriddenMethods[key]&&(originalMethods[key]=host[key],host[key]=overriddenMethods[key])}_getOverriddenMethods(){throw Error(\"Not implemented\");}}Mixin.install=function(host,Ctor,opts){host.__mixins||(host.__mixins=\n[]);for(let i=0;i<host.__mixins.length;i++)if(host.__mixins[i].constructor===Ctor)return host.__mixins[i];Ctor=new Ctor(host,opts);host.__mixins.push(Ctor);return Ctor};module.exports=Mixin}","~:source","shadow$provide[\"module$node_modules$parse5$lib$utils$mixin\"] = function(global,require,module,exports) {\n'use strict';\n\nclass Mixin {\n    constructor(host) {\n        const originalMethods = {};\n        const overriddenMethods = this._getOverriddenMethods(this, originalMethods);\n\n        for (const key of Object.keys(overriddenMethods)) {\n            if (typeof overriddenMethods[key] === 'function') {\n                originalMethods[key] = host[key];\n                host[key] = overriddenMethods[key];\n            }\n        }\n    }\n\n    _getOverriddenMethods() {\n        throw new Error('Not implemented');\n    }\n}\n\nMixin.install = function(host, Ctor, opts) {\n    if (!host.__mixins) {\n        host.__mixins = [];\n    }\n\n    for (let i = 0; i < host.__mixins.length; i++) {\n        if (host.__mixins[i].constructor === Ctor) {\n            return host.__mixins[i];\n        }\n    }\n\n    const mixin = new Ctor(host, opts);\n\n    host.__mixins.push(mixin);\n\n    return mixin;\n};\n\nmodule.exports = Mixin;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["install","__mixins"]],"~:compiled-at",1676667638408,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$parse5$lib$utils$mixin.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,0CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvG,KAAMC,MAAN,CACIC,WAAW,CAACC,IAAD,CAAO,CACd,MAAMC,gBAAkB,EAAxB,CACMC,kBAAoB,IAAKC,CAAAA,qBAAL,CAA2B,IAA3B,CAAiCF,eAAjC,CAE1B,KAAK,MAAMG,GAAX,GAAkBC,OAAOC,CAAAA,IAAP,CAAYJ,iBAAZ,CAAlB,CAC0C,UAAtC,GAAI,MAAOA,kBAAA,CAAkBE,GAAlB,CAAX,GACIH,eAAA,CAAgBG,GAAhB,CACA,CADuBJ,IAAA,CAAKI,GAAL,CACvB,CAAAJ,IAAA,CAAKI,GAAL,CAAA,CAAYF,iBAAA,CAAkBE,GAAlB,CAFhB,CALU,CAYlBD,qBAAqB,EAAG,CACpB,KAAUI,MAAJ,CAAU,iBAAV,CAAN,CADoB,CAb5B,CAkBAT,KAAMU,CAAAA,OAAN,CAAgBC,QAAQ,CAACT,IAAD,CAAOU,IAAP,CAAaC,IAAb,CAAmB,CAClCX,IAAKY,CAAAA,QAAV,GACIZ,IAAKY,CAAAA,QADT;AACoB,EADpB,CAIA,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBb,IAAKY,CAAAA,QAASE,CAAAA,MAAlC,CAA0CD,CAAA,EAA1C,CACI,GAAIb,IAAKY,CAAAA,QAAL,CAAcC,CAAd,CAAiBd,CAAAA,WAArB,GAAqCW,IAArC,CACI,MAAOV,KAAKY,CAAAA,QAAL,CAAcC,CAAd,CAITE,KAAAA,CAAQ,IAAIL,IAAJ,CAASV,IAAT,CAAeW,IAAf,CAEdX,KAAKY,CAAAA,QAASI,CAAAA,IAAd,CAAmBD,IAAnB,CAEA,OAAOA,KAfgC,CAkB3CnB,OAAOC,CAAAA,OAAP,CAAiBC,KAvCsF;\",\n\"sources\":[\"node_modules/parse5/lib/utils/mixin.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$parse5$lib$utils$mixin\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nclass Mixin {\\n    constructor(host) {\\n        const originalMethods = {};\\n        const overriddenMethods = this._getOverriddenMethods(this, originalMethods);\\n\\n        for (const key of Object.keys(overriddenMethods)) {\\n            if (typeof overriddenMethods[key] === 'function') {\\n                originalMethods[key] = host[key];\\n                host[key] = overriddenMethods[key];\\n            }\\n        }\\n    }\\n\\n    _getOverriddenMethods() {\\n        throw new Error('Not implemented');\\n    }\\n}\\n\\nMixin.install = function(host, Ctor, opts) {\\n    if (!host.__mixins) {\\n        host.__mixins = [];\\n    }\\n\\n    for (let i = 0; i < host.__mixins.length; i++) {\\n        if (host.__mixins[i].constructor === Ctor) {\\n            return host.__mixins[i];\\n        }\\n    }\\n\\n    const mixin = new Ctor(host, opts);\\n\\n    host.__mixins.push(mixin);\\n\\n    return mixin;\\n};\\n\\nmodule.exports = Mixin;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Mixin\",\"constructor\",\"host\",\"originalMethods\",\"overriddenMethods\",\"_getOverriddenMethods\",\"key\",\"Object\",\"keys\",\"Error\",\"install\",\"Mixin.install\",\"Ctor\",\"opts\",\"__mixins\",\"i\",\"length\",\"mixin\",\"push\"]\n}\n"]