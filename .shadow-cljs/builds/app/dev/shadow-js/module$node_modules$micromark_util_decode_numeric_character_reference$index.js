["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-util-decode-numeric-character-reference/index.js"],"~:js","shadow$provide.module$node_modules$micromark_util_decode_numeric_character_reference$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.decodeNumericCharacterReference=function(value,base){value=Number.parseInt(value,base);return 9>value||11===value||13<value&&32>value||126<value&&160>value||55295<value&&57344>value||64975<value&&65008>value||65535===(value&65535)||65534===(value&65535)||1114111<value?\"ï¿½\":String.fromCharCode(value)}}","~:source","shadow$provide[\"module$node_modules$micromark_util_decode_numeric_character_reference$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeNumericCharacterReference = decodeNumericCharacterReference;\n\n/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nfunction decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n\n  if ( // C0 except for HT, LF, FF, CR, space\n  code < 9 || code === 11 || code > 13 && code < 32 || code > 126 && code < 160 || code > 55295 && code < 57344 || code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 || // Out of range\n  code > 1114111) {\n    return '\\uFFFD';\n  }\n\n  return String.fromCharCode(code);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","decodeNumericCharacterReference"]],"~:compiled-at",1676665867303,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_util_decode_numeric_character_reference$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,2EAAA,CAAgG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,+BAAR,CAYAA,QAAwC,CAACD,KAAD,CAAQE,IAAR,CAAc,CAC9CC,KAAAA,CAAOC,MAAOC,CAAAA,QAAP,CAAgBL,KAAhB,CAAuBE,IAAvB,CAEb,OACO,EADP,CACAC,KADA,EACqB,EADrB,GACYA,KADZ,EACkC,EADlC,CAC2BA,KAD3B,EAC+C,EAD/C,CACwCA,KADxC,EAC4D,GAD5D,CACqDA,KADrD,EAC0E,GAD1E,CACmEA,KADnE,EACwF,KADxF,CACiFA,KADjF,EACwG,KADxG,CACiGA,KADjG,EACwH,KADxH,CACiHA,KADjH,EACwI,KADxI,CACiIA,KADjI,EACoK,KADpK,IACkJA,KADlJ,CACyJ,KADzJ,GACgM,KADhM,IAC8KA,KAD9K,CACqL,KADrL,GAEO,OAFP,CAEAA,KAFA,CAGS,GAHT,CAMOG,MAAOC,CAAAA,YAAP,CAAoBJ,KAApB,CAT6C,CAlBkF;\",\n\"sources\":[\"node_modules/micromark-util-decode-numeric-character-reference/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_util_decode_numeric_character_reference$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.decodeNumericCharacterReference = decodeNumericCharacterReference;\\n\\n/**\\n * Turn the number (in string form as either hexa- or plain decimal) coming from\\n * a numeric character reference into a character.\\n *\\n * @param {string} value\\n *   Value to decode.\\n * @param {number} base\\n *   Numeric base.\\n * @returns {string}\\n */\\nfunction decodeNumericCharacterReference(value, base) {\\n  const code = Number.parseInt(value, base);\\n\\n  if ( // C0 except for HT, LF, FF, CR, space\\n  code < 9 || code === 11 || code > 13 && code < 32 || code > 126 && code < 160 || code > 55295 && code < 57344 || code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 || // Out of range\\n  code > 1114111) {\\n    return '\\\\uFFFD';\\n  }\\n\\n  return String.fromCharCode(code);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"decodeNumericCharacterReference\",\"base\",\"code\",\"Number\",\"parseInt\",\"String\",\"fromCharCode\"]\n}\n"]