["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/php.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$php=function(global,require,module,exports){module.exports=function(hljs){var regex=hljs.regex,NOT_PERL_ETC=/(?![A-Za-z0-9])(?![$])/;const IDENT_RE=regex.concat(/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/,NOT_PERL_ETC),PASCAL_CASE_CLASS_NAME_RE=regex.concat(/(\\\\?[A-Z][a-z0-9_\\x7f-\\xff]+|\\\\?[A-Z]+(?=[A-Z][a-z0-9_\\x7f-\\xff])){1,}/,NOT_PERL_ETC);NOT_PERL_ETC={scope:\"variable\",match:\"\\\\$+\"+IDENT_RE};var SUBST={scope:\"subst\",variants:[{begin:/\\$\\w+/},\n{begin:/\\{\\$/,end:/\\}/}]},SINGLE_QUOTED=hljs.inherit(hljs.APOS_STRING_MODE,{illegal:null}),DOUBLE_QUOTED=hljs.inherit(hljs.QUOTE_STRING_MODE,{illegal:null,contains:hljs.QUOTE_STRING_MODE.contains.concat(SUBST)});SUBST=hljs.END_SAME_AS_BEGIN({begin:/<<<[ \\t]*(\\w+)\\n/,end:/[ \\t]*(\\w+)\\b/,contains:hljs.QUOTE_STRING_MODE.contains.concat(SUBST)});SINGLE_QUOTED={scope:\"string\",variants:[DOUBLE_QUOTED,SINGLE_QUOTED,SUBST]};DOUBLE_QUOTED={scope:\"number\",variants:[{begin:\"\\\\b0[bB][01]+(?:_[01]+)*\\\\b\"},{begin:\"\\\\b0[oO][0-7]+(?:_[0-7]+)*\\\\b\"},\n{begin:\"\\\\b0[xX][\\\\da-fA-F]+(?:_[\\\\da-fA-F]+)*\\\\b\"},{begin:\"(?:\\\\b\\\\d+(?:_\\\\d+)*(\\\\.(?:\\\\d+(?:_\\\\d+)*))?|\\\\B\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?\"}],relevance:0};const LITERALS=[\"false\",\"null\",\"true\"];var KWS=\"__CLASS__ __DIR__ __FILE__ __FUNCTION__ __COMPILER_HALT_OFFSET__ __LINE__ __METHOD__ __NAMESPACE__ __TRAIT__ die echo exit include include_once print require require_once array abstract and as binary bool boolean break callable case catch class clone const continue declare default do double else elseif empty enddeclare endfor endforeach endif endswitch endwhile enum eval extends final finally float for foreach from global goto if implements instanceof insteadof int integer interface isset iterable list match|0 mixed new never object or private protected public readonly real return string switch throw trait try unset use var void while xor yield\".split(\" \"),\nBUILT_INS=\"Error|0 AppendIterator ArgumentCountError ArithmeticError ArrayIterator ArrayObject AssertionError BadFunctionCallException BadMethodCallException CachingIterator CallbackFilterIterator CompileError Countable DirectoryIterator DivisionByZeroError DomainException EmptyIterator ErrorException Exception FilesystemIterator FilterIterator GlobIterator InfiniteIterator InvalidArgumentException IteratorIterator LengthException LimitIterator LogicException MultipleIterator NoRewindIterator OutOfBoundsException OutOfRangeException OuterIterator OverflowException ParentIterator ParseError RangeException RecursiveArrayIterator RecursiveCachingIterator RecursiveCallbackFilterIterator RecursiveDirectoryIterator RecursiveFilterIterator RecursiveIterator RecursiveIteratorIterator RecursiveRegexIterator RecursiveTreeIterator RegexIterator RuntimeException SeekableIterator SplDoublyLinkedList SplFileInfo SplFileObject SplFixedArray SplHeap SplMaxHeap SplMinHeap SplObjectStorage SplObserver SplPriorityQueue SplQueue SplStack SplSubject SplTempFileObject TypeError UnderflowException UnexpectedValueException UnhandledMatchError ArrayAccess BackedEnum Closure Fiber Generator Iterator IteratorAggregate Serializable Stringable Throwable Traversable UnitEnum WeakReference WeakMap Directory __PHP_Incomplete_Class parent php_user_filter self static stdClass\".split(\" \");\nSUBST={keyword:KWS,literal:(items=>{const result=[];items.forEach(item=>{result.push(item);item.toLowerCase()===item?result.push(item.toUpperCase()):result.push(item.toLowerCase())});return result})(LITERALS),built_in:BUILT_INS};const normalizeKeywords=items=>items.map(item=>item.replace(/\\|\\d+$/,\"\")),CONSTRUCTOR_CALL={variants:[{match:[/new/,regex.concat(\"[ \\t\\n]\",\"+\"),regex.concat(\"(?!\",normalizeKeywords(BUILT_INS).join(\"\\\\b|\"),\"\\\\b)\"),PASCAL_CASE_CLASS_NAME_RE],scope:{1:\"keyword\",4:\"title.class\"}}]};\nvar CONSTANT_REFERENCE=regex.concat(IDENT_RE,\"\\\\b(?!\\\\()\");CONSTANT_REFERENCE={variants:[{match:[regex.concat(/::/,regex.lookahead(/(?!class\\b)/)),CONSTANT_REFERENCE],scope:{2:\"variable.constant\"}},{match:[/::/,/class/],scope:{2:\"variable.language\"}},{match:[PASCAL_CASE_CLASS_NAME_RE,regex.concat(/::/,regex.lookahead(/(?!class\\b)/)),CONSTANT_REFERENCE],scope:{1:\"title.class\",3:\"variable.constant\"}},{match:[PASCAL_CASE_CLASS_NAME_RE,regex.concat(\"::\",regex.lookahead(/(?!class\\b)/))],scope:{1:\"title.class\"}},\n{match:[PASCAL_CASE_CLASS_NAME_RE,/::/,/class/],scope:{1:\"title.class\",3:\"variable.language\"}}]};const NAMED_ARGUMENT={scope:\"attr\",match:regex.concat(IDENT_RE,regex.lookahead(\":\"),regex.lookahead(/(?!::)/))},PARAMS_MODE={relevance:0,begin:/\\(/,end:/\\)/,keywords:SUBST,contains:[NAMED_ARGUMENT,NOT_PERL_ETC,CONSTANT_REFERENCE,hljs.C_BLOCK_COMMENT_MODE,SINGLE_QUOTED,DOUBLE_QUOTED,CONSTRUCTOR_CALL]};KWS={relevance:0,match:[/\\b/,regex.concat(\"(?!fn\\\\b|function\\\\b|\",normalizeKeywords(KWS).join(\"\\\\b|\"),\n\"|\",normalizeKeywords(BUILT_INS).join(\"\\\\b|\"),\"\\\\b)\"),IDENT_RE,regex.concat(\"[ \\t\\n]\",\"*\"),regex.lookahead(/(?=\\()/)],scope:{3:\"title.function.invoke\"},contains:[PARAMS_MODE]};PARAMS_MODE.contains.push(KWS);BUILT_INS=[NAMED_ARGUMENT,CONSTANT_REFERENCE,hljs.C_BLOCK_COMMENT_MODE,SINGLE_QUOTED,DOUBLE_QUOTED,CONSTRUCTOR_CALL];regex={begin:regex.concat(/#\\[\\s*/,PASCAL_CASE_CLASS_NAME_RE),beginScope:\"meta\",end:/]/,endScope:\"meta\",keywords:{literal:LITERALS,keyword:[\"new\",\"array\"]},contains:[{begin:/\\[/,\nend:/]/,keywords:{literal:LITERALS,keyword:[\"new\",\"array\"]},contains:[\"self\",...BUILT_INS]},...BUILT_INS,{scope:\"meta\",match:PASCAL_CASE_CLASS_NAME_RE}]};return{case_insensitive:!1,keywords:SUBST,contains:[regex,hljs.HASH_COMMENT_MODE,hljs.COMMENT(\"//\",\"$\"),hljs.COMMENT(\"/\\\\*\",\"\\\\*/\",{contains:[{scope:\"doctag\",match:\"@[A-Za-z]+\"}]}),{match:/__halt_compiler\\(\\);/,keywords:\"__halt_compiler\",starts:{scope:\"comment\",end:hljs.MATCH_NOTHING_RE,contains:[{match:/\\?>/,scope:\"meta\",endsParent:!0}]}},{scope:\"meta\",\nvariants:[{begin:/<\\?php/,relevance:10},{begin:/<\\?=/},{begin:/<\\?/,relevance:.1},{begin:/\\?>/}]},{scope:\"variable.language\",match:/\\$this\\b/},NOT_PERL_ETC,KWS,CONSTANT_REFERENCE,{match:[/const/,/\\s/,IDENT_RE],scope:{1:\"keyword\",3:\"variable.constant\"}},CONSTRUCTOR_CALL,{scope:\"function\",relevance:0,beginKeywords:\"fn function\",end:/[;{]/,excludeEnd:!0,illegal:\"[$%\\\\[]\",contains:[{beginKeywords:\"use\"},hljs.UNDERSCORE_TITLE_MODE,{begin:\"\\x3d\\x3e\",endsParent:!0},{scope:\"params\",begin:\"\\\\(\",end:\"\\\\)\",\nexcludeBegin:!0,excludeEnd:!0,keywords:SUBST,contains:[\"self\",NOT_PERL_ETC,CONSTANT_REFERENCE,hljs.C_BLOCK_COMMENT_MODE,SINGLE_QUOTED,DOUBLE_QUOTED]}]},{scope:\"class\",variants:[{beginKeywords:\"enum\",illegal:/[($\"]/},{beginKeywords:\"class interface trait\",illegal:/[:($\"]/}],relevance:0,end:/\\{/,excludeEnd:!0,contains:[{beginKeywords:\"extends implements\"},hljs.UNDERSCORE_TITLE_MODE]},{beginKeywords:\"namespace\",relevance:0,end:\";\",illegal:/[.']/,contains:[hljs.inherit(hljs.UNDERSCORE_TITLE_MODE,{scope:\"title.class\"})]},\n{beginKeywords:\"use\",relevance:0,end:\";\",contains:[{match:/\\b(as|const|function)\\b/,scope:\"keyword\"},hljs.UNDERSCORE_TITLE_MODE]},SINGLE_QUOTED,DOUBLE_QUOTED]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$php\"] = function(global,require,module,exports) {\n/*\nLanguage: PHP\nAuthor: Victor Karamzin <Victor.Karamzin@enterra-inc.com>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: https://www.php.net\nCategory: common\n*/\n\n/**\n * @param {HLJSApi} hljs\n * @returns {LanguageDetail}\n * */\nfunction php(hljs) {\n  const regex = hljs.regex;\n  // negative look-ahead tries to avoid matching patterns that are not\n  // Perl at all like $ident$, @ident@, etc.\n  const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;\n  const IDENT_RE = regex.concat(\n    /[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/,\n    NOT_PERL_ETC);\n  // Will not detect camelCase classes\n  const PASCAL_CASE_CLASS_NAME_RE = regex.concat(\n    /(\\\\?[A-Z][a-z0-9_\\x7f-\\xff]+|\\\\?[A-Z]+(?=[A-Z][a-z0-9_\\x7f-\\xff])){1,}/,\n    NOT_PERL_ETC);\n  const VARIABLE = {\n    scope: 'variable',\n    match: '\\\\$+' + IDENT_RE,\n  };\n  const PREPROCESSOR = {\n    scope: 'meta',\n    variants: [\n      { begin: /<\\?php/, relevance: 10 }, // boost for obvious PHP\n      { begin: /<\\?=/ },\n      // less relevant per PSR-1 which says not to use short-tags\n      { begin: /<\\?/, relevance: 0.1 },\n      { begin: /\\?>/ } // end php tag\n    ]\n  };\n  const SUBST = {\n    scope: 'subst',\n    variants: [\n      { begin: /\\$\\w+/ },\n      {\n        begin: /\\{\\$/,\n        end: /\\}/\n      }\n    ]\n  };\n  const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null, });\n  const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null,\n    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),\n  });\n  const HEREDOC = hljs.END_SAME_AS_BEGIN({\n    begin: /<<<[ \\t]*(\\w+)\\n/,\n    end: /[ \\t]*(\\w+)\\b/,\n    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),\n  });\n  // list of valid whitespaces because non-breaking space might be part of a IDENT_RE\n  const WHITESPACE = '[ \\t\\n]';\n  const STRING = {\n    scope: 'string',\n    variants: [\n      DOUBLE_QUOTED,\n      SINGLE_QUOTED,\n      HEREDOC\n    ]\n  };\n  const NUMBER = {\n    scope: 'number',\n    variants: [\n      { begin: `\\\\b0[bB][01]+(?:_[01]+)*\\\\b` }, // Binary w/ underscore support\n      { begin: `\\\\b0[oO][0-7]+(?:_[0-7]+)*\\\\b` }, // Octals w/ underscore support\n      { begin: `\\\\b0[xX][\\\\da-fA-F]+(?:_[\\\\da-fA-F]+)*\\\\b` }, // Hex w/ underscore support\n      // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.\n      { begin: `(?:\\\\b\\\\d+(?:_\\\\d+)*(\\\\.(?:\\\\d+(?:_\\\\d+)*))?|\\\\B\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?` }\n    ],\n    relevance: 0\n  };\n  const LITERALS = [\n    \"false\",\n    \"null\",\n    \"true\"\n  ];\n  const KWS = [\n    // Magic constants:\n    // <https://www.php.net/manual/en/language.constants.predefined.php>\n    \"__CLASS__\",\n    \"__DIR__\",\n    \"__FILE__\",\n    \"__FUNCTION__\",\n    \"__COMPILER_HALT_OFFSET__\",\n    \"__LINE__\",\n    \"__METHOD__\",\n    \"__NAMESPACE__\",\n    \"__TRAIT__\",\n    // Function that look like language construct or language construct that look like function:\n    // List of keywords that may not require parenthesis\n    \"die\",\n    \"echo\",\n    \"exit\",\n    \"include\",\n    \"include_once\",\n    \"print\",\n    \"require\",\n    \"require_once\",\n    // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table\n    // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +\n    // Other keywords:\n    // <https://www.php.net/manual/en/reserved.php>\n    // <https://www.php.net/manual/en/language.types.type-juggling.php>\n    \"array\",\n    \"abstract\",\n    \"and\",\n    \"as\",\n    \"binary\",\n    \"bool\",\n    \"boolean\",\n    \"break\",\n    \"callable\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"clone\",\n    \"const\",\n    \"continue\",\n    \"declare\",\n    \"default\",\n    \"do\",\n    \"double\",\n    \"else\",\n    \"elseif\",\n    \"empty\",\n    \"enddeclare\",\n    \"endfor\",\n    \"endforeach\",\n    \"endif\",\n    \"endswitch\",\n    \"endwhile\",\n    \"enum\",\n    \"eval\",\n    \"extends\",\n    \"final\",\n    \"finally\",\n    \"float\",\n    \"for\",\n    \"foreach\",\n    \"from\",\n    \"global\",\n    \"goto\",\n    \"if\",\n    \"implements\",\n    \"instanceof\",\n    \"insteadof\",\n    \"int\",\n    \"integer\",\n    \"interface\",\n    \"isset\",\n    \"iterable\",\n    \"list\",\n    \"match|0\",\n    \"mixed\",\n    \"new\",\n    \"never\",\n    \"object\",\n    \"or\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"readonly\",\n    \"real\",\n    \"return\",\n    \"string\",\n    \"switch\",\n    \"throw\",\n    \"trait\",\n    \"try\",\n    \"unset\",\n    \"use\",\n    \"var\",\n    \"void\",\n    \"while\",\n    \"xor\",\n    \"yield\"\n  ];\n\n  const BUILT_INS = [\n    // Standard PHP library:\n    // <https://www.php.net/manual/en/book.spl.php>\n    \"Error|0\",\n    \"AppendIterator\",\n    \"ArgumentCountError\",\n    \"ArithmeticError\",\n    \"ArrayIterator\",\n    \"ArrayObject\",\n    \"AssertionError\",\n    \"BadFunctionCallException\",\n    \"BadMethodCallException\",\n    \"CachingIterator\",\n    \"CallbackFilterIterator\",\n    \"CompileError\",\n    \"Countable\",\n    \"DirectoryIterator\",\n    \"DivisionByZeroError\",\n    \"DomainException\",\n    \"EmptyIterator\",\n    \"ErrorException\",\n    \"Exception\",\n    \"FilesystemIterator\",\n    \"FilterIterator\",\n    \"GlobIterator\",\n    \"InfiniteIterator\",\n    \"InvalidArgumentException\",\n    \"IteratorIterator\",\n    \"LengthException\",\n    \"LimitIterator\",\n    \"LogicException\",\n    \"MultipleIterator\",\n    \"NoRewindIterator\",\n    \"OutOfBoundsException\",\n    \"OutOfRangeException\",\n    \"OuterIterator\",\n    \"OverflowException\",\n    \"ParentIterator\",\n    \"ParseError\",\n    \"RangeException\",\n    \"RecursiveArrayIterator\",\n    \"RecursiveCachingIterator\",\n    \"RecursiveCallbackFilterIterator\",\n    \"RecursiveDirectoryIterator\",\n    \"RecursiveFilterIterator\",\n    \"RecursiveIterator\",\n    \"RecursiveIteratorIterator\",\n    \"RecursiveRegexIterator\",\n    \"RecursiveTreeIterator\",\n    \"RegexIterator\",\n    \"RuntimeException\",\n    \"SeekableIterator\",\n    \"SplDoublyLinkedList\",\n    \"SplFileInfo\",\n    \"SplFileObject\",\n    \"SplFixedArray\",\n    \"SplHeap\",\n    \"SplMaxHeap\",\n    \"SplMinHeap\",\n    \"SplObjectStorage\",\n    \"SplObserver\",\n    \"SplPriorityQueue\",\n    \"SplQueue\",\n    \"SplStack\",\n    \"SplSubject\",\n    \"SplTempFileObject\",\n    \"TypeError\",\n    \"UnderflowException\",\n    \"UnexpectedValueException\",\n    \"UnhandledMatchError\",\n    // Reserved interfaces:\n    // <https://www.php.net/manual/en/reserved.interfaces.php>\n    \"ArrayAccess\",\n    \"BackedEnum\",\n    \"Closure\",\n    \"Fiber\",\n    \"Generator\",\n    \"Iterator\",\n    \"IteratorAggregate\",\n    \"Serializable\",\n    \"Stringable\",\n    \"Throwable\",\n    \"Traversable\",\n    \"UnitEnum\",\n    \"WeakReference\",\n    \"WeakMap\",\n    // Reserved classes:\n    // <https://www.php.net/manual/en/reserved.classes.php>\n    \"Directory\",\n    \"__PHP_Incomplete_Class\",\n    \"parent\",\n    \"php_user_filter\",\n    \"self\",\n    \"static\",\n    \"stdClass\"\n  ];\n\n  /** Dual-case keywords\n   *\n   * [\"then\",\"FILE\"] =>\n   *     [\"then\", \"THEN\", \"FILE\", \"file\"]\n   *\n   * @param {string[]} items */\n  const dualCase = (items) => {\n    /** @type string[] */\n    const result = [];\n    items.forEach(item => {\n      result.push(item);\n      if (item.toLowerCase() === item) {\n        result.push(item.toUpperCase());\n      } else {\n        result.push(item.toLowerCase());\n      }\n    });\n    return result;\n  };\n\n  const KEYWORDS = {\n    keyword: KWS,\n    literal: dualCase(LITERALS),\n    built_in: BUILT_INS,\n  };\n\n  /**\n   * @param {string[]} items */\n  const normalizeKeywords = (items) => {\n    return items.map(item => {\n      return item.replace(/\\|\\d+$/, \"\");\n    });\n  };\n\n  const CONSTRUCTOR_CALL = { variants: [\n    {\n      match: [\n        /new/,\n        regex.concat(WHITESPACE, \"+\"),\n        // to prevent built ins from being confused as the class constructor call\n        regex.concat(\"(?!\", normalizeKeywords(BUILT_INS).join(\"\\\\b|\"), \"\\\\b)\"),\n        PASCAL_CASE_CLASS_NAME_RE,\n      ],\n      scope: {\n        1: \"keyword\",\n        4: \"title.class\",\n      },\n    }\n  ] };\n\n  const CONSTANT_REFERENCE = regex.concat(IDENT_RE, \"\\\\b(?!\\\\()\");\n\n  const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = { variants: [\n    {\n      match: [\n        regex.concat(\n          /::/,\n          regex.lookahead(/(?!class\\b)/)\n        ),\n        CONSTANT_REFERENCE,\n      ],\n      scope: { 2: \"variable.constant\", },\n    },\n    {\n      match: [\n        /::/,\n        /class/,\n      ],\n      scope: { 2: \"variable.language\", },\n    },\n    {\n      match: [\n        PASCAL_CASE_CLASS_NAME_RE,\n        regex.concat(\n          /::/,\n          regex.lookahead(/(?!class\\b)/)\n        ),\n        CONSTANT_REFERENCE,\n      ],\n      scope: {\n        1: \"title.class\",\n        3: \"variable.constant\",\n      },\n    },\n    {\n      match: [\n        PASCAL_CASE_CLASS_NAME_RE,\n        regex.concat(\n          \"::\",\n          regex.lookahead(/(?!class\\b)/)\n        ),\n      ],\n      scope: { 1: \"title.class\", },\n    },\n    {\n      match: [\n        PASCAL_CASE_CLASS_NAME_RE,\n        /::/,\n        /class/,\n      ],\n      scope: {\n        1: \"title.class\",\n        3: \"variable.language\",\n      },\n    }\n  ] };\n\n  const NAMED_ARGUMENT = {\n    scope: 'attr',\n    match: regex.concat(IDENT_RE, regex.lookahead(':'), regex.lookahead(/(?!::)/)),\n  };\n  const PARAMS_MODE = {\n    relevance: 0,\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [\n      NAMED_ARGUMENT,\n      VARIABLE,\n      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n      hljs.C_BLOCK_COMMENT_MODE,\n      STRING,\n      NUMBER,\n      CONSTRUCTOR_CALL,\n    ],\n  };\n  const FUNCTION_INVOKE = {\n    relevance: 0,\n    match: [\n      /\\b/,\n      // to prevent keywords from being confused as the function title\n      regex.concat(\"(?!fn\\\\b|function\\\\b|\", normalizeKeywords(KWS).join(\"\\\\b|\"), \"|\", normalizeKeywords(BUILT_INS).join(\"\\\\b|\"), \"\\\\b)\"),\n      IDENT_RE,\n      regex.concat(WHITESPACE, \"*\"),\n      regex.lookahead(/(?=\\()/)\n    ],\n    scope: { 3: \"title.function.invoke\", },\n    contains: [ PARAMS_MODE ]\n  };\n  PARAMS_MODE.contains.push(FUNCTION_INVOKE);\n\n  const ATTRIBUTE_CONTAINS = [\n    NAMED_ARGUMENT,\n    LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING,\n    NUMBER,\n    CONSTRUCTOR_CALL,\n  ];\n\n  const ATTRIBUTES = {\n    begin: regex.concat(/#\\[\\s*/, PASCAL_CASE_CLASS_NAME_RE),\n    beginScope: \"meta\",\n    end: /]/,\n    endScope: \"meta\",\n    keywords: {\n      literal: LITERALS,\n      keyword: [\n        'new',\n        'array',\n      ]\n    },\n    contains: [\n      {\n        begin: /\\[/,\n        end: /]/,\n        keywords: {\n          literal: LITERALS,\n          keyword: [\n            'new',\n            'array',\n          ]\n        },\n        contains: [\n          'self',\n          ...ATTRIBUTE_CONTAINS,\n        ]\n      },\n      ...ATTRIBUTE_CONTAINS,\n      {\n        scope: 'meta',\n        match: PASCAL_CASE_CLASS_NAME_RE\n      }\n    ]\n  };\n\n  return {\n    case_insensitive: false,\n    keywords: KEYWORDS,\n    contains: [\n      ATTRIBUTES,\n      hljs.HASH_COMMENT_MODE,\n      hljs.COMMENT('//', '$'),\n      hljs.COMMENT(\n        '/\\\\*',\n        '\\\\*/',\n        { contains: [\n          {\n            scope: 'doctag',\n            match: '@[A-Za-z]+'\n          }\n        ] }\n      ),\n      {\n        match: /__halt_compiler\\(\\);/,\n        keywords: '__halt_compiler',\n        starts: {\n          scope: \"comment\",\n          end: hljs.MATCH_NOTHING_RE,\n          contains: [\n            {\n              match: /\\?>/,\n              scope: \"meta\",\n              endsParent: true\n            }\n          ]\n        }\n      },\n      PREPROCESSOR,\n      {\n        scope: 'variable.language',\n        match: /\\$this\\b/\n      },\n      VARIABLE,\n      FUNCTION_INVOKE,\n      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n      {\n        match: [\n          /const/,\n          /\\s/,\n          IDENT_RE,\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"variable.constant\",\n        },\n      },\n      CONSTRUCTOR_CALL,\n      {\n        scope: 'function',\n        relevance: 0,\n        beginKeywords: 'fn function',\n        end: /[;{]/,\n        excludeEnd: true,\n        illegal: '[$%\\\\[]',\n        contains: [\n          { beginKeywords: 'use', },\n          hljs.UNDERSCORE_TITLE_MODE,\n          {\n            begin: '=>', // No markup, just a relevance booster\n            endsParent: true\n          },\n          {\n            scope: 'params',\n            begin: '\\\\(',\n            end: '\\\\)',\n            excludeBegin: true,\n            excludeEnd: true,\n            keywords: KEYWORDS,\n            contains: [\n              'self',\n              VARIABLE,\n              LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRING,\n              NUMBER\n            ]\n          },\n        ]\n      },\n      {\n        scope: 'class',\n        variants: [\n          {\n            beginKeywords: \"enum\",\n            illegal: /[($\"]/\n          },\n          {\n            beginKeywords: \"class interface trait\",\n            illegal: /[:($\"]/\n          }\n        ],\n        relevance: 0,\n        end: /\\{/,\n        excludeEnd: true,\n        contains: [\n          { beginKeywords: 'extends implements' },\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      // both use and namespace still use \"old style\" rules (vs multi-match)\n      // because the namespace name can include `\\` and we still want each\n      // element to be treated as its own *individual* title\n      {\n        beginKeywords: 'namespace',\n        relevance: 0,\n        end: ';',\n        illegal: /[.']/,\n        contains: [ hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { scope: \"title.class\" }) ]\n      },\n      {\n        beginKeywords: 'use',\n        relevance: 0,\n        end: ';',\n        contains: [\n          // TODO: title.function vs title.class\n          {\n            match: /\\b(as|const|function)\\b/,\n            scope: \"keyword\"\n          },\n          // TODO: could be title.class or title.function\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      STRING,\n      NUMBER,\n    ]\n  };\n}\n\nmodule.exports = php;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["case_insensitive","variants","excludeBegin","begin","endScope","contains","relevance","endsParent","built_in","keyword","scope","keywords","beginKeywords","beginScope","match","starts","excludeEnd","illegal","literal","end"]],"~:compiled-at",1676671710219,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$php.js\",\n\"lineCount\":12,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/php.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$php\\\"] = function(global,require,module,exports) {\\n/*\\nLanguage: PHP\\nAuthor: Victor Karamzin <Victor.Karamzin@enterra-inc.com>\\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>\\nWebsite: https://www.php.net\\nCategory: common\\n*/\\n\\n/**\\n * @param {HLJSApi} hljs\\n * @returns {LanguageDetail}\\n * */\\nfunction php(hljs) {\\n  const regex = hljs.regex;\\n  // negative look-ahead tries to avoid matching patterns that are not\\n  // Perl at all like $ident$, @ident@, etc.\\n  const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;\\n  const IDENT_RE = regex.concat(\\n    /[a-zA-Z_\\\\x7f-\\\\xff][a-zA-Z0-9_\\\\x7f-\\\\xff]*/,\\n    NOT_PERL_ETC);\\n  // Will not detect camelCase classes\\n  const PASCAL_CASE_CLASS_NAME_RE = regex.concat(\\n    /(\\\\\\\\?[A-Z][a-z0-9_\\\\x7f-\\\\xff]+|\\\\\\\\?[A-Z]+(?=[A-Z][a-z0-9_\\\\x7f-\\\\xff])){1,}/,\\n    NOT_PERL_ETC);\\n  const VARIABLE = {\\n    scope: 'variable',\\n    match: '\\\\\\\\$+' + IDENT_RE,\\n  };\\n  const PREPROCESSOR = {\\n    scope: 'meta',\\n    variants: [\\n      { begin: /<\\\\?php/, relevance: 10 }, // boost for obvious PHP\\n      { begin: /<\\\\?=/ },\\n      // less relevant per PSR-1 which says not to use short-tags\\n      { begin: /<\\\\?/, relevance: 0.1 },\\n      { begin: /\\\\?>/ } // end php tag\\n    ]\\n  };\\n  const SUBST = {\\n    scope: 'subst',\\n    variants: [\\n      { begin: /\\\\$\\\\w+/ },\\n      {\\n        begin: /\\\\{\\\\$/,\\n        end: /\\\\}/\\n      }\\n    ]\\n  };\\n  const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null, });\\n  const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {\\n    illegal: null,\\n    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),\\n  });\\n  const HEREDOC = hljs.END_SAME_AS_BEGIN({\\n    begin: /<<<[ \\\\t]*(\\\\w+)\\\\n/,\\n    end: /[ \\\\t]*(\\\\w+)\\\\b/,\\n    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),\\n  });\\n  // list of valid whitespaces because non-breaking space might be part of a IDENT_RE\\n  const WHITESPACE = '[ \\\\t\\\\n]';\\n  const STRING = {\\n    scope: 'string',\\n    variants: [\\n      DOUBLE_QUOTED,\\n      SINGLE_QUOTED,\\n      HEREDOC\\n    ]\\n  };\\n  const NUMBER = {\\n    scope: 'number',\\n    variants: [\\n      { begin: `\\\\\\\\b0[bB][01]+(?:_[01]+)*\\\\\\\\b` }, // Binary w/ underscore support\\n      { begin: `\\\\\\\\b0[oO][0-7]+(?:_[0-7]+)*\\\\\\\\b` }, // Octals w/ underscore support\\n      { begin: `\\\\\\\\b0[xX][\\\\\\\\da-fA-F]+(?:_[\\\\\\\\da-fA-F]+)*\\\\\\\\b` }, // Hex w/ underscore support\\n      // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.\\n      { begin: `(?:\\\\\\\\b\\\\\\\\d+(?:_\\\\\\\\d+)*(\\\\\\\\.(?:\\\\\\\\d+(?:_\\\\\\\\d+)*))?|\\\\\\\\B\\\\\\\\.\\\\\\\\d+)(?:[eE][+-]?\\\\\\\\d+)?` }\\n    ],\\n    relevance: 0\\n  };\\n  const LITERALS = [\\n    \\\"false\\\",\\n    \\\"null\\\",\\n    \\\"true\\\"\\n  ];\\n  const KWS = [\\n    // Magic constants:\\n    // <https://www.php.net/manual/en/language.constants.predefined.php>\\n    \\\"__CLASS__\\\",\\n    \\\"__DIR__\\\",\\n    \\\"__FILE__\\\",\\n    \\\"__FUNCTION__\\\",\\n    \\\"__COMPILER_HALT_OFFSET__\\\",\\n    \\\"__LINE__\\\",\\n    \\\"__METHOD__\\\",\\n    \\\"__NAMESPACE__\\\",\\n    \\\"__TRAIT__\\\",\\n    // Function that look like language construct or language construct that look like function:\\n    // List of keywords that may not require parenthesis\\n    \\\"die\\\",\\n    \\\"echo\\\",\\n    \\\"exit\\\",\\n    \\\"include\\\",\\n    \\\"include_once\\\",\\n    \\\"print\\\",\\n    \\\"require\\\",\\n    \\\"require_once\\\",\\n    // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table\\n    // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +\\n    // Other keywords:\\n    // <https://www.php.net/manual/en/reserved.php>\\n    // <https://www.php.net/manual/en/language.types.type-juggling.php>\\n    \\\"array\\\",\\n    \\\"abstract\\\",\\n    \\\"and\\\",\\n    \\\"as\\\",\\n    \\\"binary\\\",\\n    \\\"bool\\\",\\n    \\\"boolean\\\",\\n    \\\"break\\\",\\n    \\\"callable\\\",\\n    \\\"case\\\",\\n    \\\"catch\\\",\\n    \\\"class\\\",\\n    \\\"clone\\\",\\n    \\\"const\\\",\\n    \\\"continue\\\",\\n    \\\"declare\\\",\\n    \\\"default\\\",\\n    \\\"do\\\",\\n    \\\"double\\\",\\n    \\\"else\\\",\\n    \\\"elseif\\\",\\n    \\\"empty\\\",\\n    \\\"enddeclare\\\",\\n    \\\"endfor\\\",\\n    \\\"endforeach\\\",\\n    \\\"endif\\\",\\n    \\\"endswitch\\\",\\n    \\\"endwhile\\\",\\n    \\\"enum\\\",\\n    \\\"eval\\\",\\n    \\\"extends\\\",\\n    \\\"final\\\",\\n    \\\"finally\\\",\\n    \\\"float\\\",\\n    \\\"for\\\",\\n    \\\"foreach\\\",\\n    \\\"from\\\",\\n    \\\"global\\\",\\n    \\\"goto\\\",\\n    \\\"if\\\",\\n    \\\"implements\\\",\\n    \\\"instanceof\\\",\\n    \\\"insteadof\\\",\\n    \\\"int\\\",\\n    \\\"integer\\\",\\n    \\\"interface\\\",\\n    \\\"isset\\\",\\n    \\\"iterable\\\",\\n    \\\"list\\\",\\n    \\\"match|0\\\",\\n    \\\"mixed\\\",\\n    \\\"new\\\",\\n    \\\"never\\\",\\n    \\\"object\\\",\\n    \\\"or\\\",\\n    \\\"private\\\",\\n    \\\"protected\\\",\\n    \\\"public\\\",\\n    \\\"readonly\\\",\\n    \\\"real\\\",\\n    \\\"return\\\",\\n    \\\"string\\\",\\n    \\\"switch\\\",\\n    \\\"throw\\\",\\n    \\\"trait\\\",\\n    \\\"try\\\",\\n    \\\"unset\\\",\\n    \\\"use\\\",\\n    \\\"var\\\",\\n    \\\"void\\\",\\n    \\\"while\\\",\\n    \\\"xor\\\",\\n    \\\"yield\\\"\\n  ];\\n\\n  const BUILT_INS = [\\n    // Standard PHP library:\\n    // <https://www.php.net/manual/en/book.spl.php>\\n    \\\"Error|0\\\",\\n    \\\"AppendIterator\\\",\\n    \\\"ArgumentCountError\\\",\\n    \\\"ArithmeticError\\\",\\n    \\\"ArrayIterator\\\",\\n    \\\"ArrayObject\\\",\\n    \\\"AssertionError\\\",\\n    \\\"BadFunctionCallException\\\",\\n    \\\"BadMethodCallException\\\",\\n    \\\"CachingIterator\\\",\\n    \\\"CallbackFilterIterator\\\",\\n    \\\"CompileError\\\",\\n    \\\"Countable\\\",\\n    \\\"DirectoryIterator\\\",\\n    \\\"DivisionByZeroError\\\",\\n    \\\"DomainException\\\",\\n    \\\"EmptyIterator\\\",\\n    \\\"ErrorException\\\",\\n    \\\"Exception\\\",\\n    \\\"FilesystemIterator\\\",\\n    \\\"FilterIterator\\\",\\n    \\\"GlobIterator\\\",\\n    \\\"InfiniteIterator\\\",\\n    \\\"InvalidArgumentException\\\",\\n    \\\"IteratorIterator\\\",\\n    \\\"LengthException\\\",\\n    \\\"LimitIterator\\\",\\n    \\\"LogicException\\\",\\n    \\\"MultipleIterator\\\",\\n    \\\"NoRewindIterator\\\",\\n    \\\"OutOfBoundsException\\\",\\n    \\\"OutOfRangeException\\\",\\n    \\\"OuterIterator\\\",\\n    \\\"OverflowException\\\",\\n    \\\"ParentIterator\\\",\\n    \\\"ParseError\\\",\\n    \\\"RangeException\\\",\\n    \\\"RecursiveArrayIterator\\\",\\n    \\\"RecursiveCachingIterator\\\",\\n    \\\"RecursiveCallbackFilterIterator\\\",\\n    \\\"RecursiveDirectoryIterator\\\",\\n    \\\"RecursiveFilterIterator\\\",\\n    \\\"RecursiveIterator\\\",\\n    \\\"RecursiveIteratorIterator\\\",\\n    \\\"RecursiveRegexIterator\\\",\\n    \\\"RecursiveTreeIterator\\\",\\n    \\\"RegexIterator\\\",\\n    \\\"RuntimeException\\\",\\n    \\\"SeekableIterator\\\",\\n    \\\"SplDoublyLinkedList\\\",\\n    \\\"SplFileInfo\\\",\\n    \\\"SplFileObject\\\",\\n    \\\"SplFixedArray\\\",\\n    \\\"SplHeap\\\",\\n    \\\"SplMaxHeap\\\",\\n    \\\"SplMinHeap\\\",\\n    \\\"SplObjectStorage\\\",\\n    \\\"SplObserver\\\",\\n    \\\"SplPriorityQueue\\\",\\n    \\\"SplQueue\\\",\\n    \\\"SplStack\\\",\\n    \\\"SplSubject\\\",\\n    \\\"SplTempFileObject\\\",\\n    \\\"TypeError\\\",\\n    \\\"UnderflowException\\\",\\n    \\\"UnexpectedValueException\\\",\\n    \\\"UnhandledMatchError\\\",\\n    // Reserved interfaces:\\n    // <https://www.php.net/manual/en/reserved.interfaces.php>\\n    \\\"ArrayAccess\\\",\\n    \\\"BackedEnum\\\",\\n    \\\"Closure\\\",\\n    \\\"Fiber\\\",\\n    \\\"Generator\\\",\\n    \\\"Iterator\\\",\\n    \\\"IteratorAggregate\\\",\\n    \\\"Serializable\\\",\\n    \\\"Stringable\\\",\\n    \\\"Throwable\\\",\\n    \\\"Traversable\\\",\\n    \\\"UnitEnum\\\",\\n    \\\"WeakReference\\\",\\n    \\\"WeakMap\\\",\\n    // Reserved classes:\\n    // <https://www.php.net/manual/en/reserved.classes.php>\\n    \\\"Directory\\\",\\n    \\\"__PHP_Incomplete_Class\\\",\\n    \\\"parent\\\",\\n    \\\"php_user_filter\\\",\\n    \\\"self\\\",\\n    \\\"static\\\",\\n    \\\"stdClass\\\"\\n  ];\\n\\n  /** Dual-case keywords\\n   *\\n   * [\\\"then\\\",\\\"FILE\\\"] =>\\n   *     [\\\"then\\\", \\\"THEN\\\", \\\"FILE\\\", \\\"file\\\"]\\n   *\\n   * @param {string[]} items */\\n  const dualCase = (items) => {\\n    /** @type string[] */\\n    const result = [];\\n    items.forEach(item => {\\n      result.push(item);\\n      if (item.toLowerCase() === item) {\\n        result.push(item.toUpperCase());\\n      } else {\\n        result.push(item.toLowerCase());\\n      }\\n    });\\n    return result;\\n  };\\n\\n  const KEYWORDS = {\\n    keyword: KWS,\\n    literal: dualCase(LITERALS),\\n    built_in: BUILT_INS,\\n  };\\n\\n  /**\\n   * @param {string[]} items */\\n  const normalizeKeywords = (items) => {\\n    return items.map(item => {\\n      return item.replace(/\\\\|\\\\d+$/, \\\"\\\");\\n    });\\n  };\\n\\n  const CONSTRUCTOR_CALL = { variants: [\\n    {\\n      match: [\\n        /new/,\\n        regex.concat(WHITESPACE, \\\"+\\\"),\\n        // to prevent built ins from being confused as the class constructor call\\n        regex.concat(\\\"(?!\\\", normalizeKeywords(BUILT_INS).join(\\\"\\\\\\\\b|\\\"), \\\"\\\\\\\\b)\\\"),\\n        PASCAL_CASE_CLASS_NAME_RE,\\n      ],\\n      scope: {\\n        1: \\\"keyword\\\",\\n        4: \\\"title.class\\\",\\n      },\\n    }\\n  ] };\\n\\n  const CONSTANT_REFERENCE = regex.concat(IDENT_RE, \\\"\\\\\\\\b(?!\\\\\\\\()\\\");\\n\\n  const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = { variants: [\\n    {\\n      match: [\\n        regex.concat(\\n          /::/,\\n          regex.lookahead(/(?!class\\\\b)/)\\n        ),\\n        CONSTANT_REFERENCE,\\n      ],\\n      scope: { 2: \\\"variable.constant\\\", },\\n    },\\n    {\\n      match: [\\n        /::/,\\n        /class/,\\n      ],\\n      scope: { 2: \\\"variable.language\\\", },\\n    },\\n    {\\n      match: [\\n        PASCAL_CASE_CLASS_NAME_RE,\\n        regex.concat(\\n          /::/,\\n          regex.lookahead(/(?!class\\\\b)/)\\n        ),\\n        CONSTANT_REFERENCE,\\n      ],\\n      scope: {\\n        1: \\\"title.class\\\",\\n        3: \\\"variable.constant\\\",\\n      },\\n    },\\n    {\\n      match: [\\n        PASCAL_CASE_CLASS_NAME_RE,\\n        regex.concat(\\n          \\\"::\\\",\\n          regex.lookahead(/(?!class\\\\b)/)\\n        ),\\n      ],\\n      scope: { 1: \\\"title.class\\\", },\\n    },\\n    {\\n      match: [\\n        PASCAL_CASE_CLASS_NAME_RE,\\n        /::/,\\n        /class/,\\n      ],\\n      scope: {\\n        1: \\\"title.class\\\",\\n        3: \\\"variable.language\\\",\\n      },\\n    }\\n  ] };\\n\\n  const NAMED_ARGUMENT = {\\n    scope: 'attr',\\n    match: regex.concat(IDENT_RE, regex.lookahead(':'), regex.lookahead(/(?!::)/)),\\n  };\\n  const PARAMS_MODE = {\\n    relevance: 0,\\n    begin: /\\\\(/,\\n    end: /\\\\)/,\\n    keywords: KEYWORDS,\\n    contains: [\\n      NAMED_ARGUMENT,\\n      VARIABLE,\\n      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\\n      hljs.C_BLOCK_COMMENT_MODE,\\n      STRING,\\n      NUMBER,\\n      CONSTRUCTOR_CALL,\\n    ],\\n  };\\n  const FUNCTION_INVOKE = {\\n    relevance: 0,\\n    match: [\\n      /\\\\b/,\\n      // to prevent keywords from being confused as the function title\\n      regex.concat(\\\"(?!fn\\\\\\\\b|function\\\\\\\\b|\\\", normalizeKeywords(KWS).join(\\\"\\\\\\\\b|\\\"), \\\"|\\\", normalizeKeywords(BUILT_INS).join(\\\"\\\\\\\\b|\\\"), \\\"\\\\\\\\b)\\\"),\\n      IDENT_RE,\\n      regex.concat(WHITESPACE, \\\"*\\\"),\\n      regex.lookahead(/(?=\\\\()/)\\n    ],\\n    scope: { 3: \\\"title.function.invoke\\\", },\\n    contains: [ PARAMS_MODE ]\\n  };\\n  PARAMS_MODE.contains.push(FUNCTION_INVOKE);\\n\\n  const ATTRIBUTE_CONTAINS = [\\n    NAMED_ARGUMENT,\\n    LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\\n    hljs.C_BLOCK_COMMENT_MODE,\\n    STRING,\\n    NUMBER,\\n    CONSTRUCTOR_CALL,\\n  ];\\n\\n  const ATTRIBUTES = {\\n    begin: regex.concat(/#\\\\[\\\\s*/, PASCAL_CASE_CLASS_NAME_RE),\\n    beginScope: \\\"meta\\\",\\n    end: /]/,\\n    endScope: \\\"meta\\\",\\n    keywords: {\\n      literal: LITERALS,\\n      keyword: [\\n        'new',\\n        'array',\\n      ]\\n    },\\n    contains: [\\n      {\\n        begin: /\\\\[/,\\n        end: /]/,\\n        keywords: {\\n          literal: LITERALS,\\n          keyword: [\\n            'new',\\n            'array',\\n          ]\\n        },\\n        contains: [\\n          'self',\\n          ...ATTRIBUTE_CONTAINS,\\n        ]\\n      },\\n      ...ATTRIBUTE_CONTAINS,\\n      {\\n        scope: 'meta',\\n        match: PASCAL_CASE_CLASS_NAME_RE\\n      }\\n    ]\\n  };\\n\\n  return {\\n    case_insensitive: false,\\n    keywords: KEYWORDS,\\n    contains: [\\n      ATTRIBUTES,\\n      hljs.HASH_COMMENT_MODE,\\n      hljs.COMMENT('//', '$'),\\n      hljs.COMMENT(\\n        '/\\\\\\\\*',\\n        '\\\\\\\\*/',\\n        { contains: [\\n          {\\n            scope: 'doctag',\\n            match: '@[A-Za-z]+'\\n          }\\n        ] }\\n      ),\\n      {\\n        match: /__halt_compiler\\\\(\\\\);/,\\n        keywords: '__halt_compiler',\\n        starts: {\\n          scope: \\\"comment\\\",\\n          end: hljs.MATCH_NOTHING_RE,\\n          contains: [\\n            {\\n              match: /\\\\?>/,\\n              scope: \\\"meta\\\",\\n              endsParent: true\\n            }\\n          ]\\n        }\\n      },\\n      PREPROCESSOR,\\n      {\\n        scope: 'variable.language',\\n        match: /\\\\$this\\\\b/\\n      },\\n      VARIABLE,\\n      FUNCTION_INVOKE,\\n      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\\n      {\\n        match: [\\n          /const/,\\n          /\\\\s/,\\n          IDENT_RE,\\n        ],\\n        scope: {\\n          1: \\\"keyword\\\",\\n          3: \\\"variable.constant\\\",\\n        },\\n      },\\n      CONSTRUCTOR_CALL,\\n      {\\n        scope: 'function',\\n        relevance: 0,\\n        beginKeywords: 'fn function',\\n        end: /[;{]/,\\n        excludeEnd: true,\\n        illegal: '[$%\\\\\\\\[]',\\n        contains: [\\n          { beginKeywords: 'use', },\\n          hljs.UNDERSCORE_TITLE_MODE,\\n          {\\n            begin: '=>', // No markup, just a relevance booster\\n            endsParent: true\\n          },\\n          {\\n            scope: 'params',\\n            begin: '\\\\\\\\(',\\n            end: '\\\\\\\\)',\\n            excludeBegin: true,\\n            excludeEnd: true,\\n            keywords: KEYWORDS,\\n            contains: [\\n              'self',\\n              VARIABLE,\\n              LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\\n              hljs.C_BLOCK_COMMENT_MODE,\\n              STRING,\\n              NUMBER\\n            ]\\n          },\\n        ]\\n      },\\n      {\\n        scope: 'class',\\n        variants: [\\n          {\\n            beginKeywords: \\\"enum\\\",\\n            illegal: /[($\\\"]/\\n          },\\n          {\\n            beginKeywords: \\\"class interface trait\\\",\\n            illegal: /[:($\\\"]/\\n          }\\n        ],\\n        relevance: 0,\\n        end: /\\\\{/,\\n        excludeEnd: true,\\n        contains: [\\n          { beginKeywords: 'extends implements' },\\n          hljs.UNDERSCORE_TITLE_MODE\\n        ]\\n      },\\n      // both use and namespace still use \\\"old style\\\" rules (vs multi-match)\\n      // because the namespace name can include `\\\\` and we still want each\\n      // element to be treated as its own *individual* title\\n      {\\n        beginKeywords: 'namespace',\\n        relevance: 0,\\n        end: ';',\\n        illegal: /[.']/,\\n        contains: [ hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { scope: \\\"title.class\\\" }) ]\\n      },\\n      {\\n        beginKeywords: 'use',\\n        relevance: 0,\\n        end: ';',\\n        contains: [\\n          // TODO: title.function vs title.class\\n          {\\n            match: /\\\\b(as|const|function)\\\\b/,\\n            scope: \\\"keyword\\\"\\n          },\\n          // TODO: could be title.class or title.function\\n          hljs.UNDERSCORE_TITLE_MODE\\n        ]\\n      },\\n      STRING,\\n      NUMBER,\\n    ]\\n  };\\n}\\n\\nmodule.exports = php;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"php\",\"hljs\",\"regex\",\"NOT_PERL_ETC\",\"IDENT_RE\",\"concat\",\"PASCAL_CASE_CLASS_NAME_RE\",\"VARIABLE\",\"scope\",\"match\",\"SUBST\",\"variants\",\"begin\",\"end\",\"SINGLE_QUOTED\",\"inherit\",\"APOS_STRING_MODE\",\"illegal\",\"DOUBLE_QUOTED\",\"QUOTE_STRING_MODE\",\"contains\",\"HEREDOC\",\"END_SAME_AS_BEGIN\",\"STRING\",\"NUMBER\",\"relevance\",\"LITERALS\",\"KWS\",\"BUILT_INS\",\"KEYWORDS\",\"keyword\",\"literal\",\"dualCase\",\"items\",\"result\",\"forEach\",\"item\",\"push\",\"toLowerCase\",\"toUpperCase\",\"built_in\",\"normalizeKeywords\",\"map\",\"replace\",\"CONSTRUCTOR_CALL\",\"WHITESPACE\",\"join\",\"CONSTANT_REFERENCE\",\"LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON\",\"lookahead\",\"NAMED_ARGUMENT\",\"PARAMS_MODE\",\"keywords\",\"C_BLOCK_COMMENT_MODE\",\"FUNCTION_INVOKE\",\"ATTRIBUTE_CONTAINS\",\"ATTRIBUTES\",\"beginScope\",\"endScope\",\"case_insensitive\",\"HASH_COMMENT_MODE\",\"COMMENT\",\"starts\",\"MATCH_NOTHING_RE\",\"endsParent\",\"PREPROCESSOR\",\"beginKeywords\",\"excludeEnd\",\"UNDERSCORE_TITLE_MODE\",\"excludeBegin\"]\n}\n"]