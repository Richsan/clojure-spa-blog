["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/less.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$less=function(global,require,module,exports){function less(Prism){Prism.register(_css.default);Prism.languages.less=Prism.languages.extend(\"css\",{comment:[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(^|[^\\\\])\\/\\/.*/,lookbehind:!0}],atrule:{pattern:/@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,inside:{punctuation:/[:()]/}},selector:{pattern:/(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\ninside:{variable:/@+[\\w-]+/}},property:/(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,operator:/[+\\-*\\/]/});Prism.languages.insertBefore(\"less\",\"property\",{variable:[{pattern:/@[\\w-]+\\s*:/,inside:{punctuation:/:/}},/@@?[\\w-]+/],\"mixin-usage\":{pattern:/([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,lookbehind:!0,alias:\"function\"}})}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=less;var _css=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require(\"module$node_modules$refractor$lang$css\"));\nless.displayName=\"less\";less.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$less\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = less;\n\nvar _css = _interopRequireDefault(require(\"./css.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-nocheck\nless.displayName = 'less';\nless.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction less(Prism) {\n  Prism.register(_css.default);\n  /* FIXME :\n  :extend() is not handled specifically : its highlighting is buggy.\n  Mixin usage must be inside a ruleset to be highlighted.\n  At-rules (e.g. import) containing interpolations are buggy.\n  Detached rulesets are highlighted as at-rules.\n  A comment before a mixin usage prevents the latter to be properly highlighted.\n  */\n\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(^|[^\\\\])\\/\\/.*/,\n      lookbehind: true\n    }],\n    atrule: {\n      pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n    operator: /[+\\-*\\/]/\n  });\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [// Variable declaration (the colon must be consumed!)\n    {\n      pattern: /@[\\w-]+\\s*:/,\n      inside: {\n        punctuation: /:/\n      }\n    }, // Variable usage\n    /@@?[\\w-]+/],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  });\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$refractor$lang$css"]],"~:properties",["^5",["punctuation","aliases","atrule","operator","displayName","__esModule","lookbehind","value","variable","property","pattern","less","inside","alias","selector","comment","default"]],"~:compiled-at",1676841365365,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$less.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBpGC,QAASA,KAAI,CAACC,KAAD,CAAQ,CACnBA,KAAMC,CAAAA,QAAN,CAAeC,IAAKC,CAAAA,OAApB,CASAH,MAAMI,CAAAA,SAAUL,CAAAA,IAAhB,CAAuBC,KAAMI,CAAAA,SAAUC,CAAAA,MAAhB,CAAuB,KAAvB,CAA8B,CACnDC,QAAS,CAAC,kBAAD,CAAqB,CAC5BC,QAAS,iBADmB,CAE5BC,WAAY,CAAA,CAFgB,CAArB,CAD0C,CAKnDC,OAAQ,CACNF,QAAS,yEADH,CAENG,OAAQ,CACNC,YAAa,OADP,CAFF,CAL2C,CAYnDC,SAAU,CACRL,QAAS,yGADD;AAERG,OAAQ,CAENG,SAAU,UAFJ,CAFA,CAZyC,CAmBnDC,SAAU,yCAnByC,CAoBnDC,SAAU,UApByC,CAA9B,CAsBvBf,MAAMI,CAAAA,SAAUY,CAAAA,YAAhB,CAA6B,MAA7B,CAAqC,UAArC,CAAiD,CAC/CH,SAAU,CACV,CACEN,QAAS,aADX,CAEEG,OAAQ,CACNC,YAAa,GADP,CAFV,CADU,CAOV,WAPU,CADqC,CAS/C,cAAe,CACbJ,QAAS,qCADI,CAEbC,WAAY,CAAA,CAFC,CAGbS,MAAO,UAHM,CATgC,CAAjD,CAhCmB,CAdrBC,MAAOC,CAAAA,cAAP,CAAsBrB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CsB,MAAO,CAAA,CADoC,CAA7C,CAGAtB,QAAQK,CAAAA,OAAR,CAAkBJ,IAElB,KAAIG,KAEJmB,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEnB,QAASmB,GAAX,CAAvC,CAF1B,CAAuB1B,OAAA,CAAQ,wCAAR,CAAvB,CAKXG;IAAKyB,CAAAA,WAAL,CAAmB,MACnBzB,KAAK0B,CAAAA,OAAL,CAAe,EAdqF;\",\n\"sources\":[\"node_modules/refractor/lang/less.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$less\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = less;\\n\\nvar _css = _interopRequireDefault(require(\\\"./css.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// @ts-nocheck\\nless.displayName = 'less';\\nless.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction less(Prism) {\\n  Prism.register(_css.default);\\n  /* FIXME :\\n  :extend() is not handled specifically : its highlighting is buggy.\\n  Mixin usage must be inside a ruleset to be highlighted.\\n  At-rules (e.g. import) containing interpolations are buggy.\\n  Detached rulesets are highlighted as at-rules.\\n  A comment before a mixin usage prevents the latter to be properly highlighted.\\n  */\\n\\n  Prism.languages.less = Prism.languages.extend('css', {\\n    comment: [/\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\//, {\\n      pattern: /(^|[^\\\\\\\\])\\\\/\\\\/.*/,\\n      lookbehind: true\\n    }],\\n    atrule: {\\n      pattern: /@[\\\\w-](?:\\\\((?:[^(){}]|\\\\([^(){}]*\\\\))*\\\\)|[^(){};\\\\s]|\\\\s+(?!\\\\s))*?(?=\\\\s*\\\\{)/,\\n      inside: {\\n        punctuation: /[:()]/\\n      }\\n    },\\n    // selectors and mixins are considered the same\\n    selector: {\\n      pattern: /(?:@\\\\{[\\\\w-]+\\\\}|[^{};\\\\s@])(?:@\\\\{[\\\\w-]+\\\\}|\\\\((?:[^(){}]|\\\\([^(){}]*\\\\))*\\\\)|[^(){};@\\\\s]|\\\\s+(?!\\\\s))*?(?=\\\\s*\\\\{)/,\\n      inside: {\\n        // mixin parameters\\n        variable: /@+[\\\\w-]+/\\n      }\\n    },\\n    property: /(?:@\\\\{[\\\\w-]+\\\\}|[\\\\w-])+(?:\\\\+_?)?(?=\\\\s*:)/,\\n    operator: /[+\\\\-*\\\\/]/\\n  });\\n  Prism.languages.insertBefore('less', 'property', {\\n    variable: [// Variable declaration (the colon must be consumed!)\\n    {\\n      pattern: /@[\\\\w-]+\\\\s*:/,\\n      inside: {\\n        punctuation: /:/\\n      }\\n    }, // Variable usage\\n    /@@?[\\\\w-]+/],\\n    'mixin-usage': {\\n      pattern: /([{;]\\\\s*)[.#](?!\\\\d)[\\\\w-].*?(?=[(;])/,\\n      lookbehind: true,\\n      alias: 'function'\\n    }\\n  });\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"less\",\"Prism\",\"register\",\"_css\",\"default\",\"languages\",\"extend\",\"comment\",\"pattern\",\"lookbehind\",\"atrule\",\"inside\",\"punctuation\",\"selector\",\"variable\",\"property\",\"operator\",\"insertBefore\",\"alias\",\"Object\",\"defineProperty\",\"value\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"displayName\",\"aliases\"]\n}\n"]