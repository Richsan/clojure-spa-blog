["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-gfm-autolink-literal/lib/index.js"],"~:js","shadow$provide.module$node_modules$mdast_util_gfm_autolink_literal$lib$index=function(global,require,module,exports){function enterLiteralAutolinkValue(token){this.config.enter.autolinkProtocol.call(this,token)}function findUrl(_,protocol,domain,path,match){_=\"\";if(!previous(match))return!1;/^w/i.test(protocol)&&(domain=protocol+domain,protocol=\"\",_=\"http://\");match=domain.split(\".\");match=2>match.length||match[match.length-1]&&(/_/.test(match[match.length-1])||!/[a-zA-Z\\d]/.test(match[match.length-\n1]))||match[match.length-2]&&(/_/.test(match[match.length-2])||!/[a-zA-Z\\d]/.test(match[match.length-2]))?!1:!0;if(!match)return!1;domain+=path;if(path=/[!\"&'),.:;<>?\\]}]+$/.exec(domain)){domain=domain.slice(0,path.index);path=path[0];match=path.indexOf(\")\");for(var openingParens=(0,_ccount.ccount)(domain,\"(\"),closingParens=(0,_ccount.ccount)(domain,\")\");-1!==match&&openingParens>closingParens;)domain+=path.slice(0,match+1),path=path.slice(match+1),match=path.indexOf(\")\"),closingParens++;domain=[domain,\npath]}else domain=[domain,void 0];if(!domain[0])return!1;protocol={type:\"link\",title:null,url:_+protocol+domain[0],children:[{type:\"text\",value:protocol+domain[0]}]};return domain[1]?[protocol,{type:\"text\",value:domain[1]}]:protocol}function findEmail(_,atext,label,match){return!previous(match,!0)||/[-\\d_]$/.test(label)?!1:{type:\"link\",title:null,url:\"mailto:\"+atext+\"@\"+label,children:[{type:\"text\",value:atext+\"@\"+label}]}}function previous(match,email){const code=match.input.charCodeAt(match.index-\n1);return(0===match.index||(0,_micromarkUtilCharacter.unicodeWhitespace)(code)||(0,_micromarkUtilCharacter.unicodePunctuation)(code))&&(!email||47!==code)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.gfmAutolinkLiteralToMarkdown=exports.gfmAutolinkLiteralFromMarkdown=void 0;var _ccount=require(\"module$node_modules$ccount$index\"),_mdastUtilFindAndReplace=require(\"module$node_modules$mdast_util_find_and_replace$index\"),_micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\");\nglobal=[\"autolink\",\"link\",\"image\",\"label\"];exports.gfmAutolinkLiteralFromMarkdown={transforms:[function(tree){(0,_mdastUtilFindAndReplace.findAndReplace)(tree,[[/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi,findUrl],[/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g,findEmail]],{ignore:[\"link\",\"linkReference\"]})}],enter:{literalAutolink:function(token){this.enter({type:\"link\",title:null,url:\"\",children:[]},token)},literalAutolinkEmail:enterLiteralAutolinkValue,literalAutolinkHttp:enterLiteralAutolinkValue,\nliteralAutolinkWww:enterLiteralAutolinkValue},exit:{literalAutolink:function(token){this.exit(token)},literalAutolinkEmail:function(token){this.config.exit.autolinkEmail.call(this,token)},literalAutolinkHttp:function(token){this.config.exit.autolinkProtocol.call(this,token)},literalAutolinkWww:function(token){this.config.exit.data.call(this,token);this.stack[this.stack.length-1].url=\"http://\"+this.sliceSerialize(token)}}};exports.gfmAutolinkLiteralToMarkdown={unsafe:[{character:\"@\",before:\"[+\\\\-.\\\\w]\",\nafter:\"[\\\\-.\\\\w]\",inConstruct:\"phrasing\",notInConstruct:global},{character:\".\",before:\"[Ww]\",after:\"[\\\\-.\\\\w]\",inConstruct:\"phrasing\",notInConstruct:global},{character:\":\",before:\"[ps]\",after:\"\\\\/\",inConstruct:\"phrasing\",notInConstruct:global}]}}","~:source","shadow$provide[\"module$node_modules$mdast_util_gfm_autolink_literal$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gfmAutolinkLiteralToMarkdown = exports.gfmAutolinkLiteralFromMarkdown = void 0;\n\nvar _ccount = require(\"ccount\");\n\nvar _mdastUtilFindAndReplace = require(\"mdast-util-find-and-replace\");\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing';\n/** @type {Array<ConstructName>} */\n\nconst notInConstruct = ['autolink', 'link', 'image', 'label']; // To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\n\nconst gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n};\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\n\nexports.gfmAutolinkLiteralFromMarkdown = gfmAutolinkLiteralFromMarkdown;\nconst gfmAutolinkLiteralToMarkdown = {\n  unsafe: [{\n    character: '@',\n    before: '[+\\\\-.\\\\w]',\n    after: '[\\\\-.\\\\w]',\n    inConstruct,\n    notInConstruct\n  }, {\n    character: '.',\n    before: '[Ww]',\n    after: '[\\\\-.\\\\w]',\n    inConstruct,\n    notInConstruct\n  }, {\n    character: ':',\n    before: '[ps]',\n    after: '\\\\/',\n    inConstruct,\n    notInConstruct\n  }]\n};\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\nexports.gfmAutolinkLiteralToMarkdown = gfmAutolinkLiteralToMarkdown;\n\nfunction enterLiteralAutolink(token) {\n  this.enter({\n    type: 'link',\n    title: null,\n    url: '',\n    children: []\n  }, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token);\n  const node = this.stack[this.stack.length - 1];\n  node.url = 'http://' + this.sliceSerialize(token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitLiteralAutolink(token) {\n  this.exit(token);\n}\n/** @type {FromMarkdownTransform} */\n\n\nfunction transformGfmAutolinkLiterals(tree) {\n  (0, _mdastUtilFindAndReplace.findAndReplace)(tree, [[/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl], [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]], {\n    ignore: ['link', 'linkReference']\n  });\n}\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\n\n\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''; // Not an expected previous character.\n\n  if (!previous(match)) {\n    return false;\n  } // Treat `www` as part of the domain.\n\n\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain;\n    protocol = '';\n    prefix = 'http://';\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false;\n  }\n\n  const parts = splitUrl(domain + path);\n  if (!parts[0]) return false;\n  /** @type {Link} */\n\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{\n      type: 'text',\n      value: protocol + parts[0]\n    }]\n  };\n\n  if (parts[1]) {\n    return [result, {\n      type: 'text',\n      value: parts[1]\n    }];\n  }\n\n  return result;\n}\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\n\n\nfunction findEmail(_, atext, label, match) {\n  if ( // Not an expected previous character.\n  !previous(match, true) || // Label ends in not allowed character.\n  /[-\\d_]$/.test(label)) {\n    return false;\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{\n      type: 'text',\n      value: atext + '@' + label\n    }]\n  };\n}\n/**\n * @param {string} domain\n * @returns {boolean}\n */\n\n\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.');\n\n  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 2]))) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\n\n\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url);\n\n  if (!trailExec) {\n    return [url, undefined];\n  }\n\n  url = url.slice(0, trailExec.index);\n  let trail = trailExec[0];\n  let closingParenIndex = trail.indexOf(')');\n  const openingParens = (0, _ccount.ccount)(url, '(');\n  let closingParens = (0, _ccount.ccount)(url, ')');\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1);\n    trail = trail.slice(closingParenIndex + 1);\n    closingParenIndex = trail.indexOf(')');\n    closingParens++;\n  }\n\n  return [url, trail];\n}\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\n\n\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1);\n  return (match.index === 0 || (0, _micromarkUtilCharacter.unicodeWhitespace)(code) || (0, _micromarkUtilCharacter.unicodePunctuation)(code)) && (!email || code !== 47);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js","~$module$node_modules$ccount$index","~$module$node_modules$mdast_util_find_and_replace$index"]],"~:properties",["^5",["ignore","url","after","literalAutolinkWww","children","__esModule","literalAutolinkEmail","unsafe","notInConstruct","value","character","literalAutolink","inConstruct","title","type","literalAutolinkHttp","transforms","exit","gfmAutolinkLiteralToMarkdown","before","gfmAutolinkLiteralFromMarkdown","enter"]],"~:compiled-at",1676841365335,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_gfm_autolink_literal$lib$index.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mdast-util-gfm-autolink-literal/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_gfm_autolink_literal$lib$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.gfmAutolinkLiteralToMarkdown = exports.gfmAutolinkLiteralFromMarkdown = void 0;\\n\\nvar _ccount = require(\\\"ccount\\\");\\n\\nvar _mdastUtilFindAndReplace = require(\\\"mdast-util-find-and-replace\\\");\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('mdast').Link} Link\\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\\n *\\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\\n *\\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\\n *\\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\\n */\\n\\n/** @type {ConstructName} */\\nconst inConstruct = 'phrasing';\\n/** @type {Array<ConstructName>} */\\n\\nconst notInConstruct = ['autolink', 'link', 'image', 'label']; // To do: next major: expose functions instead of extensions.\\n\\n/**\\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\\n *\\n * @type {FromMarkdownExtension}\\n */\\n\\nconst gfmAutolinkLiteralFromMarkdown = {\\n  transforms: [transformGfmAutolinkLiterals],\\n  enter: {\\n    literalAutolink: enterLiteralAutolink,\\n    literalAutolinkEmail: enterLiteralAutolinkValue,\\n    literalAutolinkHttp: enterLiteralAutolinkValue,\\n    literalAutolinkWww: enterLiteralAutolinkValue\\n  },\\n  exit: {\\n    literalAutolink: exitLiteralAutolink,\\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\\n    literalAutolinkWww: exitLiteralAutolinkWww\\n  }\\n};\\n/**\\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\\n *\\n * @type {ToMarkdownExtension}\\n */\\n\\nexports.gfmAutolinkLiteralFromMarkdown = gfmAutolinkLiteralFromMarkdown;\\nconst gfmAutolinkLiteralToMarkdown = {\\n  unsafe: [{\\n    character: '@',\\n    before: '[+\\\\\\\\-.\\\\\\\\w]',\\n    after: '[\\\\\\\\-.\\\\\\\\w]',\\n    inConstruct,\\n    notInConstruct\\n  }, {\\n    character: '.',\\n    before: '[Ww]',\\n    after: '[\\\\\\\\-.\\\\\\\\w]',\\n    inConstruct,\\n    notInConstruct\\n  }, {\\n    character: ':',\\n    before: '[ps]',\\n    after: '\\\\\\\\/',\\n    inConstruct,\\n    notInConstruct\\n  }]\\n};\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\nexports.gfmAutolinkLiteralToMarkdown = gfmAutolinkLiteralToMarkdown;\\n\\nfunction enterLiteralAutolink(token) {\\n  this.enter({\\n    type: 'link',\\n    title: null,\\n    url: '',\\n    children: []\\n  }, token);\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction enterLiteralAutolinkValue(token) {\\n  this.config.enter.autolinkProtocol.call(this, token);\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction exitLiteralAutolinkHttp(token) {\\n  this.config.exit.autolinkProtocol.call(this, token);\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction exitLiteralAutolinkWww(token) {\\n  this.config.exit.data.call(this, token);\\n  const node = this.stack[this.stack.length - 1];\\n  node.url = 'http://' + this.sliceSerialize(token);\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction exitLiteralAutolinkEmail(token) {\\n  this.config.exit.autolinkEmail.call(this, token);\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction exitLiteralAutolink(token) {\\n  this.exit(token);\\n}\\n/** @type {FromMarkdownTransform} */\\n\\n\\nfunction transformGfmAutolinkLiterals(tree) {\\n  (0, _mdastUtilFindAndReplace.findAndReplace)(tree, [[/(https?:\\\\/\\\\/|www(?=\\\\.))([-.\\\\w]+)([^ \\\\t\\\\r\\\\n]*)/gi, findUrl], [/([-.\\\\w+]+)@([-\\\\w]+(?:\\\\.[-\\\\w]+)+)/g, findEmail]], {\\n    ignore: ['link', 'linkReference']\\n  });\\n}\\n/**\\n * @type {ReplaceFunction}\\n * @param {string} _\\n * @param {string} protocol\\n * @param {string} domain\\n * @param {string} path\\n * @param {RegExpMatchObject} match\\n * @returns {Link | Array<PhrasingContent> | false}\\n */\\n// eslint-disable-next-line max-params\\n\\n\\nfunction findUrl(_, protocol, domain, path, match) {\\n  let prefix = ''; // Not an expected previous character.\\n\\n  if (!previous(match)) {\\n    return false;\\n  } // Treat `www` as part of the domain.\\n\\n\\n  if (/^w/i.test(protocol)) {\\n    domain = protocol + domain;\\n    protocol = '';\\n    prefix = 'http://';\\n  }\\n\\n  if (!isCorrectDomain(domain)) {\\n    return false;\\n  }\\n\\n  const parts = splitUrl(domain + path);\\n  if (!parts[0]) return false;\\n  /** @type {Link} */\\n\\n  const result = {\\n    type: 'link',\\n    title: null,\\n    url: prefix + protocol + parts[0],\\n    children: [{\\n      type: 'text',\\n      value: protocol + parts[0]\\n    }]\\n  };\\n\\n  if (parts[1]) {\\n    return [result, {\\n      type: 'text',\\n      value: parts[1]\\n    }];\\n  }\\n\\n  return result;\\n}\\n/**\\n * @type {ReplaceFunction}\\n * @param {string} _\\n * @param {string} atext\\n * @param {string} label\\n * @param {RegExpMatchObject} match\\n * @returns {Link | false}\\n */\\n\\n\\nfunction findEmail(_, atext, label, match) {\\n  if ( // Not an expected previous character.\\n  !previous(match, true) || // Label ends in not allowed character.\\n  /[-\\\\d_]$/.test(label)) {\\n    return false;\\n  }\\n\\n  return {\\n    type: 'link',\\n    title: null,\\n    url: 'mailto:' + atext + '@' + label,\\n    children: [{\\n      type: 'text',\\n      value: atext + '@' + label\\n    }]\\n  };\\n}\\n/**\\n * @param {string} domain\\n * @returns {boolean}\\n */\\n\\n\\nfunction isCorrectDomain(domain) {\\n  const parts = domain.split('.');\\n\\n  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\\\\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\\\\d]/.test(parts[parts.length - 2]))) {\\n    return false;\\n  }\\n\\n  return true;\\n}\\n/**\\n * @param {string} url\\n * @returns {[string, string | undefined]}\\n */\\n\\n\\nfunction splitUrl(url) {\\n  const trailExec = /[!\\\"&'),.:;<>?\\\\]}]+$/.exec(url);\\n\\n  if (!trailExec) {\\n    return [url, undefined];\\n  }\\n\\n  url = url.slice(0, trailExec.index);\\n  let trail = trailExec[0];\\n  let closingParenIndex = trail.indexOf(')');\\n  const openingParens = (0, _ccount.ccount)(url, '(');\\n  let closingParens = (0, _ccount.ccount)(url, ')');\\n\\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\\n    url += trail.slice(0, closingParenIndex + 1);\\n    trail = trail.slice(closingParenIndex + 1);\\n    closingParenIndex = trail.indexOf(')');\\n    closingParens++;\\n  }\\n\\n  return [url, trail];\\n}\\n/**\\n * @param {RegExpMatchObject} match\\n * @param {boolean | null | undefined} [email=false]\\n * @returns {boolean}\\n */\\n\\n\\nfunction previous(match, email) {\\n  const code = match.input.charCodeAt(match.index - 1);\\n  return (match.index === 0 || (0, _micromarkUtilCharacter.unicodeWhitespace)(code) || (0, _micromarkUtilCharacter.unicodePunctuation)(code)) && (!email || code !== 47);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"enterLiteralAutolinkValue\",\"token\",\"config\",\"enter\",\"autolinkProtocol\",\"call\",\"findUrl\",\"_\",\"protocol\",\"domain\",\"path\",\"match\",\"prefix\",\"previous\",\"test\",\"parts\",\"split\",\"length\",\"trailExec\",\"exec\",\"url\",\"slice\",\"index\",\"trail\",\"closingParenIndex\",\"indexOf\",\"openingParens\",\"_ccount\",\"ccount\",\"closingParens\",\"undefined\",\"result\",\"type\",\"title\",\"children\",\"value\",\"findEmail\",\"atext\",\"label\",\"email\",\"code\",\"input\",\"charCodeAt\",\"_micromarkUtilCharacter\",\"unicodeWhitespace\",\"unicodePunctuation\",\"Object\",\"defineProperty\",\"gfmAutolinkLiteralToMarkdown\",\"gfmAutolinkLiteralFromMarkdown\",\"_mdastUtilFindAndReplace\",\"notInConstruct\",\"transforms\",\"transformGfmAutolinkLiterals\",\"tree\",\"findAndReplace\",\"ignore\",\"literalAutolink\",\"enterLiteralAutolink\",\"literalAutolinkEmail\",\"literalAutolinkHttp\",\"literalAutolinkWww\",\"exit\",\"exitLiteralAutolink\",\"exitLiteralAutolinkEmail\",\"autolinkEmail\",\"exitLiteralAutolinkHttp\",\"exitLiteralAutolinkWww\",\"data\",\"stack\",\"node\",\"sliceSerialize\",\"unsafe\",\"character\",\"before\",\"after\",\"inConstruct\"]\n}\n"]