["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/parse5/lib/extensions/error-reporting/mixin-base.js"],"~:js","shadow$provide.module$node_modules$parse5$lib$extensions$error_reporting$mixin_base=function(global,require,module,exports){global=require(\"module$node_modules$parse5$lib$utils$mixin\");class ErrorReportingMixinBase extends global{constructor(host,opts){super(host);this.posTracker=null;this.onParseError=opts.onParseError}_setErrorLocation(err){err.startLine=err.endLine=this.posTracker.line;err.startCol=err.endCol=this.posTracker.col;err.startOffset=err.endOffset=this.posTracker.offset}_reportError(code){code=\n{code,startLine:-1,startCol:-1,startOffset:-1,endLine:-1,endCol:-1,endOffset:-1};this._setErrorLocation(code);this.onParseError(code)}_getOverriddenMethods(mxn){return{_err(code){mxn._reportError(code)}}}}module.exports=ErrorReportingMixinBase}","~:source","shadow$provide[\"module$node_modules$parse5$lib$extensions$error_reporting$mixin_base\"] = function(global,require,module,exports) {\n'use strict';\n\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingMixinBase extends Mixin {\n    constructor(host, opts) {\n        super(host);\n\n        this.posTracker = null;\n        this.onParseError = opts.onParseError;\n    }\n\n    _setErrorLocation(err) {\n        err.startLine = err.endLine = this.posTracker.line;\n        err.startCol = err.endCol = this.posTracker.col;\n        err.startOffset = err.endOffset = this.posTracker.offset;\n    }\n\n    _reportError(code) {\n        const err = {\n            code: code,\n            startLine: -1,\n            startCol: -1,\n            startOffset: -1,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1\n        };\n\n        this._setErrorLocation(err);\n        this.onParseError(err);\n    }\n\n    _getOverriddenMethods(mxn) {\n        return {\n            _err(code) {\n                mxn._reportError(code);\n            }\n        };\n    }\n}\n\nmodule.exports = ErrorReportingMixinBase;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$parse5$lib$utils$mixin","~$shadow.js"]],"~:properties",["^5",["endLine","endOffset","startOffset","startLine","posTracker","onParseError","startCol","endCol","code"]],"~:compiled-at",1676667638415,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$parse5$lib$extensions$error_reporting$mixin_base.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAAA,CAAQH,OAAA,CAAQ,4CAAR,CAEd,MAAMI,wBAAN,QAAsCD,OAAtC,CACIE,WAAW,CAACC,IAAD,CAAOC,IAAP,CAAa,CACpB,KAAA,CAAMD,IAAN,CAEA,KAAKE,CAAAA,UAAL,CAAkB,IAClB,KAAKC,CAAAA,YAAL,CAAoBF,IAAKE,CAAAA,YAJL,CAOxBC,iBAAiB,CAACC,GAAD,CAAM,CACnBA,GAAIC,CAAAA,SAAJ,CAAgBD,GAAIE,CAAAA,OAApB,CAA8B,IAAKL,CAAAA,UAAWM,CAAAA,IAC9CH,IAAII,CAAAA,QAAJ,CAAeJ,GAAIK,CAAAA,MAAnB,CAA4B,IAAKR,CAAAA,UAAWS,CAAAA,GAC5CN,IAAIO,CAAAA,WAAJ,CAAkBP,GAAIQ,CAAAA,SAAtB,CAAkC,IAAKX,CAAAA,UAAWY,CAAAA,MAH/B,CAMvBC,YAAY,CAACC,IAAD,CAAO,CACTX,IAAAA;AAAM,CACFW,IADE,CAERV,UAAW,CAAC,CAFJ,CAGRG,SAAU,CAAC,CAHH,CAIRG,YAAa,CAAC,CAJN,CAKRL,QAAS,CAAC,CALF,CAMRG,OAAQ,CAAC,CAND,CAORG,UAAW,CAAC,CAPJ,CAUZ,KAAKT,CAAAA,iBAAL,CAAuBC,IAAvB,CACA,KAAKF,CAAAA,YAAL,CAAkBE,IAAlB,CAZe,CAenBY,qBAAqB,CAACC,GAAD,CAAM,CACvB,MAAO,CACHC,IAAI,CAACH,IAAD,CAAO,CACPE,GAAIH,CAAAA,YAAJ,CAAiBC,IAAjB,CADO,CADR,CADgB,CA7B/B,CAsCArB,MAAOC,CAAAA,OAAP,CAAiBE,uBA3CgH;\",\n\"sources\":[\"node_modules/parse5/lib/extensions/error-reporting/mixin-base.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$parse5$lib$extensions$error_reporting$mixin_base\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nconst Mixin = require('../../utils/mixin');\\n\\nclass ErrorReportingMixinBase extends Mixin {\\n    constructor(host, opts) {\\n        super(host);\\n\\n        this.posTracker = null;\\n        this.onParseError = opts.onParseError;\\n    }\\n\\n    _setErrorLocation(err) {\\n        err.startLine = err.endLine = this.posTracker.line;\\n        err.startCol = err.endCol = this.posTracker.col;\\n        err.startOffset = err.endOffset = this.posTracker.offset;\\n    }\\n\\n    _reportError(code) {\\n        const err = {\\n            code: code,\\n            startLine: -1,\\n            startCol: -1,\\n            startOffset: -1,\\n            endLine: -1,\\n            endCol: -1,\\n            endOffset: -1\\n        };\\n\\n        this._setErrorLocation(err);\\n        this.onParseError(err);\\n    }\\n\\n    _getOverriddenMethods(mxn) {\\n        return {\\n            _err(code) {\\n                mxn._reportError(code);\\n            }\\n        };\\n    }\\n}\\n\\nmodule.exports = ErrorReportingMixinBase;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Mixin\",\"ErrorReportingMixinBase\",\"constructor\",\"host\",\"opts\",\"posTracker\",\"onParseError\",\"_setErrorLocation\",\"err\",\"startLine\",\"endLine\",\"line\",\"startCol\",\"endCol\",\"col\",\"startOffset\",\"endOffset\",\"offset\",\"_reportError\",\"code\",\"_getOverriddenMethods\",\"mxn\",\"_err\"]\n}\n"]