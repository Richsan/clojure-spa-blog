["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-gfm-footnote/lib/index.js"],"~:js","shadow$provide.module$node_modules$mdast_util_gfm_footnote$lib$index=function(global,require,module,exports){function enterFootnoteDefinition(token){this.enter({type:\"footnoteDefinition\",identifier:\"\",label:\"\",children:[]},token)}function enterFootnoteDefinitionLabelString(){this.buffer()}function exitFootnoteDefinitionLabelString(token){const label=this.resume(),node=this.stack[this.stack.length-1];node.label=label;node.identifier=(0,_micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase()}\nfunction exitFootnoteDefinition(token){this.exit(token)}function enterFootnoteCall(token){this.enter({type:\"footnoteReference\",identifier:\"\",label:\"\"},token)}function enterFootnoteCallString(){this.buffer()}function exitFootnoteCallString(token){const label=this.resume(),node=this.stack[this.stack.length-1];node.label=label;node.identifier=(0,_micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase()}function exitFootnoteCall(token){this.exit(token)}function footnoteReference(node,\n_,context,safeOptions){_=(0,_track.track)(safeOptions);safeOptions=_.move(\"[^\");const exit=context.enter(\"footnoteReference\"),subexit=context.enter(\"reference\");safeOptions+=_.move((0,_safe.safe)(context,(0,_association.association)(node),{..._.current(),before:safeOptions,after:\"]\"}));subexit();exit();return safeOptions+=_.move(\"]\")}function footnoteDefinition(node,_,context,safeOptions){_=(0,_track.track)(safeOptions);safeOptions=_.move(\"[^\");const exit=context.enter(\"footnoteDefinition\"),subexit=\ncontext.enter(\"label\");safeOptions+=_.move((0,_safe.safe)(context,(0,_association.association)(node),{..._.current(),before:safeOptions,after:\"]\"}));subexit();safeOptions+=_.move(\"]:\"+(node.children&&0<node.children.length?\" \":\"\"));_.shift(4);safeOptions+=_.move((0,_indentLines.indentLines)((0,_containerFlow.containerFlow)(node,context,_.current()),map));exit();return safeOptions}function map(line,index,blank){return 0===index?line:(blank?\"\":\"    \")+line}Object.defineProperty(exports,\"__esModule\",\n{value:!0});exports.gfmFootnoteFromMarkdown=function(){return{enter:{gfmFootnoteDefinition:enterFootnoteDefinition,gfmFootnoteDefinitionLabelString:enterFootnoteDefinitionLabelString,gfmFootnoteCall:enterFootnoteCall,gfmFootnoteCallString:enterFootnoteCallString},exit:{gfmFootnoteDefinition:exitFootnoteDefinition,gfmFootnoteDefinitionLabelString:exitFootnoteDefinitionLabelString,gfmFootnoteCall:exitFootnoteCall,gfmFootnoteCallString:exitFootnoteCallString}}};exports.gfmFootnoteToMarkdown=function(){return{unsafe:[{character:\"[\",\ninConstruct:[\"phrasing\",\"label\",\"reference\"]}],handlers:{footnoteDefinition,footnoteReference}}};var _micromarkUtilNormalizeIdentifier=require(\"module$node_modules$micromark_util_normalize_identifier$index\"),_association=require(\"module$node_modules$mdast_util_to_markdown$lib$util$association\"),_containerFlow=require(\"module$node_modules$mdast_util_to_markdown$lib$util$container_flow\"),_indentLines=require(\"module$node_modules$mdast_util_to_markdown$lib$util$indent_lines\"),_safe=require(\"module$node_modules$mdast_util_to_markdown$lib$util$safe\"),\n_track=require(\"module$node_modules$mdast_util_to_markdown$lib$util$track\");footnoteReference.peek=function(){return\"[\"}}","~:source","shadow$provide[\"module$node_modules$mdast_util_gfm_footnote$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gfmFootnoteFromMarkdown = gfmFootnoteFromMarkdown;\nexports.gfmFootnoteToMarkdown = gfmFootnoteToMarkdown;\n\nvar _micromarkUtilNormalizeIdentifier = require(\"micromark-util-normalize-identifier\");\n\nvar _association = require(\"mdast-util-to-markdown/lib/util/association.js\");\n\nvar _containerFlow = require(\"mdast-util-to-markdown/lib/util/container-flow.js\");\n\nvar _indentLines = require(\"mdast-util-to-markdown/lib/util/indent-lines.js\");\n\nvar _safe = require(\"mdast-util-to-markdown/lib/util/safe.js\");\n\nvar _track = require(\"mdast-util-to-markdown/lib/util/track.js\");\n\n/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\nfootnoteReference.peek = footnoteReferencePeek; // To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\n\nfunction gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  };\n}\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\n\n\nfunction gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{\n      character: '[',\n      inConstruct: ['phrasing', 'label', 'reference']\n    }],\n    handlers: {\n      footnoteDefinition,\n      footnoteReference\n    }\n  };\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterFootnoteDefinition(token) {\n  this.enter({\n    type: 'footnoteDefinition',\n    identifier: '',\n    label: '',\n    children: []\n  }, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume();\n  const node = this.stack[this.stack.length - 1];\n  node.label = label;\n  node.identifier = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteDefinition(token) {\n  this.exit(token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterFootnoteCall(token) {\n  this.enter({\n    type: 'footnoteReference',\n    identifier: '',\n    label: ''\n  }, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterFootnoteCallString() {\n  this.buffer();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteCallString(token) {\n  const label = this.resume();\n  const node = this.stack[this.stack.length - 1];\n  node.label = label;\n  node.identifier = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteCall(token) {\n  this.exit(token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\n\n\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = (0, _track.track)(safeOptions);\n  let value = tracker.move('[^');\n  const exit = context.enter('footnoteReference');\n  const subexit = context.enter('reference');\n  value += tracker.move((0, _safe.safe)(context, (0, _association.association)(node), { ...tracker.current(),\n    before: value,\n    after: ']'\n  }));\n  subexit();\n  exit();\n  value += tracker.move(']');\n  return value;\n}\n/** @type {ToMarkdownHandle} */\n\n\nfunction footnoteReferencePeek() {\n  return '[';\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\n\n\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = (0, _track.track)(safeOptions);\n  let value = tracker.move('[^');\n  const exit = context.enter('footnoteDefinition');\n  const subexit = context.enter('label');\n  value += tracker.move((0, _safe.safe)(context, (0, _association.association)(node), { ...tracker.current(),\n    before: value,\n    after: ']'\n  }));\n  subexit();\n  value += tracker.move(']:' + (node.children && node.children.length > 0 ? ' ' : ''));\n  tracker.shift(4);\n  value += tracker.move((0, _indentLines.indentLines)((0, _containerFlow.containerFlow)(node, context, tracker.current()), map));\n  exit();\n  return value;\n}\n/** @type {Map} */\n\n\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line;\n  }\n\n  return (blank ? '' : '    ') + line;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_normalize_identifier$index","~$module$node_modules$mdast_util_to_markdown$lib$util$track","~$module$node_modules$mdast_util_to_markdown$lib$util$indent_lines","~$module$node_modules$mdast_util_to_markdown$lib$util$container_flow","~$shadow.js","~$module$node_modules$mdast_util_to_markdown$lib$util$association","~$module$node_modules$mdast_util_to_markdown$lib$util$safe"]],"~:properties",["^5",["gfmFootnoteCallString","gfmFootnoteFromMarkdown","peek","gfmFootnoteDefinitionLabelString","after","footnoteReference","footnoteDefinition","handlers","label","children","__esModule","gfmFootnoteToMarkdown","unsafe","value","character","identifier","gfmFootnoteCall","inConstruct","type","exit","gfmFootnoteDefinition","before","enter"]],"~:compiled-at",1676841365338,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_gfm_footnote$lib$index.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/mdast-util-gfm-footnote/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_gfm_footnote$lib$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.gfmFootnoteFromMarkdown = gfmFootnoteFromMarkdown;\\nexports.gfmFootnoteToMarkdown = gfmFootnoteToMarkdown;\\n\\nvar _micromarkUtilNormalizeIdentifier = require(\\\"micromark-util-normalize-identifier\\\");\\n\\nvar _association = require(\\\"mdast-util-to-markdown/lib/util/association.js\\\");\\n\\nvar _containerFlow = require(\\\"mdast-util-to-markdown/lib/util/container-flow.js\\\");\\n\\nvar _indentLines = require(\\\"mdast-util-to-markdown/lib/util/indent-lines.js\\\");\\n\\nvar _safe = require(\\\"mdast-util-to-markdown/lib/util/safe.js\\\");\\n\\nvar _track = require(\\\"mdast-util-to-markdown/lib/util/track.js\\\");\\n\\n/**\\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\\n * @typedef {import('mdast-util-to-markdown').Map} Map\\n */\\nfootnoteReference.peek = footnoteReferencePeek; // To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\\n// utilities on `state`.\\n\\n/**\\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\\n * in markdown.\\n *\\n * @returns {FromMarkdownExtension}\\n *   Extension for `mdast-util-from-markdown`.\\n */\\n\\nfunction gfmFootnoteFromMarkdown() {\\n  return {\\n    enter: {\\n      gfmFootnoteDefinition: enterFootnoteDefinition,\\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\\n      gfmFootnoteCall: enterFootnoteCall,\\n      gfmFootnoteCallString: enterFootnoteCallString\\n    },\\n    exit: {\\n      gfmFootnoteDefinition: exitFootnoteDefinition,\\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\\n      gfmFootnoteCall: exitFootnoteCall,\\n      gfmFootnoteCallString: exitFootnoteCallString\\n    }\\n  };\\n}\\n/**\\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\\n * in markdown.\\n *\\n * @returns {ToMarkdownExtension}\\n *   Extension for `mdast-util-to-markdown`.\\n */\\n\\n\\nfunction gfmFootnoteToMarkdown() {\\n  return {\\n    // This is on by default already.\\n    unsafe: [{\\n      character: '[',\\n      inConstruct: ['phrasing', 'label', 'reference']\\n    }],\\n    handlers: {\\n      footnoteDefinition,\\n      footnoteReference\\n    }\\n  };\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction enterFootnoteDefinition(token) {\\n  this.enter({\\n    type: 'footnoteDefinition',\\n    identifier: '',\\n    label: '',\\n    children: []\\n  }, token);\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction enterFootnoteDefinitionLabelString() {\\n  this.buffer();\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction exitFootnoteDefinitionLabelString(token) {\\n  const label = this.resume();\\n  const node = this.stack[this.stack.length - 1];\\n  node.label = label;\\n  node.identifier = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction exitFootnoteDefinition(token) {\\n  this.exit(token);\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction enterFootnoteCall(token) {\\n  this.enter({\\n    type: 'footnoteReference',\\n    identifier: '',\\n    label: ''\\n  }, token);\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction enterFootnoteCallString() {\\n  this.buffer();\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction exitFootnoteCallString(token) {\\n  const label = this.resume();\\n  const node = this.stack[this.stack.length - 1];\\n  node.label = label;\\n  node.identifier = (0, _micromarkUtilNormalizeIdentifier.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction exitFootnoteCall(token) {\\n  this.exit(token);\\n}\\n/**\\n * @type {ToMarkdownHandle}\\n * @param {FootnoteReference} node\\n */\\n\\n\\nfunction footnoteReference(node, _, context, safeOptions) {\\n  const tracker = (0, _track.track)(safeOptions);\\n  let value = tracker.move('[^');\\n  const exit = context.enter('footnoteReference');\\n  const subexit = context.enter('reference');\\n  value += tracker.move((0, _safe.safe)(context, (0, _association.association)(node), { ...tracker.current(),\\n    before: value,\\n    after: ']'\\n  }));\\n  subexit();\\n  exit();\\n  value += tracker.move(']');\\n  return value;\\n}\\n/** @type {ToMarkdownHandle} */\\n\\n\\nfunction footnoteReferencePeek() {\\n  return '[';\\n}\\n/**\\n * @type {ToMarkdownHandle}\\n * @param {FootnoteDefinition} node\\n */\\n\\n\\nfunction footnoteDefinition(node, _, context, safeOptions) {\\n  const tracker = (0, _track.track)(safeOptions);\\n  let value = tracker.move('[^');\\n  const exit = context.enter('footnoteDefinition');\\n  const subexit = context.enter('label');\\n  value += tracker.move((0, _safe.safe)(context, (0, _association.association)(node), { ...tracker.current(),\\n    before: value,\\n    after: ']'\\n  }));\\n  subexit();\\n  value += tracker.move(']:' + (node.children && node.children.length > 0 ? ' ' : ''));\\n  tracker.shift(4);\\n  value += tracker.move((0, _indentLines.indentLines)((0, _containerFlow.containerFlow)(node, context, tracker.current()), map));\\n  exit();\\n  return value;\\n}\\n/** @type {Map} */\\n\\n\\nfunction map(line, index, blank) {\\n  if (index === 0) {\\n    return line;\\n  }\\n\\n  return (blank ? '' : '    ') + line;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"enterFootnoteDefinition\",\"token\",\"enter\",\"type\",\"identifier\",\"label\",\"children\",\"enterFootnoteDefinitionLabelString\",\"buffer\",\"exitFootnoteDefinitionLabelString\",\"resume\",\"node\",\"stack\",\"length\",\"_micromarkUtilNormalizeIdentifier\",\"normalizeIdentifier\",\"sliceSerialize\",\"toLowerCase\",\"exitFootnoteDefinition\",\"exit\",\"enterFootnoteCall\",\"enterFootnoteCallString\",\"exitFootnoteCallString\",\"exitFootnoteCall\",\"footnoteReference\",\"_\",\"context\",\"safeOptions\",\"tracker\",\"_track\",\"track\",\"value\",\"move\",\"subexit\",\"_safe\",\"safe\",\"_association\",\"association\",\"current\",\"before\",\"after\",\"footnoteDefinition\",\"shift\",\"_indentLines\",\"indentLines\",\"_containerFlow\",\"containerFlow\",\"map\",\"line\",\"index\",\"blank\",\"Object\",\"defineProperty\",\"gfmFootnoteFromMarkdown\",\"gfmFootnoteDefinition\",\"gfmFootnoteDefinitionLabelString\",\"gfmFootnoteCall\",\"gfmFootnoteCallString\",\"gfmFootnoteToMarkdown\",\"unsafe\",\"character\",\"inConstruct\",\"handlers\",\"peek\",\"footnoteReferencePeek\"]\n}\n"]