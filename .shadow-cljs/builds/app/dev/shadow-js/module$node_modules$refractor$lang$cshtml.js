["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/cshtml.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$cshtml=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function cshtml(Prism$jscomp$0){Prism$jscomp$0.register(_csharp.default);Prism$jscomp$0.register(_markup.default);(function(Prism){function nested(pattern,depthLog2){for(var i=0;i<depthLog2;i++)pattern=pattern.replace(/<self>/g,function(){return\"(?:\"+pattern+\")\"});return pattern.replace(/<self>/g,\"[^\\\\s\\\\S]\").replace(/<str>/g,\n\"(?:\"+stringLike+\")\").replace(/<comment>/g,\"(?:\"+commentLike+\")\")}var commentLike=/\\/(?![/*])|\\/\\/.*[\\r\\n]|\\/\\*[^*]*(?:\\*(?!\\/)[^*]*)*\\*\\//.source,stringLike=/@(?!\")|\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|@\"(?:[^\\\\\"]|\"\"|\\\\[\\s\\S])*\"(?!\")/.source+\"|\"+/'(?:(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'|(?=[^\\\\](?!')))/.source,round=nested(/\\((?:[^()'\"@/]|<str>|<comment>|<self>)*\\)/.source,2),square=nested(/\\[(?:[^\\[\\]'\"@/]|<str>|<comment>|<self>)*\\]/.source,1),curly=nested(/\\{(?:[^{}'\"@/]|<str>|<comment>|<self>)*\\}/.source,\n2),angle=nested(/<(?:[^<>'\"@/]|<comment>|<self>)*>/.source,1),inlineCs=/@/.source+/(?:await\\b\\s*)?/.source+\"(?:\"+/(?!await\\b)\\w+\\b/.source+\"|\"+round+\")(?:\"+/[?!]?\\.\\w+\\b/.source+\"|(?:\"+angle+\")?\"+round+\"|\"+square+\")*\"+/(?![?!\\.(\\[]|<(?!\\/))/.source;square=\"(?:\"+/\"[^\"@]*\"|'[^'@]*'|[^\\s'\"@>=]+(?=[\\s>])/.source+\"|[\\\"'][^\\\"'@]*(?:(?:\"+(/@(?![\\w()])/.source+\"|\"+inlineCs)+\")[^\\\"'@]*)+[\\\"'])\";var tagAttrs=/(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*<tagAttrValue>|(?=[\\s/>])))+)?/.source.replace(/<tagAttrValue>/,square);\nangle=/(?!\\d)[^\\s>\\/=$<%]+/.source+tagAttrs+/\\s*\\/?>/.source;tagAttrs=/\\B@?/.source+\"(?:\"+/<([a-zA-Z][\\w:]*)/.source+tagAttrs+/\\s*>/.source+\"(?:\"+(/[^<]/.source+\"|\"+/<\\/?(?!\\1\\b)/.source+angle+\"|\"+nested(/<\\1/.source+tagAttrs+/\\s*>/.source+\"(?:\"+(/[^<]/.source+\"|\"+/<\\/?(?!\\1\\b)/.source+angle+\"|\\x3cself\\x3e)*\")+/<\\/\\1\\s*>/.source,2))+\")*\"+/<\\/\\1\\s*>/.source+\"|\"+/</.source+angle+\")\";Prism.languages.cshtml=Prism.languages.extend(\"markup\",{});tagAttrs={pattern:/\\S[\\s\\S]*/,alias:\"language-csharp\",inside:Prism.languages.insertBefore(\"csharp\",\n\"string\",{html:{pattern:RegExp(tagAttrs),greedy:!0,inside:Prism.languages.cshtml}},{csharp:Prism.languages.extend(\"csharp\",{})})};inlineCs={pattern:RegExp(/(^|[^@])/.source+inlineCs),lookbehind:!0,greedy:!0,alias:\"variable\",inside:{keyword:/^@/,csharp:tagAttrs}};Prism.languages.cshtml.tag.pattern=RegExp(/<\\/?/.source+angle);Prism.languages.cshtml.tag.inside[\"attr-value\"].pattern=RegExp(/=\\s*/.source+square);Prism.languages.insertBefore(\"inside\",\"punctuation\",{value:inlineCs},Prism.languages.cshtml.tag.inside[\"attr-value\"]);\nPrism.languages.insertBefore(\"cshtml\",\"prolog\",{\"razor-comment\":{pattern:/@\\*[\\s\\S]*?\\*@/,greedy:!0,alias:\"comment\"},block:{pattern:RegExp(/(^|[^@])@/.source+\"(?:\"+[curly,/(?:code|functions)\\s*/.source+curly,/(?:for|foreach|lock|switch|using|while)\\s*/.source+round+/\\s*/.source+curly,/do\\s*/.source+curly+/\\s*while\\s*/.source+round+/(?:\\s*;)?/.source,/try\\s*/.source+curly+/\\s*catch\\s*/.source+round+/\\s*/.source+curly+/\\s*finally\\s*/.source+curly,/if\\s*/.source+round+/\\s*/.source+curly+\"(?:\"+/\\s*else/.source+\n\"(?:\"+/\\s+if\\s*/.source+round+\")?\"+/\\s*/.source+curly+\")*\",/helper\\s+\\w+\\s*/.source+round+/\\s*/.source+curly].join(\"|\")+\")\"),lookbehind:!0,greedy:!0,inside:{keyword:/^@\\w*/,csharp:tagAttrs}},directive:{pattern:/^([ \\t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\\s).*/m,lookbehind:!0,greedy:!0,inside:{keyword:/^@\\w+/,csharp:tagAttrs}},value:inlineCs,\"delegate-operator\":{pattern:/(^|[^@])@(?=<)/,\nlookbehind:!0,alias:\"operator\"}});Prism.languages.razor=Prism.languages.cshtml})(Prism$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=cshtml;var _csharp=_interopRequireDefault(require(\"module$node_modules$refractor$lang$csharp\")),_markup=_interopRequireDefault(require(\"module$node_modules$refractor$lang$markup\"));cshtml.displayName=\"cshtml\";cshtml.aliases=[\"razor\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$cshtml\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = cshtml;\n\nvar _csharp = _interopRequireDefault(require(\"./csharp.js\"));\n\nvar _markup = _interopRequireDefault(require(\"./markup.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-nocheck\ncshtml.displayName = 'cshtml';\ncshtml.aliases = ['razor'];\n/** @type {import('../core.js').Syntax} */\n\nfunction cshtml(Prism) {\n  Prism.register(_csharp.default);\n  Prism.register(_markup.default) // Docs:\n  // https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-5.0&tabs=visual-studio\n  // https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0\n  ;\n\n  (function (Prism) {\n    var commentLike = /\\/(?![/*])|\\/\\/.*[\\r\\n]|\\/\\*[^*]*(?:\\*(?!\\/)[^*]*)*\\*\\//.source;\n    var stringLike = /@(?!\")|\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|@\"(?:[^\\\\\"]|\"\"|\\\\[\\s\\S])*\"(?!\")/.source + '|' + /'(?:(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'|(?=[^\\\\](?!')))/.source;\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<self>/g, function () {\n          return '(?:' + pattern + ')';\n        });\n      }\n\n      return pattern.replace(/<self>/g, '[^\\\\s\\\\S]').replace(/<str>/g, '(?:' + stringLike + ')').replace(/<comment>/g, '(?:' + commentLike + ')');\n    }\n\n    var round = nested(/\\((?:[^()'\"@/]|<str>|<comment>|<self>)*\\)/.source, 2);\n    var square = nested(/\\[(?:[^\\[\\]'\"@/]|<str>|<comment>|<self>)*\\]/.source, 1);\n    var curly = nested(/\\{(?:[^{}'\"@/]|<str>|<comment>|<self>)*\\}/.source, 2);\n    var angle = nested(/<(?:[^<>'\"@/]|<comment>|<self>)*>/.source, 1);\n    var inlineCs = /@/.source + /(?:await\\b\\s*)?/.source + '(?:' + /(?!await\\b)\\w+\\b/.source + '|' + round + ')' + '(?:' + /[?!]?\\.\\w+\\b/.source + '|' + '(?:' + angle + ')?' + round + '|' + square + ')*' + /(?![?!\\.(\\[]|<(?!\\/))/.source; // Note about the above bracket patterns:\n    // They all ignore HTML expressions that might be in the C# code. This is a problem because HTML (like strings and\n    // comments) is parsed differently. This is a huge problem because HTML might contain brackets and quotes which\n    // messes up the bracket and string counting implemented by the above patterns.\n    //\n    // This problem is not fixable because 1) HTML expression are highly context sensitive and very difficult to detect\n    // and 2) they require one capturing group at every nested level. See the `tagRegion` pattern to admire the\n    // complexity of an HTML expression.\n    //\n    // To somewhat alleviate the problem a bit, the patterns for characters (e.g. 'a') is very permissive, it also\n    // allows invalid characters to support HTML expressions like this: <p>That's it!</p>.\n\n    var tagAttrInlineCs = /@(?![\\w()])/.source + '|' + inlineCs;\n    var tagAttrValue = '(?:' + /\"[^\"@]*\"|'[^'@]*'|[^\\s'\"@>=]+(?=[\\s>])/.source + '|' + '[\"\\'][^\"\\'@]*(?:(?:' + tagAttrInlineCs + ')[^\"\\'@]*)+[\"\\']' + ')';\n    var tagAttrs = /(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*<tagAttrValue>|(?=[\\s/>])))+)?/.source.replace(/<tagAttrValue>/, tagAttrValue);\n    var tagContent = /(?!\\d)[^\\s>\\/=$<%]+/.source + tagAttrs + /\\s*\\/?>/.source;\n    var tagRegion = /\\B@?/.source + '(?:' + /<([a-zA-Z][\\w:]*)/.source + tagAttrs + /\\s*>/.source + '(?:' + (/[^<]/.source + '|' + // all tags that are not the start tag\n    // eslint-disable-next-line regexp/strict\n    /<\\/?(?!\\1\\b)/.source + tagContent + '|' + // nested start tag\n    nested( // eslint-disable-next-line regexp/strict\n    /<\\1/.source + tagAttrs + /\\s*>/.source + '(?:' + (/[^<]/.source + '|' + // all tags that are not the start tag\n    // eslint-disable-next-line regexp/strict\n    /<\\/?(?!\\1\\b)/.source + tagContent + '|' + '<self>') + ')*' + // eslint-disable-next-line regexp/strict\n    /<\\/\\1\\s*>/.source, 2)) + ')*' + // eslint-disable-next-line regexp/strict\n    /<\\/\\1\\s*>/.source + '|' + /</.source + tagContent + ')'; // Now for the actual language definition(s):\n    //\n    // Razor as a language has 2 parts:\n    //  1) CSHTML: A markup-like language that has been extended with inline C# code expressions and blocks.\n    //  2) C#+HTML: A variant of C# that can contain CSHTML tags as expressions.\n    //\n    // In the below code, both CSHTML and C#+HTML will be create as separate language definitions that reference each\n    // other. However, only CSHTML will be exported via `Prism.languages`.\n\n    Prism.languages.cshtml = Prism.languages.extend('markup', {});\n    var csharpWithHtml = Prism.languages.insertBefore('csharp', 'string', {\n      html: {\n        pattern: RegExp(tagRegion),\n        greedy: true,\n        inside: Prism.languages.cshtml\n      }\n    }, {\n      csharp: Prism.languages.extend('csharp', {})\n    });\n    var cs = {\n      pattern: /\\S[\\s\\S]*/,\n      alias: 'language-csharp',\n      inside: csharpWithHtml\n    };\n    var inlineValue = {\n      pattern: RegExp(/(^|[^@])/.source + inlineCs),\n      lookbehind: true,\n      greedy: true,\n      alias: 'variable',\n      inside: {\n        keyword: /^@/,\n        csharp: cs\n      }\n    };\n    Prism.languages.cshtml.tag.pattern = RegExp(/<\\/?/.source + tagContent);\n    Prism.languages.cshtml.tag.inside['attr-value'].pattern = RegExp(/=\\s*/.source + tagAttrValue);\n    Prism.languages.insertBefore('inside', 'punctuation', {\n      value: inlineValue\n    }, Prism.languages.cshtml.tag.inside['attr-value']);\n    Prism.languages.insertBefore('cshtml', 'prolog', {\n      'razor-comment': {\n        pattern: /@\\*[\\s\\S]*?\\*@/,\n        greedy: true,\n        alias: 'comment'\n      },\n      block: {\n        pattern: RegExp(/(^|[^@])@/.source + '(?:' + [// @{ ... }\n        curly, // @code{ ... }\n        /(?:code|functions)\\s*/.source + curly, // @for (...) { ... }\n        /(?:for|foreach|lock|switch|using|while)\\s*/.source + round + /\\s*/.source + curly, // @do { ... } while (...);\n        /do\\s*/.source + curly + /\\s*while\\s*/.source + round + /(?:\\s*;)?/.source, // @try { ... } catch (...) { ... } finally { ... }\n        /try\\s*/.source + curly + /\\s*catch\\s*/.source + round + /\\s*/.source + curly + /\\s*finally\\s*/.source + curly, // @if (...) {...} else if (...) {...} else {...}\n        /if\\s*/.source + round + /\\s*/.source + curly + '(?:' + /\\s*else/.source + '(?:' + /\\s+if\\s*/.source + round + ')?' + /\\s*/.source + curly + ')*', // @helper Ident(params) { ... }\n        /helper\\s+\\w+\\s*/.source + round + /\\s*/.source + curly].join('|') + ')'),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^@\\w*/,\n          csharp: cs\n        }\n      },\n      directive: {\n        pattern: /^([ \\t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\\s).*/m,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^@\\w+/,\n          csharp: cs\n        }\n      },\n      value: inlineValue,\n      'delegate-operator': {\n        pattern: /(^|[^@])@(?=<)/,\n        lookbehind: true,\n        alias: 'operator'\n      }\n    });\n    Prism.languages.razor = Prism.languages.cshtml;\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$refractor$lang$csharp","~$module$node_modules$refractor$lang$markup","~$shadow.js"]],"~:properties",["^5",["aliases","directive","displayName","__esModule","block","csharp","lookbehind","value","keyword","greedy","pattern","inside","razor","alias","html","default","cshtml"]],"~:compiled-at",1676841365454,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$cshtml.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/cshtml.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$cshtml\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = cshtml;\\n\\nvar _csharp = _interopRequireDefault(require(\\\"./csharp.js\\\"));\\n\\nvar _markup = _interopRequireDefault(require(\\\"./markup.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// @ts-nocheck\\ncshtml.displayName = 'cshtml';\\ncshtml.aliases = ['razor'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction cshtml(Prism) {\\n  Prism.register(_csharp.default);\\n  Prism.register(_markup.default) // Docs:\\n  // https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-5.0&tabs=visual-studio\\n  // https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0\\n  ;\\n\\n  (function (Prism) {\\n    var commentLike = /\\\\/(?![/*])|\\\\/\\\\/.*[\\\\r\\\\n]|\\\\/\\\\*[^*]*(?:\\\\*(?!\\\\/)[^*]*)*\\\\*\\\\//.source;\\n    var stringLike = /@(?!\\\")|\\\"(?:[^\\\\r\\\\n\\\\\\\\\\\"]|\\\\\\\\.)*\\\"|@\\\"(?:[^\\\\\\\\\\\"]|\\\"\\\"|\\\\\\\\[\\\\s\\\\S])*\\\"(?!\\\")/.source + '|' + /'(?:(?:[^\\\\r\\\\n'\\\\\\\\]|\\\\\\\\.|\\\\\\\\[Uux][\\\\da-fA-F]{1,8})'|(?=[^\\\\\\\\](?!')))/.source;\\n    /**\\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\\n     *\\n     * @param {string} pattern\\n     * @param {number} depthLog2\\n     * @returns {string}\\n     */\\n\\n    function nested(pattern, depthLog2) {\\n      for (var i = 0; i < depthLog2; i++) {\\n        pattern = pattern.replace(/<self>/g, function () {\\n          return '(?:' + pattern + ')';\\n        });\\n      }\\n\\n      return pattern.replace(/<self>/g, '[^\\\\\\\\s\\\\\\\\S]').replace(/<str>/g, '(?:' + stringLike + ')').replace(/<comment>/g, '(?:' + commentLike + ')');\\n    }\\n\\n    var round = nested(/\\\\((?:[^()'\\\"@/]|<str>|<comment>|<self>)*\\\\)/.source, 2);\\n    var square = nested(/\\\\[(?:[^\\\\[\\\\]'\\\"@/]|<str>|<comment>|<self>)*\\\\]/.source, 1);\\n    var curly = nested(/\\\\{(?:[^{}'\\\"@/]|<str>|<comment>|<self>)*\\\\}/.source, 2);\\n    var angle = nested(/<(?:[^<>'\\\"@/]|<comment>|<self>)*>/.source, 1);\\n    var inlineCs = /@/.source + /(?:await\\\\b\\\\s*)?/.source + '(?:' + /(?!await\\\\b)\\\\w+\\\\b/.source + '|' + round + ')' + '(?:' + /[?!]?\\\\.\\\\w+\\\\b/.source + '|' + '(?:' + angle + ')?' + round + '|' + square + ')*' + /(?![?!\\\\.(\\\\[]|<(?!\\\\/))/.source; // Note about the above bracket patterns:\\n    // They all ignore HTML expressions that might be in the C# code. This is a problem because HTML (like strings and\\n    // comments) is parsed differently. This is a huge problem because HTML might contain brackets and quotes which\\n    // messes up the bracket and string counting implemented by the above patterns.\\n    //\\n    // This problem is not fixable because 1) HTML expression are highly context sensitive and very difficult to detect\\n    // and 2) they require one capturing group at every nested level. See the `tagRegion` pattern to admire the\\n    // complexity of an HTML expression.\\n    //\\n    // To somewhat alleviate the problem a bit, the patterns for characters (e.g. 'a') is very permissive, it also\\n    // allows invalid characters to support HTML expressions like this: <p>That's it!</p>.\\n\\n    var tagAttrInlineCs = /@(?![\\\\w()])/.source + '|' + inlineCs;\\n    var tagAttrValue = '(?:' + /\\\"[^\\\"@]*\\\"|'[^'@]*'|[^\\\\s'\\\"@>=]+(?=[\\\\s>])/.source + '|' + '[\\\"\\\\'][^\\\"\\\\'@]*(?:(?:' + tagAttrInlineCs + ')[^\\\"\\\\'@]*)+[\\\"\\\\']' + ')';\\n    var tagAttrs = /(?:\\\\s(?:\\\\s*[^\\\\s>\\\\/=]+(?:\\\\s*=\\\\s*<tagAttrValue>|(?=[\\\\s/>])))+)?/.source.replace(/<tagAttrValue>/, tagAttrValue);\\n    var tagContent = /(?!\\\\d)[^\\\\s>\\\\/=$<%]+/.source + tagAttrs + /\\\\s*\\\\/?>/.source;\\n    var tagRegion = /\\\\B@?/.source + '(?:' + /<([a-zA-Z][\\\\w:]*)/.source + tagAttrs + /\\\\s*>/.source + '(?:' + (/[^<]/.source + '|' + // all tags that are not the start tag\\n    // eslint-disable-next-line regexp/strict\\n    /<\\\\/?(?!\\\\1\\\\b)/.source + tagContent + '|' + // nested start tag\\n    nested( // eslint-disable-next-line regexp/strict\\n    /<\\\\1/.source + tagAttrs + /\\\\s*>/.source + '(?:' + (/[^<]/.source + '|' + // all tags that are not the start tag\\n    // eslint-disable-next-line regexp/strict\\n    /<\\\\/?(?!\\\\1\\\\b)/.source + tagContent + '|' + '<self>') + ')*' + // eslint-disable-next-line regexp/strict\\n    /<\\\\/\\\\1\\\\s*>/.source, 2)) + ')*' + // eslint-disable-next-line regexp/strict\\n    /<\\\\/\\\\1\\\\s*>/.source + '|' + /</.source + tagContent + ')'; // Now for the actual language definition(s):\\n    //\\n    // Razor as a language has 2 parts:\\n    //  1) CSHTML: A markup-like language that has been extended with inline C# code expressions and blocks.\\n    //  2) C#+HTML: A variant of C# that can contain CSHTML tags as expressions.\\n    //\\n    // In the below code, both CSHTML and C#+HTML will be create as separate language definitions that reference each\\n    // other. However, only CSHTML will be exported via `Prism.languages`.\\n\\n    Prism.languages.cshtml = Prism.languages.extend('markup', {});\\n    var csharpWithHtml = Prism.languages.insertBefore('csharp', 'string', {\\n      html: {\\n        pattern: RegExp(tagRegion),\\n        greedy: true,\\n        inside: Prism.languages.cshtml\\n      }\\n    }, {\\n      csharp: Prism.languages.extend('csharp', {})\\n    });\\n    var cs = {\\n      pattern: /\\\\S[\\\\s\\\\S]*/,\\n      alias: 'language-csharp',\\n      inside: csharpWithHtml\\n    };\\n    var inlineValue = {\\n      pattern: RegExp(/(^|[^@])/.source + inlineCs),\\n      lookbehind: true,\\n      greedy: true,\\n      alias: 'variable',\\n      inside: {\\n        keyword: /^@/,\\n        csharp: cs\\n      }\\n    };\\n    Prism.languages.cshtml.tag.pattern = RegExp(/<\\\\/?/.source + tagContent);\\n    Prism.languages.cshtml.tag.inside['attr-value'].pattern = RegExp(/=\\\\s*/.source + tagAttrValue);\\n    Prism.languages.insertBefore('inside', 'punctuation', {\\n      value: inlineValue\\n    }, Prism.languages.cshtml.tag.inside['attr-value']);\\n    Prism.languages.insertBefore('cshtml', 'prolog', {\\n      'razor-comment': {\\n        pattern: /@\\\\*[\\\\s\\\\S]*?\\\\*@/,\\n        greedy: true,\\n        alias: 'comment'\\n      },\\n      block: {\\n        pattern: RegExp(/(^|[^@])@/.source + '(?:' + [// @{ ... }\\n        curly, // @code{ ... }\\n        /(?:code|functions)\\\\s*/.source + curly, // @for (...) { ... }\\n        /(?:for|foreach|lock|switch|using|while)\\\\s*/.source + round + /\\\\s*/.source + curly, // @do { ... } while (...);\\n        /do\\\\s*/.source + curly + /\\\\s*while\\\\s*/.source + round + /(?:\\\\s*;)?/.source, // @try { ... } catch (...) { ... } finally { ... }\\n        /try\\\\s*/.source + curly + /\\\\s*catch\\\\s*/.source + round + /\\\\s*/.source + curly + /\\\\s*finally\\\\s*/.source + curly, // @if (...) {...} else if (...) {...} else {...}\\n        /if\\\\s*/.source + round + /\\\\s*/.source + curly + '(?:' + /\\\\s*else/.source + '(?:' + /\\\\s+if\\\\s*/.source + round + ')?' + /\\\\s*/.source + curly + ')*', // @helper Ident(params) { ... }\\n        /helper\\\\s+\\\\w+\\\\s*/.source + round + /\\\\s*/.source + curly].join('|') + ')'),\\n        lookbehind: true,\\n        greedy: true,\\n        inside: {\\n          keyword: /^@\\\\w*/,\\n          csharp: cs\\n        }\\n      },\\n      directive: {\\n        pattern: /^([ \\\\t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\\\\s).*/m,\\n        lookbehind: true,\\n        greedy: true,\\n        inside: {\\n          keyword: /^@\\\\w+/,\\n          csharp: cs\\n        }\\n      },\\n      value: inlineValue,\\n      'delegate-operator': {\\n        pattern: /(^|[^@])@(?=<)/,\\n        lookbehind: true,\\n        alias: 'operator'\\n      }\\n    });\\n    Prism.languages.razor = Prism.languages.cshtml;\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"default\",\"cshtml\",\"Prism\",\"register\",\"_csharp\",\"_markup\",\"nested\",\"pattern\",\"depthLog2\",\"i\",\"replace\",\"stringLike\",\"commentLike\",\"source\",\"round\",\"square\",\"curly\",\"angle\",\"inlineCs\",\"tagAttrValue\",\"tagAttrs\",\"tagContent\",\"tagRegion\",\"languages\",\"extend\",\"cs\",\"alias\",\"inside\",\"insertBefore\",\"csharpWithHtml\",\"html\",\"RegExp\",\"greedy\",\"csharp\",\"inlineValue\",\"lookbehind\",\"keyword\",\"tag\",\"value\",\"block\",\"join\",\"directive\",\"razor\",\"Object\",\"defineProperty\",\"displayName\",\"aliases\"]\n}\n"]