["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js"],"~:js","shadow$provide.module$node_modules$parse5$lib$extensions$error_reporting$parser_mixin=function(global,require,module,exports){global=require(\"module$node_modules$parse5$lib$extensions$error_reporting$mixin_base\");const ErrorReportingTokenizerMixin=require(\"module$node_modules$parse5$lib$extensions$error_reporting$tokenizer_mixin\"),LocationInfoTokenizerMixin=require(\"module$node_modules$parse5$lib$extensions$location_info$tokenizer_mixin\"),Mixin=require(\"module$node_modules$parse5$lib$utils$mixin\");\nclass ErrorReportingParserMixin extends global{constructor(parser,opts){super(parser,opts);this.opts=opts;this.ctLoc=null;this.locBeforeToken=!1}_setErrorLocation(err){this.ctLoc&&(err.startLine=this.ctLoc.startLine,err.startCol=this.ctLoc.startCol,err.startOffset=this.ctLoc.startOffset,err.endLine=this.locBeforeToken?this.ctLoc.startLine:this.ctLoc.endLine,err.endCol=this.locBeforeToken?this.ctLoc.startCol:this.ctLoc.endCol,err.endOffset=this.locBeforeToken?this.ctLoc.startOffset:this.ctLoc.endOffset)}_getOverriddenMethods(mxn,\norig){return{_bootstrap(document,fragmentContext){orig._bootstrap.call(this,document,fragmentContext);Mixin.install(this.tokenizer,ErrorReportingTokenizerMixin,mxn.opts);Mixin.install(this.tokenizer,LocationInfoTokenizerMixin)},_processInputToken(token){mxn.ctLoc=token.location;orig._processInputToken.call(this,token)},_err(code,options){mxn.locBeforeToken=options&&options.beforeToken;mxn._reportError(code)}}}}module.exports=ErrorReportingParserMixin}","~:source","shadow$provide[\"module$node_modules$parse5$lib$extensions$error_reporting$parser_mixin\"] = function(global,require,module,exports) {\n'use strict';\n\nconst ErrorReportingMixinBase = require('./mixin-base');\nconst ErrorReportingTokenizerMixin = require('./tokenizer-mixin');\nconst LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingParserMixin extends ErrorReportingMixinBase {\n    constructor(parser, opts) {\n        super(parser, opts);\n\n        this.opts = opts;\n        this.ctLoc = null;\n        this.locBeforeToken = false;\n    }\n\n    _setErrorLocation(err) {\n        if (this.ctLoc) {\n            err.startLine = this.ctLoc.startLine;\n            err.startCol = this.ctLoc.startCol;\n            err.startOffset = this.ctLoc.startOffset;\n\n            err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;\n            err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;\n            err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;\n        }\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            _bootstrap(document, fragmentContext) {\n                orig._bootstrap.call(this, document, fragmentContext);\n\n                Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);\n                Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n            },\n\n            _processInputToken(token) {\n                mxn.ctLoc = token.location;\n\n                orig._processInputToken.call(this, token);\n            },\n\n            _err(code, options) {\n                mxn.locBeforeToken = options && options.beforeToken;\n                mxn._reportError(code);\n            }\n        };\n    }\n}\n\nmodule.exports = ErrorReportingParserMixin;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$parse5$lib$extensions$location_info$tokenizer_mixin","~$module$node_modules$parse5$lib$utils$mixin","~$shadow.js","~$module$node_modules$parse5$lib$extensions$error_reporting$mixin_base","~$module$node_modules$parse5$lib$extensions$error_reporting$tokenizer_mixin"]],"~:properties",["^5",["ctLoc","endLine","locBeforeToken","opts","endOffset","startOffset","startLine","startCol","endCol"]],"~:compiled-at",1676667638416,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$parse5$lib$extensions$error_reporting$parser_mixin.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,sEAAA,CAA2F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAAA,CAA0BH,OAAA,CAAQ,sEAAR,CAChC,OAAMI,6BAA+BJ,OAAA,CAAQ,2EAAR,CAArC,CACMK,2BAA6BL,OAAA,CAAQ,yEAAR,CADnC,CAEMM,MAAQN,OAAA,CAAQ,4CAAR,CAEd;KAAMO,0BAAN,QAAwCJ,OAAxC,CACIK,WAAW,CAACC,MAAD,CAASC,IAAT,CAAe,CACtB,KAAA,CAAMD,MAAN,CAAcC,IAAd,CAEA,KAAKA,CAAAA,IAAL,CAAYA,IACZ,KAAKC,CAAAA,KAAL,CAAa,IACb,KAAKC,CAAAA,cAAL,CAAsB,CAAA,CALA,CAQ1BC,iBAAiB,CAACC,GAAD,CAAM,CACf,IAAKH,CAAAA,KAAT,GACIG,GAAIC,CAAAA,SAMJ,CANgB,IAAKJ,CAAAA,KAAMI,CAAAA,SAM3B,CALAD,GAAIE,CAAAA,QAKJ,CALe,IAAKL,CAAAA,KAAMK,CAAAA,QAK1B,CAJAF,GAAIG,CAAAA,WAIJ,CAJkB,IAAKN,CAAAA,KAAMM,CAAAA,WAI7B,CAFAH,GAAII,CAAAA,OAEJ,CAFc,IAAKN,CAAAA,cAAL,CAAsB,IAAKD,CAAAA,KAAMI,CAAAA,SAAjC,CAA6C,IAAKJ,CAAAA,KAAMO,CAAAA,OAEtE,CADAJ,GAAIK,CAAAA,MACJ,CADa,IAAKP,CAAAA,cAAL,CAAsB,IAAKD,CAAAA,KAAMK,CAAAA,QAAjC,CAA4C,IAAKL,CAAAA,KAAMQ,CAAAA,MACpE,CAAAL,GAAIM,CAAAA,SAAJ,CAAgB,IAAKR,CAAAA,cAAL,CAAsB,IAAKD,CAAAA,KAAMM,CAAAA,WAAjC,CAA+C,IAAKN,CAAAA,KAAMS,CAAAA,SAP9E,CADmB,CAYvBC,qBAAqB,CAACC,GAAD;AAAMC,IAAN,CAAY,CAC7B,MAAO,CACHC,UAAU,CAACC,QAAD,CAAWC,eAAX,CAA4B,CAClCH,IAAKC,CAAAA,UAAWG,CAAAA,IAAhB,CAAqB,IAArB,CAA2BF,QAA3B,CAAqCC,eAArC,CAEApB,MAAMsB,CAAAA,OAAN,CAAc,IAAKC,CAAAA,SAAnB,CAA8BzB,4BAA9B,CAA4DkB,GAAIZ,CAAAA,IAAhE,CACAJ,MAAMsB,CAAAA,OAAN,CAAc,IAAKC,CAAAA,SAAnB,CAA8BxB,0BAA9B,CAJkC,CADnC,CAQHyB,kBAAkB,CAACC,KAAD,CAAQ,CACtBT,GAAIX,CAAAA,KAAJ,CAAYoB,KAAMC,CAAAA,QAElBT,KAAKO,CAAAA,kBAAmBH,CAAAA,IAAxB,CAA6B,IAA7B,CAAmCI,KAAnC,CAHsB,CARvB,CAcHE,IAAI,CAACC,IAAD,CAAOC,OAAP,CAAgB,CAChBb,GAAIV,CAAAA,cAAJ,CAAqBuB,OAArB,EAAgCA,OAAQC,CAAAA,WACxCd,IAAIe,CAAAA,YAAJ,CAAiBH,IAAjB,CAFgB,CAdjB,CADsB,CArBrC,CA4CAjC,MAAOC,CAAAA,OAAP,CAAiBK,yBApDkH;\",\n\"sources\":[\"node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$parse5$lib$extensions$error_reporting$parser_mixin\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nconst ErrorReportingMixinBase = require('./mixin-base');\\nconst ErrorReportingTokenizerMixin = require('./tokenizer-mixin');\\nconst LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');\\nconst Mixin = require('../../utils/mixin');\\n\\nclass ErrorReportingParserMixin extends ErrorReportingMixinBase {\\n    constructor(parser, opts) {\\n        super(parser, opts);\\n\\n        this.opts = opts;\\n        this.ctLoc = null;\\n        this.locBeforeToken = false;\\n    }\\n\\n    _setErrorLocation(err) {\\n        if (this.ctLoc) {\\n            err.startLine = this.ctLoc.startLine;\\n            err.startCol = this.ctLoc.startCol;\\n            err.startOffset = this.ctLoc.startOffset;\\n\\n            err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;\\n            err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;\\n            err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;\\n        }\\n    }\\n\\n    _getOverriddenMethods(mxn, orig) {\\n        return {\\n            _bootstrap(document, fragmentContext) {\\n                orig._bootstrap.call(this, document, fragmentContext);\\n\\n                Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);\\n                Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\\n            },\\n\\n            _processInputToken(token) {\\n                mxn.ctLoc = token.location;\\n\\n                orig._processInputToken.call(this, token);\\n            },\\n\\n            _err(code, options) {\\n                mxn.locBeforeToken = options && options.beforeToken;\\n                mxn._reportError(code);\\n            }\\n        };\\n    }\\n}\\n\\nmodule.exports = ErrorReportingParserMixin;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"ErrorReportingMixinBase\",\"ErrorReportingTokenizerMixin\",\"LocationInfoTokenizerMixin\",\"Mixin\",\"ErrorReportingParserMixin\",\"constructor\",\"parser\",\"opts\",\"ctLoc\",\"locBeforeToken\",\"_setErrorLocation\",\"err\",\"startLine\",\"startCol\",\"startOffset\",\"endLine\",\"endCol\",\"endOffset\",\"_getOverriddenMethods\",\"mxn\",\"orig\",\"_bootstrap\",\"document\",\"fragmentContext\",\"call\",\"install\",\"tokenizer\",\"_processInputToken\",\"token\",\"location\",\"_err\",\"code\",\"options\",\"beforeToken\",\"_reportError\"]\n}\n"]