["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/parse-numeric-range/index.js"],"~:js","shadow$provide.module$node_modules$parse_numeric_range$index=function(global,require,module,exports){function parsePart(string){let res=[];for(let str$jscomp$0 of string.split(\",\").map(str=>str.trim()))if(/^-?\\d+$/.test(str$jscomp$0))res.push(parseInt(str$jscomp$0,10));else if(string=str$jscomp$0.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/)){let [,lhs,sep,rhs]=string;if(lhs&&rhs){lhs=parseInt(lhs);rhs=parseInt(rhs);string=lhs<rhs?1:-1;if(\"-\"===sep||\"..\"===sep||\"â€¥\"===sep)rhs+=string;for(let i=\nlhs;i!==rhs;i+=string)res.push(i)}}return res}exports.default=parsePart;module.exports=parsePart}","~:source","shadow$provide[\"module$node_modules$parse_numeric_range$index\"] = function(global,require,module,exports) {\n/**\n * @param {string} string    The string to parse\n * @returns {Array<number>}  Returns an energetic array.\n */\nfunction parsePart(string) {\n  let res = [];\n  let m;\n\n  for (let str of string.split(\",\").map((str) => str.trim())) {\n    // just a number\n    if (/^-?\\d+$/.test(str)) {\n      res.push(parseInt(str, 10));\n    } else if (\n      (m = str.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/))\n    ) {\n      // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)\n      let [_, lhs, sep, rhs] = m;\n\n      if (lhs && rhs) {\n        lhs = parseInt(lhs);\n        rhs = parseInt(rhs);\n        const incr = lhs < rhs ? 1 : -1;\n\n        // Make it inclusive by moving the right 'stop-point' away by one.\n        if (sep === \"-\" || sep === \"..\" || sep === \"\\u2025\") rhs += incr;\n\n        for (let i = lhs; i !== rhs; i += incr) res.push(i);\n      }\n    }\n  }\n\n  return res;\n}\n\nexports.default = parsePart;\nmodule.exports = parsePart;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["default"]],"~:compiled-at",1676841365355,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$parse_numeric_range$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,6CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAK1GC,QAASA,UAAS,CAACC,MAAD,CAAS,CACzB,IAAIC,IAAM,EAGV,KAAK,IAAIC,YAAT,GAAgBF,OAAOG,CAAAA,KAAP,CAAa,GAAb,CAAkBC,CAAAA,GAAlB,CAAuBF,GAAD,EAASA,GAAIG,CAAAA,IAAJ,EAA/B,CAAhB,CAEE,GAAI,SAAUC,CAAAA,IAAV,CAAeJ,YAAf,CAAJ,CACED,GAAIM,CAAAA,IAAJ,CAASC,QAAA,CAASN,YAAT,CAAc,EAAd,CAAT,CADF,KAEO,IACJO,MADI,CACAP,YAAIQ,CAAAA,KAAJ,CAAU,kDAAV,CADA,CAEL,CAEA,IAAI,CAAA,CAAIC,GAAJ,CAASC,GAAT,CAAcC,GAAd,CAAA,CAAqBJ,MAEzB,IAAIE,GAAJ,EAAWE,GAAX,CAAgB,CACdF,GAAA,CAAMH,QAAA,CAASG,GAAT,CACNE,IAAA,CAAML,QAAA,CAASK,GAAT,CACAC,OAAAA,CAAOH,GAAA,CAAME,GAAN,CAAY,CAAZ,CAAgB,CAAC,CAG9B,IAAY,GAAZ,GAAID,GAAJ,EAA2B,IAA3B,GAAmBA,GAAnB,EAA2C,GAA3C,GAAmCA,GAAnC,CAAqDC,GAAA,EAAOC,MAE5D,KAAK,IAAIC;AAAIJ,GAAb,CAAkBI,CAAlB,GAAwBF,GAAxB,CAA6BE,CAA7B,EAAkCD,MAAlC,CAAwCb,GAAIM,CAAAA,IAAJ,CAASQ,CAAT,CAR1B,CAJhB,CAiBJ,MAAOd,IA3BkB,CA8B3BH,OAAQkB,CAAAA,OAAR,CAAkBjB,SAClBF,OAAOC,CAAAA,OAAP,CAAiBC,SApCyF;\",\n\"sources\":[\"node_modules/parse-numeric-range/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$parse_numeric_range$index\\\"] = function(global,require,module,exports) {\\n/**\\n * @param {string} string    The string to parse\\n * @returns {Array<number>}  Returns an energetic array.\\n */\\nfunction parsePart(string) {\\n  let res = [];\\n  let m;\\n\\n  for (let str of string.split(\\\",\\\").map((str) => str.trim())) {\\n    // just a number\\n    if (/^-?\\\\d+$/.test(str)) {\\n      res.push(parseInt(str, 10));\\n    } else if (\\n      (m = str.match(/^(-?\\\\d+)(-|\\\\.\\\\.\\\\.?|\\\\u2025|\\\\u2026|\\\\u22EF)(-?\\\\d+)$/))\\n    ) {\\n      // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)\\n      let [_, lhs, sep, rhs] = m;\\n\\n      if (lhs && rhs) {\\n        lhs = parseInt(lhs);\\n        rhs = parseInt(rhs);\\n        const incr = lhs < rhs ? 1 : -1;\\n\\n        // Make it inclusive by moving the right 'stop-point' away by one.\\n        if (sep === \\\"-\\\" || sep === \\\"..\\\" || sep === \\\"\\\\u2025\\\") rhs += incr;\\n\\n        for (let i = lhs; i !== rhs; i += incr) res.push(i);\\n      }\\n    }\\n  }\\n\\n  return res;\\n}\\n\\nexports.default = parsePart;\\nmodule.exports = parsePart;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"parsePart\",\"string\",\"res\",\"str\",\"split\",\"map\",\"trim\",\"test\",\"push\",\"parseInt\",\"m\",\"match\",\"lhs\",\"sep\",\"rhs\",\"incr\",\"i\",\"default\"]\n}\n"]