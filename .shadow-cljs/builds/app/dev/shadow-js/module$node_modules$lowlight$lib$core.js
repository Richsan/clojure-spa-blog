["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lowlight/lib/core.js"],"~:js","shadow$provide.module$node_modules$lowlight$lib$core=function(global,require,module,exports){function highlight(language,value,options={}){options=options.prefix;if(\"string\"!==typeof language)throw(0,_fault.fault)(\"Expected `string` for name, got `%s`\",language);if(!_core.default.getLanguage(language))throw(0,_fault.fault)(\"Unknown language: `%s` is not registered\",language);if(\"string\"!==typeof value)throw(0,_fault.fault)(\"Expected `string` for value, got `%s`\",value);if(null===options||void 0===\noptions)options=\"hljs-\";_core.default.configure({__emitter:HastEmitter,classPrefix:options});language=_core.default.highlight(value,{language,ignoreIllegals:!0});_core.default.configure({});if(language.errorRaised)throw language.errorRaised;language._emitter.root.data.language=language.language;language._emitter.root.data.relevance=language.relevance;return language._emitter.root}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.lowlight=void 0;var _core=function(obj){return obj&&obj.__esModule?\nobj:{default:obj}}(require(\"module$node_modules$highlight_DOT_js$lib$core\")),_fault=require(\"module$node_modules$fault$index\");const own={}.hasOwnProperty;class HastEmitter{constructor(options){this.options=options;this.root={type:\"root\",data:{language:null,relevance:0},children:[]};this.stack=[this.root]}addText(value){if(\"\"!==value){var current=this.stack[this.stack.length-1],tail=current.children[current.children.length-1];tail&&\"text\"===tail.type?tail.value+=value:current.children.push({type:\"text\",\nvalue})}}addKeyword(value,name){this.openNode(name);this.addText(value);this.closeNode()}addSublanguage(other,name){const current=this.stack[this.stack.length-1];other=other.root.children;name?current.children.push({type:\"element\",tagName:\"span\",properties:{className:[name]},children:other}):current.children.push(...other)}openNode(name){name={type:\"element\",tagName:\"span\",properties:{className:name.split(\".\").map((d,i)=>i?d+\"_\".repeat(i):this.options.classPrefix+d)},children:[]};this.stack[this.stack.length-\n1].children.push(name);this.stack.push(name)}closeNode(){this.stack.pop()}closeAllNodes(){}finalize(){}toHTML(){return\"\"}}exports.lowlight={highlight,highlightAuto:function(value,options={}){const subset=options.subset||_core.default.listLanguages();let index=-1,result={type:\"root\",data:{language:null,relevance:0},children:[]};if(\"string\"!==typeof value)throw(0,_fault.fault)(\"Expected `string` for value, got `%s`\",value);for(;++index<subset.length;){var name=subset[index];_core.default.getLanguage(name)&&\n(name=highlight(name,value,options),name.data.relevance>result.data.relevance&&(result=name))}return result},registerLanguage:function(language,syntax){_core.default.registerLanguage(language,syntax)},registered:function(aliasOrLanguage){return!!_core.default.getLanguage(aliasOrLanguage)},listLanguages:function(){return _core.default.listLanguages()},registerAlias:function(language,alias){if(\"string\"===typeof language)_core.default.registerAliases(alias,{languageName:language});else{let key;for(key in language)own.call(language,\nkey)&&_core.default.registerAliases(language[key],{languageName:key})}}}}","~:source","shadow$provide[\"module$node_modules$lowlight$lib$core\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lowlight = void 0;\n\nvar _core = _interopRequireDefault(require(\"highlight.js/lib/core\"));\n\nvar _fault = require(\"fault\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @typedef {import('hast').Text} Text\n * @typedef {import('highlight.js').HighlightResult} HighlightResult\n * @typedef {import('highlight.js').HLJSOptions} HighlightOptions\n * @typedef {import('highlight.js').LanguageFn} HighlightSyntax\n * @typedef {import('highlight.js').Emitter} HighlightEmitter\n *\n * @typedef {{type: 'element', tagName: 'span', properties: {className: Array<string>}, children: Array<Span|Text>}} Span\n * @typedef {{type: 'root', data: {language: string|null, relevance: number}, children: Array<Span|Text>}} Root\n *\n * @typedef {Object} ExtraOptions\n * @property {Array<string>} [subset]\n *   List of allowed languages, defaults to all registered languages.\n *\n * @typedef {Object} Options\n *   Configuration.\n * @property {string} [prefix='hljs-']\n *   Class prefix.\n *\n * @typedef {Options & ExtraOptions} AutoOptions\n */\nconst own = {}.hasOwnProperty;\nconst defaultPrefix = 'hljs-';\n/**\n * Highlight `value` (code) as `language` (name).\n *\n * @param {string} language\n *   Programming language name.\n * @param {string} value\n *   Code to highlight.\n * @param {Options} [options={}]\n *   Configuration.\n * @returns {Root}\n *   A hast `Root` node.\n */\n\nfunction highlight(language, value, options = {}) {\n  let prefix = options.prefix;\n\n  if (typeof language !== 'string') {\n    throw (0, _fault.fault)('Expected `string` for name, got `%s`', language);\n  }\n\n  if (!_core.default.getLanguage(language)) {\n    throw (0, _fault.fault)('Unknown language: `%s` is not registered', language);\n  }\n\n  if (typeof value !== 'string') {\n    throw (0, _fault.fault)('Expected `string` for value, got `%s`', value);\n  }\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix;\n  }\n\n  _core.default.configure({\n    __emitter: HastEmitter,\n    classPrefix: prefix\n  });\n\n  const result = _core.default.highlight(value, {\n    language,\n    ignoreIllegals: true\n  });\n\n  _core.default.configure({}); // `highlight.js` seems to use this (currently) for broken grammars, so let’s\n  // keep it in there just to be sure.\n\n  /* c8 ignore next 3 */\n\n\n  if (result.errorRaised) {\n    throw result.errorRaised;\n  } // @ts-expect-error: `language` is always defined in `highlight`.\n\n\n  result._emitter.root.data.language = result.language;\n  result._emitter.root.data.relevance = result.relevance;\n  return result._emitter.root;\n}\n/**\n * Highlight `value` (code) and guess its programming language.\n *\n * @param {string} value\n *   Code to highlight.\n * @param {AutoOptions} [options={}]\n *   Configuration.\n * @returns {Root}\n *   A hast `Root` node.\n */\n\n\nfunction highlightAuto(value, options = {}) {\n  const subset = options.subset || _core.default.listLanguages();\n\n  let prefix = options.prefix;\n  let index = -1;\n  /** @type {Root} */\n\n  let result = {\n    type: 'root',\n    data: {\n      language: null,\n      relevance: 0\n    },\n    children: []\n  };\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix;\n  }\n\n  if (typeof value !== 'string') {\n    throw (0, _fault.fault)('Expected `string` for value, got `%s`', value);\n  }\n\n  while (++index < subset.length) {\n    const name = subset[index];\n    if (!_core.default.getLanguage(name)) continue;\n    const current = highlight(name, value, options);\n    if (current.data.relevance > result.data.relevance) result = current;\n  }\n\n  return result;\n}\n/**\n * Register a language.\n *\n * @param {string} language\n *   Programming language name.\n * @param {HighlightSyntax} syntax\n *   `highlight.js` language syntax.\n * @returns {void}\n */\n\n\nfunction registerLanguage(language, syntax) {\n  _core.default.registerLanguage(language, syntax);\n}\n/**\n * Register aliases for already registered languages.\n *\n * @param {string|Record<string, string|Array<string>>} language\n *   Programming language name or a map of `language`s to `alias`es or `list`s\n * @param {string|Array<string>} [alias]\n *   New aliases for the programming language.\n * @returns {void}\n */\n\n\nconst registerAlias =\n/**\n * @param {string|Record<string, string|Array<string>>} language\n * @param {string|Array<string>} [alias]\n * @returns {void}\n */\nfunction (language, alias) {\n  if (typeof language === 'string') {\n    // @ts-expect-error: should be a string in this overload.\n    _core.default.registerAliases(alias, {\n      languageName: language\n    });\n  } else {\n    /** @type {string} */\n    let key;\n\n    for (key in language) {\n      if (own.call(language, key)) {\n        _core.default.registerAliases(language[key], {\n          languageName: key\n        });\n      }\n    }\n  }\n};\n/**\n * Check whether an `alias` or `language` is registered.\n *\n * @param {string} aliasOrLanguage\n *   Name of a registered language or alias.\n * @returns {boolean}\n *   Whether `aliasOrlanguage` is registered.\n */\n\n\nfunction registered(aliasOrLanguage) {\n  return Boolean(_core.default.getLanguage(aliasOrLanguage));\n}\n/**\n * List registered languages.\n *\n * @returns {Array<string>}\n *   Names of registered language.\n */\n\n\nfunction listLanguages() {\n  return _core.default.listLanguages();\n}\n/** @type {HighlightEmitter} */\n\n\nclass HastEmitter {\n  /**\n   * @param {HighlightOptions} options\n   */\n  constructor(options) {\n    /** @type {HighlightOptions} */\n    this.options = options;\n    /** @type {Root} */\n\n    this.root = {\n      type: 'root',\n      data: {\n        language: null,\n        relevance: 0\n      },\n      children: []\n    };\n    /** @type {[Root, ...Array<Span>]} */\n\n    this.stack = [this.root];\n  }\n  /**\n   * @param {string} value\n   */\n\n\n  addText(value) {\n    if (value === '') return;\n    const current = this.stack[this.stack.length - 1];\n    const tail = current.children[current.children.length - 1];\n\n    if (tail && tail.type === 'text') {\n      tail.value += value;\n    } else {\n      current.children.push({\n        type: 'text',\n        value\n      });\n    }\n  }\n  /**\n   * @param {string} value\n   * @param {string} name\n   */\n\n\n  addKeyword(value, name) {\n    this.openNode(name);\n    this.addText(value);\n    this.closeNode();\n  }\n  /**\n   * @param {HastEmitter} other\n   * @param {string} name\n   */\n\n\n  addSublanguage(other, name) {\n    const current = this.stack[this.stack.length - 1];\n    const results = other.root.children;\n\n    if (name) {\n      current.children.push({\n        type: 'element',\n        tagName: 'span',\n        properties: {\n          className: [name]\n        },\n        children: results\n      });\n    } else {\n      current.children.push(...results);\n    }\n  }\n  /**\n   * @param {string} name\n   */\n\n\n  openNode(name) {\n    // First “class” gets the prefix. Rest gets a repeated underscore suffix.\n    // See: <https://github.com/highlightjs/highlight.js/commit/51806aa>\n    // See: <https://github.com/wooorm/lowlight/issues/43>\n    const className = name.split('.').map((d, i) => i ? d + '_'.repeat(i) : this.options.classPrefix + d);\n    const current = this.stack[this.stack.length - 1];\n    /** @type {Span} */\n\n    const child = {\n      type: 'element',\n      tagName: 'span',\n      properties: {\n        className\n      },\n      children: []\n    };\n    current.children.push(child);\n    this.stack.push(child);\n  }\n  /**\n   */\n\n\n  closeNode() {\n    this.stack.pop();\n  }\n  /**\n   */\n\n\n  closeAllNodes() {}\n  /**\n   */\n\n\n  finalize() {}\n  /**\n   */\n\n\n  toHTML() {\n    return '';\n  }\n\n}\n\nconst lowlight = {\n  highlight,\n  highlightAuto,\n  registerLanguage,\n  registered,\n  listLanguages,\n  registerAlias\n};\nexports.lowlight = lowlight;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fault$index","~$shadow.js","~$module$node_modules$highlight_DOT_js$lib$core"]],"~:properties",["^5",["properties","languageName","__emitter","className","children","registerLanguage","__esModule","classPrefix","relevance","root","value","highlightAuto","ignoreIllegals","listLanguages","type","tagName","registerAlias","registered","highlight","language","options","lowlight","data","default","stack"]],"~:compiled-at",1676671710261,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lowlight$lib$core.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/lowlight/lib/core.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lowlight$lib$core\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.lowlight = void 0;\\n\\nvar _core = _interopRequireDefault(require(\\\"highlight.js/lib/core\\\"));\\n\\nvar _fault = require(\\\"fault\\\");\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/**\\n * @typedef {import('hast').Text} Text\\n * @typedef {import('highlight.js').HighlightResult} HighlightResult\\n * @typedef {import('highlight.js').HLJSOptions} HighlightOptions\\n * @typedef {import('highlight.js').LanguageFn} HighlightSyntax\\n * @typedef {import('highlight.js').Emitter} HighlightEmitter\\n *\\n * @typedef {{type: 'element', tagName: 'span', properties: {className: Array<string>}, children: Array<Span|Text>}} Span\\n * @typedef {{type: 'root', data: {language: string|null, relevance: number}, children: Array<Span|Text>}} Root\\n *\\n * @typedef {Object} ExtraOptions\\n * @property {Array<string>} [subset]\\n *   List of allowed languages, defaults to all registered languages.\\n *\\n * @typedef {Object} Options\\n *   Configuration.\\n * @property {string} [prefix='hljs-']\\n *   Class prefix.\\n *\\n * @typedef {Options & ExtraOptions} AutoOptions\\n */\\nconst own = {}.hasOwnProperty;\\nconst defaultPrefix = 'hljs-';\\n/**\\n * Highlight `value` (code) as `language` (name).\\n *\\n * @param {string} language\\n *   Programming language name.\\n * @param {string} value\\n *   Code to highlight.\\n * @param {Options} [options={}]\\n *   Configuration.\\n * @returns {Root}\\n *   A hast `Root` node.\\n */\\n\\nfunction highlight(language, value, options = {}) {\\n  let prefix = options.prefix;\\n\\n  if (typeof language !== 'string') {\\n    throw (0, _fault.fault)('Expected `string` for name, got `%s`', language);\\n  }\\n\\n  if (!_core.default.getLanguage(language)) {\\n    throw (0, _fault.fault)('Unknown language: `%s` is not registered', language);\\n  }\\n\\n  if (typeof value !== 'string') {\\n    throw (0, _fault.fault)('Expected `string` for value, got `%s`', value);\\n  }\\n\\n  if (prefix === null || prefix === undefined) {\\n    prefix = defaultPrefix;\\n  }\\n\\n  _core.default.configure({\\n    __emitter: HastEmitter,\\n    classPrefix: prefix\\n  });\\n\\n  const result = _core.default.highlight(value, {\\n    language,\\n    ignoreIllegals: true\\n  });\\n\\n  _core.default.configure({}); // `highlight.js` seems to use this (currently) for broken grammars, so let\\u2019s\\n  // keep it in there just to be sure.\\n\\n  /* c8 ignore next 3 */\\n\\n\\n  if (result.errorRaised) {\\n    throw result.errorRaised;\\n  } // @ts-expect-error: `language` is always defined in `highlight`.\\n\\n\\n  result._emitter.root.data.language = result.language;\\n  result._emitter.root.data.relevance = result.relevance;\\n  return result._emitter.root;\\n}\\n/**\\n * Highlight `value` (code) and guess its programming language.\\n *\\n * @param {string} value\\n *   Code to highlight.\\n * @param {AutoOptions} [options={}]\\n *   Configuration.\\n * @returns {Root}\\n *   A hast `Root` node.\\n */\\n\\n\\nfunction highlightAuto(value, options = {}) {\\n  const subset = options.subset || _core.default.listLanguages();\\n\\n  let prefix = options.prefix;\\n  let index = -1;\\n  /** @type {Root} */\\n\\n  let result = {\\n    type: 'root',\\n    data: {\\n      language: null,\\n      relevance: 0\\n    },\\n    children: []\\n  };\\n\\n  if (prefix === null || prefix === undefined) {\\n    prefix = defaultPrefix;\\n  }\\n\\n  if (typeof value !== 'string') {\\n    throw (0, _fault.fault)('Expected `string` for value, got `%s`', value);\\n  }\\n\\n  while (++index < subset.length) {\\n    const name = subset[index];\\n    if (!_core.default.getLanguage(name)) continue;\\n    const current = highlight(name, value, options);\\n    if (current.data.relevance > result.data.relevance) result = current;\\n  }\\n\\n  return result;\\n}\\n/**\\n * Register a language.\\n *\\n * @param {string} language\\n *   Programming language name.\\n * @param {HighlightSyntax} syntax\\n *   `highlight.js` language syntax.\\n * @returns {void}\\n */\\n\\n\\nfunction registerLanguage(language, syntax) {\\n  _core.default.registerLanguage(language, syntax);\\n}\\n/**\\n * Register aliases for already registered languages.\\n *\\n * @param {string|Record<string, string|Array<string>>} language\\n *   Programming language name or a map of `language`s to `alias`es or `list`s\\n * @param {string|Array<string>} [alias]\\n *   New aliases for the programming language.\\n * @returns {void}\\n */\\n\\n\\nconst registerAlias =\\n/**\\n * @param {string|Record<string, string|Array<string>>} language\\n * @param {string|Array<string>} [alias]\\n * @returns {void}\\n */\\nfunction (language, alias) {\\n  if (typeof language === 'string') {\\n    // @ts-expect-error: should be a string in this overload.\\n    _core.default.registerAliases(alias, {\\n      languageName: language\\n    });\\n  } else {\\n    /** @type {string} */\\n    let key;\\n\\n    for (key in language) {\\n      if (own.call(language, key)) {\\n        _core.default.registerAliases(language[key], {\\n          languageName: key\\n        });\\n      }\\n    }\\n  }\\n};\\n/**\\n * Check whether an `alias` or `language` is registered.\\n *\\n * @param {string} aliasOrLanguage\\n *   Name of a registered language or alias.\\n * @returns {boolean}\\n *   Whether `aliasOrlanguage` is registered.\\n */\\n\\n\\nfunction registered(aliasOrLanguage) {\\n  return Boolean(_core.default.getLanguage(aliasOrLanguage));\\n}\\n/**\\n * List registered languages.\\n *\\n * @returns {Array<string>}\\n *   Names of registered language.\\n */\\n\\n\\nfunction listLanguages() {\\n  return _core.default.listLanguages();\\n}\\n/** @type {HighlightEmitter} */\\n\\n\\nclass HastEmitter {\\n  /**\\n   * @param {HighlightOptions} options\\n   */\\n  constructor(options) {\\n    /** @type {HighlightOptions} */\\n    this.options = options;\\n    /** @type {Root} */\\n\\n    this.root = {\\n      type: 'root',\\n      data: {\\n        language: null,\\n        relevance: 0\\n      },\\n      children: []\\n    };\\n    /** @type {[Root, ...Array<Span>]} */\\n\\n    this.stack = [this.root];\\n  }\\n  /**\\n   * @param {string} value\\n   */\\n\\n\\n  addText(value) {\\n    if (value === '') return;\\n    const current = this.stack[this.stack.length - 1];\\n    const tail = current.children[current.children.length - 1];\\n\\n    if (tail && tail.type === 'text') {\\n      tail.value += value;\\n    } else {\\n      current.children.push({\\n        type: 'text',\\n        value\\n      });\\n    }\\n  }\\n  /**\\n   * @param {string} value\\n   * @param {string} name\\n   */\\n\\n\\n  addKeyword(value, name) {\\n    this.openNode(name);\\n    this.addText(value);\\n    this.closeNode();\\n  }\\n  /**\\n   * @param {HastEmitter} other\\n   * @param {string} name\\n   */\\n\\n\\n  addSublanguage(other, name) {\\n    const current = this.stack[this.stack.length - 1];\\n    const results = other.root.children;\\n\\n    if (name) {\\n      current.children.push({\\n        type: 'element',\\n        tagName: 'span',\\n        properties: {\\n          className: [name]\\n        },\\n        children: results\\n      });\\n    } else {\\n      current.children.push(...results);\\n    }\\n  }\\n  /**\\n   * @param {string} name\\n   */\\n\\n\\n  openNode(name) {\\n    // First \\u201cclass\\u201d gets the prefix. Rest gets a repeated underscore suffix.\\n    // See: <https://github.com/highlightjs/highlight.js/commit/51806aa>\\n    // See: <https://github.com/wooorm/lowlight/issues/43>\\n    const className = name.split('.').map((d, i) => i ? d + '_'.repeat(i) : this.options.classPrefix + d);\\n    const current = this.stack[this.stack.length - 1];\\n    /** @type {Span} */\\n\\n    const child = {\\n      type: 'element',\\n      tagName: 'span',\\n      properties: {\\n        className\\n      },\\n      children: []\\n    };\\n    current.children.push(child);\\n    this.stack.push(child);\\n  }\\n  /**\\n   */\\n\\n\\n  closeNode() {\\n    this.stack.pop();\\n  }\\n  /**\\n   */\\n\\n\\n  closeAllNodes() {}\\n  /**\\n   */\\n\\n\\n  finalize() {}\\n  /**\\n   */\\n\\n\\n  toHTML() {\\n    return '';\\n  }\\n\\n}\\n\\nconst lowlight = {\\n  highlight,\\n  highlightAuto,\\n  registerLanguage,\\n  registered,\\n  listLanguages,\\n  registerAlias\\n};\\nexports.lowlight = lowlight;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"highlight\",\"language\",\"value\",\"options\",\"prefix\",\"_fault\",\"fault\",\"_core\",\"default\",\"getLanguage\",\"undefined\",\"defaultPrefix\",\"configure\",\"__emitter\",\"HastEmitter\",\"classPrefix\",\"result\",\"ignoreIllegals\",\"errorRaised\",\"_emitter\",\"root\",\"data\",\"relevance\",\"Object\",\"defineProperty\",\"lowlight\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"own\",\"hasOwnProperty\",\"constructor\",\"type\",\"children\",\"stack\",\"addText\",\"current\",\"length\",\"tail\",\"push\",\"addKeyword\",\"name\",\"openNode\",\"closeNode\",\"addSublanguage\",\"other\",\"results\",\"tagName\",\"properties\",\"className\",\"child\",\"split\",\"map\",\"d\",\"i\",\"repeat\",\"pop\",\"closeAllNodes\",\"finalize\",\"toHTML\",\"highlightAuto\",\"subset\",\"listLanguages\",\"index\",\"registerLanguage\",\"syntax\",\"registered\",\"aliasOrLanguage\",\"registerAlias\",\"alias\",\"registerAliases\",\"languageName\",\"key\",\"call\"]\n}\n"]