["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-util-resolve-all/index.js"],"~:js","shadow$provide.module$node_modules$micromark_util_resolve_all$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.resolveAll=function(constructs,events,context){const called=[];let index=-1;for(;++index<constructs.length;){const resolve=constructs[index].resolveAll;resolve&&!called.includes(resolve)&&(events=resolve(events,context),called.push(resolve))}return events}}","~:source","shadow$provide[\"module$node_modules$micromark_util_resolve_all$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveAll = resolveAll;\n\n/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nfunction resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = [];\n  let index = -1;\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll;\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context);\n      called.push(resolve);\n    }\n  }\n\n  return events;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["resolveAll","__esModule","value"]],"~:compiled-at",1676665867262,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_util_resolve_all$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAgBAA,QAAmB,CAACC,UAAD,CAAaC,MAAb,CAAqBC,OAArB,CAA8B,CAE/C,MAAMC,OAAS,EACf,KAAIC,MAAQ,CAAC,CAEb,KAAA,CAAO,EAAEA,KAAT,CAAiBJ,UAAWK,CAAAA,MAA5B,CAAA,CAAoC,CAClC,MAAMC,QAAUN,UAAA,CAAWI,KAAX,CAAkBL,CAAAA,UAE9BO,QAAJ,EAAe,CAACH,MAAOI,CAAAA,QAAP,CAAgBD,OAAhB,CAAhB,GACEL,MACA,CADSK,OAAA,CAAQL,MAAR,CAAgBC,OAAhB,CACT,CAAAC,MAAOK,CAAAA,IAAP,CAAYF,OAAZ,CAFF,CAHkC,CASpC,MAAOL,OAdwC,CAtBgE;\",\n\"sources\":[\"node_modules/micromark-util-resolve-all/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_util_resolve_all$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.resolveAll = resolveAll;\\n\\n/**\\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\\n * @typedef {import('micromark-util-types').Event} Event\\n * @typedef {import('micromark-util-types').Resolver} Resolver\\n */\\n\\n/**\\n * Call all `resolveAll`s.\\n *\\n * @param {{resolveAll?: Resolver}[]} constructs\\n * @param {Event[]} events\\n * @param {TokenizeContext} context\\n * @returns {Event[]}\\n */\\nfunction resolveAll(constructs, events, context) {\\n  /** @type {Resolver[]} */\\n  const called = [];\\n  let index = -1;\\n\\n  while (++index < constructs.length) {\\n    const resolve = constructs[index].resolveAll;\\n\\n    if (resolve && !called.includes(resolve)) {\\n      events = resolve(events, context);\\n      called.push(resolve);\\n    }\\n  }\\n\\n  return events;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"resolveAll\",\"constructs\",\"events\",\"context\",\"called\",\"index\",\"length\",\"resolve\",\"includes\",\"push\"]\n}\n"]