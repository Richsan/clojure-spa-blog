["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/systemd.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$systemd=function(global,require,module,exports){function systemd(Prism){var comment={pattern:/^[;#].*/m,greedy:!0},quotesSource=/\"(?:[^\\r\\n\"\\\\]|\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\S)/.source;Prism.languages.systemd={comment,section:{pattern:/^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,greedy:!0,inside:{punctuation:/^\\[|\\]$/,\"section-name\":{pattern:/[\\s\\S]+/,alias:\"selector\"}}},key:{pattern:/^[^\\s=]+(?=[ \\t]*=)/m,greedy:!0,alias:\"attr-name\"},value:{pattern:RegExp(/(=[ \\t]*(?!\\s))/.source+\n\"(?:\"+quotesSource+'|(?\\x3d[^\"\\r\\n]))(?:'+(/[^\\s\\\\]/.source+'|[ \\t]+(?:(?![ \\t\"])|'+quotesSource+\")|\"+/\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;])/.source)+\")*\"),lookbehind:!0,greedy:!0,alias:\"attr-value\",inside:{comment,quoted:{pattern:RegExp(/(^|\\s)/.source+quotesSource),lookbehind:!0,greedy:!0},punctuation:/\\\\$/m,boolean:{pattern:/^(?:false|no|off|on|true|yes)$/,greedy:!0}}},punctuation:/=/}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=systemd;systemd.displayName=\"systemd\";systemd.aliases=\n[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$systemd\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = systemd;\n// @ts-nocheck\nsystemd.displayName = 'systemd';\nsystemd.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction systemd(Prism) {\n  // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html\n  ;\n\n  (function (Prism) {\n    var comment = {\n      pattern: /^[;#].*/m,\n      greedy: true\n    };\n    var quotesSource = /\"(?:[^\\r\\n\"\\\\]|\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\S)/.source;\n    Prism.languages.systemd = {\n      comment: comment,\n      section: {\n        pattern: /^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,\n        greedy: true,\n        inside: {\n          punctuation: /^\\[|\\]$/,\n          'section-name': {\n            pattern: /[\\s\\S]+/,\n            alias: 'selector'\n          }\n        }\n      },\n      key: {\n        pattern: /^[^\\s=]+(?=[ \\t]*=)/m,\n        greedy: true,\n        alias: 'attr-name'\n      },\n      value: {\n        // This pattern is quite complex because of two properties:\n        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to \"resolve\"\n        //     the lookbehind. You will see this in the main loop where spaces are handled separately.\n        //  2) Line continuations.\n        //     After line continuations, empty lines and comments are ignored so we have to consume them.\n        pattern: RegExp(/(=[ \\t]*(?!\\s))/.source + // the value either starts with quotes or not\n        '(?:' + quotesSource + '|(?=[^\"\\r\\n]))' + // main loop\n        '(?:' + (/[^\\s\\\\]/.source + // handle spaces separately because of quotes\n        '|' + '[ \\t]+(?:(?![ \\t\"])|' + quotesSource + ')' + // line continuation\n        '|' + /\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;])/.source) + ')*'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'attr-value',\n        inside: {\n          comment: comment,\n          quoted: {\n            pattern: RegExp(/(^|\\s)/.source + quotesSource),\n            lookbehind: true,\n            greedy: true\n          },\n          punctuation: /\\\\$/m,\n          boolean: {\n            pattern: /^(?:false|no|off|on|true|yes)$/,\n            greedy: true\n          }\n        }\n      },\n      punctuation: /=/\n    };\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","punctuation","aliases","displayName","quoted","key","__esModule","lookbehind","section","value","greedy","pattern","inside","alias","comment","systemd","default"]],"~:compiled-at",1676841365465,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$systemd.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,0CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYvGC,QAASA,QAAO,CAACC,KAAD,CAAQ,CAKpB,IAAIC,QAAU,CACZC,QAAS,UADG,CAEZC,OAAQ,CAAA,CAFI,CAAd,CAIIC,aAAe,2CAA4CC,CAAAA,MAiD9DL,MAhDKM,CAAAA,SAAUP,CAAAA,OAAhB,CAA0B,CACfE,OADe,CAExBM,QAAS,CACPL,QAAS,+BADF,CAEPC,OAAQ,CAAA,CAFD,CAGPK,OAAQ,CACNC,YAAa,SADP,CAEN,eAAgB,CACdP,QAAS,SADK,CAEdQ,MAAO,UAFO,CAFV,CAHD,CAFe,CAaxBC,IAAK,CACHT,QAAS,sBADN,CAEHC,OAAQ,CAAA,CAFL,CAGHO,MAAO,WAHJ,CAbmB,CAkBxBE,MAAO,CAMLV,QAASW,MAAA,CAAO,iBAAkBR,CAAAA,MAAzB;AACT,KADS,CACDD,YADC,CACc,sBADd,EAEA,SAAUC,CAAAA,MAFV,CAGT,uBAHS,CAGsBD,YAHtB,CAGqC,IAHrC,CAIH,qCAAsCC,CAAAA,MAJnC,EAI6C,IAJ7C,CANJ,CAWLS,WAAY,CAAA,CAXP,CAYLX,OAAQ,CAAA,CAZH,CAaLO,MAAO,YAbF,CAcLF,OAAQ,CACGP,OADH,CAENc,OAAQ,CACNb,QAASW,MAAA,CAAO,QAASR,CAAAA,MAAhB,CAAyBD,YAAzB,CADH,CAENU,WAAY,CAAA,CAFN,CAGNX,OAAQ,CAAA,CAHF,CAFF,CAONM,YAAa,MAPP,CAQNO,QAAS,CACPd,QAAS,gCADF,CAEPC,OAAQ,CAAA,CAFD,CARH,CAdH,CAlBiB,CA8CxBM,YAAa,GA9CW,CAVN,CATxBQ,MAAOC,CAAAA,cAAP,CAAsBpB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3Cc,MAAO,CAAA,CADoC,CAA7C,CAGAd,QAAQqB,CAAAA,OAAR,CAAkBpB,OAElBA,QAAQqB,CAAAA,WAAR,CAAsB,SACtBrB,QAAQsB,CAAAA,OAAR;AAAkB,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/systemd.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$systemd\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = systemd;\\n// @ts-nocheck\\nsystemd.displayName = 'systemd';\\nsystemd.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction systemd(Prism) {\\n  // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html\\n  ;\\n\\n  (function (Prism) {\\n    var comment = {\\n      pattern: /^[;#].*/m,\\n      greedy: true\\n    };\\n    var quotesSource = /\\\"(?:[^\\\\r\\\\n\\\"\\\\\\\\]|\\\\\\\\(?:[^\\\\r]|\\\\r\\\\n?))*\\\"(?!\\\\S)/.source;\\n    Prism.languages.systemd = {\\n      comment: comment,\\n      section: {\\n        pattern: /^\\\\[[^\\\\n\\\\r\\\\[\\\\]]*\\\\](?=[ \\\\t]*$)/m,\\n        greedy: true,\\n        inside: {\\n          punctuation: /^\\\\[|\\\\]$/,\\n          'section-name': {\\n            pattern: /[\\\\s\\\\S]+/,\\n            alias: 'selector'\\n          }\\n        }\\n      },\\n      key: {\\n        pattern: /^[^\\\\s=]+(?=[ \\\\t]*=)/m,\\n        greedy: true,\\n        alias: 'attr-name'\\n      },\\n      value: {\\n        // This pattern is quite complex because of two properties:\\n        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to \\\"resolve\\\"\\n        //     the lookbehind. You will see this in the main loop where spaces are handled separately.\\n        //  2) Line continuations.\\n        //     After line continuations, empty lines and comments are ignored so we have to consume them.\\n        pattern: RegExp(/(=[ \\\\t]*(?!\\\\s))/.source + // the value either starts with quotes or not\\n        '(?:' + quotesSource + '|(?=[^\\\"\\\\r\\\\n]))' + // main loop\\n        '(?:' + (/[^\\\\s\\\\\\\\]/.source + // handle spaces separately because of quotes\\n        '|' + '[ \\\\t]+(?:(?![ \\\\t\\\"])|' + quotesSource + ')' + // line continuation\\n        '|' + /\\\\\\\\[\\\\r\\\\n]+(?:[#;].*[\\\\r\\\\n]+)*(?![#;])/.source) + ')*'),\\n        lookbehind: true,\\n        greedy: true,\\n        alias: 'attr-value',\\n        inside: {\\n          comment: comment,\\n          quoted: {\\n            pattern: RegExp(/(^|\\\\s)/.source + quotesSource),\\n            lookbehind: true,\\n            greedy: true\\n          },\\n          punctuation: /\\\\\\\\$/m,\\n          boolean: {\\n            pattern: /^(?:false|no|off|on|true|yes)$/,\\n            greedy: true\\n          }\\n        }\\n      },\\n      punctuation: /=/\\n    };\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"systemd\",\"Prism\",\"comment\",\"pattern\",\"greedy\",\"quotesSource\",\"source\",\"languages\",\"section\",\"inside\",\"punctuation\",\"alias\",\"key\",\"value\",\"RegExp\",\"lookbehind\",\"quoted\",\"boolean\",\"Object\",\"defineProperty\",\"default\",\"displayName\",\"aliases\"]\n}\n"]