["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/vfile-message/lib/index.js"],"~:js","shadow$provide.module$node_modules$vfile_message$lib$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.VFileMessage=void 0;var _unistUtilStringifyPosition=require(\"module$node_modules$unist_util_stringify_position$index\");class VFileMessage extends Error{constructor(reason,place,origin){const parts=[null,null];let position={start:{line:null,column:null},end:{line:null,column:null}};super();\"string\"===typeof place&&(origin=place,place=void 0);\nif(\"string\"===typeof origin){const index=origin.indexOf(\":\");-1===index?parts[1]=origin:(parts[0]=origin.slice(0,index),parts[1]=origin.slice(index+1))}if(place)if(\"type\"in place||\"position\"in place)place.position&&(position=place.position);else if(\"start\"in place||\"end\"in place)position=place;else if(\"line\"in place||\"column\"in place)position.start=place;this.name=(0,_unistUtilStringifyPosition.stringifyPosition)(place)||\"1:1\";this.message=\"object\"===typeof reason?reason.message:reason;this.stack=\n\"\";\"object\"===typeof reason&&reason.stack&&(this.stack=reason.stack);this.reason=this.message;this.line=position.start.line;this.column=position.start.column;this.position=position;this.source=parts[0];this.ruleId=parts[1]}}exports.VFileMessage=VFileMessage;VFileMessage.prototype.file=\"\";VFileMessage.prototype.name=\"\";VFileMessage.prototype.reason=\"\";VFileMessage.prototype.message=\"\";VFileMessage.prototype.stack=\"\";VFileMessage.prototype.fatal=null;VFileMessage.prototype.column=null;VFileMessage.prototype.line=\nnull;VFileMessage.prototype.source=null;VFileMessage.prototype.ruleId=null;VFileMessage.prototype.position=null}","~:source","shadow$provide[\"module$node_modules$vfile_message$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VFileMessage = void 0;\n\nvar _unistUtilStringifyPosition = require(\"unist-util-stringify-position\");\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\n/**\n * Message.\n */\nclass VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > \uD83D\uDC49 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null];\n    /** @type {Position} */\n\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {\n        line: null,\n        column: null\n      },\n      // @ts-expect-error: \"\n      end: {\n        line: null,\n        column: null\n      }\n    };\n    super();\n\n    if (typeof place === 'string') {\n      origin = place;\n      place = undefined;\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':');\n\n      if (index === -1) {\n        parts[1] = origin;\n      } else {\n        parts[0] = origin.slice(0, index);\n        parts[1] = origin.slice(index + 1);\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position;\n        }\n      } // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place;\n      } // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place;\n      }\n    } // Fields from `Error`.\n\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n\n\n    this.name = (0, _unistUtilStringifyPosition.stringifyPosition)(place) || '1:1';\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n\n    this.message = typeof reason === 'object' ? reason.message : reason;\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n\n    this.stack = '';\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack;\n    }\n    /**\n     * Reason for message.\n     *\n     * > \uD83D\uDC49 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n\n\n    this.reason = this.message;\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n\n    this.fatal;\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n\n    this.line = position.start.line;\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n\n    this.column = position.start.column;\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n\n    this.position = position;\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n\n    this.source = parts[0];\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n\n    this.ruleId = parts[1];\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n\n    this.file; // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n\n    this.actual;\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n\n    this.expected;\n    /**\n     * Link to docs for the message.\n     *\n     * > \uD83D\uDC49 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n\n    this.url;\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n\n    this.note;\n    /* eslint-enable no-unused-expressions */\n  }\n\n}\n\nexports.VFileMessage = VFileMessage;\nVFileMessage.prototype.file = '';\nVFileMessage.prototype.name = '';\nVFileMessage.prototype.reason = '';\nVFileMessage.prototype.message = '';\nVFileMessage.prototype.stack = '';\nVFileMessage.prototype.fatal = null;\nVFileMessage.prototype.column = null;\nVFileMessage.prototype.line = null;\nVFileMessage.prototype.source = null;\nVFileMessage.prototype.ruleId = null;\nVFileMessage.prototype.position = null;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$unist_util_stringify_position$index"]],"~:properties",["^5",["fatal","message","__esModule","VFileMessage","position","name","value","start","line","column","source","reason","ruleId","file","end","stack"]],"~:compiled-at",1676665867236,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$vfile_message$lib$index.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/vfile-message/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$vfile_message$lib$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.VFileMessage = void 0;\\n\\nvar _unistUtilStringifyPosition = require(\\\"unist-util-stringify-position\\\");\\n\\n/**\\n * @typedef {import('unist').Node} Node\\n * @typedef {import('unist').Position} Position\\n * @typedef {import('unist').Point} Point\\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\\n */\\n\\n/**\\n * Message.\\n */\\nclass VFileMessage extends Error {\\n  /**\\n   * Create a message for `reason` at `place` from `origin`.\\n   *\\n   * When an error is passed in as `reason`, the `stack` is copied.\\n   *\\n   * @param {string | Error | VFileMessage} reason\\n   *   Reason for message, uses the stack and message of the error if given.\\n   *\\n   *   > \\ud83d\\udc49 **Note**: you should use markdown.\\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\\n   *   Place in file where the message occurred.\\n   * @param {string | null | undefined} [origin]\\n   *   Place in code where the message originates (example:\\n   *   `'my-package:my-rule'` or `'my-rule'`).\\n   * @returns\\n   *   Instance of `VFileMessage`.\\n   */\\n  // To do: next major: expose `undefined` everywhere instead of `null`.\\n  constructor(reason, place, origin) {\\n    /** @type {[string | null, string | null]} */\\n    const parts = [null, null];\\n    /** @type {Position} */\\n\\n    let position = {\\n      // @ts-expect-error: we always follows the structure of `position`.\\n      start: {\\n        line: null,\\n        column: null\\n      },\\n      // @ts-expect-error: \\\"\\n      end: {\\n        line: null,\\n        column: null\\n      }\\n    };\\n    super();\\n\\n    if (typeof place === 'string') {\\n      origin = place;\\n      place = undefined;\\n    }\\n\\n    if (typeof origin === 'string') {\\n      const index = origin.indexOf(':');\\n\\n      if (index === -1) {\\n        parts[1] = origin;\\n      } else {\\n        parts[0] = origin.slice(0, index);\\n        parts[1] = origin.slice(index + 1);\\n      }\\n    }\\n\\n    if (place) {\\n      // Node.\\n      if ('type' in place || 'position' in place) {\\n        if (place.position) {\\n          // To do: next major: deep clone.\\n          // @ts-expect-error: looks like a position.\\n          position = place.position;\\n        }\\n      } // Position.\\n      else if ('start' in place || 'end' in place) {\\n        // @ts-expect-error: looks like a position.\\n        // To do: next major: deep clone.\\n        position = place;\\n      } // Point.\\n      else if ('line' in place || 'column' in place) {\\n        // To do: next major: deep clone.\\n        position.start = place;\\n      }\\n    } // Fields from `Error`.\\n\\n    /**\\n     * Serialized positional info of error.\\n     *\\n     * On normal errors, this would be something like `ParseError`, buit in\\n     * `VFile` messages we use this space to show where an error happened.\\n     */\\n\\n\\n    this.name = (0, _unistUtilStringifyPosition.stringifyPosition)(place) || '1:1';\\n    /**\\n     * Reason for message.\\n     *\\n     * @type {string}\\n     */\\n\\n    this.message = typeof reason === 'object' ? reason.message : reason;\\n    /**\\n     * Stack of message.\\n     *\\n     * This is used by normal errors to show where something happened in\\n     * programming code, irrelevant for `VFile` messages,\\n     *\\n     * @type {string}\\n     */\\n\\n    this.stack = '';\\n\\n    if (typeof reason === 'object' && reason.stack) {\\n      this.stack = reason.stack;\\n    }\\n    /**\\n     * Reason for message.\\n     *\\n     * > \\ud83d\\udc49 **Note**: you should use markdown.\\n     *\\n     * @type {string}\\n     */\\n\\n\\n    this.reason = this.message;\\n    /* eslint-disable no-unused-expressions */\\n\\n    /**\\n     * State of problem.\\n     *\\n     * * `true` \\u2014 marks associated file as no longer processable (error)\\n     * * `false` \\u2014 necessitates a (potential) change (warning)\\n     * * `null | undefined` \\u2014 for things that might not need changing (info)\\n     *\\n     * @type {boolean | null | undefined}\\n     */\\n\\n    this.fatal;\\n    /**\\n     * Starting line of error.\\n     *\\n     * @type {number | null}\\n     */\\n\\n    this.line = position.start.line;\\n    /**\\n     * Starting column of error.\\n     *\\n     * @type {number | null}\\n     */\\n\\n    this.column = position.start.column;\\n    /**\\n     * Full unist position.\\n     *\\n     * @type {Position | null}\\n     */\\n\\n    this.position = position;\\n    /**\\n     * Namespace of message (example: `'my-package'`).\\n     *\\n     * @type {string | null}\\n     */\\n\\n    this.source = parts[0];\\n    /**\\n     * Category of message (example: `'my-rule'`).\\n     *\\n     * @type {string | null}\\n     */\\n\\n    this.ruleId = parts[1];\\n    /**\\n     * Path of a file (used throughout the `VFile` ecosystem).\\n     *\\n     * @type {string | null}\\n     */\\n\\n    this.file; // The following fields are \\u201cwell known\\u201d.\\n    // Not standard.\\n    // Feel free to add other non-standard fields to your messages.\\n\\n    /**\\n     * Specify the source value that\\u2019s being reported, which is deemed\\n     * incorrect.\\n     *\\n     * @type {string | null}\\n     */\\n\\n    this.actual;\\n    /**\\n     * Suggest acceptable values that can be used instead of `actual`.\\n     *\\n     * @type {Array<string> | null}\\n     */\\n\\n    this.expected;\\n    /**\\n     * Link to docs for the message.\\n     *\\n     * > \\ud83d\\udc49 **Note**: this must be an absolute URL that can be passed as `x`\\n     * > to `new URL(x)`.\\n     *\\n     * @type {string | null}\\n     */\\n\\n    this.url;\\n    /**\\n     * Long form description of the message (you should use markdown).\\n     *\\n     * @type {string | null}\\n     */\\n\\n    this.note;\\n    /* eslint-enable no-unused-expressions */\\n  }\\n\\n}\\n\\nexports.VFileMessage = VFileMessage;\\nVFileMessage.prototype.file = '';\\nVFileMessage.prototype.name = '';\\nVFileMessage.prototype.reason = '';\\nVFileMessage.prototype.message = '';\\nVFileMessage.prototype.stack = '';\\nVFileMessage.prototype.fatal = null;\\nVFileMessage.prototype.column = null;\\nVFileMessage.prototype.line = null;\\nVFileMessage.prototype.source = null;\\nVFileMessage.prototype.ruleId = null;\\nVFileMessage.prototype.position = null;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"VFileMessage\",\"_unistUtilStringifyPosition\",\"Error\",\"constructor\",\"reason\",\"place\",\"origin\",\"parts\",\"position\",\"start\",\"line\",\"column\",\"end\",\"undefined\",\"index\",\"indexOf\",\"slice\",\"name\",\"stringifyPosition\",\"message\",\"stack\",\"source\",\"ruleId\",\"prototype\",\"file\",\"fatal\"]\n}\n"]