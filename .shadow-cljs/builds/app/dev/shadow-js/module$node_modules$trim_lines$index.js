["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/trim-lines/index.js"],"~:js","shadow$provide.module$node_modules$trim_lines$index=function(global,require,module,exports){function trimLine(value,start,end){let startIndex=0,endIndex=value.length;if(start)for(start=value.codePointAt(startIndex);9===start||32===start;)startIndex++,start=value.codePointAt(startIndex);if(end)for(end=value.codePointAt(endIndex-1);9===end||32===end;)endIndex--,end=value.codePointAt(endIndex-1);return endIndex>startIndex?value.slice(startIndex,endIndex):\"\"}Object.defineProperty(exports,\"__esModule\",\n{value:!0});exports.trimLines=function(value){value=String(value);const search=/\\r?\\n|\\r/g;let match=search.exec(value),last=0;const lines=[];for(;match;)lines.push(trimLine(value.slice(last,match.index),0<last,!0),match[0]),last=match.index+match[0].length,match=search.exec(value);lines.push(trimLine(value.slice(last),0<last,!1));return lines.join(\"\")}}","~:source","shadow$provide[\"module$node_modules$trim_lines$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trimLines = trimLines;\nconst tab = 9;\n/* `\\t` */\n\nconst space = 32;\n/* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\n\nfunction trimLines(value) {\n  const source = String(value);\n  const search = /\\r?\\n|\\r/g;\n  let match = search.exec(source);\n  let last = 0;\n  /** @type {Array<string>} */\n\n  const lines = [];\n\n  while (match) {\n    lines.push(trimLine(source.slice(last, match.index), last > 0, true), match[0]);\n    last = match.index + match[0].length;\n    match = search.exec(source);\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false));\n  return lines.join('');\n}\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\n\n\nfunction trimLine(value, start, end) {\n  let startIndex = 0;\n  let endIndex = value.length;\n\n  if (start) {\n    let code = value.codePointAt(startIndex);\n\n    while (code === tab || code === space) {\n      startIndex++;\n      code = value.codePointAt(startIndex);\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1);\n\n    while (code === tab || code === space) {\n      endIndex--;\n      code = value.codePointAt(endIndex - 1);\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : '';\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["trimLines","__esModule","value"]],"~:compiled-at",1676665867316,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$trim_lines$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqDjGC,QAASA,SAAQ,CAACC,KAAD,CAAQC,KAAR,CAAeC,GAAf,CAAoB,CACnC,IAAIC,WAAa,CAAjB,CACIC,SAAWJ,KAAMK,CAAAA,MAErB,IAAIJ,KAAJ,CAGE,IAFIK,KAEJ,CAFWN,KAAMO,CAAAA,WAAN,CAAkBJ,UAAlB,CAEX,CArDQK,CAqDR,GAAOF,KAAP,EAlDUG,EAkDV,GAAuBH,KAAvB,CAAA,CACEH,UAAA,EACA,CAAAG,KAAA,CAAON,KAAMO,CAAAA,WAAN,CAAkBJ,UAAlB,CAIX,IAAID,GAAJ,CAGE,IAFII,GAEJ,CAFWN,KAAMO,CAAAA,WAAN,CAAkBH,QAAlB,CAA6B,CAA7B,CAEX,CA9DQI,CA8DR,GAAOF,GAAP,EA3DUG,EA2DV,GAAuBH,GAAvB,CAAA,CACEF,QAAA,EACA,CAAAE,GAAA,CAAON,KAAMO,CAAAA,WAAN,CAAkBH,QAAlB,CAA6B,CAA7B,CAIX,OAAOA,SAAA,CAAWD,UAAX,CAAwBH,KAAMU,CAAAA,KAAN,CAAYP,UAAZ,CAAwBC,QAAxB,CAAxB,CAA4D,EAtBhC,CAlDrCO,MAAOC,CAAAA,cAAP,CAAsBd,OAAtB,CAA+B,YAA/B;AAA6C,CAC3CE,MAAO,CAAA,CADoC,CAA7C,CAGAF,QAAQe,CAAAA,SAAR,CAiBAA,QAAkB,CAACb,KAAD,CAAQ,CAClBc,KAAAA,CAASC,MAAA,CAAOf,KAAP,CACf,OAAMgB,OAAS,WACf,KAAIC,MAAQD,MAAOE,CAAAA,IAAP,CAAYJ,KAAZ,CAAZ,CACIK,KAAO,CAGX,OAAMC,MAAQ,EAEd,KAAA,CAAOH,KAAP,CAAA,CACEG,KAAMC,CAAAA,IAAN,CAAWtB,QAAA,CAASe,KAAOJ,CAAAA,KAAP,CAAaS,IAAb,CAAmBF,KAAMK,CAAAA,KAAzB,CAAT,CAAiD,CAAjD,CAA0CH,IAA1C,CAAoD,CAAA,CAApD,CAAX,CAAsEF,KAAA,CAAM,CAAN,CAAtE,CAEA,CADAE,IACA,CADOF,KAAMK,CAAAA,KACb,CADqBL,KAAA,CAAM,CAAN,CAASZ,CAAAA,MAC9B,CAAAY,KAAA,CAAQD,MAAOE,CAAAA,IAAP,CAAYJ,KAAZ,CAGVM,MAAMC,CAAAA,IAAN,CAAWtB,QAAA,CAASe,KAAOJ,CAAAA,KAAP,CAAaS,IAAb,CAAT,CAAoC,CAApC,CAA6BA,IAA7B,CAAuC,CAAA,CAAvC,CAAX,CACA,OAAOC,MAAMG,CAAAA,IAAN,CAAW,EAAX,CAhBiB,CAvBuE;\",\n\"sources\":[\"node_modules/trim-lines/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$trim_lines$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.trimLines = trimLines;\\nconst tab = 9;\\n/* `\\\\t` */\\n\\nconst space = 32;\\n/* ` ` */\\n\\n/**\\n * Remove initial and final spaces and tabs at the line breaks in `value`.\\n * Does not trim initial and final spaces and tabs of the value itself.\\n *\\n * @param {string} value\\n *   Value to trim.\\n * @returns {string}\\n *   Trimmed value.\\n */\\n\\nfunction trimLines(value) {\\n  const source = String(value);\\n  const search = /\\\\r?\\\\n|\\\\r/g;\\n  let match = search.exec(source);\\n  let last = 0;\\n  /** @type {Array<string>} */\\n\\n  const lines = [];\\n\\n  while (match) {\\n    lines.push(trimLine(source.slice(last, match.index), last > 0, true), match[0]);\\n    last = match.index + match[0].length;\\n    match = search.exec(source);\\n  }\\n\\n  lines.push(trimLine(source.slice(last), last > 0, false));\\n  return lines.join('');\\n}\\n/**\\n * @param {string} value\\n *   Line to trim.\\n * @param {boolean} start\\n *   Whether to trim the start of the line.\\n * @param {boolean} end\\n *   Whether to trim the end of the line.\\n * @returns {string}\\n *   Trimmed line.\\n */\\n\\n\\nfunction trimLine(value, start, end) {\\n  let startIndex = 0;\\n  let endIndex = value.length;\\n\\n  if (start) {\\n    let code = value.codePointAt(startIndex);\\n\\n    while (code === tab || code === space) {\\n      startIndex++;\\n      code = value.codePointAt(startIndex);\\n    }\\n  }\\n\\n  if (end) {\\n    let code = value.codePointAt(endIndex - 1);\\n\\n    while (code === tab || code === space) {\\n      endIndex--;\\n      code = value.codePointAt(endIndex - 1);\\n    }\\n  }\\n\\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : '';\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"trimLine\",\"value\",\"start\",\"end\",\"startIndex\",\"endIndex\",\"length\",\"code\",\"codePointAt\",\"tab\",\"space\",\"slice\",\"Object\",\"defineProperty\",\"trimLines\",\"source\",\"String\",\"search\",\"match\",\"exec\",\"last\",\"lines\",\"push\",\"index\",\"join\"]\n}\n"]