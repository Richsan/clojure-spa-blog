["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/hast-util-to-html/lib/handle/index.js"],"~:js","shadow$provide.module$node_modules$hast_util_to_html$lib$handle$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.handle=void 0;global=require(\"module$node_modules$zwitch$index\");module=require(\"module$node_modules$hast_util_to_html$lib$handle$comment\");var _doctype=require(\"module$node_modules$hast_util_to_html$lib$handle$doctype\"),_element=require(\"module$node_modules$hast_util_to_html$lib$handle$element\"),_raw=require(\"module$node_modules$hast_util_to_html$lib$handle$raw\"),\n_root=require(\"module$node_modules$hast_util_to_html$lib$handle$root\");require=require(\"module$node_modules$hast_util_to_html$lib$handle$text\");require=(0,global.zwitch)(\"type\",{invalid:function(node){throw Error(\"Expected node, not `\"+node+\"`\");},unknown:function(node){throw Error(\"Cannot compile unknown node `\"+node.type+\"`\");},handlers:{comment:module.comment,doctype:_doctype.doctype,element:_element.element,raw:_raw.raw,root:_root.root,text:require.text}});exports.handle=require}","~:source","shadow$provide[\"module$node_modules$hast_util_to_html$lib$handle$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handle = void 0;\n\nvar _zwitch = require(\"zwitch\");\n\nvar _comment = require(\"./comment.js\");\n\nvar _doctype = require(\"./doctype.js\");\n\nvar _element = require(\"./element.js\");\n\nvar _raw = require(\"./raw.js\");\n\nvar _root = require(\"./root.js\");\n\nvar _text = require(\"./text.js\");\n\n/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n */\n\n/**\n * @type {(node: Node, index: number | undefined, parent: Parent | undefined, state: State) => string}\n */\nconst handle = (0, _zwitch.zwitch)('type', {\n  invalid,\n  unknown,\n  handlers: {\n    comment: _comment.comment,\n    doctype: _doctype.doctype,\n    element: _element.element,\n    raw: _raw.raw,\n    root: _root.root,\n    text: _text.text\n  }\n});\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\n\nexports.handle = handle;\n\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`');\n}\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\n\n\nfunction unknown(node) {\n  // @ts-expect-error: `type` is defined.\n  throw new Error('Cannot compile unknown node `' + node.type + '`');\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$hast_util_to_html$lib$handle$raw","~$shadow.js","~$module$node_modules$hast_util_to_html$lib$handle$doctype","~$module$node_modules$hast_util_to_html$lib$handle$comment","~$module$node_modules$hast_util_to_html$lib$handle$element","~$module$node_modules$hast_util_to_html$lib$handle$text","~$module$node_modules$zwitch$index","~$module$node_modules$hast_util_to_html$lib$handle$root"]],"~:properties",["^5",["handle","handlers","__esModule","root","invalid","element","value","text","unknown","comment","raw","doctype"]],"~:compiled-at",1676686799670,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$hast_util_to_html$lib$handle$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,MAAR,CAAiB,IAAK,EAElBC,OAAAA,CAAUP,OAAA,CAAQ,kCAAR,CAEVQ,OAAAA,CAAWR,OAAA,CAAQ,0DAAR,CAEf,KAAIS,SAAWT,OAAA,CAAQ,0DAAR,CAAf,CAEIU,SAAWV,OAAA,CAAQ,0DAAR,CAFf,CAIIW,KAAOX,OAAA,CAAQ,sDAAR,CAJX;AAMIY,MAAQZ,OAAA,CAAQ,uDAAR,CAERa,QAAAA,CAAQb,OAAA,CAAQ,uDAAR,CAWNM,QAAAA,CAAS,GAAIC,MAAQO,CAAAA,MAAZ,EAAoB,MAApB,CAA4B,CACzCC,QAsBFA,QAAgB,CAACC,IAAD,CAAO,CACrB,KAAUC,MAAJ,CAAU,sBAAV,CAAmCD,IAAnC,CAA0C,GAA1C,CAAN,CADqB,CAvBoB,CAEzCE,QAkCFA,QAAgB,CAACF,IAAD,CAAO,CAErB,KAAUC,MAAJ,CAAU,+BAAV,CAA4CD,IAAKG,CAAAA,IAAjD,CAAwD,GAAxD,CAAN,CAFqB,CApCoB,CAGzCC,SAAU,CACRC,QAASb,MAASa,CAAAA,OADV,CAERC,QAASb,QAASa,CAAAA,OAFV,CAGRC,QAASb,QAASa,CAAAA,OAHV,CAIRC,IAAKb,IAAKa,CAAAA,GAJF,CAKRC,KAAMb,KAAMa,CAAAA,IALJ,CAMRC,KAAMb,OAAMa,CAAAA,IANJ,CAH+B,CAA5B,CAqBfxB,QAAQI,CAAAA,MAAR,CAAiBA,OApDkG;\",\n\"sources\":[\"node_modules/hast-util-to-html/lib/handle/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$hast_util_to_html$lib$handle$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.handle = void 0;\\n\\nvar _zwitch = require(\\\"zwitch\\\");\\n\\nvar _comment = require(\\\"./comment.js\\\");\\n\\nvar _doctype = require(\\\"./doctype.js\\\");\\n\\nvar _element = require(\\\"./element.js\\\");\\n\\nvar _raw = require(\\\"./raw.js\\\");\\n\\nvar _root = require(\\\"./root.js\\\");\\n\\nvar _text = require(\\\"./text.js\\\");\\n\\n/**\\n * @typedef {import('../types.js').State} State\\n * @typedef {import('../types.js').Node} Node\\n * @typedef {import('../types.js').Parent} Parent\\n */\\n\\n/**\\n * @type {(node: Node, index: number | undefined, parent: Parent | undefined, state: State) => string}\\n */\\nconst handle = (0, _zwitch.zwitch)('type', {\\n  invalid,\\n  unknown,\\n  handlers: {\\n    comment: _comment.comment,\\n    doctype: _doctype.doctype,\\n    element: _element.element,\\n    raw: _raw.raw,\\n    root: _root.root,\\n    text: _text.text\\n  }\\n});\\n/**\\n * Fail when a non-node is found in the tree.\\n *\\n * @param {unknown} node\\n *   Unknown value.\\n * @returns {never}\\n *   Never.\\n */\\n\\nexports.handle = handle;\\n\\nfunction invalid(node) {\\n  throw new Error('Expected node, not `' + node + '`');\\n}\\n/**\\n * Fail when a node with an unknown type is found in the tree.\\n *\\n * @param {unknown} node\\n *  Unknown node.\\n * @returns {never}\\n *   Never.\\n */\\n\\n\\nfunction unknown(node) {\\n  // @ts-expect-error: `type` is defined.\\n  throw new Error('Cannot compile unknown node `' + node.type + '`');\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"handle\",\"_zwitch\",\"_comment\",\"_doctype\",\"_element\",\"_raw\",\"_root\",\"_text\",\"zwitch\",\"invalid\",\"node\",\"Error\",\"unknown\",\"type\",\"handlers\",\"comment\",\"doctype\",\"element\",\"raw\",\"root\",\"text\"]\n}\n"]