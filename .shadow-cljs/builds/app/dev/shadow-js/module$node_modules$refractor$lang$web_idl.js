["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/web-idl.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$web_idl=function(global,require,module,exports){function webIdl(Prism){var id=/(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source,type=\"(?:\"+/\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source+\"|\"+/\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source+\"|\"+/(?!(?:unrestricted|unsigned)\\b)/.source+id+/(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source+\")\"+/(?:\\s*\\?)?/.source,typeInside={};Prism.languages[\"web-idl\"]={comment:{pattern:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,greedy:!0},string:{pattern:/\"[^\"]*\"/,\ngreedy:!0},namespace:{pattern:RegExp(/(\\bnamespace\\s+)/.source+id),lookbehind:!0},\"class-name\":[{pattern:/(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,lookbehind:!0,inside:typeInside},{pattern:RegExp(/(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source+type),lookbehind:!0,inside:typeInside},{pattern:RegExp(\"(\"+/\\bcallback\\s+/.source+id+/\\s*=\\s*/.source+\")\"+type),lookbehind:!0,inside:typeInside},{pattern:RegExp(/(\\btypedef\\b\\s*)/.source+type),lookbehind:!0,inside:typeInside},\n{pattern:RegExp(/(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/.source+id),lookbehind:!0},{pattern:RegExp(/(:\\s*)/.source+id),lookbehind:!0},RegExp(id+/(?=\\s+(?:implements|includes)\\b)/.source),{pattern:RegExp(/(\\b(?:implements|includes)\\s+)/.source+id),lookbehind:!0},{pattern:RegExp(type+\"(?\\x3d\"+/\\s*(?:\\.{3}\\s*)?/.source+id+/\\s*[(),;=]/.source+\")\"),inside:typeInside}],builtin:/\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\nkeyword:[/\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/,/\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/],boolean:/\\b(?:false|true)\\b/,number:{pattern:/(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\nlookbehind:!0},operator:/\\.{3}|[=:?<>-]/,punctuation:/[(){}[\\].,;]/};for(var key in Prism.languages[\"web-idl\"])\"class-name\"!==key&&(typeInside[key]=Prism.languages[\"web-idl\"][key]);Prism.languages.webidl=Prism.languages[\"web-idl\"]}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=webIdl;webIdl.displayName=\"web-idl\";webIdl.aliases=[\"webidl\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$web_idl\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = webIdl;\n// @ts-nocheck\nwebIdl.displayName = 'web-idl';\nwebIdl.aliases = ['webidl'];\n/** @type {import('../core.js').Syntax} */\n\nfunction webIdl(Prism) {\n  ;\n\n  (function (Prism) {\n    var id = /(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source;\n    var type = '(?:' + /\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source + '|' + /\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source + '|' + /(?!(?:unrestricted|unsigned)\\b)/.source + id + /(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source + ')' + /(?:\\s*\\?)?/.source;\n    var typeInside = {};\n    Prism.languages['web-idl'] = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      namespace: {\n        pattern: RegExp(/(\\bnamespace\\s+)/.source + id),\n        lookbehind: true\n      },\n      'class-name': [{\n        pattern: /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        pattern: RegExp(/(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source + type),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // callback return type\n        pattern: RegExp('(' + /\\bcallback\\s+/.source + id + /\\s*=\\s*/.source + ')' + type),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // typedef\n        pattern: RegExp(/(\\btypedef\\b\\s*)/.source + type),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        pattern: RegExp(/(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/.source + id),\n        lookbehind: true\n      }, {\n        // inheritance\n        pattern: RegExp(/(:\\s*)/.source + id),\n        lookbehind: true\n      }, // includes and implements\n      RegExp(id + /(?=\\s+(?:implements|includes)\\b)/.source), {\n        pattern: RegExp(/(\\b(?:implements|includes)\\s+)/.source + id),\n        lookbehind: true\n      }, {\n        // function return type, parameter types, and dictionary members\n        pattern: RegExp(type + '(?=' + /\\s*(?:\\.{3}\\s*)?/.source + id + /\\s*[(),;=]/.source + ')'),\n        inside: typeInside\n      }],\n      builtin: /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\n      keyword: [/\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/, // type keywords\n      /\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/],\n      boolean: /\\b(?:false|true)\\b/,\n      number: {\n        pattern: /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\n        lookbehind: true\n      },\n      operator: /\\.{3}|[=:?<>-]/,\n      punctuation: /[(){}[\\].,;]/\n    };\n\n    for (var key in Prism.languages['web-idl']) {\n      if (key !== 'class-name') {\n        typeInside[key] = Prism.languages['web-idl'][key];\n      }\n    }\n\n    Prism.languages['webidl'] = Prism.languages['web-idl'];\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","punctuation","string","aliases","operator","displayName","__esModule","lookbehind","value","keyword","number","greedy","pattern","inside","namespace","comment","builtin","default"]],"~:compiled-at",1676841365474,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$web_idl.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/web-idl.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$web_idl\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = webIdl;\\n// @ts-nocheck\\nwebIdl.displayName = 'web-idl';\\nwebIdl.aliases = ['webidl'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction webIdl(Prism) {\\n  ;\\n\\n  (function (Prism) {\\n    var id = /(?:\\\\B-|\\\\b_|\\\\b)[A-Za-z][\\\\w-]*(?![\\\\w-])/.source;\\n    var type = '(?:' + /\\\\b(?:unsigned\\\\s+)?long\\\\s+long(?![\\\\w-])/.source + '|' + /\\\\b(?:unrestricted|unsigned)\\\\s+[a-z]+(?![\\\\w-])/.source + '|' + /(?!(?:unrestricted|unsigned)\\\\b)/.source + id + /(?:\\\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source + ')' + /(?:\\\\s*\\\\?)?/.source;\\n    var typeInside = {};\\n    Prism.languages['web-idl'] = {\\n      comment: {\\n        pattern: /\\\\/\\\\/.*|\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\//,\\n        greedy: true\\n      },\\n      string: {\\n        pattern: /\\\"[^\\\"]*\\\"/,\\n        greedy: true\\n      },\\n      namespace: {\\n        pattern: RegExp(/(\\\\bnamespace\\\\s+)/.source + id),\\n        lookbehind: true\\n      },\\n      'class-name': [{\\n        pattern: /(^|[^\\\\w-])(?:iterable|maplike|setlike)\\\\s*<(?:[^<>]|<[^<>]*>)*>/,\\n        lookbehind: true,\\n        inside: typeInside\\n      }, {\\n        pattern: RegExp(/(\\\\b(?:attribute|const|deleter|getter|optional|setter)\\\\s+)/.source + type),\\n        lookbehind: true,\\n        inside: typeInside\\n      }, {\\n        // callback return type\\n        pattern: RegExp('(' + /\\\\bcallback\\\\s+/.source + id + /\\\\s*=\\\\s*/.source + ')' + type),\\n        lookbehind: true,\\n        inside: typeInside\\n      }, {\\n        // typedef\\n        pattern: RegExp(/(\\\\btypedef\\\\b\\\\s*)/.source + type),\\n        lookbehind: true,\\n        inside: typeInside\\n      }, {\\n        pattern: RegExp(/(\\\\b(?:callback|dictionary|enum|interface(?:\\\\s+mixin)?)\\\\s+)(?!(?:interface|mixin)\\\\b)/.source + id),\\n        lookbehind: true\\n      }, {\\n        // inheritance\\n        pattern: RegExp(/(:\\\\s*)/.source + id),\\n        lookbehind: true\\n      }, // includes and implements\\n      RegExp(id + /(?=\\\\s+(?:implements|includes)\\\\b)/.source), {\\n        pattern: RegExp(/(\\\\b(?:implements|includes)\\\\s+)/.source + id),\\n        lookbehind: true\\n      }, {\\n        // function return type, parameter types, and dictionary members\\n        pattern: RegExp(type + '(?=' + /\\\\s*(?:\\\\.{3}\\\\s*)?/.source + id + /\\\\s*[(),;=]/.source + ')'),\\n        inside: typeInside\\n      }],\\n      builtin: /\\\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\\\b/,\\n      keyword: [/\\\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\\\b/, // type keywords\\n      /\\\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\\\b/],\\n      boolean: /\\\\b(?:false|true)\\\\b/,\\n      number: {\\n        pattern: /(^|[^\\\\w-])-?(?:0x[0-9a-f]+|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?|NaN|Infinity)(?![\\\\w-])/i,\\n        lookbehind: true\\n      },\\n      operator: /\\\\.{3}|[=:?<>-]/,\\n      punctuation: /[(){}[\\\\].,;]/\\n    };\\n\\n    for (var key in Prism.languages['web-idl']) {\\n      if (key !== 'class-name') {\\n        typeInside[key] = Prism.languages['web-idl'][key];\\n      }\\n    }\\n\\n    Prism.languages['webidl'] = Prism.languages['web-idl'];\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"webIdl\",\"Prism\",\"id\",\"source\",\"type\",\"typeInside\",\"languages\",\"comment\",\"pattern\",\"greedy\",\"string\",\"namespace\",\"RegExp\",\"lookbehind\",\"inside\",\"builtin\",\"keyword\",\"boolean\",\"number\",\"operator\",\"punctuation\",\"key\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]