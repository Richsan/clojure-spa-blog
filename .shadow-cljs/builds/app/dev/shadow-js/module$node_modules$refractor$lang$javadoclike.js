["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/javadoclike.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$javadoclike=function(global,require,module,exports){function javadoclike(Prism$jscomp$0){(function(Prism){function docCommentSupport(lang,callback){var grammar=Prism.languages[lang];if(grammar){var token=grammar[\"doc-comment\"];token||(grammar=Prism.languages.insertBefore(lang,\"comment\",{\"doc-comment\":{pattern:/(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0,alias:\"comment\"}}),token=grammar[\"doc-comment\"]);token instanceof RegExp&&(token=grammar[\"doc-comment\"]=\n{pattern:token});if(Array.isArray(token))for(lang=0,grammar=token.length;lang<grammar;lang++)token[lang]instanceof RegExp&&(token[lang]={pattern:token[lang]}),callback(token[lang]);else callback(token)}}var javaDocLike=Prism.languages.javadoclike={parameter:{pattern:/(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,lookbehind:!0},keyword:{pattern:/(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,lookbehind:!0},punctuation:/[{}]/};Object.defineProperty(javaDocLike,\"addSupport\",\n{value:function(languages,docLanguage){\"string\"===typeof languages&&(languages=[languages]);languages.forEach(function(lang){docCommentSupport(lang,function(pattern){pattern.inside||(pattern.inside={});pattern.inside.rest=docLanguage})})}});javaDocLike.addSupport([\"java\",\"javascript\",\"php\"],javaDocLike)})(Prism$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=javadoclike;javadoclike.displayName=\"javadoclike\";javadoclike.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$javadoclike\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = javadoclike;\n// @ts-nocheck\njavadoclike.displayName = 'javadoclike';\njavadoclike.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction javadoclike(Prism) {\n  ;\n\n  (function (Prism) {\n    var javaDocLike = Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    };\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment';\n      var grammar = Prism.languages[lang];\n\n      if (!grammar) {\n        return;\n      }\n\n      var token = grammar[tokenName];\n\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {};\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        };\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n        token = grammar[tokenName];\n      }\n\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        };\n      }\n\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            };\n          }\n\n          callback(token[i]);\n        }\n      } else {\n        callback(token);\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n\n\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages];\n      }\n\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {};\n          }\n\n          pattern.inside.rest = docLanguage;\n        });\n      });\n    }\n\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    });\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["addSupport","punctuation","parameter","aliases","displayName","__esModule","rest","lookbehind","value","keyword","pattern","inside","alias","default","javadoclike"]],"~:compiled-at",1676841365424,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$javadoclike.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAY3GC,QAASA,YAAW,CAACC,cAAD,CAAQ,CAGzB,SAAS,CAACA,KAAD,CAAQ,CAqBhBC,QAASA,kBAAiB,CAACC,IAAD,CAAOC,QAAP,CAAiB,CAEzC,IAAIC,QAAUJ,KAAMK,CAAAA,SAAN,CAAgBH,IAAhB,CAEd,IAAKE,OAAL,CAAA,CAIA,IAAIE,MAAQF,OAAA,CAPIG,aAOJ,CAEPD,MAAL,GAQEF,OACA,CADUJ,KAAMK,CAAAA,SAAUG,CAAAA,YAAhB,CAA6BN,IAA7B,CAAmC,SAAnC,CANOO,CACjB,cAAwB,CACtBC,QAAS,uCADa,CAEtBC,WAAY,CAAA,CAFU,CAGtBC,MAAO,SAHe,CADPH,CAMP,CACV,CAAAH,KAAA,CAAQF,OAAA,CAlBMG,aAkBN,CATV,CAYID,MAAJ,WAAqBO,OAArB,GAEEP,KAFF,CAEUF,OAAA,CAvBMG,aAuBN,CAFV;AAE+B,CAC3BG,QAASJ,KADkB,CAF/B,CAOA,IAAIQ,KAAMC,CAAAA,OAAN,CAAcT,KAAd,CAAJ,CACE,IAASU,IAAOC,CAAH,CAAGA,CAAAA,OAAAA,CAAIX,KAAMY,CAAAA,MAA1B,CAAkCF,IAAlC,CAAsCC,OAAtC,CAAyCD,IAAA,EAAzC,CACMV,KAAA,CAAMU,IAAN,CAMJ,UANwBH,OAMxB,GALEP,KAAA,CAAMU,IAAN,CAKF,CALa,CACTN,QAASJ,KAAA,CAAMU,IAAN,CADA,CAKb,EAAAb,QAAA,CAASG,KAAA,CAAMU,IAAN,CAAT,CARJ,KAWEb,SAAA,CAASG,KAAT,CApCF,CAJyC,CApB3C,IAAIa,YAAcnB,KAAMK,CAAAA,SAAUN,CAAAA,WAA9BoB,CAA4C,CAC9CC,UAAW,CACTV,QAAS,gEADA,CAETC,WAAY,CAAA,CAFH,CADmC,CAK9CU,QAAS,CAGPX,QAAS,uDAHF,CAIPC,WAAY,CAAA,CAJL,CALqC,CAW9CW,YAAa,MAXiC,CAuFhDC,OAAOC,CAAAA,cAAP,CAAsBL,WAAtB,CAAmC,YAAnC;AAAiD,CAC/CM,MAjBFC,QAAmB,CAACrB,SAAD,CAAYsB,WAAZ,CAAyB,CACjB,QAAzB,GAAI,MAAOtB,UAAX,GACEA,SADF,CACc,CAACA,SAAD,CADd,CAIAA,UAAUuB,CAAAA,OAAV,CAAkB,QAAS,CAAC1B,IAAD,CAAO,CAChCD,iBAAA,CAAkBC,IAAlB,CAAwB,QAAS,CAACQ,OAAD,CAAU,CACpCA,OAAQmB,CAAAA,MAAb,GACEnB,OAAQmB,CAAAA,MADV,CACmB,EADnB,CAIAnB,QAAQmB,CAAAA,MAAOC,CAAAA,IAAf,CAAsBH,WALmB,CAA3C,CADgC,CAAlC,CAL0C,CAgBK,CAAjD,CAGAR,YAAYO,CAAAA,UAAZ,CAAuB,CAAC,MAAD,CAAS,YAAT,CAAuB,KAAvB,CAAvB,CAAsDP,WAAtD,CA3FgB,CAAjB,CAAD,CA4FGnB,cA5FH,CAH0B,CAT5BuB,MAAOC,CAAAA,cAAP,CAAsB1B,OAAtB,CAA+B,YAA/B,CAA6C,CAC3C2B,MAAO,CAAA,CADoC,CAA7C,CAGA3B,QAAQiC,CAAAA,OAAR,CAAkBhC,WAElBA,YAAYiC,CAAAA,WAAZ,CAA0B,aAC1BjC,YAAYkC,CAAAA,OAAZ,CAAsB,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/javadoclike.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$javadoclike\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = javadoclike;\\n// @ts-nocheck\\njavadoclike.displayName = 'javadoclike';\\njavadoclike.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction javadoclike(Prism) {\\n  ;\\n\\n  (function (Prism) {\\n    var javaDocLike = Prism.languages.javadoclike = {\\n      parameter: {\\n        pattern: /(^[\\\\t ]*(?:\\\\/{3}|\\\\*|\\\\/\\\\*\\\\*)\\\\s*@(?:arg|arguments|param)\\\\s+)\\\\w+/m,\\n        lookbehind: true\\n      },\\n      keyword: {\\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\\n        // @word, {@word}\\n        pattern: /(^[\\\\t ]*(?:\\\\/{3}|\\\\*|\\\\/\\\\*\\\\*)\\\\s*|\\\\{)@[a-z][a-zA-Z-]+\\\\b/m,\\n        lookbehind: true\\n      },\\n      punctuation: /[{}]/\\n    };\\n    /**\\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\\n     *\\n     * @param {string} lang the language add doc comment support to.\\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\\n     */\\n\\n    function docCommentSupport(lang, callback) {\\n      var tokenName = 'doc-comment';\\n      var grammar = Prism.languages[lang];\\n\\n      if (!grammar) {\\n        return;\\n      }\\n\\n      var token = grammar[tokenName];\\n\\n      if (!token) {\\n        // add doc comment: /** */\\n        var definition = {};\\n        definition[tokenName] = {\\n          pattern: /(^|[^\\\\\\\\])\\\\/\\\\*\\\\*[^/][\\\\s\\\\S]*?(?:\\\\*\\\\/|$)/,\\n          lookbehind: true,\\n          alias: 'comment'\\n        };\\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition);\\n        token = grammar[tokenName];\\n      }\\n\\n      if (token instanceof RegExp) {\\n        // convert regex to object\\n        token = grammar[tokenName] = {\\n          pattern: token\\n        };\\n      }\\n\\n      if (Array.isArray(token)) {\\n        for (var i = 0, l = token.length; i < l; i++) {\\n          if (token[i] instanceof RegExp) {\\n            token[i] = {\\n              pattern: token[i]\\n            };\\n          }\\n\\n          callback(token[i]);\\n        }\\n      } else {\\n        callback(token);\\n      }\\n    }\\n    /**\\n     * Adds doc-comment support to the given languages for the given documentation language.\\n     *\\n     * @param {string[]|string} languages\\n     * @param {Object} docLanguage\\n     */\\n\\n\\n    function addSupport(languages, docLanguage) {\\n      if (typeof languages === 'string') {\\n        languages = [languages];\\n      }\\n\\n      languages.forEach(function (lang) {\\n        docCommentSupport(lang, function (pattern) {\\n          if (!pattern.inside) {\\n            pattern.inside = {};\\n          }\\n\\n          pattern.inside.rest = docLanguage;\\n        });\\n      });\\n    }\\n\\n    Object.defineProperty(javaDocLike, 'addSupport', {\\n      value: addSupport\\n    });\\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"javadoclike\",\"Prism\",\"docCommentSupport\",\"lang\",\"callback\",\"grammar\",\"languages\",\"token\",\"tokenName\",\"insertBefore\",\"definition\",\"pattern\",\"lookbehind\",\"alias\",\"RegExp\",\"Array\",\"isArray\",\"i\",\"l\",\"length\",\"javaDocLike\",\"parameter\",\"keyword\",\"punctuation\",\"Object\",\"defineProperty\",\"value\",\"addSupport\",\"docLanguage\",\"forEach\",\"inside\",\"rest\",\"default\",\"displayName\",\"aliases\"]\n}\n"]