["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-hast/lib/handlers/footnote.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_hast$lib$handlers$footnote=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.footnote=function(state,node){const footnoteById=state.footnoteById;for(var no=1;no in footnoteById;)no++;no=String(no);footnoteById[no]={type:\"footnoteDefinition\",identifier:no,children:[{type:\"paragraph\",children:node.children}],position:node.position};return(0,_footnoteReference.footnoteReference)(state,{type:\"footnoteReference\",\nidentifier:no,position:node.position})};var _footnoteReference=require(\"module$node_modules$mdast_util_to_hast$lib$handlers$footnote_reference\")}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_hast$lib$handlers$footnote\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.footnote = footnote;\n\nvar _footnoteReference = require(\"./footnote-reference.js\");\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// â€¦are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nfunction footnote(state, node) {\n  const footnoteById = state.footnoteById;\n  let no = 1;\n\n  while (no in footnoteById) no++;\n\n  const identifier = String(no);\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{\n      type: 'paragraph',\n      children: node.children\n    }],\n    position: node.position\n  };\n  return (0, _footnoteReference.footnoteReference)(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  });\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$mdast_util_to_hast$lib$handlers$footnote_reference"]],"~:properties",["^5",["footnote","children","__esModule","position","value","identifier","type"]],"~:compiled-at",1676665867311,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_hast$lib$handlers$footnote.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,QAAR,CAyBAA,QAAiB,CAACC,KAAD,CAAQC,IAAR,CAAc,CAC7B,MAAMC,aAAeF,KAAME,CAAAA,YAG3B,KAFA,IAAIC,GAAK,CAET,CAAOA,EAAP,GAAaD,aAAb,CAAA,CAA2BC,EAAA,EAErBC,GAAAA,CAAaC,MAAA,CAAOF,EAAP,CACnBD,aAAA,CAAaE,EAAb,CAAA,CAA2B,CACzBE,KAAM,oBADmB,CAEzBF,WAAAA,EAFyB,CAGzBG,SAAU,CAAC,CACTD,KAAM,WADG,CAETC,SAAUN,IAAKM,CAAAA,QAFN,CAAD,CAHe,CAOzBC,SAAUP,IAAKO,CAAAA,QAPU,CAS3B,OAAO,GAAIC,kBAAmBC,CAAAA,iBAAvB,EAA0CV,KAA1C,CAAiD,CACtDM,KAAM,mBADgD;AAEtDF,WAAAA,EAFsD,CAGtDI,SAAUP,IAAKO,CAAAA,QAHuC,CAAjD,CAhBsB,CAvB/B,KAAIC,mBAAqBhB,OAAA,CAAQ,wEAAR,CARgG;\",\n\"sources\":[\"node_modules/mdast-util-to-hast/lib/handlers/footnote.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_hast$lib$handlers$footnote\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.footnote = footnote;\\n\\nvar _footnoteReference = require(\\\"./footnote-reference.js\\\");\\n\\n/**\\n * @typedef {import('hast').Element} Element\\n * @typedef {import('mdast').Footnote} Footnote\\n * @typedef {import('../state.js').State} State\\n */\\n// To do: when both:\\n// * <https://github.com/micromark/micromark-extension-footnote>\\n// * <https://github.com/syntax-tree/mdast-util-footnote>\\n// \\u2026are archived, remove this (also from mdast).\\n// These inline notes are not used in GFM.\\n\\n/**\\n * Turn an mdast `footnote` node into hast.\\n *\\n * @param {State} state\\n *   Info passed around.\\n * @param {Footnote} node\\n *   mdast node.\\n * @returns {Element}\\n *   hast node.\\n */\\nfunction footnote(state, node) {\\n  const footnoteById = state.footnoteById;\\n  let no = 1;\\n\\n  while (no in footnoteById) no++;\\n\\n  const identifier = String(no);\\n  footnoteById[identifier] = {\\n    type: 'footnoteDefinition',\\n    identifier,\\n    children: [{\\n      type: 'paragraph',\\n      children: node.children\\n    }],\\n    position: node.position\\n  };\\n  return (0, _footnoteReference.footnoteReference)(state, {\\n    type: 'footnoteReference',\\n    identifier,\\n    position: node.position\\n  });\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"footnote\",\"state\",\"node\",\"footnoteById\",\"no\",\"identifier\",\"String\",\"type\",\"children\",\"position\",\"_footnoteReference\",\"footnoteReference\"]\n}\n"]