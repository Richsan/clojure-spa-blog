["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-core-commonmark/lib/blank-line.js"],"~:js","shadow$provide.module$node_modules$micromark_core_commonmark$lib$blank_line=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.blankLine=void 0;var _micromarkFactorySpace=require(\"module$node_modules$micromark_factory_space$index\"),_micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\");exports.blankLine={tokenize:function(effects,ok,nok){return(0,_micromarkFactorySpace.factorySpace)(effects,function(code){return null===\ncode||(0,_micromarkUtilCharacter.markdownLineEnding)(code)?ok(code):nok(code)},\"linePrefix\")},partial:!0}}","~:source","shadow$provide[\"module$node_modules$micromark_core_commonmark$lib$blank_line\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.blankLine = void 0;\n\nvar _micromarkFactorySpace = require(\"micromark-factory-space\");\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\n/** @type {Construct} */\nconst blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n/** @type {Tokenizer} */\n\nexports.blankLine = blankLine;\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return (0, _micromarkFactorySpace.factorySpace)(effects, afterWhitespace, 'linePrefix');\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code) ? ok(code) : nok(code);\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js","~$module$node_modules$micromark_factory_space$index"]],"~:properties",["^5",["partial","tokenize","blankLine","__esModule","value"]],"~:compiled-at",1676665867266,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_core_commonmark$lib$blank_line.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,SAAR,CAAoB,IAAK,EAEzB,KAAIC,uBAAyBP,OAAA,CAAQ,mDAAR,CAA7B,CAEIQ,wBAA0BR,OAAA,CAAQ,oDAAR,CAe9BE,QAAQI,CAAAA,SAAR,CANkBA,CAChBG,SAOFC,QAA0B,CAACC,OAAD,CAAUC,EAAV,CAAcC,GAAd,CAAmB,CAC3C,MAAO,GAAIN,sBAAuBO,CAAAA,YAA3B,EAAyCH,OAAzC,CAGPI,QAAwB,CAACC,IAAD,CAAO,CAC7B,MAAgB,KAAT;AAAAA,IAAA,EAAiB,GAAIR,uBAAwBS,CAAAA,kBAA5B,EAAgDD,IAAhD,CAAjB,CAAyEJ,EAAA,CAAGI,IAAH,CAAzE,CAAoFH,GAAA,CAAIG,IAAJ,CAD9D,CAHxB,CAAmE,YAAnE,CADoC,CAR3BV,CAEhBY,QAAS,CAAA,CAFOZ,CAnBuG;\",\n\"sources\":[\"node_modules/micromark-core-commonmark/lib/blank-line.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_core_commonmark$lib$blank_line\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.blankLine = void 0;\\n\\nvar _micromarkFactorySpace = require(\\\"micromark-factory-space\\\");\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Construct} Construct\\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\\n * @typedef {import('micromark-util-types').State} State\\n */\\n\\n/** @type {Construct} */\\nconst blankLine = {\\n  tokenize: tokenizeBlankLine,\\n  partial: true\\n};\\n/** @type {Tokenizer} */\\n\\nexports.blankLine = blankLine;\\n\\nfunction tokenizeBlankLine(effects, ok, nok) {\\n  return (0, _micromarkFactorySpace.factorySpace)(effects, afterWhitespace, 'linePrefix');\\n  /** @type {State} */\\n\\n  function afterWhitespace(code) {\\n    return code === null || (0, _micromarkUtilCharacter.markdownLineEnding)(code) ? ok(code) : nok(code);\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"blankLine\",\"_micromarkFactorySpace\",\"_micromarkUtilCharacter\",\"tokenize\",\"tokenizeBlankLine\",\"effects\",\"ok\",\"nok\",\"factorySpace\",\"afterWhitespace\",\"code\",\"markdownLineEnding\",\"partial\"]\n}\n"]