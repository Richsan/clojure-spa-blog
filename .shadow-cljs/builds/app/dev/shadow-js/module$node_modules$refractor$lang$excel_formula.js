["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/excel-formula.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$excel_formula=function(global,require,module,exports){function excelFormula(Prism){Prism.languages[\"excel-formula\"]={comment:{pattern:/(\\bN\\(\\s*)\"(?:[^\"]|\"\")*\"(?=\\s*\\))/i,lookbehind:!0,greedy:!0},string:{pattern:/\"(?:[^\"]|\"\")*\"(?!\")/,greedy:!0},reference:{pattern:/(?:'[^']*'|(?:[^\\s()[\\]{}<>*?\"';,$&]*\\[[^^\\s()[\\]{}<>*?\"']+\\])?\\w+)!/,greedy:!0,alias:\"string\",inside:{operator:/!$/,punctuation:/'/,sheet:{pattern:/[^[\\]]+$/,alias:\"function\"},file:{pattern:/\\[[^[\\]]+\\]$/,\ninside:{punctuation:/[[\\]]/}},path:/[\\s\\S]+/}},\"function-name\":{pattern:/\\b[A-Z]\\w*(?=\\()/i,alias:\"builtin\"},range:{pattern:/\\$?\\b(?:[A-Z]+\\$?\\d+:\\$?[A-Z]+\\$?\\d+|[A-Z]+:\\$?[A-Z]+|\\d+:\\$?\\d+)\\b/i,alias:\"selector\",inside:{operator:/:/,cell:/\\$?[A-Z]+\\$?\\d+/i,column:/\\$?[A-Z]+/i,row:/\\$?\\d+/}},cell:{pattern:/\\b[A-Z]+\\d+\\b|\\$[A-Za-z]+\\$?\\d+\\b|\\b[A-Za-z]+\\$\\d+\\b/,alias:\"selector\"},number:/(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,boolean:/\\b(?:FALSE|TRUE)\\b/i,operator:/[-+*/^%=&,]|<[=>]?|>=?/,punctuation:/[[\\]();{}|]/};\nPrism.languages.xlsx=Prism.languages.xls=Prism.languages[\"excel-formula\"]}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=excelFormula;excelFormula.displayName=\"excel-formula\";excelFormula.aliases=[\"xls\",\"xlsx\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$excel_formula\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = excelFormula;\n// @ts-nocheck\nexcelFormula.displayName = 'excel-formula';\nexcelFormula.aliases = ['xls', 'xlsx'];\n/** @type {import('../core.js').Syntax} */\n\nfunction excelFormula(Prism) {\n  Prism.languages['excel-formula'] = {\n    comment: {\n      pattern: /(\\bN\\(\\s*)\"(?:[^\"]|\"\")*\"(?=\\s*\\))/i,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    reference: {\n      // https://www.ablebits.com/office-addins-blog/2015/12/08/excel-reference-another-sheet-workbook/\n      // Sales!B2\n      // 'Winter sales'!B2\n      // [Sales.xlsx]Jan!B2:B5\n      // D:\\Reports\\[Sales.xlsx]Jan!B2:B5\n      // '[Sales.xlsx]Jan sales'!B2:B5\n      // 'D:\\Reports\\[Sales.xlsx]Jan sales'!B2:B5\n      pattern: /(?:'[^']*'|(?:[^\\s()[\\]{}<>*?\"';,$&]*\\[[^^\\s()[\\]{}<>*?\"']+\\])?\\w+)!/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        operator: /!$/,\n        punctuation: /'/,\n        sheet: {\n          pattern: /[^[\\]]+$/,\n          alias: 'function'\n        },\n        file: {\n          pattern: /\\[[^[\\]]+\\]$/,\n          inside: {\n            punctuation: /[[\\]]/\n          }\n        },\n        path: /[\\s\\S]+/\n      }\n    },\n    'function-name': {\n      pattern: /\\b[A-Z]\\w*(?=\\()/i,\n      alias: 'builtin'\n    },\n    range: {\n      pattern: /\\$?\\b(?:[A-Z]+\\$?\\d+:\\$?[A-Z]+\\$?\\d+|[A-Z]+:\\$?[A-Z]+|\\d+:\\$?\\d+)\\b/i,\n      alias: 'selector',\n      inside: {\n        operator: /:/,\n        cell: /\\$?[A-Z]+\\$?\\d+/i,\n        column: /\\$?[A-Z]+/i,\n        row: /\\$?\\d+/\n      }\n    },\n    cell: {\n      // Excel is case insensitive, so the string \"foo1\" could be either a variable or a cell.\n      // To combat this, we match cells case insensitive, if the contain at least one \"$\", and case sensitive otherwise.\n      pattern: /\\b[A-Z]+\\d+\\b|\\$[A-Za-z]+\\$?\\d+\\b|\\b[A-Za-z]+\\$\\d+\\b/,\n      alias: 'selector'\n    },\n    number: /(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:FALSE|TRUE)\\b/i,\n    operator: /[-+*/^%=&,]|<[=>]?|>=?/,\n    punctuation: /[[\\]();{}|]/\n  };\n  Prism.languages['xlsx'] = Prism.languages['xls'] = Prism.languages['excel-formula'];\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","range","punctuation","string","aliases","operator","displayName","__esModule","path","cell","lookbehind","sheet","value","number","greedy","column","reference","pattern","row","inside","file","alias","comment","default"]],"~:compiled-at",1676841365409,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$excel_formula.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAY7GC,QAASA,aAAY,CAACC,KAAD,CAAQ,CAC3BA,KAAMC,CAAAA,SAAN,CAAgB,eAAhB,CAAA,CAAmC,CACjCC,QAAS,CACPC,QAAS,oCADF,CAEPC,WAAY,CAAA,CAFL,CAGPC,OAAQ,CAAA,CAHD,CADwB,CAMjCC,OAAQ,CACNH,QAAS,qBADH,CAENE,OAAQ,CAAA,CAFF,CANyB,CAUjCE,UAAW,CAQTJ,QAAS,sEARA,CASTE,OAAQ,CAAA,CATC,CAUTG,MAAO,QAVE,CAWTC,OAAQ,CACNC,SAAU,IADJ,CAENC,YAAa,GAFP,CAGNC,MAAO,CACLT,QAAS,UADJ,CAELK,MAAO,UAFF,CAHD,CAONK,KAAM,CACJV,QAAS,cADL;AAEJM,OAAQ,CACNE,YAAa,OADP,CAFJ,CAPA,CAaNG,KAAM,SAbA,CAXC,CAVsB,CAqCjC,gBAAiB,CACfX,QAAS,mBADM,CAEfK,MAAO,SAFQ,CArCgB,CAyCjCO,MAAO,CACLZ,QAAS,sEADJ,CAELK,MAAO,UAFF,CAGLC,OAAQ,CACNC,SAAU,GADJ,CAENM,KAAM,kBAFA,CAGNC,OAAQ,YAHF,CAINC,IAAK,QAJC,CAHH,CAzC0B,CAmDjCF,KAAM,CAGJb,QAAS,sDAHL,CAIJK,MAAO,UAJH,CAnD2B,CAyDjCW,OAAQ,8CAzDyB,CA0DjCC,QAAS,qBA1DwB,CA2DjCV,SAAU,wBA3DuB,CA4DjCC,YAAa,aA5DoB,CA8DnCX;KAAMC,CAAAA,SAAN,CAAA,IAAA,CAA0BD,KAAMC,CAAAA,SAAN,CAAA,GAA1B,CAAmDD,KAAMC,CAAAA,SAAN,CAAgB,eAAhB,CA/DxB,CAT7BoB,MAAOC,CAAAA,cAAP,CAAsBxB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CyB,MAAO,CAAA,CADoC,CAA7C,CAGAzB,QAAQ0B,CAAAA,OAAR,CAAkBzB,YAElBA,aAAa0B,CAAAA,WAAb,CAA2B,eAC3B1B,aAAa2B,CAAAA,OAAb,CAAuB,CAAC,KAAD,CAAQ,MAAR,CATsF;\",\n\"sources\":[\"node_modules/refractor/lang/excel-formula.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$excel_formula\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = excelFormula;\\n// @ts-nocheck\\nexcelFormula.displayName = 'excel-formula';\\nexcelFormula.aliases = ['xls', 'xlsx'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction excelFormula(Prism) {\\n  Prism.languages['excel-formula'] = {\\n    comment: {\\n      pattern: /(\\\\bN\\\\(\\\\s*)\\\"(?:[^\\\"]|\\\"\\\")*\\\"(?=\\\\s*\\\\))/i,\\n      lookbehind: true,\\n      greedy: true\\n    },\\n    string: {\\n      pattern: /\\\"(?:[^\\\"]|\\\"\\\")*\\\"(?!\\\")/,\\n      greedy: true\\n    },\\n    reference: {\\n      // https://www.ablebits.com/office-addins-blog/2015/12/08/excel-reference-another-sheet-workbook/\\n      // Sales!B2\\n      // 'Winter sales'!B2\\n      // [Sales.xlsx]Jan!B2:B5\\n      // D:\\\\Reports\\\\[Sales.xlsx]Jan!B2:B5\\n      // '[Sales.xlsx]Jan sales'!B2:B5\\n      // 'D:\\\\Reports\\\\[Sales.xlsx]Jan sales'!B2:B5\\n      pattern: /(?:'[^']*'|(?:[^\\\\s()[\\\\]{}<>*?\\\"';,$&]*\\\\[[^^\\\\s()[\\\\]{}<>*?\\\"']+\\\\])?\\\\w+)!/,\\n      greedy: true,\\n      alias: 'string',\\n      inside: {\\n        operator: /!$/,\\n        punctuation: /'/,\\n        sheet: {\\n          pattern: /[^[\\\\]]+$/,\\n          alias: 'function'\\n        },\\n        file: {\\n          pattern: /\\\\[[^[\\\\]]+\\\\]$/,\\n          inside: {\\n            punctuation: /[[\\\\]]/\\n          }\\n        },\\n        path: /[\\\\s\\\\S]+/\\n      }\\n    },\\n    'function-name': {\\n      pattern: /\\\\b[A-Z]\\\\w*(?=\\\\()/i,\\n      alias: 'builtin'\\n    },\\n    range: {\\n      pattern: /\\\\$?\\\\b(?:[A-Z]+\\\\$?\\\\d+:\\\\$?[A-Z]+\\\\$?\\\\d+|[A-Z]+:\\\\$?[A-Z]+|\\\\d+:\\\\$?\\\\d+)\\\\b/i,\\n      alias: 'selector',\\n      inside: {\\n        operator: /:/,\\n        cell: /\\\\$?[A-Z]+\\\\$?\\\\d+/i,\\n        column: /\\\\$?[A-Z]+/i,\\n        row: /\\\\$?\\\\d+/\\n      }\\n    },\\n    cell: {\\n      // Excel is case insensitive, so the string \\\"foo1\\\" could be either a variable or a cell.\\n      // To combat this, we match cells case insensitive, if the contain at least one \\\"$\\\", and case sensitive otherwise.\\n      pattern: /\\\\b[A-Z]+\\\\d+\\\\b|\\\\$[A-Za-z]+\\\\$?\\\\d+\\\\b|\\\\b[A-Za-z]+\\\\$\\\\d+\\\\b/,\\n      alias: 'selector'\\n    },\\n    number: /(?:\\\\b\\\\d+(?:\\\\.\\\\d+)?|\\\\B\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\\\\b/i,\\n    boolean: /\\\\b(?:FALSE|TRUE)\\\\b/i,\\n    operator: /[-+*/^%=&,]|<[=>]?|>=?/,\\n    punctuation: /[[\\\\]();{}|]/\\n  };\\n  Prism.languages['xlsx'] = Prism.languages['xls'] = Prism.languages['excel-formula'];\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"excelFormula\",\"Prism\",\"languages\",\"comment\",\"pattern\",\"lookbehind\",\"greedy\",\"string\",\"reference\",\"alias\",\"inside\",\"operator\",\"punctuation\",\"sheet\",\"file\",\"path\",\"range\",\"cell\",\"column\",\"row\",\"number\",\"boolean\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]