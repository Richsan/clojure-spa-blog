["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-core-commonmark/lib/autolink.js"],"~:js","shadow$provide.module$node_modules$micromark_core_commonmark$lib$autolink=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.autolink=void 0;var _micromarkUtilCharacter=require(\"module$node_modules$micromark_util_character$index\");exports.autolink={name:\"autolink\",tokenize:function(effects,ok,nok){function open(code){return(0,_micromarkUtilCharacter.asciiAlpha)(code)?(effects.consume(code),schemeOrEmailAtext):(0,_micromarkUtilCharacter.asciiAtext)(code)?\nemailAtext(code):nok(code)}function schemeOrEmailAtext(code){return 43===code||45===code||46===code||(0,_micromarkUtilCharacter.asciiAlphanumeric)(code)?schemeInsideOrEmailAtext(code):emailAtext(code)}function schemeInsideOrEmailAtext(code){return 58===code?(effects.consume(code),urlInside):(43===code||45===code||46===code||(0,_micromarkUtilCharacter.asciiAlphanumeric)(code))&&32>size++?(effects.consume(code),schemeInsideOrEmailAtext):emailAtext(code)}function urlInside(code){if(62===code)return effects.exit(\"autolinkProtocol\"),\nend(code);if(null===code||32===code||60===code||(0,_micromarkUtilCharacter.asciiControl)(code))return nok(code);effects.consume(code);return urlInside}function emailAtext(code){return 64===code?(effects.consume(code),size=0,emailAtSignOrDot):(0,_micromarkUtilCharacter.asciiAtext)(code)?(effects.consume(code),emailAtext):nok(code)}function emailAtSignOrDot(code){return(0,_micromarkUtilCharacter.asciiAlphanumeric)(code)?emailLabel(code):nok(code)}function emailLabel(code){return 46===code?(effects.consume(code),\nsize=0,emailAtSignOrDot):62===code?(effects.exit(\"autolinkProtocol\").type=\"autolinkEmail\",end(code)):emailValue(code)}function emailValue(code){return(45===code||(0,_micromarkUtilCharacter.asciiAlphanumeric)(code))&&63>size++?(effects.consume(code),45===code?emailValue:emailLabel):nok(code)}function end(code){effects.enter(\"autolinkMarker\");effects.consume(code);effects.exit(\"autolinkMarker\");effects.exit(\"autolink\");return ok}let size=1;return function(code){effects.enter(\"autolink\");effects.enter(\"autolinkMarker\");\neffects.consume(code);effects.exit(\"autolinkMarker\");effects.enter(\"autolinkProtocol\");return open}}}}","~:source","shadow$provide[\"module$node_modules$micromark_core_commonmark$lib$autolink\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.autolink = void 0;\n\nvar _micromarkUtilCharacter = require(\"micromark-util-character\");\n\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\n/** @type {Construct} */\nconst autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n/** @type {Tokenizer} */\n\nexports.autolink = autolink;\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink');\n    effects.enter('autolinkMarker');\n    effects.consume(code);\n    effects.exit('autolinkMarker');\n    effects.enter('autolinkProtocol');\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n\n    return (0, _micromarkUtilCharacter.asciiAtext)(code) ? emailAtext(code) : nok(code);\n  }\n  /** @type {State} */\n\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code) ? schemeInsideOrEmailAtext(code) : emailAtext(code);\n  }\n  /** @type {State} */\n\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      return urlInside;\n    }\n\n    if ((code === 43 || code === 45 || code === 46 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n\n    return emailAtext(code);\n  }\n  /** @type {State} */\n\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol');\n      return end(code);\n    }\n\n    if (code === null || code === 32 || code === 60 || (0, _micromarkUtilCharacter.asciiControl)(code)) {\n      return nok(code);\n    }\n\n    effects.consume(code);\n    return urlInside;\n  }\n  /** @type {State} */\n\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n\n    if ((0, _micromarkUtilCharacter.asciiAtext)(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function emailAtSignOrDot(code) {\n    return (0, _micromarkUtilCharacter.asciiAlphanumeric)(code) ? emailLabel(code) : nok(code);\n  }\n  /** @type {State} */\n\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail';\n      return end(code);\n    }\n\n    return emailValue(code);\n  }\n  /** @type {State} */\n\n\n  function emailValue(code) {\n    if ((code === 45 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) && size++ < 63) {\n      effects.consume(code);\n      return code === 45 ? emailValue : emailLabel;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function end(code) {\n    effects.enter('autolinkMarker');\n    effects.consume(code);\n    effects.exit('autolinkMarker');\n    effects.exit('autolink');\n    return ok;\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$micromark_util_character$index","~$shadow.js"]],"~:properties",["^5",["tokenize","__esModule","name","value","type","autolink"]],"~:compiled-at",1676665867266,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_core_commonmark$lib$autolink.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/micromark-core-commonmark/lib/autolink.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_core_commonmark$lib$autolink\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.autolink = void 0;\\n\\nvar _micromarkUtilCharacter = require(\\\"micromark-util-character\\\");\\n\\n/**\\n * @typedef {import('micromark-util-types').Construct} Construct\\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\\n * @typedef {import('micromark-util-types').State} State\\n */\\n\\n/** @type {Construct} */\\nconst autolink = {\\n  name: 'autolink',\\n  tokenize: tokenizeAutolink\\n};\\n/** @type {Tokenizer} */\\n\\nexports.autolink = autolink;\\n\\nfunction tokenizeAutolink(effects, ok, nok) {\\n  let size = 1;\\n  return start;\\n  /** @type {State} */\\n\\n  function start(code) {\\n    effects.enter('autolink');\\n    effects.enter('autolinkMarker');\\n    effects.consume(code);\\n    effects.exit('autolinkMarker');\\n    effects.enter('autolinkProtocol');\\n    return open;\\n  }\\n  /** @type {State} */\\n\\n\\n  function open(code) {\\n    if ((0, _micromarkUtilCharacter.asciiAlpha)(code)) {\\n      effects.consume(code);\\n      return schemeOrEmailAtext;\\n    }\\n\\n    return (0, _micromarkUtilCharacter.asciiAtext)(code) ? emailAtext(code) : nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function schemeOrEmailAtext(code) {\\n    return code === 43 || code === 45 || code === 46 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code) ? schemeInsideOrEmailAtext(code) : emailAtext(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function schemeInsideOrEmailAtext(code) {\\n    if (code === 58) {\\n      effects.consume(code);\\n      return urlInside;\\n    }\\n\\n    if ((code === 43 || code === 45 || code === 46 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) && size++ < 32) {\\n      effects.consume(code);\\n      return schemeInsideOrEmailAtext;\\n    }\\n\\n    return emailAtext(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function urlInside(code) {\\n    if (code === 62) {\\n      effects.exit('autolinkProtocol');\\n      return end(code);\\n    }\\n\\n    if (code === null || code === 32 || code === 60 || (0, _micromarkUtilCharacter.asciiControl)(code)) {\\n      return nok(code);\\n    }\\n\\n    effects.consume(code);\\n    return urlInside;\\n  }\\n  /** @type {State} */\\n\\n\\n  function emailAtext(code) {\\n    if (code === 64) {\\n      effects.consume(code);\\n      size = 0;\\n      return emailAtSignOrDot;\\n    }\\n\\n    if ((0, _micromarkUtilCharacter.asciiAtext)(code)) {\\n      effects.consume(code);\\n      return emailAtext;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function emailAtSignOrDot(code) {\\n    return (0, _micromarkUtilCharacter.asciiAlphanumeric)(code) ? emailLabel(code) : nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function emailLabel(code) {\\n    if (code === 46) {\\n      effects.consume(code);\\n      size = 0;\\n      return emailAtSignOrDot;\\n    }\\n\\n    if (code === 62) {\\n      // Exit, then change the type.\\n      effects.exit('autolinkProtocol').type = 'autolinkEmail';\\n      return end(code);\\n    }\\n\\n    return emailValue(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function emailValue(code) {\\n    if ((code === 45 || (0, _micromarkUtilCharacter.asciiAlphanumeric)(code)) && size++ < 63) {\\n      effects.consume(code);\\n      return code === 45 ? emailValue : emailLabel;\\n    }\\n\\n    return nok(code);\\n  }\\n  /** @type {State} */\\n\\n\\n  function end(code) {\\n    effects.enter('autolinkMarker');\\n    effects.consume(code);\\n    effects.exit('autolinkMarker');\\n    effects.exit('autolink');\\n    return ok;\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"autolink\",\"_micromarkUtilCharacter\",\"name\",\"tokenize\",\"tokenizeAutolink\",\"effects\",\"ok\",\"nok\",\"open\",\"code\",\"asciiAlpha\",\"consume\",\"schemeOrEmailAtext\",\"asciiAtext\",\"emailAtext\",\"asciiAlphanumeric\",\"schemeInsideOrEmailAtext\",\"urlInside\",\"size\",\"exit\",\"end\",\"asciiControl\",\"emailAtSignOrDot\",\"emailLabel\",\"type\",\"emailValue\",\"enter\",\"start\"]\n}\n"]