["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/dot.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$dot=function(global,require,module,exports){function dot(Prism$jscomp$0){(function(Prism){function withID(source,flags){return RegExp(source.replace(/<ID>/g,function(){return ID}),flags)}var ID=\"(?:\"+[/[a-zA-Z_\\x80-\\uFFFF][\\w\\x80-\\uFFFF]*/.source,/-?(?:\\.\\d+|\\d+(?:\\.\\d*)?)/.source,/\"[^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*\"/.source,/<(?:[^<>]|(?!\\x3c!--)<(?:[^<>\"']|\"[^\"]*\"|'[^']*')+>|\\x3c!--(?:[^-]|-(?!->))*--\\x3e)*>/.source].join(\"|\")+\")\",IDInside={markup:{pattern:/(^<)[\\s\\S]+(?=>$)/,\nlookbehind:!0,alias:[\"language-markup\",\"language-html\",\"language-xml\"],inside:Prism.languages.markup}};Prism.languages.dot={comment:{pattern:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|^#.*/m,greedy:!0},\"graph-name\":{pattern:withID(/(\\b(?:digraph|graph|subgraph)[ \\t\\r\\n]+)<ID>/.source,\"i\"),lookbehind:!0,greedy:!0,alias:\"class-name\",inside:IDInside},\"attr-value\":{pattern:withID(/(=[ \\t\\r\\n]*)<ID>/.source),lookbehind:!0,greedy:!0,inside:IDInside},\"attr-name\":{pattern:withID(/([\\[;, \\t\\r\\n])<ID>(?=[ \\t\\r\\n]*=)/.source),\nlookbehind:!0,greedy:!0,inside:IDInside},keyword:/\\b(?:digraph|edge|graph|node|strict|subgraph)\\b/i,\"compass-point\":{pattern:/(:[ \\t\\r\\n]*)(?:[ewc_]|[ns][ew]?)(?![\\w\\x80-\\uFFFF])/,lookbehind:!0,alias:\"builtin\"},node:{pattern:withID(/(^|[^-.\\w\\x80-\\uFFFF\\\\])<ID>/.source),lookbehind:!0,greedy:!0,inside:IDInside},operator:/[=:]|-[->]/,punctuation:/[\\[\\]{};,]/};Prism.languages.gv=Prism.languages.dot})(Prism$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=dot;dot.displayName=\n\"dot\";dot.aliases=[\"gv\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$dot\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = dot;\n// @ts-nocheck\ndot.displayName = 'dot';\ndot.aliases = ['gv'];\n/** @type {import('../core.js').Syntax} */\n\nfunction dot(Prism) {\n  // https://www.graphviz.org/doc/info/lang.html\n  ;\n\n  (function (Prism) {\n    var ID = '(?:' + [// an identifier\n    /[a-zA-Z_\\x80-\\uFFFF][\\w\\x80-\\uFFFF]*/.source, // a number\n    /-?(?:\\.\\d+|\\d+(?:\\.\\d*)?)/.source, // a double-quoted string\n    /\"[^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*\"/.source, // HTML-like string\n    /<(?:[^<>]|(?!<!--)<(?:[^<>\"']|\"[^\"]*\"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/.source].join('|') + ')';\n    var IDInside = {\n      markup: {\n        pattern: /(^<)[\\s\\S]+(?=>$)/,\n        lookbehind: true,\n        alias: ['language-markup', 'language-html', 'language-xml'],\n        inside: Prism.languages.markup\n      }\n    };\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n\n    function withID(source, flags) {\n      return RegExp(source.replace(/<ID>/g, function () {\n        return ID;\n      }), flags);\n    }\n\n    Prism.languages.dot = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|^#.*/m,\n        greedy: true\n      },\n      'graph-name': {\n        pattern: withID(/(\\b(?:digraph|graph|subgraph)[ \\t\\r\\n]+)<ID>/.source, 'i'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name',\n        inside: IDInside\n      },\n      'attr-value': {\n        pattern: withID(/(=[ \\t\\r\\n]*)<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      'attr-name': {\n        pattern: withID(/([\\[;, \\t\\r\\n])<ID>(?=[ \\t\\r\\n]*=)/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      keyword: /\\b(?:digraph|edge|graph|node|strict|subgraph)\\b/i,\n      'compass-point': {\n        pattern: /(:[ \\t\\r\\n]*)(?:[ewc_]|[ns][ew]?)(?![\\w\\x80-\\uFFFF])/,\n        lookbehind: true,\n        alias: 'builtin'\n      },\n      node: {\n        pattern: withID(/(^|[^-.\\w\\x80-\\uFFFF\\\\])<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      operator: /[=:]|-[->]/,\n      punctuation: /[\\[\\]{};,]/\n    };\n    Prism.languages.gv = Prism.languages.dot;\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["punctuation","aliases","operator","dot","displayName","markup","__esModule","lookbehind","value","keyword","greedy","pattern","inside","gv","alias","comment","default","node"]],"~:compiled-at",1676841365406,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$dot.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYnGC,QAASA,IAAG,CAACC,cAAD,CAAQ,CAIjB,SAAS,CAACA,KAAD,CAAQ,CAoBhBC,QAASA,OAAM,CAACC,MAAD,CAASC,KAAT,CAAgB,CAC7B,MAAOC,OAAA,CAAOF,MAAOG,CAAAA,OAAP,CAAe,OAAf,CAAwB,QAAS,EAAG,CAChD,MAAOC,GADyC,CAApC,CAAP,CAEHH,KAFG,CADsB,CAnB/B,IAAIG,GAAK,KAALA,CAAa,CACjB,sCAAuCJ,CAAAA,MADtB,CAEjB,2BAA4BA,CAAAA,MAFX,CAGjB,+BAAgCA,CAAAA,MAHf,CAIjB,uFAA+EA,CAAAA,MAJ9D,CAIsEK,CAAAA,IAJtE,CAI2E,GAJ3E,CAAbD,CAI+F,GAJnG,CAKIE,SAAW,CACbC,OAAQ,CACNC,QAAS,mBADH;AAENC,WAAY,CAAA,CAFN,CAGNC,MAAO,CAAC,iBAAD,CAAoB,eAApB,CAAqC,cAArC,CAHD,CAINC,OAAQb,KAAMc,CAAAA,SAAUL,CAAAA,MAJlB,CADK,CAoBfT,MAAMc,CAAAA,SAAUf,CAAAA,GAAhB,CAAsB,CACpBgB,QAAS,CACPL,QAAS,+BADF,CAEPM,OAAQ,CAAA,CAFD,CADW,CAKpB,aAAc,CACZN,QAAST,MAAA,CAAO,8CAA+CC,CAAAA,MAAtD,CAA8D,GAA9D,CADG,CAEZS,WAAY,CAAA,CAFA,CAGZK,OAAQ,CAAA,CAHI,CAIZJ,MAAO,YAJK,CAKZC,OAAQL,QALI,CALM,CAYpB,aAAc,CACZE,QAAST,MAAA,CAAO,mBAAoBC,CAAAA,MAA3B,CADG,CAEZS,WAAY,CAAA,CAFA,CAGZK,OAAQ,CAAA,CAHI,CAIZH,OAAQL,QAJI,CAZM,CAkBpB,YAAa,CACXE,QAAST,MAAA,CAAO,oCAAqCC,CAAAA,MAA5C,CADE;AAEXS,WAAY,CAAA,CAFD,CAGXK,OAAQ,CAAA,CAHG,CAIXH,OAAQL,QAJG,CAlBO,CAwBpBS,QAAS,kDAxBW,CAyBpB,gBAAiB,CACfP,QAAS,sDADM,CAEfC,WAAY,CAAA,CAFG,CAGfC,MAAO,SAHQ,CAzBG,CA8BpBM,KAAM,CACJR,QAAST,MAAA,CAAO,8BAA+BC,CAAAA,MAAtC,CADL,CAEJS,WAAY,CAAA,CAFR,CAGJK,OAAQ,CAAA,CAHJ,CAIJH,OAAQL,QAJJ,CA9Bc,CAoCpBW,SAAU,YApCU,CAqCpBC,YAAa,YArCO,CAuCtBpB,MAAMc,CAAAA,SAAUO,CAAAA,EAAhB,CAAqBrB,KAAMc,CAAAA,SAAUf,CAAAA,GAjErB,CAAjB,CAAD,CAkEGC,cAlEH,CAJkB,CATpBsB,MAAOC,CAAAA,cAAP,CAAsBzB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3C0B,MAAO,CAAA,CADoC,CAA7C,CAGA1B,QAAQ2B,CAAAA,OAAR,CAAkB1B,GAElBA,IAAI2B,CAAAA,WAAJ;AAAkB,KAClB3B,IAAI4B,CAAAA,OAAJ,CAAc,CAAC,IAAD,CATqF;\",\n\"sources\":[\"node_modules/refractor/lang/dot.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$dot\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = dot;\\n// @ts-nocheck\\ndot.displayName = 'dot';\\ndot.aliases = ['gv'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction dot(Prism) {\\n  // https://www.graphviz.org/doc/info/lang.html\\n  ;\\n\\n  (function (Prism) {\\n    var ID = '(?:' + [// an identifier\\n    /[a-zA-Z_\\\\x80-\\\\uFFFF][\\\\w\\\\x80-\\\\uFFFF]*/.source, // a number\\n    /-?(?:\\\\.\\\\d+|\\\\d+(?:\\\\.\\\\d*)?)/.source, // a double-quoted string\\n    /\\\"[^\\\"\\\\\\\\]*(?:\\\\\\\\[\\\\s\\\\S][^\\\"\\\\\\\\]*)*\\\"/.source, // HTML-like string\\n    /<(?:[^<>]|(?!\\u003c!--)<(?:[^<>\\\"']|\\\"[^\\\"]*\\\"|'[^']*')+>|\\u003c!--(?:[^-]|-(?!->))*--\\u003e)*>/.source].join('|') + ')';\\n    var IDInside = {\\n      markup: {\\n        pattern: /(^<)[\\\\s\\\\S]+(?=>$)/,\\n        lookbehind: true,\\n        alias: ['language-markup', 'language-html', 'language-xml'],\\n        inside: Prism.languages.markup\\n      }\\n    };\\n    /**\\n     * @param {string} source\\n     * @param {string} flags\\n     * @returns {RegExp}\\n     */\\n\\n    function withID(source, flags) {\\n      return RegExp(source.replace(/<ID>/g, function () {\\n        return ID;\\n      }), flags);\\n    }\\n\\n    Prism.languages.dot = {\\n      comment: {\\n        pattern: /\\\\/\\\\/.*|\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/|^#.*/m,\\n        greedy: true\\n      },\\n      'graph-name': {\\n        pattern: withID(/(\\\\b(?:digraph|graph|subgraph)[ \\\\t\\\\r\\\\n]+)<ID>/.source, 'i'),\\n        lookbehind: true,\\n        greedy: true,\\n        alias: 'class-name',\\n        inside: IDInside\\n      },\\n      'attr-value': {\\n        pattern: withID(/(=[ \\\\t\\\\r\\\\n]*)<ID>/.source),\\n        lookbehind: true,\\n        greedy: true,\\n        inside: IDInside\\n      },\\n      'attr-name': {\\n        pattern: withID(/([\\\\[;, \\\\t\\\\r\\\\n])<ID>(?=[ \\\\t\\\\r\\\\n]*=)/.source),\\n        lookbehind: true,\\n        greedy: true,\\n        inside: IDInside\\n      },\\n      keyword: /\\\\b(?:digraph|edge|graph|node|strict|subgraph)\\\\b/i,\\n      'compass-point': {\\n        pattern: /(:[ \\\\t\\\\r\\\\n]*)(?:[ewc_]|[ns][ew]?)(?![\\\\w\\\\x80-\\\\uFFFF])/,\\n        lookbehind: true,\\n        alias: 'builtin'\\n      },\\n      node: {\\n        pattern: withID(/(^|[^-.\\\\w\\\\x80-\\\\uFFFF\\\\\\\\])<ID>/.source),\\n        lookbehind: true,\\n        greedy: true,\\n        inside: IDInside\\n      },\\n      operator: /[=:]|-[->]/,\\n      punctuation: /[\\\\[\\\\]{};,]/\\n    };\\n    Prism.languages.gv = Prism.languages.dot;\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"dot\",\"Prism\",\"withID\",\"source\",\"flags\",\"RegExp\",\"replace\",\"ID\",\"join\",\"IDInside\",\"markup\",\"pattern\",\"lookbehind\",\"alias\",\"inside\",\"languages\",\"comment\",\"greedy\",\"keyword\",\"node\",\"operator\",\"punctuation\",\"gv\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]