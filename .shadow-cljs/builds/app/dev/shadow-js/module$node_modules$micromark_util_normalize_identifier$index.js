["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-util-normalize-identifier/index.js"],"~:js","shadow$provide.module$node_modules$micromark_util_normalize_identifier$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.normalizeIdentifier=function(value){return value.replace(/[\\t\\n\\r ]+/g,\" \").replace(/^ | $/g,\"\").toLowerCase().toUpperCase()}}","~:source","shadow$provide[\"module$node_modules$micromark_util_normalize_identifier$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeIdentifier = normalizeIdentifier;\n\n/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeIdentifier(value) {\n  return value // Collapse Markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n  .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","normalizeIdentifier","value"]],"~:compiled-at",1676665867286,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_util_normalize_identifier$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,mBAAR,CAQAA,QAA4B,CAACD,KAAD,CAAQ,CAClC,MAAOA,MACNE,CAAAA,OADM,CACE,aADF,CACiB,GADjB,CAENA,CAAAA,OAFM,CAEE,QAFF,CAEY,EAFZ,CAQNC,CAAAA,WARM,EAQQC,CAAAA,WARR,EAD2B,CAdsF;\",\n\"sources\":[\"node_modules/micromark-util-normalize-identifier/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_util_normalize_identifier$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.normalizeIdentifier = normalizeIdentifier;\\n\\n/**\\n * Normalize an identifier (such as used in definitions).\\n *\\n * @param {string} value\\n * @returns {string}\\n */\\nfunction normalizeIdentifier(value) {\\n  return value // Collapse Markdown whitespace.\\n  .replace(/[\\\\t\\\\n\\\\r ]+/g, ' ') // Trim.\\n  .replace(/^ | $/g, '') // Some characters are considered \\u201cuppercase\\u201d, but if their lowercase\\n  // counterpart is uppercased will result in a different uppercase\\n  // character.\\n  // Hence, to get that form, we perform both lower- and uppercase.\\n  // Upper case makes sure keys will not interact with default prototypal\\n  // methods: no method is uppercase.\\n  .toLowerCase().toUpperCase();\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"normalizeIdentifier\",\"replace\",\"toLowerCase\",\"toUpperCase\"]\n}\n"]