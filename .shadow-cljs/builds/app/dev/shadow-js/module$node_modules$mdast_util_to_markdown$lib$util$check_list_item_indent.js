["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_markdown$lib$util$check_list_item_indent=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.checkListItemIndent=function(state){state=state.options.listItemIndent||\"tab\";if(1===state||\"1\"===state)return\"one\";if(\"tab\"!==state&&\"one\"!==state&&\"mixed\"!==state)throw Error(\"Cannot serialize items with `\"+state+\"` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`\");return state}}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_markdown$lib$util$check_list_item_indent\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkListItemIndent = checkListItemIndent;\n\n/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nfunction checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'; // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n\n  if (style === 1 || style === '1') {\n    return 'one';\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error('Cannot serialize items with `' + style + '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`');\n  }\n\n  return style;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","checkListItemIndent","value"]],"~:compiled-at",1676841365343,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_markdown$lib$util$check_list_item_indent.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,0EAAA,CAA+F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,mBAAR,CAWAA,QAA4B,CAACC,KAAD,CAAQ,CAC5BC,KAAAA,CAAQD,KAAME,CAAAA,OAAQC,CAAAA,cAAtBF,EAAwC,KAG9C,IAAc,CAAd,GAAIA,KAAJ,EAA6B,GAA7B,GAAmBA,KAAnB,CACE,MAAO,KAGT,IAAc,KAAd,GAAIA,KAAJ,EAAiC,KAAjC,GAAuBA,KAAvB,EAAoD,OAApD,GAA0CA,KAA1C,CACE,KAAUG,MAAJ,CAAU,+BAAV,CAA4CH,KAA5C,CAAoD,mEAApD,CAAN,CAGF,MAAOA,MAZ2B,CAjBmG;\",\n\"sources\":[\"node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_markdown$lib$util$check_list_item_indent\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.checkListItemIndent = checkListItemIndent;\\n\\n/**\\n * @typedef {import('../types.js').State} State\\n * @typedef {import('../types.js').Options} Options\\n */\\n\\n/**\\n * @param {State} state\\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\\n */\\nfunction checkListItemIndent(state) {\\n  const style = state.options.listItemIndent || 'tab'; // To do: remove in a major.\\n  // @ts-expect-error: deprecated.\\n\\n  if (style === 1 || style === '1') {\\n    return 'one';\\n  }\\n\\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\\n    throw new Error('Cannot serialize items with `' + style + '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`');\\n  }\\n\\n  return style;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"checkListItemIndent\",\"state\",\"style\",\"options\",\"listItemIndent\",\"Error\"]\n}\n"]