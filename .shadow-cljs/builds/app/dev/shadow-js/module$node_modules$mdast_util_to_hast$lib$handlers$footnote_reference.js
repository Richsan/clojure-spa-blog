["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_hast$lib$handlers$footnote_reference=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.footnoteReference=function(state,node){var id=String(node.identifier).toUpperCase(),safeId=(0,_micromarkUtilSanitizeUri.normalizeUri)(id.toLowerCase()),index=state.footnoteOrder.indexOf(id);-1===index?(state.footnoteOrder.push(id),state.footnoteCounts[id]=1,index=state.footnoteOrder.length):(state.footnoteCounts[id]++,\nindex+=1);id=state.footnoteCounts[id];safeId={type:\"element\",tagName:\"a\",properties:{href:\"#\"+state.clobberPrefix+\"fn-\"+safeId,id:state.clobberPrefix+\"fnref-\"+safeId+(1<id?\"-\"+id:\"\"),dataFootnoteRef:!0,ariaDescribedBy:[\"footnote-label\"]},children:[{type:\"text\",value:String(index)}]};state.patch(node,safeId);safeId={type:\"element\",tagName:\"sup\",properties:{},children:[safeId]};state.patch(node,safeId);return state.applyData(node,safeId)};var _micromarkUtilSanitizeUri=require(\"module$node_modules$micromark_util_sanitize_uri$index\")}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_hast$lib$handlers$footnote_reference\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.footnoteReference = footnoteReference;\n\nvar _micromarkUtilSanitizeUri = require(\"micromark-util-sanitize-uri\");\n\n/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nfunction footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase();\n  const safeId = (0, _micromarkUtilSanitizeUri.normalizeUri)(id.toLowerCase());\n  const index = state.footnoteOrder.indexOf(id);\n  /** @type {number} */\n\n  let counter;\n\n  if (index === -1) {\n    state.footnoteOrder.push(id);\n    state.footnoteCounts[id] = 1;\n    counter = state.footnoteOrder.length;\n  } else {\n    state.footnoteCounts[id]++;\n    counter = index + 1;\n  }\n\n  const reuseCounter = state.footnoteCounts[id];\n  /** @type {Element} */\n\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id: state.clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{\n      type: 'text',\n      value: String(counter)\n    }]\n  };\n  state.patch(node, link);\n  /** @type {Element} */\n\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  };\n  state.patch(node, sup);\n  return state.applyData(node, sup);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$micromark_util_sanitize_uri$index"]],"~:properties",["^5",["properties","footnoteReference","children","__esModule","ariaDescribedBy","id","href","value","type","tagName","dataFootnoteRef"]],"~:compiled-at",1676665867311,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_hast$lib$handlers$footnote_reference.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,sEAAA,CAA2F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,iBAAR,CAoBAA,QAA0B,CAACC,KAAD,CAAQC,IAAR,CAAc,CACtC,IAAMC,GAAKC,MAAA,CAAOF,IAAKG,CAAAA,UAAZ,CAAwBC,CAAAA,WAAxB,EAAX,CACMC,OAAS,GAAIC,yBAA0BC,CAAAA,YAA9B,EAA4CN,EAAGO,CAAAA,WAAH,EAA5C,CADf,CAEMC,MAAQV,KAAMW,CAAAA,aAAcC,CAAAA,OAApB,CAA4BV,EAA5B,CAKA,EAAC,CAAf,GAAIQ,KAAJ,EACEV,KAAMW,CAAAA,aAAcE,CAAAA,IAApB,CAAyBX,EAAzB,CAEA,CADAF,KAAMc,CAAAA,cAAN,CAAqBZ,EAArB,CACA,CAD2B,CAC3B,CAAAa,KAAA,CAAUf,KAAMW,CAAAA,aAAcK,CAAAA,MAHhC,GAKEhB,KAAMc,CAAAA,cAAN,CAAqBZ,EAArB,CAAA,EACU;AAAAQ,KAAA,EAAQ,CANpB,CASMO,GAAAA,CAAejB,KAAMc,CAAAA,cAAN,CAAqBZ,EAArB,CAGfgB,OAAAA,CAAO,CACXC,KAAM,SADK,CAEXC,QAAS,GAFE,CAGXC,WAAY,CACVC,KAAM,GAANA,CAAYtB,KAAMuB,CAAAA,aAAlBD,CAAkC,KAAlCA,CAA0ChB,MADhC,CAEVJ,GAAIF,KAAMuB,CAAAA,aAAVrB,CAA0B,QAA1BA,CAAqCI,MAArCJ,EAA8D,CAAf,CAAAe,EAAA,CAAmB,GAAnB,CAAyBA,EAAzB,CAAwC,EAAvFf,CAFU,CAGVsB,gBAAiB,CAAA,CAHP,CAIVC,gBAAiB,CAAC,gBAAD,CAJP,CAHD,CASXC,SAAU,CAAC,CACTP,KAAM,MADG,CAETrB,MAAOK,MAAA,CAAOY,KAAP,CAFE,CAAD,CATC,CAcbf,MAAM2B,CAAAA,KAAN,CAAY1B,IAAZ,CAAkBiB,MAAlB,CAGMU,OAAAA,CAAM,CACVT,KAAM,SADI,CAEVC,QAAS,KAFC,CAGVC,WAAY,EAHF,CAIVK,SAAU,CAACR,MAAD,CAJA,CAMZlB,MAAM2B,CAAAA,KAAN,CAAY1B,IAAZ,CAAkB2B,MAAlB,CACA,OAAO5B,MAAM6B,CAAAA,SAAN,CAAgB5B,IAAhB,CAAsB2B,MAAtB,CA5C+B,CAlBxC,KAAIrB,0BAA4Bd,OAAA,CAAQ,uDAAR,CARmG;\",\n\"sources\":[\"node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_hast$lib$handlers$footnote_reference\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.footnoteReference = footnoteReference;\\n\\nvar _micromarkUtilSanitizeUri = require(\\\"micromark-util-sanitize-uri\\\");\\n\\n/**\\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\\n * @typedef {import('hast').Element} Element\\n * @typedef {import('../state.js').State} State\\n */\\n\\n/**\\n * Turn an mdast `footnoteReference` node into hast.\\n *\\n * @param {State} state\\n *   Info passed around.\\n * @param {FootnoteReference} node\\n *   mdast node.\\n * @returns {Element}\\n *   hast node.\\n */\\nfunction footnoteReference(state, node) {\\n  const id = String(node.identifier).toUpperCase();\\n  const safeId = (0, _micromarkUtilSanitizeUri.normalizeUri)(id.toLowerCase());\\n  const index = state.footnoteOrder.indexOf(id);\\n  /** @type {number} */\\n\\n  let counter;\\n\\n  if (index === -1) {\\n    state.footnoteOrder.push(id);\\n    state.footnoteCounts[id] = 1;\\n    counter = state.footnoteOrder.length;\\n  } else {\\n    state.footnoteCounts[id]++;\\n    counter = index + 1;\\n  }\\n\\n  const reuseCounter = state.footnoteCounts[id];\\n  /** @type {Element} */\\n\\n  const link = {\\n    type: 'element',\\n    tagName: 'a',\\n    properties: {\\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\\n      id: state.clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : ''),\\n      dataFootnoteRef: true,\\n      ariaDescribedBy: ['footnote-label']\\n    },\\n    children: [{\\n      type: 'text',\\n      value: String(counter)\\n    }]\\n  };\\n  state.patch(node, link);\\n  /** @type {Element} */\\n\\n  const sup = {\\n    type: 'element',\\n    tagName: 'sup',\\n    properties: {},\\n    children: [link]\\n  };\\n  state.patch(node, sup);\\n  return state.applyData(node, sup);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"footnoteReference\",\"state\",\"node\",\"id\",\"String\",\"identifier\",\"toUpperCase\",\"safeId\",\"_micromarkUtilSanitizeUri\",\"normalizeUri\",\"toLowerCase\",\"index\",\"footnoteOrder\",\"indexOf\",\"push\",\"footnoteCounts\",\"counter\",\"length\",\"reuseCounter\",\"link\",\"type\",\"tagName\",\"properties\",\"href\",\"clobberPrefix\",\"dataFootnoteRef\",\"ariaDescribedBy\",\"children\",\"patch\",\"sup\",\"applyData\"]\n}\n"]