["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-gfm-task-list-item/lib/index.js"],"~:js","shadow$provide.module$node_modules$mdast_util_gfm_task_list_item$lib$index=function(global,require,module,exports){function exitCheck(token){this.stack[this.stack.length-2].checked=\"taskListCheckValueChecked\"===token.type}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.gfmTaskListItemToMarkdown=exports.gfmTaskListItemFromMarkdown=void 0;var _listItem=require(\"module$node_modules$mdast_util_to_markdown$lib$handle$list_item\"),_track=require(\"module$node_modules$mdast_util_to_markdown$lib$util$track\");\nexports.gfmTaskListItemFromMarkdown={exit:{taskListCheckValueChecked:exitCheck,taskListCheckValueUnchecked:exitCheck,paragraph:function(token){var parent=this.stack[this.stack.length-2];if(parent&&\"listItem\"===parent.type&&\"boolean\"===typeof parent.checked){const node=this.stack[this.stack.length-1],head=node.children[0];if(head&&\"text\"===head.type){parent=parent.children;let index=-1,firstParaghraph;for(;++index<parent.length;){const sibling=parent[index];if(\"paragraph\"===sibling.type){firstParaghraph=\nsibling;break}}firstParaghraph===node&&(head.value=head.value.slice(1),0===head.value.length?node.children.shift():node.position&&head.position&&\"number\"===typeof head.position.start.offset&&(head.position.start.column++,head.position.start.offset++,node.position.start=Object.assign({},head.position.start)))}}this.exit(token)}}};exports.gfmTaskListItemToMarkdown={unsafe:[{atBreak:!0,character:\"-\",after:\"[:|-]\"}],handlers:{listItem:function(node,parent,context,safeOptions){function check($0){return $0+\ncheckbox}var head=node.children[0];head=\"boolean\"===typeof node.checked&&head&&\"paragraph\"===head.type;const checkbox=\"[\"+(node.checked?\"x\":\" \")+\"] \",tracker=(0,_track.track)(safeOptions);head&&tracker.move(checkbox);node=(0,_listItem.listItem)(node,parent,context,{...safeOptions,...tracker.current()});head&&(node=node.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/,check));return node}}}}","~:source","shadow$provide[\"module$node_modules$mdast_util_gfm_task_list_item$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gfmTaskListItemToMarkdown = exports.gfmTaskListItemFromMarkdown = void 0;\n\nvar _listItem = require(\"mdast-util-to-markdown/lib/handle/list-item.js\");\n\nvar _track = require(\"mdast-util-to-markdown/lib/util/track.js\");\n\n/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nconst gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n};\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\n\nexports.gfmTaskListItemFromMarkdown = gfmTaskListItemFromMarkdown;\nconst gfmTaskListItemToMarkdown = {\n  unsafe: [{\n    atBreak: true,\n    character: '-',\n    after: '[:|-]'\n  }],\n  handlers: {\n    listItem: listItemWithTaskListItem\n  }\n};\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\nexports.gfmTaskListItemToMarkdown = gfmTaskListItemToMarkdown;\n\nfunction exitCheck(token) {\n  const node = this.stack[this.stack.length - 2]; // Weâ€™re always in a paragraph, in a list item.\n\n  node.checked = token.type === 'taskListCheckValueChecked';\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2];\n\n  if (parent && parent.type === 'listItem' && typeof parent.checked === 'boolean') {\n    const node = this.stack[this.stack.length - 1];\n    const head = node.children[0];\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children;\n      let index = -1;\n      /** @type {Paragraph | undefined} */\n\n      let firstParaghraph;\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index];\n\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling;\n          break;\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1);\n\n        if (head.value.length === 0) {\n          node.children.shift();\n        } else if (node.position && head.position && typeof head.position.start.offset === 'number') {\n          head.position.start.column++;\n          head.position.start.offset++;\n          node.position.start = Object.assign({}, head.position.start);\n        }\n      }\n    }\n  }\n\n  this.exit(token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\n\n\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0];\n  const checkable = typeof node.checked === 'boolean' && head && head.type === 'paragraph';\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] ';\n  const tracker = (0, _track.track)(safeOptions);\n\n  if (checkable) {\n    tracker.move(checkbox);\n  }\n\n  let value = (0, _listItem.listItem)(node, parent, context, { ...safeOptions,\n    ...tracker.current()\n  });\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check);\n  }\n\n  return value;\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n\n  function check($0) {\n    return $0 + checkbox;\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$mdast_util_to_markdown$lib$util$track","~$module$node_modules$mdast_util_to_markdown$lib$handle$list_item","~$shadow.js"]],"~:properties",["^5",["after","handlers","gfmTaskListItemToMarkdown","__esModule","unsafe","value","character","taskListCheckValueUnchecked","start","gfmTaskListItemFromMarkdown","paragraph","listItem","atBreak","taskListCheckValueChecked","exit","checked"]],"~:compiled-at",1676841365344,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_gfm_task_list_item$lib$index.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqExHC,QAASA,UAAS,CAACC,KAAD,CAAQ,CACX,IAAKC,CAAAA,KAALC,CAAW,IAAKD,CAAAA,KAAME,CAAAA,MAAtBD,CAA+B,CAA/BA,CAERE,CAAAA,OAAL,CAA8B,2BAA9B,GAAeJ,KAAMK,CAAAA,IAHG,CAlE1BC,MAAOC,CAAAA,cAAP,CAAsBT,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CU,MAAO,CAAA,CADoC,CAA7C,CAGAV,QAAQW,CAAAA,yBAAR,CAAoCX,OAAQY,CAAAA,2BAA5C,CAA0E,IAAK,EAE/E,KAAIC,UAAYf,OAAA,CAAQ,iEAAR,CAAhB,CAEIgB,OAAShB,OAAA,CAAQ,2DAAR,CAyCbE;OAAQY,CAAAA,2BAAR,CAboCA,CAClCG,KAAM,CACJC,0BAA2Bf,SADvB,CAEJgB,4BAA6BhB,SAFzB,CAGJiB,UAsCJC,QAAsC,CAACjB,KAAD,CAAQ,CAC5C,IAAMkB,OAAS,IAAKjB,CAAAA,KAAL,CAAW,IAAKA,CAAAA,KAAME,CAAAA,MAAtB,CAA+B,CAA/B,CAEf,IAAIe,MAAJ,EAA8B,UAA9B,GAAcA,MAAOb,CAAAA,IAArB,EAAsE,SAAtE,GAA4C,MAAOa,OAAOd,CAAAA,OAA1D,CAAiF,CAC/E,MAAMF,KAAO,IAAKD,CAAAA,KAAL,CAAW,IAAKA,CAAAA,KAAME,CAAAA,MAAtB,CAA+B,CAA/B,CAAb,CACMgB,KAAOjB,IAAKkB,CAAAA,QAAL,CAAc,CAAd,CAEb,IAAID,IAAJ,EAA0B,MAA1B,GAAYA,IAAKd,CAAAA,IAAjB,CAAkC,CAC1BgB,MAAAA,CAAWH,MAAOE,CAAAA,QACxB,KAAIE,MAAQ,CAAC,CAAb,CAGIC,eAEJ,KAAA,CAAO,EAAED,KAAT,CAAiBD,MAASlB,CAAAA,MAA1B,CAAA,CAAkC,CAChC,MAAMqB,QAAUH,MAAA,CAASC,KAAT,CAEhB,IAAqB,WAArB,GAAIE,OAAQnB,CAAAA,IAAZ,CAAkC,CAChCkB,eAAA;AAAkBC,OAClB,MAFgC,CAHF,CAS9BD,eAAJ,GAAwBrB,IAAxB,GAEEiB,IAAKX,CAAAA,KAEL,CAFaW,IAAKX,CAAAA,KAAMiB,CAAAA,KAAX,CAAiB,CAAjB,CAEb,CAA0B,CAA1B,GAAIN,IAAKX,CAAAA,KAAML,CAAAA,MAAf,CACED,IAAKkB,CAAAA,QAASM,CAAAA,KAAd,EADF,CAEWxB,IAAKyB,CAAAA,QAFhB,EAE4BR,IAAKQ,CAAAA,QAFjC,EAEmF,QAFnF,GAE6C,MAAOR,KAAKQ,CAAAA,QAASC,CAAAA,KAAMC,CAAAA,MAFxE,GAGEV,IAAKQ,CAAAA,QAASC,CAAAA,KAAME,CAAAA,MAApB,EAEA,CADAX,IAAKQ,CAAAA,QAASC,CAAAA,KAAMC,CAAAA,MAApB,EACA,CAAA3B,IAAKyB,CAAAA,QAASC,CAAAA,KAAd,CAAsBtB,MAAOyB,CAAAA,MAAP,CAAc,EAAd,CAAkBZ,IAAKQ,CAAAA,QAASC,CAAAA,KAAhC,CALxB,CAJF,CAhBgC,CAJ6C,CAmCjF,IAAKf,CAAAA,IAAL,CAAUb,KAAV,CAtC4C,CAzCtC,CAD4BU,CA6BpCZ,QAAQW,CAAAA,yBAAR,CAfkCA,CAChCuB,OAAQ,CAAC,CACPC,QAAS,CAAA,CADF,CAEPC,UAAW,GAFJ,CAGPC,MAAO,OAHA,CAAD,CADwB1B,CAMhC2B,SAAU,CACRC,SAmEJC,QAAiC,CAACpC,IAAD,CAAOgB,MAAP,CAAeqB,OAAf,CAAwBC,WAAxB,CAAqC,CAwBpEC,QAASA,MAAK,CAACC,EAAD,CAAK,CACjB,MAAOA,GAAP;AAAYC,QADK,CAvBnB,IAAMxB,KAAOjB,IAAKkB,CAAAA,QAAL,CAAc,CAAd,CACPwB,KAAAA,CAAoC,SAApCA,GAAY,MAAO1C,KAAKE,CAAAA,OAAxBwC,EAAiDzB,IAAjDyB,EAAuE,WAAvEA,GAAyDzB,IAAKd,CAAAA,IACpE,OAAMsC,SAAW,GAAXA,EAAkBzC,IAAKE,CAAAA,OAAL,CAAe,GAAf,CAAqB,GAAvCuC,EAA8C,IAApD,CACME,QAAU,GAAIjC,MAAOkC,CAAAA,KAAX,EAAkBN,WAAlB,CAEZI,KAAJ,EACEC,OAAQE,CAAAA,IAAR,CAAaJ,QAAb,CAGEnC,KAAAA,CAAQ,GAAIG,SAAU0B,CAAAA,QAAd,EAAwBnC,IAAxB,CAA8BgB,MAA9B,CAAsCqB,OAAtC,CAA+C,CAAE,GAAGC,WAAL,CACzD,GAAGK,OAAQG,CAAAA,OAAR,EADsD,CAA/C,CAIRJ,KAAJ,GACEpC,IADF,CACUA,IAAMyC,CAAAA,OAAN,CAAc,iCAAd,CAAiDR,KAAjD,CADV,CAIA,OAAOjC,KAlB6D,CApE1D,CANsBC,CApDsF;\",\n\"sources\":[\"node_modules/mdast-util-gfm-task-list-item/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_gfm_task_list_item$lib$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.gfmTaskListItemToMarkdown = exports.gfmTaskListItemFromMarkdown = void 0;\\n\\nvar _listItem = require(\\\"mdast-util-to-markdown/lib/handle/list-item.js\\\");\\n\\nvar _track = require(\\\"mdast-util-to-markdown/lib/util/track.js\\\");\\n\\n/**\\n * @typedef {import('mdast').Content} Content\\n * @typedef {import('mdast').ListItem} ListItem\\n * @typedef {import('mdast').Paragraph} Paragraph\\n * @typedef {import('mdast').Parent} Parent\\n * @typedef {import('mdast').Root} Root\\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\\n */\\n\\n/**\\n * @typedef {Extract<Root | Content, Parent>} Parents\\n */\\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\\n// `track` from `state`.\\n// To do: next major: replace exports with functions.\\n// To do: next major: use `defaulthandlers.listItem`.\\n\\n/**\\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\\n *\\n * @type {FromMarkdownExtension}\\n */\\nconst gfmTaskListItemFromMarkdown = {\\n  exit: {\\n    taskListCheckValueChecked: exitCheck,\\n    taskListCheckValueUnchecked: exitCheck,\\n    paragraph: exitParagraphWithTaskListItem\\n  }\\n};\\n/**\\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\\n *\\n * @type {ToMarkdownExtension}\\n */\\n\\nexports.gfmTaskListItemFromMarkdown = gfmTaskListItemFromMarkdown;\\nconst gfmTaskListItemToMarkdown = {\\n  unsafe: [{\\n    atBreak: true,\\n    character: '-',\\n    after: '[:|-]'\\n  }],\\n  handlers: {\\n    listItem: listItemWithTaskListItem\\n  }\\n};\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\nexports.gfmTaskListItemToMarkdown = gfmTaskListItemToMarkdown;\\n\\nfunction exitCheck(token) {\\n  const node = this.stack[this.stack.length - 2]; // We\\u2019re always in a paragraph, in a list item.\\n\\n  node.checked = token.type === 'taskListCheckValueChecked';\\n}\\n/**\\n * @this {CompileContext}\\n * @type {FromMarkdownHandle}\\n */\\n\\n\\nfunction exitParagraphWithTaskListItem(token) {\\n  const parent = this.stack[this.stack.length - 2];\\n\\n  if (parent && parent.type === 'listItem' && typeof parent.checked === 'boolean') {\\n    const node = this.stack[this.stack.length - 1];\\n    const head = node.children[0];\\n\\n    if (head && head.type === 'text') {\\n      const siblings = parent.children;\\n      let index = -1;\\n      /** @type {Paragraph | undefined} */\\n\\n      let firstParaghraph;\\n\\n      while (++index < siblings.length) {\\n        const sibling = siblings[index];\\n\\n        if (sibling.type === 'paragraph') {\\n          firstParaghraph = sibling;\\n          break;\\n        }\\n      }\\n\\n      if (firstParaghraph === node) {\\n        // Must start with a space or a tab.\\n        head.value = head.value.slice(1);\\n\\n        if (head.value.length === 0) {\\n          node.children.shift();\\n        } else if (node.position && head.position && typeof head.position.start.offset === 'number') {\\n          head.position.start.column++;\\n          head.position.start.offset++;\\n          node.position.start = Object.assign({}, head.position.start);\\n        }\\n      }\\n    }\\n  }\\n\\n  this.exit(token);\\n}\\n/**\\n * @type {ToMarkdownHandle}\\n * @param {ListItem} node\\n */\\n\\n\\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\\n  const head = node.children[0];\\n  const checkable = typeof node.checked === 'boolean' && head && head.type === 'paragraph';\\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] ';\\n  const tracker = (0, _track.track)(safeOptions);\\n\\n  if (checkable) {\\n    tracker.move(checkbox);\\n  }\\n\\n  let value = (0, _listItem.listItem)(node, parent, context, { ...safeOptions,\\n    ...tracker.current()\\n  });\\n\\n  if (checkable) {\\n    value = value.replace(/^(?:[*+-]|\\\\d+\\\\.)([\\\\r\\\\n]| {1,3})/, check);\\n  }\\n\\n  return value;\\n  /**\\n   * @param {string} $0\\n   * @returns {string}\\n   */\\n\\n  function check($0) {\\n    return $0 + checkbox;\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"exitCheck\",\"token\",\"stack\",\"node\",\"length\",\"checked\",\"type\",\"Object\",\"defineProperty\",\"value\",\"gfmTaskListItemToMarkdown\",\"gfmTaskListItemFromMarkdown\",\"_listItem\",\"_track\",\"exit\",\"taskListCheckValueChecked\",\"taskListCheckValueUnchecked\",\"paragraph\",\"exitParagraphWithTaskListItem\",\"parent\",\"head\",\"children\",\"siblings\",\"index\",\"firstParaghraph\",\"sibling\",\"slice\",\"shift\",\"position\",\"start\",\"offset\",\"column\",\"assign\",\"unsafe\",\"atBreak\",\"character\",\"after\",\"handlers\",\"listItem\",\"listItemWithTaskListItem\",\"context\",\"safeOptions\",\"check\",\"$0\",\"checkbox\",\"checkable\",\"tracker\",\"track\",\"move\",\"current\",\"replace\"]\n}\n"]