["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/hast-util-to-html/lib/handle/text.js"],"~:js","shadow$provide.module$node_modules$hast_util_to_html$lib$handle$text=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.text=function(node,_,parent,state){return!parent||\"element\"!==parent.type||\"script\"!==parent.tagName&&\"style\"!==parent.tagName?(0,_stringifyEntities.stringifyEntities)(node.value,Object.assign({},state.settings.characterReferences,{subset:[\"\\x3c\",\"\\x26\"]})):node.value};var _stringifyEntities=require(\"module$node_modules$stringify_entities$index\")}","~:source","shadow$provide[\"module$node_modules$hast_util_to_html$lib$handle$text\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.text = text;\n\nvar _stringifyEntities = require(\"stringify-entities\");\n\n/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n * @typedef {import('../types.js').Text} Text\n */\n\n/**\n * Serialize a text node.\n *\n * @param {Text | Raw} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nfunction text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent && parent.type === 'element' && (parent.tagName === 'script' || parent.tagName === 'style') ? node.value : (0, _stringifyEntities.stringifyEntities)(node.value, Object.assign({}, state.settings.characterReferences, {\n    subset: ['<', '&']\n  }));\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$stringify_entities$index"]],"~:properties",["^5",["subset","__esModule","value","text"]],"~:compiled-at",1676686799610,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$hast_util_to_html$lib$handle$text.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,IAAR,CAyBAA,QAAa,CAACC,IAAD,CAAOC,CAAP,CAAUC,MAAV,CAAkBC,KAAlB,CAAyB,CAEpC,MAAOD,CAAAA,MAAA,EAA0B,SAA1B,GAAUA,MAAOE,CAAAA,IAAjB,EAA2D,QAA3D,GAAwCF,MAAOG,CAAAA,OAA/C,EAA0F,OAA1F,GAAuEH,MAAOG,CAAAA,OAA9E,CAAkH,GAAIC,kBAAmBC,CAAAA,iBAAvB,EAA0CP,IAAKF,CAAAA,KAA/C,CAAsDF,MAAOY,CAAAA,MAAP,CAAc,EAAd,CAAkBL,KAAMM,CAAAA,QAASC,CAAAA,mBAAjC,CAAsD,CACnOC,OAAQ,CAAC,MAAD,CAAM,MAAN,CAD2N,CAAtD,CAAtD,CAAlH,CAAqGX,IAAKF,CAAAA,KAF7E,CAvBtC,KAAIQ,mBAAqBb,OAAA,CAAQ,8CAAR,CARyF;\",\n\"sources\":[\"node_modules/hast-util-to-html/lib/handle/text.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$hast_util_to_html$lib$handle$text\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.text = text;\\n\\nvar _stringifyEntities = require(\\\"stringify-entities\\\");\\n\\n/**\\n * @typedef {import('../types.js').State} State\\n * @typedef {import('../types.js').Parent} Parent\\n * @typedef {import('../types.js').Raw} Raw\\n * @typedef {import('../types.js').Text} Text\\n */\\n\\n/**\\n * Serialize a text node.\\n *\\n * @param {Text | Raw} node\\n *   Node to handle.\\n * @param {number | undefined} _\\n *   Index of `node` in `parent.\\n * @param {Parent | undefined} parent\\n *   Parent of `node`.\\n * @param {State} state\\n *   Info passed around about the current state.\\n * @returns {string}\\n *   Serialized node.\\n */\\nfunction text(node, _, parent, state) {\\n  // Check if content of `node` should be escaped.\\n  return parent && parent.type === 'element' && (parent.tagName === 'script' || parent.tagName === 'style') ? node.value : (0, _stringifyEntities.stringifyEntities)(node.value, Object.assign({}, state.settings.characterReferences, {\\n    subset: ['<', '&']\\n  }));\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"text\",\"node\",\"_\",\"parent\",\"state\",\"type\",\"tagName\",\"_stringifyEntities\",\"stringifyEntities\",\"assign\",\"settings\",\"characterReferences\",\"subset\"]\n}\n"]