["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/markdown.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$markdown=function(global,require,module,exports){module.exports=function(hljs){const INLINE_HTML={begin:/<\\/?[A-Za-z_]/,end:\"\\x3e\",subLanguage:\"xml\",relevance:0},LINK={variants:[{begin:/\\[.+?\\]\\[.*?\\]/,relevance:0},{begin:/\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,relevance:2},{begin:hljs.regex.concat(/\\[.+?\\]\\(/,/[A-Za-z][A-Za-z0-9+.-]*/,/:\\/\\/.*?\\)/),relevance:2},{begin:/\\[.+?\\]\\([./?&#].*?\\)/,relevance:1},{begin:/\\[.*?\\]\\(.*?\\)/,\nrelevance:0}],returnBegin:!0,contains:[{match:/\\[(?=\\])/},{className:\"string\",relevance:0,begin:\"\\\\[\",end:\"\\\\]\",excludeBegin:!0,returnEnd:!0},{className:\"link\",relevance:0,begin:\"\\\\]\\\\(\",end:\"\\\\)\",excludeBegin:!0,excludeEnd:!0},{className:\"symbol\",relevance:0,begin:\"\\\\]\\\\[\",end:\"\\\\]\",excludeBegin:!0,excludeEnd:!0}]},BOLD={className:\"strong\",contains:[],variants:[{begin:/_{2}(?!\\s)/,end:/_{2}/},{begin:/\\*{2}(?!\\s)/,end:/\\*{2}/}]},ITALIC={className:\"emphasis\",contains:[],variants:[{begin:/\\*(?![*\\s])/,\nend:/\\*/},{begin:/_(?![_\\s])/,end:/_/,relevance:0}]},BOLD_WITHOUT_ITALIC=hljs.inherit(BOLD,{contains:[]});hljs=hljs.inherit(ITALIC,{contains:[]});BOLD.contains.push(hljs);ITALIC.contains.push(BOLD_WITHOUT_ITALIC);let CONTAINABLE=[INLINE_HTML,LINK];[BOLD,ITALIC,BOLD_WITHOUT_ITALIC,hljs].forEach(m=>{m.contains=m.contains.concat(CONTAINABLE)});CONTAINABLE=CONTAINABLE.concat(BOLD,ITALIC);return{name:\"Markdown\",aliases:[\"md\",\"mkdown\",\"mkd\"],contains:[{className:\"section\",variants:[{begin:\"^#{1,6}\",end:\"$\",\ncontains:CONTAINABLE},{begin:\"(?\\x3d^.+?\\\\n[\\x3d-]{2,}$)\",contains:[{begin:\"^[\\x3d-]*$\"},{begin:\"^\",end:\"\\\\n\",contains:CONTAINABLE}]}]},INLINE_HTML,{className:\"bullet\",begin:\"^[ \\t]*([*+-]|(\\\\d+\\\\.))(?\\x3d\\\\s+)\",end:\"\\\\s+\",excludeEnd:!0},BOLD,ITALIC,{className:\"quote\",begin:\"^\\x3e\\\\s+\",contains:CONTAINABLE,end:\"$\"},{className:\"code\",variants:[{begin:\"(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*\"},{begin:\"(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*\"},{begin:\"```\",end:\"```+[ ]*$\"},{begin:\"~~~\",end:\"~~~+[ ]*$\"},{begin:\"`.+?`\"},\n{begin:\"(?\\x3d^( {4}|\\\\t))\",contains:[{begin:\"^( {4}|\\\\t)\",end:\"(\\\\n)$\"}],relevance:0}]},{begin:\"^[-\\\\*]{3,}\",end:\"$\"},LINK,{begin:/^\\[[^\\n]+\\]:/,returnBegin:!0,contains:[{className:\"symbol\",begin:/\\[/,end:/\\]/,excludeBegin:!0,excludeEnd:!0},{className:\"link\",begin:/:\\s*/,end:/$/,excludeBegin:!0}]}]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$markdown\"] = function(global,require,module,exports) {\n/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\n\nfunction markdown(hljs) {\n  const regex = hljs.regex;\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [\n      // TODO: fix to allow these to work with sublanguage also\n      { begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*' },\n      { begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*' },\n      // needed to allow markdown as a sublanguage to work\n      {\n        begin: '```',\n        end: '```+[ ]*$'\n      },\n      {\n        begin: '~~~',\n        end: '~~~+[ ]*$'\n      },\n      { begin: '`.+?`' },\n      {\n        begin: '(?=^( {4}|\\\\t))',\n        // use contains to gobble up multiple lines to allow the block to be whatever size\n        // but only have a single open/close tag vs one per line\n        contains: [\n          {\n            begin: '^( {4}|\\\\t)',\n            end: '(\\\\n)$'\n          }\n        ],\n        relevance: 0\n      }\n    ]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [\n      {\n        className: 'symbol',\n        begin: /\\[/,\n        end: /\\]/,\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'link',\n        begin: /:\\s*/,\n        end: /$/,\n        excludeBegin: true\n      }\n    ]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [\n      // too much like nested array access in so many languages\n      // to have any real relevance\n      {\n        begin: /\\[.+?\\]\\[.*?\\]/,\n        relevance: 0\n      },\n      // popular internet URLs\n      {\n        begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n        relevance: 2\n      },\n      {\n        begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n        relevance: 2\n      },\n      // relative urls\n      {\n        begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n        relevance: 1\n      },\n      // whatever else, lower relevance (might not be a link at all)\n      {\n        begin: /\\[.*?\\]\\(.*?\\)/,\n        relevance: 0\n      }\n    ],\n    returnBegin: true,\n    contains: [\n      {\n        // empty strings for alt or link text\n        match: /\\[(?=\\])/ },\n      {\n        className: 'string',\n        relevance: 0,\n        begin: '\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        returnEnd: true\n      },\n      {\n        className: 'link',\n        relevance: 0,\n        begin: '\\\\]\\\\(',\n        end: '\\\\)',\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'symbol',\n        relevance: 0,\n        begin: '\\\\]\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        excludeEnd: true\n      }\n    ]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /_{2}(?!\\s)/,\n        end: /_{2}/\n      },\n      {\n        begin: /\\*{2}(?!\\s)/,\n        end: /\\*{2}/\n      }\n    ]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /\\*(?![*\\s])/,\n        end: /\\*/\n      },\n      {\n        begin: /_(?![_\\s])/,\n        end: /_/,\n        relevance: 0\n      }\n    ]\n  };\n\n  // 3 level deep nesting is not allowed because it would create confusion\n  // in cases like `***testing***` because where we don't know if the last\n  // `***` is starting a new bold/italic or finishing the last one\n  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });\n  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });\n  BOLD.contains.push(ITALIC_WITHOUT_BOLD);\n  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);\n\n  let CONTAINABLE = [\n    INLINE_HTML,\n    LINK\n  ];\n\n  [\n    BOLD,\n    ITALIC,\n    BOLD_WITHOUT_ITALIC,\n    ITALIC_WITHOUT_BOLD\n  ].forEach(m => {\n    m.contains = m.contains.concat(CONTAINABLE);\n  });\n\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n\n  const HEADER = {\n    className: 'section',\n    variants: [\n      {\n        begin: '^#{1,6}',\n        end: '$',\n        contains: CONTAINABLE\n      },\n      {\n        begin: '(?=^.+?\\\\n[=-]{2,}$)',\n        contains: [\n          { begin: '^[=-]*$' },\n          {\n            begin: '^',\n            end: \"\\\\n\",\n            contains: CONTAINABLE\n          }\n        ]\n      }\n    ]\n  };\n\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n\n  return {\n    name: 'Markdown',\n    aliases: [\n      'md',\n      'mkdown',\n      'mkd'\n    ],\n    contains: [\n      HEADER,\n      INLINE_HTML,\n      LIST,\n      BOLD,\n      ITALIC,\n      BLOCKQUOTE,\n      CODE,\n      HORIZONTAL_RULE,\n      LINK,\n      LINK_REFERENCE\n    ]\n  };\n}\n\nmodule.exports = markdown;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["variants","excludeBegin","begin","aliases","returnEnd","subLanguage","className","contains","relevance","returnBegin","name","match","excludeEnd","end"]],"~:compiled-at",1676671710213,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$markdown.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/markdown.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$markdown\\\"] = function(global,require,module,exports) {\\n/*\\nLanguage: Markdown\\nRequires: xml.js\\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\\nWebsite: https://daringfireball.net/projects/markdown/\\nCategory: common, markup\\n*/\\n\\nfunction markdown(hljs) {\\n  const regex = hljs.regex;\\n  const INLINE_HTML = {\\n    begin: /<\\\\/?[A-Za-z_]/,\\n    end: '>',\\n    subLanguage: 'xml',\\n    relevance: 0\\n  };\\n  const HORIZONTAL_RULE = {\\n    begin: '^[-\\\\\\\\*]{3,}',\\n    end: '$'\\n  };\\n  const CODE = {\\n    className: 'code',\\n    variants: [\\n      // TODO: fix to allow these to work with sublanguage also\\n      { begin: '(`{3,})[^`](.|\\\\\\\\n)*?\\\\\\\\1`*[ ]*' },\\n      { begin: '(~{3,})[^~](.|\\\\\\\\n)*?\\\\\\\\1~*[ ]*' },\\n      // needed to allow markdown as a sublanguage to work\\n      {\\n        begin: '```',\\n        end: '```+[ ]*$'\\n      },\\n      {\\n        begin: '~~~',\\n        end: '~~~+[ ]*$'\\n      },\\n      { begin: '`.+?`' },\\n      {\\n        begin: '(?=^( {4}|\\\\\\\\t))',\\n        // use contains to gobble up multiple lines to allow the block to be whatever size\\n        // but only have a single open/close tag vs one per line\\n        contains: [\\n          {\\n            begin: '^( {4}|\\\\\\\\t)',\\n            end: '(\\\\\\\\n)$'\\n          }\\n        ],\\n        relevance: 0\\n      }\\n    ]\\n  };\\n  const LIST = {\\n    className: 'bullet',\\n    begin: '^[ \\\\t]*([*+-]|(\\\\\\\\d+\\\\\\\\.))(?=\\\\\\\\s+)',\\n    end: '\\\\\\\\s+',\\n    excludeEnd: true\\n  };\\n  const LINK_REFERENCE = {\\n    begin: /^\\\\[[^\\\\n]+\\\\]:/,\\n    returnBegin: true,\\n    contains: [\\n      {\\n        className: 'symbol',\\n        begin: /\\\\[/,\\n        end: /\\\\]/,\\n        excludeBegin: true,\\n        excludeEnd: true\\n      },\\n      {\\n        className: 'link',\\n        begin: /:\\\\s*/,\\n        end: /$/,\\n        excludeBegin: true\\n      }\\n    ]\\n  };\\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\\n  const LINK = {\\n    variants: [\\n      // too much like nested array access in so many languages\\n      // to have any real relevance\\n      {\\n        begin: /\\\\[.+?\\\\]\\\\[.*?\\\\]/,\\n        relevance: 0\\n      },\\n      // popular internet URLs\\n      {\\n        begin: /\\\\[.+?\\\\]\\\\(((data|javascript|mailto):|(?:http|ftp)s?:\\\\/\\\\/).*?\\\\)/,\\n        relevance: 2\\n      },\\n      {\\n        begin: regex.concat(/\\\\[.+?\\\\]\\\\(/, URL_SCHEME, /:\\\\/\\\\/.*?\\\\)/),\\n        relevance: 2\\n      },\\n      // relative urls\\n      {\\n        begin: /\\\\[.+?\\\\]\\\\([./?&#].*?\\\\)/,\\n        relevance: 1\\n      },\\n      // whatever else, lower relevance (might not be a link at all)\\n      {\\n        begin: /\\\\[.*?\\\\]\\\\(.*?\\\\)/,\\n        relevance: 0\\n      }\\n    ],\\n    returnBegin: true,\\n    contains: [\\n      {\\n        // empty strings for alt or link text\\n        match: /\\\\[(?=\\\\])/ },\\n      {\\n        className: 'string',\\n        relevance: 0,\\n        begin: '\\\\\\\\[',\\n        end: '\\\\\\\\]',\\n        excludeBegin: true,\\n        returnEnd: true\\n      },\\n      {\\n        className: 'link',\\n        relevance: 0,\\n        begin: '\\\\\\\\]\\\\\\\\(',\\n        end: '\\\\\\\\)',\\n        excludeBegin: true,\\n        excludeEnd: true\\n      },\\n      {\\n        className: 'symbol',\\n        relevance: 0,\\n        begin: '\\\\\\\\]\\\\\\\\[',\\n        end: '\\\\\\\\]',\\n        excludeBegin: true,\\n        excludeEnd: true\\n      }\\n    ]\\n  };\\n  const BOLD = {\\n    className: 'strong',\\n    contains: [], // defined later\\n    variants: [\\n      {\\n        begin: /_{2}(?!\\\\s)/,\\n        end: /_{2}/\\n      },\\n      {\\n        begin: /\\\\*{2}(?!\\\\s)/,\\n        end: /\\\\*{2}/\\n      }\\n    ]\\n  };\\n  const ITALIC = {\\n    className: 'emphasis',\\n    contains: [], // defined later\\n    variants: [\\n      {\\n        begin: /\\\\*(?![*\\\\s])/,\\n        end: /\\\\*/\\n      },\\n      {\\n        begin: /_(?![_\\\\s])/,\\n        end: /_/,\\n        relevance: 0\\n      }\\n    ]\\n  };\\n\\n  // 3 level deep nesting is not allowed because it would create confusion\\n  // in cases like `***testing***` because where we don't know if the last\\n  // `***` is starting a new bold/italic or finishing the last one\\n  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });\\n  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });\\n  BOLD.contains.push(ITALIC_WITHOUT_BOLD);\\n  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);\\n\\n  let CONTAINABLE = [\\n    INLINE_HTML,\\n    LINK\\n  ];\\n\\n  [\\n    BOLD,\\n    ITALIC,\\n    BOLD_WITHOUT_ITALIC,\\n    ITALIC_WITHOUT_BOLD\\n  ].forEach(m => {\\n    m.contains = m.contains.concat(CONTAINABLE);\\n  });\\n\\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\\n\\n  const HEADER = {\\n    className: 'section',\\n    variants: [\\n      {\\n        begin: '^#{1,6}',\\n        end: '$',\\n        contains: CONTAINABLE\\n      },\\n      {\\n        begin: '(?=^.+?\\\\\\\\n[=-]{2,}$)',\\n        contains: [\\n          { begin: '^[=-]*$' },\\n          {\\n            begin: '^',\\n            end: \\\"\\\\\\\\n\\\",\\n            contains: CONTAINABLE\\n          }\\n        ]\\n      }\\n    ]\\n  };\\n\\n  const BLOCKQUOTE = {\\n    className: 'quote',\\n    begin: '^>\\\\\\\\s+',\\n    contains: CONTAINABLE,\\n    end: '$'\\n  };\\n\\n  return {\\n    name: 'Markdown',\\n    aliases: [\\n      'md',\\n      'mkdown',\\n      'mkd'\\n    ],\\n    contains: [\\n      HEADER,\\n      INLINE_HTML,\\n      LIST,\\n      BOLD,\\n      ITALIC,\\n      BLOCKQUOTE,\\n      CODE,\\n      HORIZONTAL_RULE,\\n      LINK,\\n      LINK_REFERENCE\\n    ]\\n  };\\n}\\n\\nmodule.exports = markdown;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"markdown\",\"hljs\",\"INLINE_HTML\",\"begin\",\"end\",\"subLanguage\",\"relevance\",\"LINK\",\"variants\",\"regex\",\"concat\",\"URL_SCHEME\",\"returnBegin\",\"contains\",\"match\",\"className\",\"excludeBegin\",\"returnEnd\",\"excludeEnd\",\"BOLD\",\"ITALIC\",\"BOLD_WITHOUT_ITALIC\",\"inherit\",\"ITALIC_WITHOUT_BOLD\",\"push\",\"CONTAINABLE\",\"forEach\",\"m\",\"name\",\"aliases\",\"HEADER\",\"LIST\",\"BLOCKQUOTE\",\"CODE\",\"HORIZONTAL_RULE\",\"LINK_REFERENCE\"]\n}\n"]