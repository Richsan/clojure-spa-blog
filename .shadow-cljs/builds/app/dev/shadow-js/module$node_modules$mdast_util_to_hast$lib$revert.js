["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-hast/lib/revert.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_hast$lib$revert=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.revert=function(state,node){const subtype=node.referenceType;let suffix=\"]\";\"collapsed\"===subtype?suffix+=\"[]\":\"full\"===subtype&&(suffix+=\"[\"+(node.label||node.identifier)+\"]\");if(\"imageReference\"===node.type)return{type:\"text\",value:\"![\"+node.alt+suffix};state=state.all(node);(node=state[0])&&\"text\"===node.type?node.value=\"[\"+node.value:\nstate.unshift({type:\"text\",value:\"[\"});(node=state[state.length-1])&&\"text\"===node.type?node.value+=suffix:state.push({type:\"text\",value:suffix});return state}}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_hast$lib$revert\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.revert = revert;\n\n/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nfunction revert(state, node) {\n  const subtype = node.referenceType;\n  let suffix = ']';\n\n  if (subtype === 'collapsed') {\n    suffix += '[]';\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']';\n  }\n\n  if (node.type === 'imageReference') {\n    return {\n      type: 'text',\n      value: '![' + node.alt + suffix\n    };\n  }\n\n  const contents = state.all(node);\n  const head = contents[0];\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value;\n  } else {\n    contents.unshift({\n      type: 'text',\n      value: '['\n    });\n  }\n\n  const tail = contents[contents.length - 1];\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix;\n  } else {\n    contents.push({\n      type: 'text',\n      value: suffix\n    });\n  }\n\n  return contents;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["revert","__esModule","value","type"]],"~:compiled-at",1676665867312,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_hast$lib$revert.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,MAAR,CA4BAA,QAAe,CAACC,KAAD,CAAQC,IAAR,CAAc,CAC3B,MAAMC,QAAUD,IAAKE,CAAAA,aACrB,KAAIC,OAAS,GAEG,YAAhB,GAAIF,OAAJ,CACEE,MADF,EACY,IADZ,CAEuB,MAFvB,GAEWF,OAFX,GAGEE,MAHF,EAGY,GAHZ,EAGmBH,IAAKI,CAAAA,KAHxB,EAGiCJ,IAAKK,CAAAA,UAHtC,EAGoD,GAHpD,CAMA,IAAkB,gBAAlB,GAAIL,IAAKM,CAAAA,IAAT,CACE,MAAO,CACLA,KAAM,MADD,CAELT,MAAO,IAAPA,CAAcG,IAAKO,CAAAA,GAAnBV,CAAyBM,MAFpB,CAMHK,MAAAA,CAAWT,KAAMU,CAAAA,GAAN,CAAUT,IAAV,CAGjB,EAFMU,IAEN,CAFaF,KAAA,CAAS,CAAT,CAEb,GAA0B,MAA1B,GAAYE,IAAKJ,CAAAA,IAAjB,CACEI,IAAKb,CAAAA,KADP,CACe,GADf,CACqBa,IAAKb,CAAAA,KAD1B;AAGEW,KAASG,CAAAA,OAAT,CAAiB,CACfL,KAAM,MADS,CAEfT,MAAO,GAFQ,CAAjB,CAQF,EAFMe,IAEN,CAFaJ,KAAA,CAASA,KAASK,CAAAA,MAAlB,CAA2B,CAA3B,CAEb,GAA0B,MAA1B,GAAYD,IAAKN,CAAAA,IAAjB,CACEM,IAAKf,CAAAA,KADP,EACgBM,MADhB,CAGEK,KAASM,CAAAA,IAAT,CAAc,CACZR,KAAM,MADM,CAEZT,MAAOM,MAFK,CAAd,CAMF,OAAOK,MAxCoB,CAlCiF;\",\n\"sources\":[\"node_modules/mdast-util-to-hast/lib/revert.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_hast$lib$revert\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.revert = revert;\\n\\n/**\\n * @typedef {import('hast').ElementContent} ElementContent\\n *\\n * @typedef {import('mdast').Content} Content\\n * @typedef {import('mdast').Reference} Reference\\n * @typedef {import('mdast').Root} Root\\n *\\n * @typedef {import('./state.js').State} State\\n */\\n\\n/**\\n * @typedef {Root | Content} Nodes\\n * @typedef {Extract<Nodes, Reference>} References\\n */\\n// To do: next major: always return array.\\n\\n/**\\n * Return the content of a reference without definition as plain text.\\n *\\n * @param {State} state\\n *   Info passed around.\\n * @param {References} node\\n *   Reference node (image, link).\\n * @returns {ElementContent | Array<ElementContent>}\\n *   hast content.\\n */\\nfunction revert(state, node) {\\n  const subtype = node.referenceType;\\n  let suffix = ']';\\n\\n  if (subtype === 'collapsed') {\\n    suffix += '[]';\\n  } else if (subtype === 'full') {\\n    suffix += '[' + (node.label || node.identifier) + ']';\\n  }\\n\\n  if (node.type === 'imageReference') {\\n    return {\\n      type: 'text',\\n      value: '![' + node.alt + suffix\\n    };\\n  }\\n\\n  const contents = state.all(node);\\n  const head = contents[0];\\n\\n  if (head && head.type === 'text') {\\n    head.value = '[' + head.value;\\n  } else {\\n    contents.unshift({\\n      type: 'text',\\n      value: '['\\n    });\\n  }\\n\\n  const tail = contents[contents.length - 1];\\n\\n  if (tail && tail.type === 'text') {\\n    tail.value += suffix;\\n  } else {\\n    contents.push({\\n      type: 'text',\\n      value: suffix\\n    });\\n  }\\n\\n  return contents;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"revert\",\"state\",\"node\",\"subtype\",\"referenceType\",\"suffix\",\"label\",\"identifier\",\"type\",\"alt\",\"contents\",\"all\",\"head\",\"unshift\",\"tail\",\"length\",\"push\"]\n}\n"]