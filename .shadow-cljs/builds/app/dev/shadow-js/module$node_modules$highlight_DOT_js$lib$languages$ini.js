["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/ini.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$ini=function(global,require,module,exports){module.exports=function(hljs){var regex=hljs.regex;const NUMBERS={className:\"number\",relevance:0,variants:[{begin:/([+-]+)?[\\d]+_[\\d_]+/},{begin:hljs.NUMBER_RE}]},COMMENTS=hljs.COMMENT();COMMENTS.variants=[{begin:/;/,end:/$/},{begin:/#/,end:/$/}];const VARIABLES={className:\"variable\",variants:[{begin:/\\$[\\w\\d\"][\\w\\d_]*/},{begin:/\\$\\{(.*?)\\}/}]},LITERALS={className:\"literal\",begin:/\\bon|off|true|false|yes|no\\b/};\nhljs={className:\"string\",contains:[hljs.BACKSLASH_ESCAPE],variants:[{begin:\"'''\",end:\"'''\",relevance:10},{begin:'\"\"\"',end:'\"\"\"',relevance:10},{begin:'\"',end:'\"'},{begin:\"'\",end:\"'\"}]};const ARRAY={begin:/\\[/,end:/\\]/,contains:[COMMENTS,LITERALS,VARIABLES,hljs,NUMBERS,\"self\"],relevance:0},ANY_KEY=regex.either(/[A-Za-z0-9_-]+/,/\"(\\\\\"|[^\"])*\"/,/'[^']*'/);regex=regex.concat(ANY_KEY,\"(\\\\s*\\\\.\\\\s*\",ANY_KEY,\")*\",regex.lookahead(/\\s*=\\s*[^#\\s]/));return{name:\"TOML, also INI\",aliases:[\"toml\"],case_insensitive:!0,\nillegal:/\\S/,contains:[COMMENTS,{className:\"section\",begin:/\\[+/,end:/\\]+/},{begin:regex,className:\"attr\",starts:{end:/$/,contains:[COMMENTS,ARRAY,LITERALS,VARIABLES,hljs,NUMBERS]}}]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$ini\"] = function(global,require,module,exports) {\n/*\nLanguage: TOML, also INI\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\nCategory: common, config\nWebsite: https://github.com/toml-lang/toml\n*/\n\nfunction ini(hljs) {\n  const regex = hljs.regex;\n  const NUMBERS = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      { begin: /([+-]+)?[\\d]+_[\\d_]+/ },\n      { begin: hljs.NUMBER_RE }\n    ]\n  };\n  const COMMENTS = hljs.COMMENT();\n  COMMENTS.variants = [\n    {\n      begin: /;/,\n      end: /$/\n    },\n    {\n      begin: /#/,\n      end: /$/\n    }\n  ];\n  const VARIABLES = {\n    className: 'variable',\n    variants: [\n      { begin: /\\$[\\w\\d\"][\\w\\d_]*/ },\n      { begin: /\\$\\{(.*?)\\}/ }\n    ]\n  };\n  const LITERALS = {\n    className: 'literal',\n    begin: /\\bon|off|true|false|yes|no\\b/\n  };\n  const STRINGS = {\n    className: \"string\",\n    contains: [ hljs.BACKSLASH_ESCAPE ],\n    variants: [\n      {\n        begin: \"'''\",\n        end: \"'''\",\n        relevance: 10\n      },\n      {\n        begin: '\"\"\"',\n        end: '\"\"\"',\n        relevance: 10\n      },\n      {\n        begin: '\"',\n        end: '\"'\n      },\n      {\n        begin: \"'\",\n        end: \"'\"\n      }\n    ]\n  };\n  const ARRAY = {\n    begin: /\\[/,\n    end: /\\]/,\n    contains: [\n      COMMENTS,\n      LITERALS,\n      VARIABLES,\n      STRINGS,\n      NUMBERS,\n      'self'\n    ],\n    relevance: 0\n  };\n\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\n  const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n  const ANY_KEY = regex.either(\n    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE\n  );\n  const DOTTED_KEY = regex.concat(\n    ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*',\n    regex.lookahead(/\\s*=\\s*[^#\\s]/)\n  );\n\n  return {\n    name: 'TOML, also INI',\n    aliases: [ 'toml' ],\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [\n      COMMENTS,\n      {\n        className: 'section',\n        begin: /\\[+/,\n        end: /\\]+/\n      },\n      {\n        begin: DOTTED_KEY,\n        className: 'attr',\n        starts: {\n          end: /$/,\n          contains: [\n            COMMENTS,\n            ARRAY,\n            LITERALS,\n            VARIABLES,\n            STRINGS,\n            NUMBERS\n          ]\n        }\n      }\n    ]\n  };\n}\n\nmodule.exports = ini;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["case_insensitive","variants","begin","aliases","className","contains","relevance","name","starts","illegal","end"]],"~:compiled-at",1676671710197,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$ini.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAyHnHD,MAAOC,CAAAA,OAAP,CAhHAC,QAAY,CAACC,IAAD,CAAO,CACjB,IAAMC,MAAQD,IAAKC,CAAAA,KACnB,OAAMC,QAAU,CACdC,UAAW,QADG,CAEdC,UAAW,CAFG,CAGdC,SAAU,CACR,CAAEC,MAAO,sBAAT,CADQ,CAER,CAAEA,MAAON,IAAKO,CAAAA,SAAd,CAFQ,CAHI,CAAhB,CAQMC,SAAWR,IAAKS,CAAAA,OAAL,EACjBD,SAASH,CAAAA,QAAT,CAAoB,CAClB,CACEC,MAAO,GADT,CAEEI,IAAK,GAFP,CADkB,CAKlB,CACEJ,MAAO,GADT,CAEEI,IAAK,GAFP,CALkB,CAUpB,OAAMC,UAAY,CAChBR,UAAW,UADK,CAEhBE,SAAU,CACR,CAAEC,MAAO,mBAAT,CADQ,CAER,CAAEA,MAAO,aAAT,CAFQ,CAFM,CAAlB,CAOMM,SAAW,CACfT,UAAW,SADI,CAEfG,MAAO,8BAFQ,CAIXO;IAAAA,CAAU,CACdV,UAAW,QADG,CAEdW,SAAU,CAAEd,IAAKe,CAAAA,gBAAP,CAFI,CAGdV,SAAU,CACR,CACEC,MAAO,KADT,CAEEI,IAAK,KAFP,CAGEN,UAAW,EAHb,CADQ,CAMR,CACEE,MAAO,KADT,CAEEI,IAAK,KAFP,CAGEN,UAAW,EAHb,CANQ,CAWR,CACEE,MAAO,GADT,CAEEI,IAAK,GAFP,CAXQ,CAeR,CACEJ,MAAO,GADT,CAEEI,IAAK,GAFP,CAfQ,CAHI,CAwBhB,OAAMM,MAAQ,CACZV,MAAO,IADK,CAEZI,IAAK,IAFO,CAGZI,SAAU,CACRN,QADQ,CAERI,QAFQ,CAGRD,SAHQ,CAIRE,IAJQ,CAKRX,OALQ,CAMR,MANQ,CAHE,CAWZE,UAAW,CAXC,CAAd,CAiBMa,QAAUhB,KAAMiB,CAAAA,MAAN,CAHCC,gBAGD,CAFgBC,eAEhB,CADgBC,SAChB,CAGVC,MAAAA,CAAarB,KAAMsB,CAAAA,MAAN,CACjBN,OADiB,CACR,cADQ,CACQA,OADR,CACiB,IADjB,CAEjBhB,KAAMuB,CAAAA,SAAN,CAAgB,eAAhB,CAFiB,CAKnB,OAAO,CACLC,KAAM,gBADD,CAELC,QAAS,CAAE,MAAF,CAFJ,CAGLC,iBAAkB,CAAA,CAHb;AAILC,QAAS,IAJJ,CAKLd,SAAU,CACRN,QADQ,CAER,CACEL,UAAW,SADb,CAEEG,MAAO,KAFT,CAGEI,IAAK,KAHP,CAFQ,CAOR,CACEJ,MAAOgB,KADT,CAEEnB,UAAW,MAFb,CAGE0B,OAAQ,CACNnB,IAAK,GADC,CAENI,SAAU,CACRN,QADQ,CAERQ,KAFQ,CAGRJ,QAHQ,CAIRD,SAJQ,CAKRE,IALQ,CAMRX,OANQ,CAFJ,CAHV,CAPQ,CALL,CAjFU,CATgG;\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/ini.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$ini\\\"] = function(global,require,module,exports) {\\n/*\\nLanguage: TOML, also INI\\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\\nCategory: common, config\\nWebsite: https://github.com/toml-lang/toml\\n*/\\n\\nfunction ini(hljs) {\\n  const regex = hljs.regex;\\n  const NUMBERS = {\\n    className: 'number',\\n    relevance: 0,\\n    variants: [\\n      { begin: /([+-]+)?[\\\\d]+_[\\\\d_]+/ },\\n      { begin: hljs.NUMBER_RE }\\n    ]\\n  };\\n  const COMMENTS = hljs.COMMENT();\\n  COMMENTS.variants = [\\n    {\\n      begin: /;/,\\n      end: /$/\\n    },\\n    {\\n      begin: /#/,\\n      end: /$/\\n    }\\n  ];\\n  const VARIABLES = {\\n    className: 'variable',\\n    variants: [\\n      { begin: /\\\\$[\\\\w\\\\d\\\"][\\\\w\\\\d_]*/ },\\n      { begin: /\\\\$\\\\{(.*?)\\\\}/ }\\n    ]\\n  };\\n  const LITERALS = {\\n    className: 'literal',\\n    begin: /\\\\bon|off|true|false|yes|no\\\\b/\\n  };\\n  const STRINGS = {\\n    className: \\\"string\\\",\\n    contains: [ hljs.BACKSLASH_ESCAPE ],\\n    variants: [\\n      {\\n        begin: \\\"'''\\\",\\n        end: \\\"'''\\\",\\n        relevance: 10\\n      },\\n      {\\n        begin: '\\\"\\\"\\\"',\\n        end: '\\\"\\\"\\\"',\\n        relevance: 10\\n      },\\n      {\\n        begin: '\\\"',\\n        end: '\\\"'\\n      },\\n      {\\n        begin: \\\"'\\\",\\n        end: \\\"'\\\"\\n      }\\n    ]\\n  };\\n  const ARRAY = {\\n    begin: /\\\\[/,\\n    end: /\\\\]/,\\n    contains: [\\n      COMMENTS,\\n      LITERALS,\\n      VARIABLES,\\n      STRINGS,\\n      NUMBERS,\\n      'self'\\n    ],\\n    relevance: 0\\n  };\\n\\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\\n  const QUOTED_KEY_DOUBLE_QUOTE = /\\\"(\\\\\\\\\\\"|[^\\\"])*\\\"/;\\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\\n  const ANY_KEY = regex.either(\\n    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE\\n  );\\n  const DOTTED_KEY = regex.concat(\\n    ANY_KEY, '(\\\\\\\\s*\\\\\\\\.\\\\\\\\s*', ANY_KEY, ')*',\\n    regex.lookahead(/\\\\s*=\\\\s*[^#\\\\s]/)\\n  );\\n\\n  return {\\n    name: 'TOML, also INI',\\n    aliases: [ 'toml' ],\\n    case_insensitive: true,\\n    illegal: /\\\\S/,\\n    contains: [\\n      COMMENTS,\\n      {\\n        className: 'section',\\n        begin: /\\\\[+/,\\n        end: /\\\\]+/\\n      },\\n      {\\n        begin: DOTTED_KEY,\\n        className: 'attr',\\n        starts: {\\n          end: /$/,\\n          contains: [\\n            COMMENTS,\\n            ARRAY,\\n            LITERALS,\\n            VARIABLES,\\n            STRINGS,\\n            NUMBERS\\n          ]\\n        }\\n      }\\n    ]\\n  };\\n}\\n\\nmodule.exports = ini;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"ini\",\"hljs\",\"regex\",\"NUMBERS\",\"className\",\"relevance\",\"variants\",\"begin\",\"NUMBER_RE\",\"COMMENTS\",\"COMMENT\",\"end\",\"VARIABLES\",\"LITERALS\",\"STRINGS\",\"contains\",\"BACKSLASH_ESCAPE\",\"ARRAY\",\"ANY_KEY\",\"either\",\"BARE_KEY\",\"QUOTED_KEY_DOUBLE_QUOTE\",\"QUOTED_KEY_SINGLE_QUOTE\",\"DOTTED_KEY\",\"concat\",\"lookahead\",\"name\",\"aliases\",\"case_insensitive\",\"illegal\",\"starts\"]\n}\n"]