["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/haskell.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$haskell=function(global,require,module,exports){function haskell(Prism){Prism.languages.haskell={comment:{pattern:/(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|\\{-[\\s\\S]*?-\\})/m,lookbehind:!0},char:{pattern:/'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|ACK|BEL|BS|CAN|CR|DC1|DC2|DC3|DC4|DEL|DLE|EM|ENQ|EOT|ESC|ETB|ETX|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SO|SOH|SP|STX|SUB|SYN|US|VT|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,alias:\"string\"},string:{pattern:/\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,\ngreedy:!0},keyword:/\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\"import-statement\":{pattern:/(^[\\t ]*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,lookbehind:!0,inside:{keyword:/\\b(?:as|hiding|import|qualified)\\b/,punctuation:/\\./}},builtin:/\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\nnumber:/\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,operator:[{pattern:/`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,greedy:!0},{pattern:/(\\s)\\.(?=\\s)/,lookbehind:!0},/[-!#$%*+=?&@|~:<>^\\\\\\/][-!#$%*+=?&@|~.:<>^\\\\\\/]*|\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+/],hvariable:{pattern:/\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*/,inside:{punctuation:/\\./}},constant:{pattern:/\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*/,inside:{punctuation:/\\./}},punctuation:/[{}[\\];(),.:]/};Prism.languages.hs=Prism.languages.haskell}Object.defineProperty(exports,\n\"__esModule\",{value:!0});exports.default=haskell;haskell.displayName=\"haskell\";haskell.aliases=[\"hs\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$haskell\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = haskell;\n// @ts-nocheck\nhaskell.displayName = 'haskell';\nhaskell.aliases = ['hs'];\n/** @type {import('../core.js').Syntax} */\n\nfunction haskell(Prism) {\n  Prism.languages.haskell = {\n    comment: {\n      pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|\\{-[\\s\\S]*?-\\})/m,\n      lookbehind: true\n    },\n    char: {\n      pattern: /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|ACK|BEL|BS|CAN|CR|DC1|DC2|DC3|DC4|DEL|DLE|EM|ENQ|EOT|ESC|ETB|ETX|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SO|SOH|SP|STX|SUB|SYN|US|VT|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n      alias: 'string'\n    },\n    string: {\n      pattern: /\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,\n      greedy: true\n    },\n    keyword: /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern: /(^[\\t ]*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|hiding|import|qualified)\\b/,\n        punctuation: /\\./\n      }\n    },\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin: /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n    // decimal integers and floating point numbers | octal integers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n    operator: [{\n      // infix operator\n      pattern: /`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n      greedy: true\n    }, {\n      // function composition\n      pattern: /(\\s)\\.(?=\\s)/,\n      lookbehind: true\n    }, // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    //\n    // This regex means: /[-!#$%*+=?&@|~.:<>^\\\\\\/]+/ without /\\./.\n    /[-!#$%*+=?&@|~:<>^\\\\\\/][-!#$%*+=?&@|~.:<>^\\\\\\/]*|\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+/],\n    // In Haskell, nearly everything is a variable, do not highlight these.\n    hvariable: {\n      pattern: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*/,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    constant: {\n      pattern: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*/,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    punctuation: /[{}[\\];(),.:]/\n  };\n  Prism.languages.hs = Prism.languages.haskell;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["hs","punctuation","string","aliases","constant","operator","displayName","__esModule","lookbehind","haskell","value","char","keyword","number","greedy","pattern","inside","alias","hvariable","comment","builtin","default"]],"~:compiled-at",1676841365419,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$haskell.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,0CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYvGC,QAASA,QAAO,CAACC,KAAD,CAAQ,CACtBA,KAAMC,CAAAA,SAAUF,CAAAA,OAAhB,CAA0B,CACxBG,QAAS,CACPC,QAAS,2FADF,CAEPC,WAAY,CAAA,CAFL,CADe,CAKxBC,KAAM,CACJF,QAAS,qMADL,CAEJG,MAAO,QAFH,CALkB,CASxBC,OAAQ,CACNJ,QAAS,8BADH;AAENK,OAAQ,CAAA,CAFF,CATgB,CAaxBC,QAAS,uHAbe,CAcxB,mBAAoB,CAIlBN,QAAS,qIAJS,CAKlBC,WAAY,CAAA,CALM,CAMlBM,OAAQ,CACND,QAAS,oCADH,CAENE,YAAa,IAFP,CANU,CAdI,CA0BxBC,QAAS,woDA1Be;AA4BxBC,OAAQ,2DA5BgB,CA6BxBC,SAAU,CAAC,CAETX,QAAS,kCAFA,CAGTK,OAAQ,CAAA,CAHC,CAAD,CAIP,CAEDL,QAAS,cAFR,CAGDC,WAAY,CAAA,CAHX,CAJO,CAeV,8EAfU,CA7Bc,CA8CxBW,UAAW,CACTZ,QAAS,kCADA,CAETO,OAAQ,CACNC,YAAa,IADP,CAFC,CA9Ca,CAoDxBK,SAAU,CACRb,QAAS,iCADD,CAERO,OAAQ,CACNC,YAAa,IADP,CAFA,CApDc,CA0DxBA,YAAa,eA1DW,CA4D1BX,MAAMC,CAAAA,SAAUgB,CAAAA,EAAhB,CAAqBjB,KAAMC,CAAAA,SAAUF,CAAAA,OA7Df,CATxBmB,MAAOC,CAAAA,cAAP,CAAsBrB,OAAtB;AAA+B,YAA/B,CAA6C,CAC3CsB,MAAO,CAAA,CADoC,CAA7C,CAGAtB,QAAQuB,CAAAA,OAAR,CAAkBtB,OAElBA,QAAQuB,CAAAA,WAAR,CAAsB,SACtBvB,QAAQwB,CAAAA,OAAR,CAAkB,CAAC,IAAD,CATqF;\",\n\"sources\":[\"node_modules/refractor/lang/haskell.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$haskell\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = haskell;\\n// @ts-nocheck\\nhaskell.displayName = 'haskell';\\nhaskell.aliases = ['hs'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction haskell(Prism) {\\n  Prism.languages.haskell = {\\n    comment: {\\n      pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\\\\\\\/].*|$)|\\\\{-[\\\\s\\\\S]*?-\\\\})/m,\\n      lookbehind: true\\n    },\\n    char: {\\n      pattern: /'(?:[^\\\\\\\\']|\\\\\\\\(?:[abfnrtv\\\\\\\\\\\"'&]|\\\\^[A-Z@[\\\\]^_]|ACK|BEL|BS|CAN|CR|DC1|DC2|DC3|DC4|DEL|DLE|EM|ENQ|EOT|ESC|ETB|ETX|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SO|SOH|SP|STX|SUB|SYN|US|VT|\\\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\\n      alias: 'string'\\n    },\\n    string: {\\n      pattern: /\\\"(?:[^\\\\\\\\\\\"]|\\\\\\\\(?:\\\\S|\\\\s+\\\\\\\\))*\\\"/,\\n      greedy: true\\n    },\\n    keyword: /\\\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\\\b/,\\n    'import-statement': {\\n      // The imported or hidden names are not included in this import\\n      // statement. This is because we want to highlight those exactly like\\n      // we do for the names in the program.\\n      pattern: /(^[\\\\t ]*)import\\\\s+(?:qualified\\\\s+)?(?:[A-Z][\\\\w']*)(?:\\\\.[A-Z][\\\\w']*)*(?:\\\\s+as\\\\s+(?:[A-Z][\\\\w']*)(?:\\\\.[A-Z][\\\\w']*)*)?(?:\\\\s+hiding\\\\b)?/m,\\n      lookbehind: true,\\n      inside: {\\n        keyword: /\\\\b(?:as|hiding|import|qualified)\\\\b/,\\n        punctuation: /\\\\./\\n      }\\n    },\\n    // These are builtin variables only. Constructors are highlighted later as a constant.\\n    builtin: /\\\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\\\b/,\\n    // decimal integers and floating point numbers | octal integers | hexadecimal integers\\n    number: /\\\\b(?:\\\\d+(?:\\\\.\\\\d+)?(?:e[+-]?\\\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\\\b/i,\\n    operator: [{\\n      // infix operator\\n      pattern: /`(?:[A-Z][\\\\w']*\\\\.)*[_a-z][\\\\w']*`/,\\n      greedy: true\\n    }, {\\n      // function composition\\n      pattern: /(\\\\s)\\\\.(?=\\\\s)/,\\n      lookbehind: true\\n    }, // Most of this is needed because of the meaning of a single '.'.\\n    // If it stands alone freely, it is the function composition.\\n    // It may also be a separator between a module name and an identifier => no\\n    // operator. If it comes together with other special characters it is an\\n    // operator too.\\n    //\\n    // This regex means: /[-!#$%*+=?&@|~.:<>^\\\\\\\\\\\\/]+/ without /\\\\./.\\n    /[-!#$%*+=?&@|~:<>^\\\\\\\\\\\\/][-!#$%*+=?&@|~.:<>^\\\\\\\\\\\\/]*|\\\\.[-!#$%*+=?&@|~.:<>^\\\\\\\\\\\\/]+/],\\n    // In Haskell, nearly everything is a variable, do not highlight these.\\n    hvariable: {\\n      pattern: /\\\\b(?:[A-Z][\\\\w']*\\\\.)*[_a-z][\\\\w']*/,\\n      inside: {\\n        punctuation: /\\\\./\\n      }\\n    },\\n    constant: {\\n      pattern: /\\\\b(?:[A-Z][\\\\w']*\\\\.)*[A-Z][\\\\w']*/,\\n      inside: {\\n        punctuation: /\\\\./\\n      }\\n    },\\n    punctuation: /[{}[\\\\];(),.:]/\\n  };\\n  Prism.languages.hs = Prism.languages.haskell;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"haskell\",\"Prism\",\"languages\",\"comment\",\"pattern\",\"lookbehind\",\"char\",\"alias\",\"string\",\"greedy\",\"keyword\",\"inside\",\"punctuation\",\"builtin\",\"number\",\"operator\",\"hvariable\",\"constant\",\"hs\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]