["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/stan.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$stan=function(global,require,module,exports){function stan(Prism){var higherOrderFunctions=/\\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\\b/;Prism.languages.stan={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,string:{pattern:/\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,greedy:!0},directive:{pattern:/^([ \\t]*)#include\\b.*/m,\nlookbehind:!0,alias:\"property\"},\"function-arg\":{pattern:RegExp(\"(\"+higherOrderFunctions.source+/\\s*\\(\\s*/.source+\")\"+/[a-zA-Z]\\w*/.source),lookbehind:!0,alias:\"function\"},constraint:{pattern:/(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,lookbehind:!0,inside:{expression:{pattern:/(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,lookbehind:!0,inside:null},property:/\\b[a-z]\\w*(?=\\s*=)/i,operator:/=/,punctuation:/^<|>$|,/}},keyword:[{pattern:/\\bdata(?=\\s*\\{)|\\b(?:functions|generated|model|parameters|quantities|transformed)\\b/,\nalias:\"program-block\"},/\\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|in|increment_log_prob|int|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\\b/,higherOrderFunctions],function:/\\b[a-z]\\w*(?=\\s*\\()/i,number:/(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:E[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,boolean:/\\b(?:false|true)\\b/,operator:/<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\npunctuation:/[()\\[\\]{},;]/};Prism.languages.stan.constraint.inside.expression.inside=Prism.languages.stan}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=stan;stan.displayName=\"stan\";stan.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$stan\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = stan;\n// @ts-nocheck\nstan.displayName = 'stan';\nstan.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction stan(Prism) {\n  ;\n\n  (function (Prism) {\n    // https://mc-stan.org/docs/2_28/reference-manual/bnf-grammars.html\n    var higherOrderFunctions = /\\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\\b/;\n    Prism.languages.stan = {\n      comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n      string: {\n        // String literals can contain spaces and any printable ASCII characters except for \" and \\\n        // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n        pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n        greedy: true\n      },\n      directive: {\n        pattern: /^([ \\t]*)#include\\b.*/m,\n        lookbehind: true,\n        alias: 'property'\n      },\n      'function-arg': {\n        pattern: RegExp('(' + higherOrderFunctions.source + /\\s*\\(\\s*/.source + ')' + /[a-zA-Z]\\w*/.source),\n        lookbehind: true,\n        alias: 'function'\n      },\n      constraint: {\n        pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n        lookbehind: true,\n        inside: {\n          expression: {\n            pattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n            lookbehind: true,\n            inside: null // see below\n\n          },\n          property: /\\b[a-z]\\w*(?=\\s*=)/i,\n          operator: /=/,\n          punctuation: /^<|>$|,/\n        }\n      },\n      keyword: [{\n        pattern: /\\bdata(?=\\s*\\{)|\\b(?:functions|generated|model|parameters|quantities|transformed)\\b/,\n        alias: 'program-block'\n      }, /\\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|in|increment_log_prob|int|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\\b/, // these are functions that are known to take another function as their first argument.\n      higherOrderFunctions],\n      function: /\\b[a-z]\\w*(?=\\s*\\()/i,\n      number: /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:E[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n      boolean: /\\b(?:false|true)\\b/,\n      operator: /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n      punctuation: /[()\\[\\]{},;]/\n    };\n    Prism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","punctuation","string","aliases","directive","operator","displayName","__esModule","expression","lookbehind","value","keyword","number","greedy","property","function","pattern","inside","alias","stan","comment","default","constraint"]],"~:compiled-at",1676841365464,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$stan.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYpGC,QAASA,KAAI,CAACC,KAAD,CAAQ,CAKjB,IAAIC,qBAAuB,6MA8C1BD,MA7CKE,CAAAA,SAAUH,CAAAA,IAAhB,CAAuB,CACrBI,QAAS,wCADY,CAErBC,OAAQ,CAGNC,QAAS,iCAHH,CAINC,OAAQ,CAAA,CAJF,CAFa,CAQrBC,UAAW,CACTF,QAAS,wBADA;AAETG,WAAY,CAAA,CAFH,CAGTC,MAAO,UAHE,CARU,CAarB,eAAgB,CACdJ,QAASK,MAAA,CAAO,GAAP,CAAaT,oBAAqBU,CAAAA,MAAlC,CAA2C,UAAWA,CAAAA,MAAtD,CAA+D,GAA/D,CAAqE,aAAcA,CAAAA,MAAnF,CADK,CAEdH,WAAY,CAAA,CAFE,CAGdC,MAAO,UAHO,CAbK,CAkBrBG,WAAY,CACVP,QAAS,sDADC,CAEVG,WAAY,CAAA,CAFF,CAGVK,OAAQ,CACNC,WAAY,CACVT,QAAS,qDADC,CAEVG,WAAY,CAAA,CAFF,CAGVK,OAAQ,IAHE,CADN,CAONE,SAAU,qBAPJ,CAQNC,SAAU,GARJ,CASNC,YAAa,SATP,CAHE,CAlBS,CAiCrBC,QAAS,CAAC,CACRb,QAAS,qFADD;AAERI,MAAO,eAFC,CAAD,CAGN,kQAHM,CAITR,oBAJS,CAjCY,CAsCrBkB,SAAU,sBAtCW,CAuCrBC,OAAQ,6FAvCa,CAwCrBC,QAAS,oBAxCY,CAyCrBL,SAAU,6CAzCW;AA0CrBC,YAAa,cA1CQ,CA6CtBjB,MADKE,CAAAA,SAAUH,CAAAA,IAAKa,CAAAA,UAAWC,CAAAA,MAAOC,CAAAA,UAAWD,CAAAA,MAAlD,CACCb,KADgEE,CAAAA,SAAUH,CAAAA,IAlD1D,CATrBuB,MAAOC,CAAAA,cAAP,CAAsBzB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3C0B,MAAO,CAAA,CADoC,CAA7C,CAGA1B,QAAQ2B,CAAAA,OAAR,CAAkB1B,IAElBA,KAAK2B,CAAAA,WAAL,CAAmB,MACnB3B,KAAK4B,CAAAA,OAAL,CAAe,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/stan.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$stan\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = stan;\\n// @ts-nocheck\\nstan.displayName = 'stan';\\nstan.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction stan(Prism) {\\n  ;\\n\\n  (function (Prism) {\\n    // https://mc-stan.org/docs/2_28/reference-manual/bnf-grammars.html\\n    var higherOrderFunctions = /\\\\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\\\\b/;\\n    Prism.languages.stan = {\\n      comment: /\\\\/\\\\/.*|\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/|#(?!include).*/,\\n      string: {\\n        // String literals can contain spaces and any printable ASCII characters except for \\\" and \\\\\\n        // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\\n        pattern: /\\\"[\\\\x20\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]*\\\"/,\\n        greedy: true\\n      },\\n      directive: {\\n        pattern: /^([ \\\\t]*)#include\\\\b.*/m,\\n        lookbehind: true,\\n        alias: 'property'\\n      },\\n      'function-arg': {\\n        pattern: RegExp('(' + higherOrderFunctions.source + /\\\\s*\\\\(\\\\s*/.source + ')' + /[a-zA-Z]\\\\w*/.source),\\n        lookbehind: true,\\n        alias: 'function'\\n      },\\n      constraint: {\\n        pattern: /(\\\\b(?:int|matrix|real|row_vector|vector)\\\\s*)<[^<>]*>/,\\n        lookbehind: true,\\n        inside: {\\n          expression: {\\n            pattern: /(=\\\\s*)\\\\S(?:\\\\S|\\\\s+(?!\\\\s))*?(?=\\\\s*(?:>$|,\\\\s*\\\\w+\\\\s*=))/,\\n            lookbehind: true,\\n            inside: null // see below\\n\\n          },\\n          property: /\\\\b[a-z]\\\\w*(?=\\\\s*=)/i,\\n          operator: /=/,\\n          punctuation: /^<|>$|,/\\n        }\\n      },\\n      keyword: [{\\n        pattern: /\\\\bdata(?=\\\\s*\\\\{)|\\\\b(?:functions|generated|model|parameters|quantities|transformed)\\\\b/,\\n        alias: 'program-block'\\n      }, /\\\\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|in|increment_log_prob|int|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\\\\b/, // these are functions that are known to take another function as their first argument.\\n      higherOrderFunctions],\\n      function: /\\\\b[a-z]\\\\w*(?=\\\\s*\\\\()/i,\\n      number: /(?:\\\\b\\\\d+(?:_\\\\d+)*(?:\\\\.(?:\\\\d+(?:_\\\\d+)*)?)?|\\\\B\\\\.\\\\d+(?:_\\\\d+)*)(?:E[+-]?\\\\d+(?:_\\\\d+)*)?i?(?!\\\\w)/i,\\n      boolean: /\\\\b(?:false|true)\\\\b/,\\n      operator: /<-|\\\\.[*/]=?|\\\\|\\\\|?|&&|[!=<>+\\\\-*/]=?|['^%~?:]/,\\n      punctuation: /[()\\\\[\\\\]{},;]/\\n    };\\n    Prism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"stan\",\"Prism\",\"higherOrderFunctions\",\"languages\",\"comment\",\"string\",\"pattern\",\"greedy\",\"directive\",\"lookbehind\",\"alias\",\"RegExp\",\"source\",\"constraint\",\"inside\",\"expression\",\"property\",\"operator\",\"punctuation\",\"keyword\",\"function\",\"number\",\"boolean\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]