["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/pug.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$pug=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function pug(Prism$jscomp$0){Prism$jscomp$0.register(_javascript.default);Prism$jscomp$0.register(_markup.default);(function(Prism){Prism.languages.pug={comment:{pattern:/(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,lookbehind:!0},\"multiline-script\":{pattern:/(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\nlookbehind:!0,inside:Prism.languages.javascript},filter:{pattern:/(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"},text:/\\S[\\s\\S]*/}},\"multiline-plain-text\":{pattern:/(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0},markup:{pattern:/(^[\\t ]*)<.+/m,lookbehind:!0,inside:Prism.languages.markup},doctype:{pattern:/((?:^|\\n)[\\t ]*)doctype(?: .+)?/,lookbehind:!0},\n\"flow-control\":{pattern:/(^[\\t ]*)(?:case|default|each|else|if|unless|when|while)\\b(?: .+)?/m,lookbehind:!0,inside:{each:{pattern:/^each .+? in\\b/,inside:{keyword:/\\b(?:each|in)\\b/,punctuation:/,/}},branch:{pattern:/^(?:case|default|else|if|unless|when|while)\\b/,alias:\"keyword\"},rest:Prism.languages.javascript}},keyword:{pattern:/(^[\\t ]*)(?:append|block|extends|include|prepend)\\b.+/m,lookbehind:!0},mixin:[{pattern:/(^[\\t ]*)mixin .+/m,lookbehind:!0,inside:{keyword:/^mixin/,function:/\\w+(?=\\s*\\(|\\s*$)/,\npunctuation:/[(),.]/}},{pattern:/(^[\\t ]*)\\+.+/m,lookbehind:!0,inside:{name:{pattern:/^\\+\\w+/,alias:\"function\"},rest:Prism.languages.javascript}}],script:{pattern:/(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,lookbehind:!0,inside:Prism.languages.javascript},\"plain-text\":{pattern:/(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,lookbehind:!0},tag:{pattern:/(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,lookbehind:!0,inside:{attributes:[{pattern:/&[^(]+\\([^)]+\\)/,\ninside:Prism.languages.javascript},{pattern:/\\([^)]+\\)/,inside:{\"attr-value\":{pattern:/(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,lookbehind:!0,inside:Prism.languages.javascript},\"attr-name\":/[\\w-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[!=(),]+/}}],punctuation:/:/,\"attr-id\":/#[\\w\\-]+/,\"attr-class\":/\\.[\\w\\-]+/}},code:[{pattern:/(^[\\t ]*(?:-|!?=)).+/m,lookbehind:!0,inside:Prism.languages.javascript}],punctuation:/[.\\-!=|]+/};for(var filter_pattern=/(^([\\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/.source,\nfilters=[{filter:\"atpl\",language:\"twig\"},{filter:\"coffee\",language:\"coffeescript\"},\"ejs\",\"handlebars\",\"less\",\"livescript\",\"markdown\",{filter:\"sass\",language:\"scss\"},\"stylus\"],all_filters={},i=0,l=filters.length;i<l;i++){var filter=filters[i];filter=\"string\"===typeof filter?{filter,language:filter}:filter;Prism.languages[filter.language]&&(all_filters[\"filter-\"+filter.filter]={pattern:RegExp(filter_pattern.replace(\"\\x3cfilter_name\\x3e\",function(){return filter.filter}),\"m\"),lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,\nalias:\"variable\"},text:{pattern:/\\S[\\s\\S]*/,alias:[filter.language,\"language-\"+filter.language],inside:Prism.languages[filter.language]}}})}Prism.languages.insertBefore(\"pug\",\"filter\",all_filters)})(Prism$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=pug;var _javascript=_interopRequireDefault(require(\"module$node_modules$refractor$lang$javascript\")),_markup=_interopRequireDefault(require(\"module$node_modules$refractor$lang$markup\"));pug.displayName=\"pug\";pug.aliases=\n[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$pug\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = pug;\n\nvar _javascript = _interopRequireDefault(require(\"./javascript.js\"));\n\nvar _markup = _interopRequireDefault(require(\"./markup.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @ts-nocheck\npug.displayName = 'pug';\npug.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction pug(Prism) {\n  Prism.register(_javascript.default);\n  Prism.register(_markup.default);\n\n  (function (Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          },\n          text: /\\S[\\s\\S]*/\n        }\n      },\n      'multiline-plain-text': {\n        pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern: /(^[\\t ]*)(?:case|default|each|else|if|unless|when|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:case|default|else|if|unless|when|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:append|block|extends|include|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [// Declaration\n      {\n        pattern: /(^[\\t ]*)mixin .+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^mixin/,\n          function: /\\w+(?=\\s*\\(|\\s*$)/,\n          punctuation: /[(),.]/\n        }\n      }, // Usage\n      {\n        pattern: /(^[\\t ]*)\\+.+/m,\n        lookbehind: true,\n        inside: {\n          name: {\n            pattern: /^\\+\\w+/,\n            alias: 'function'\n          },\n          rest: Prism.languages.javascript\n        }\n      }],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      'plain-text': {\n        pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            pattern: /&[^(]+\\([^)]+\\)/,\n            inside: Prism.languages.javascript\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n              },\n              'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[!=(),]+/\n            }\n          }],\n          punctuation: /:/,\n          'attr-id': /#[\\w\\-]+/,\n          'attr-class': /\\.[\\w\\-]+/\n        }\n      },\n      code: [{\n        pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      }],\n      punctuation: /[.\\-!=|]+/\n    };\n    var filter_pattern = /(^([\\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/.source; // Non exhaustive list of available filters and associated languages\n\n    var filters = [{\n      filter: 'atpl',\n      language: 'twig'\n    }, {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'ejs', 'handlebars', 'less', 'livescript', 'markdown', {\n      filter: 'sass',\n      language: 'scss'\n    }, 'stylus'];\n    var all_filters = {};\n\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('<filter_name>', function () {\n            return filter.filter;\n          }), 'm'),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            text: {\n              pattern: /\\S[\\s\\S]*/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        };\n      }\n    }\n\n    Prism.languages.insertBefore('pug', 'filter', all_filters);\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$refractor$lang$markup","~$module$node_modules$refractor$lang$javascript","~$shadow.js"]],"~:properties",["^5",["pug","punctuation","aliases","branch","displayName","markup","__esModule","rest","lookbehind","name","tag","value","script","text","keyword","filter","function","attributes","pattern","each","inside","alias","mixin","comment","language","doctype","default","code"]],"~:compiled-at",1676841365449,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$pug.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/pug.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$pug\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = pug;\\n\\nvar _javascript = _interopRequireDefault(require(\\\"./javascript.js\\\"));\\n\\nvar _markup = _interopRequireDefault(require(\\\"./markup.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// @ts-nocheck\\npug.displayName = 'pug';\\npug.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction pug(Prism) {\\n  Prism.register(_javascript.default);\\n  Prism.register(_markup.default);\\n\\n  (function (Prism) {\\n    // TODO:\\n    // - Add CSS highlighting inside <style> tags\\n    // - Add support for multi-line code blocks\\n    // - Add support for interpolation #{} and !{}\\n    // - Add support for tag interpolation #[]\\n    // - Add explicit support for plain text using |\\n    // - Add support for markup embedded in plain text\\n    Prism.languages.pug = {\\n      // Multiline stuff should appear before the rest\\n      // This handles both single-line and multi-line comments\\n      comment: {\\n        pattern: /(^([\\\\t ]*))\\\\/\\\\/.*(?:(?:\\\\r?\\\\n|\\\\r)\\\\2[\\\\t ].+)*/m,\\n        lookbehind: true\\n      },\\n      // All the tag-related part is in lookbehind\\n      // so that it can be highlighted by the \\\"tag\\\" pattern\\n      'multiline-script': {\\n        pattern: /(^([\\\\t ]*)script\\\\b.*\\\\.[\\\\t ]*)(?:(?:\\\\r?\\\\n|\\\\r(?!\\\\n))(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+/m,\\n        lookbehind: true,\\n        inside: Prism.languages.javascript\\n      },\\n      // See at the end of the file for known filters\\n      filter: {\\n        pattern: /(^([\\\\t ]*)):.+(?:(?:\\\\r?\\\\n|\\\\r(?!\\\\n))(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+/m,\\n        lookbehind: true,\\n        inside: {\\n          'filter-name': {\\n            pattern: /^:[\\\\w-]+/,\\n            alias: 'variable'\\n          },\\n          text: /\\\\S[\\\\s\\\\S]*/\\n        }\\n      },\\n      'multiline-plain-text': {\\n        pattern: /(^([\\\\t ]*)[\\\\w\\\\-#.]+\\\\.[\\\\t ]*)(?:(?:\\\\r?\\\\n|\\\\r(?!\\\\n))(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+/m,\\n        lookbehind: true\\n      },\\n      markup: {\\n        pattern: /(^[\\\\t ]*)<.+/m,\\n        lookbehind: true,\\n        inside: Prism.languages.markup\\n      },\\n      doctype: {\\n        pattern: /((?:^|\\\\n)[\\\\t ]*)doctype(?: .+)?/,\\n        lookbehind: true\\n      },\\n      // This handle all conditional and loop keywords\\n      'flow-control': {\\n        pattern: /(^[\\\\t ]*)(?:case|default|each|else|if|unless|when|while)\\\\b(?: .+)?/m,\\n        lookbehind: true,\\n        inside: {\\n          each: {\\n            pattern: /^each .+? in\\\\b/,\\n            inside: {\\n              keyword: /\\\\b(?:each|in)\\\\b/,\\n              punctuation: /,/\\n            }\\n          },\\n          branch: {\\n            pattern: /^(?:case|default|else|if|unless|when|while)\\\\b/,\\n            alias: 'keyword'\\n          },\\n          rest: Prism.languages.javascript\\n        }\\n      },\\n      keyword: {\\n        pattern: /(^[\\\\t ]*)(?:append|block|extends|include|prepend)\\\\b.+/m,\\n        lookbehind: true\\n      },\\n      mixin: [// Declaration\\n      {\\n        pattern: /(^[\\\\t ]*)mixin .+/m,\\n        lookbehind: true,\\n        inside: {\\n          keyword: /^mixin/,\\n          function: /\\\\w+(?=\\\\s*\\\\(|\\\\s*$)/,\\n          punctuation: /[(),.]/\\n        }\\n      }, // Usage\\n      {\\n        pattern: /(^[\\\\t ]*)\\\\+.+/m,\\n        lookbehind: true,\\n        inside: {\\n          name: {\\n            pattern: /^\\\\+\\\\w+/,\\n            alias: 'function'\\n          },\\n          rest: Prism.languages.javascript\\n        }\\n      }],\\n      script: {\\n        pattern: /(^[\\\\t ]*script(?:(?:&[^(]+)?\\\\([^)]+\\\\))*[\\\\t ]).+/m,\\n        lookbehind: true,\\n        inside: Prism.languages.javascript\\n      },\\n      'plain-text': {\\n        pattern: /(^[\\\\t ]*(?!-)[\\\\w\\\\-#.]*[\\\\w\\\\-](?:(?:&[^(]+)?\\\\([^)]+\\\\))*\\\\/?[\\\\t ]).+/m,\\n        lookbehind: true\\n      },\\n      tag: {\\n        pattern: /(^[\\\\t ]*)(?!-)[\\\\w\\\\-#.]*[\\\\w\\\\-](?:(?:&[^(]+)?\\\\([^)]+\\\\))*\\\\/?:?/m,\\n        lookbehind: true,\\n        inside: {\\n          attributes: [{\\n            pattern: /&[^(]+\\\\([^)]+\\\\)/,\\n            inside: Prism.languages.javascript\\n          }, {\\n            pattern: /\\\\([^)]+\\\\)/,\\n            inside: {\\n              'attr-value': {\\n                pattern: /(=\\\\s*(?!\\\\s))(?:\\\\{[^}]*\\\\}|[^,)\\\\r\\\\n]+)/,\\n                lookbehind: true,\\n                inside: Prism.languages.javascript\\n              },\\n              'attr-name': /[\\\\w-]+(?=\\\\s*!?=|\\\\s*[,)])/,\\n              punctuation: /[!=(),]+/\\n            }\\n          }],\\n          punctuation: /:/,\\n          'attr-id': /#[\\\\w\\\\-]+/,\\n          'attr-class': /\\\\.[\\\\w\\\\-]+/\\n        }\\n      },\\n      code: [{\\n        pattern: /(^[\\\\t ]*(?:-|!?=)).+/m,\\n        lookbehind: true,\\n        inside: Prism.languages.javascript\\n      }],\\n      punctuation: /[.\\\\-!=|]+/\\n    };\\n    var filter_pattern = /(^([\\\\t ]*)):<filter_name>(?:(?:\\\\r?\\\\n|\\\\r(?!\\\\n))(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+/.source; // Non exhaustive list of available filters and associated languages\\n\\n    var filters = [{\\n      filter: 'atpl',\\n      language: 'twig'\\n    }, {\\n      filter: 'coffee',\\n      language: 'coffeescript'\\n    }, 'ejs', 'handlebars', 'less', 'livescript', 'markdown', {\\n      filter: 'sass',\\n      language: 'scss'\\n    }, 'stylus'];\\n    var all_filters = {};\\n\\n    for (var i = 0, l = filters.length; i < l; i++) {\\n      var filter = filters[i];\\n      filter = typeof filter === 'string' ? {\\n        filter: filter,\\n        language: filter\\n      } : filter;\\n\\n      if (Prism.languages[filter.language]) {\\n        all_filters['filter-' + filter.filter] = {\\n          pattern: RegExp(filter_pattern.replace('<filter_name>', function () {\\n            return filter.filter;\\n          }), 'm'),\\n          lookbehind: true,\\n          inside: {\\n            'filter-name': {\\n              pattern: /^:[\\\\w-]+/,\\n              alias: 'variable'\\n            },\\n            text: {\\n              pattern: /\\\\S[\\\\s\\\\S]*/,\\n              alias: [filter.language, 'language-' + filter.language],\\n              inside: Prism.languages[filter.language]\\n            }\\n          }\\n        };\\n      }\\n    }\\n\\n    Prism.languages.insertBefore('pug', 'filter', all_filters);\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"default\",\"pug\",\"Prism\",\"register\",\"_javascript\",\"_markup\",\"languages\",\"comment\",\"pattern\",\"lookbehind\",\"inside\",\"javascript\",\"filter\",\"alias\",\"text\",\"markup\",\"doctype\",\"each\",\"keyword\",\"punctuation\",\"branch\",\"rest\",\"mixin\",\"function\",\"name\",\"script\",\"tag\",\"attributes\",\"code\",\"filter_pattern\",\"source\",\"filters\",\"language\",\"all_filters\",\"i\",\"l\",\"length\",\"RegExp\",\"replace\",\"insertBefore\",\"Object\",\"defineProperty\",\"value\",\"displayName\",\"aliases\"]\n}\n"]