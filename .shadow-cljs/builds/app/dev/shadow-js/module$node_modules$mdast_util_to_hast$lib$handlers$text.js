["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-hast/lib/handlers/text.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_hast$lib$handlers$text=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.text=function(state,node){const result={type:\"text\",value:(0,_trimLines.trimLines)(String(node.value))};state.patch(node,result);return state.applyData(node,result)};var _trimLines=require(\"module$node_modules$trim_lines$index\")}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_hast$lib$handlers$text\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.text = text;\n\nvar _trimLines = require(\"trim-lines\");\n\n/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nfunction text(state, node) {\n  /** @type {HastText} */\n  const result = {\n    type: 'text',\n    value: (0, _trimLines.trimLines)(String(node.value))\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$trim_lines$index"]],"~:properties",["^5",["__esModule","value","text","type"]],"~:compiled-at",1676665867317,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_hast$lib$handlers$text.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,IAAR,CAqBAA,QAAa,CAACC,KAAD,CAAQC,IAAR,CAAc,CAEzB,MAAMC,OAAS,CACbC,KAAM,MADO,CAEbL,MAAO,GAAIM,UAAWC,CAAAA,SAAf,EAA0BC,MAAA,CAAOL,IAAKH,CAAAA,KAAZ,CAA1B,CAFM,CAIfE,MAAMO,CAAAA,KAAN,CAAYN,IAAZ,CAAkBC,MAAlB,CACA,OAAOF,MAAMQ,CAAAA,SAAN,CAAgBP,IAAhB,CAAsBC,MAAtB,CAPkB,CAnB3B,KAAIE,WAAaX,OAAA,CAAQ,sCAAR,CARoG;\",\n\"sources\":[\"node_modules/mdast-util-to-hast/lib/handlers/text.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_hast$lib$handlers$text\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.text = text;\\n\\nvar _trimLines = require(\\\"trim-lines\\\");\\n\\n/**\\n * @typedef {import('hast').Element} HastElement\\n * @typedef {import('hast').Text} HastText\\n * @typedef {import('mdast').Text} MdastText\\n * @typedef {import('../state.js').State} State\\n */\\n\\n/**\\n * Turn an mdast `text` node into hast.\\n *\\n * @param {State} state\\n *   Info passed around.\\n * @param {MdastText} node\\n *   mdast node.\\n * @returns {HastText | HastElement}\\n *   hast node.\\n */\\nfunction text(state, node) {\\n  /** @type {HastText} */\\n  const result = {\\n    type: 'text',\\n    value: (0, _trimLines.trimLines)(String(node.value))\\n  };\\n  state.patch(node, result);\\n  return state.applyData(node, result);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"text\",\"state\",\"node\",\"result\",\"type\",\"_trimLines\",\"trimLines\",\"String\",\"patch\",\"applyData\"]\n}\n"]