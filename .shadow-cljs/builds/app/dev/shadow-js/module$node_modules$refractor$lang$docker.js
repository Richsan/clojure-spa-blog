["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/docker.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$docker=function(global,require,module,exports){function docker(Prism$jscomp$0){(function(Prism){function re(source,flags){source=source.replace(/<OPT>/g,function(){return option}).replace(/<SP>/g,function(){return space});return RegExp(source,flags)}var spaceAfterBackSlash=/\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source,space=/(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g,function(){return spaceAfterBackSlash}),string=\n/\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source,option=/--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g,function(){return string}),stringRule={pattern:RegExp(string),greedy:!0},commentRule={pattern:/(^[ \\t]*)#.*/m,lookbehind:!0,greedy:!0};Prism.languages.docker={instruction:{pattern:/(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\nlookbehind:!0,greedy:!0,inside:{options:{pattern:re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source,\"i\"),lookbehind:!0,greedy:!0,inside:{property:{pattern:/(^|\\s)--[\\w-]+/,lookbehind:!0},string:[stringRule,{pattern:/(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,lookbehind:!0}],operator:/\\\\$/m,punctuation:/=/}},keyword:[{pattern:re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source,\"i\"),lookbehind:!0,greedy:!0},{pattern:re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source,\n\"i\"),lookbehind:!0,greedy:!0},{pattern:re(/(^ONBUILD<SP>)\\w+/.source,\"i\"),lookbehind:!0,greedy:!0},{pattern:/^\\w+/,greedy:!0}],comment:commentRule,string:stringRule,variable:/\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,operator:/\\\\$/m}},comment:commentRule};Prism.languages.dockerfile=Prism.languages.docker})(Prism$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=docker;docker.displayName=\"docker\";docker.aliases=[\"dockerfile\"]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$docker\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = docker;\n// @ts-nocheck\ndocker.displayName = 'docker';\ndocker.aliases = ['dockerfile'];\n/** @type {import('../core.js').Syntax} */\n\nfunction docker(Prism) {\n  ;\n\n  (function (Prism) {\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n    var spaceAfterBackSlash = /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source; // At least one space, comment, or line break\n\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g, function () {\n      return spaceAfterBackSlash;\n    });\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source;\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g, function () {\n      return string;\n    });\n    var stringRule = {\n      pattern: RegExp(string),\n      greedy: true\n    };\n    var commentRule = {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true,\n      greedy: true\n    };\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n\n    function re(source, flags) {\n      source = source.replace(/<OPT>/g, function () {\n        return option;\n      }).replace(/<SP>/g, function () {\n        return space;\n      });\n      return RegExp(source, flags);\n    }\n\n    Prism.languages.docker = {\n      instruction: {\n        pattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          options: {\n            pattern: re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              property: {\n                pattern: /(^|\\s)--[\\w-]+/,\n                lookbehind: true\n              },\n              string: [stringRule, {\n                pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                lookbehind: true\n              }],\n              operator: /\\\\$/m,\n              punctuation: /=/\n            }\n          },\n          keyword: [{\n            // https://docs.docker.com/engine/reference/builder/#healthcheck\n            pattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            // https://docs.docker.com/engine/reference/builder/#from\n            pattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            // https://docs.docker.com/engine/reference/builder/#onbuild\n            pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            pattern: /^\\w+/,\n            greedy: true\n          }],\n          comment: commentRule,\n          string: stringRule,\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n          operator: /\\\\$/m\n        }\n      },\n      comment: commentRule\n    };\n    Prism.languages.dockerfile = Prism.languages.docker;\n  })(Prism);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["punctuation","string","aliases","instruction","operator","displayName","__esModule","lookbehind","value","variable","keyword","greedy","property","docker","pattern","dockerfile","inside","comment","options","default"]],"~:compiled-at",1676841365406,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$docker.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/refractor/lang/docker.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$docker\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = docker;\\n// @ts-nocheck\\ndocker.displayName = 'docker';\\ndocker.aliases = ['dockerfile'];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction docker(Prism) {\\n  ;\\n\\n  (function (Prism) {\\n    // Many of the following regexes will contain negated lookaheads like `[ \\\\t]+(?![ \\\\t])`. This is a trick to ensure\\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\\n    var spaceAfterBackSlash = /\\\\\\\\[\\\\r\\\\n](?:\\\\s|\\\\\\\\[\\\\r\\\\n]|#.*(?!.))*(?![\\\\s#]|\\\\\\\\[\\\\r\\\\n])/.source; // At least one space, comment, or line break\\n\\n    var space = /(?:[ \\\\t]+(?![ \\\\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g, function () {\\n      return spaceAfterBackSlash;\\n    });\\n    var string = /\\\"(?:[^\\\"\\\\\\\\\\\\r\\\\n]|\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S]))*\\\"|'(?:[^'\\\\\\\\\\\\r\\\\n]|\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S]))*'/.source;\\n    var option = /--[\\\\w-]+=(?:<STR>|(?![\\\"'])(?:[^\\\\s\\\\\\\\]|\\\\\\\\.)+)/.source.replace(/<STR>/g, function () {\\n      return string;\\n    });\\n    var stringRule = {\\n      pattern: RegExp(string),\\n      greedy: true\\n    };\\n    var commentRule = {\\n      pattern: /(^[ \\\\t]*)#.*/m,\\n      lookbehind: true,\\n      greedy: true\\n    };\\n    /**\\n     * @param {string} source\\n     * @param {string} flags\\n     * @returns {RegExp}\\n     */\\n\\n    function re(source, flags) {\\n      source = source.replace(/<OPT>/g, function () {\\n        return option;\\n      }).replace(/<SP>/g, function () {\\n        return space;\\n      });\\n      return RegExp(source, flags);\\n    }\\n\\n    Prism.languages.docker = {\\n      instruction: {\\n        pattern: /(^[ \\\\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\\\s)(?:\\\\\\\\.|[^\\\\r\\\\n\\\\\\\\])*(?:\\\\\\\\$(?:\\\\s|#.*$)*(?![\\\\s#])(?:\\\\\\\\.|[^\\\\r\\\\n\\\\\\\\])*)*/im,\\n        lookbehind: true,\\n        greedy: true,\\n        inside: {\\n          options: {\\n            pattern: re(/(^(?:ONBUILD<SP>)?\\\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\\n            lookbehind: true,\\n            greedy: true,\\n            inside: {\\n              property: {\\n                pattern: /(^|\\\\s)--[\\\\w-]+/,\\n                lookbehind: true\\n              },\\n              string: [stringRule, {\\n                pattern: /(=)(?![\\\"'])(?:[^\\\\s\\\\\\\\]|\\\\\\\\.)+/,\\n                lookbehind: true\\n              }],\\n              operator: /\\\\\\\\$/m,\\n              punctuation: /=/\\n            }\\n          },\\n          keyword: [{\\n            // https://docs.docker.com/engine/reference/builder/#healthcheck\\n            pattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\\\b/.source, 'i'),\\n            lookbehind: true,\\n            greedy: true\\n          }, {\\n            // https://docs.docker.com/engine/reference/builder/#from\\n            pattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\\\t\\\\\\\\]+<SP>)AS/.source, 'i'),\\n            lookbehind: true,\\n            greedy: true\\n          }, {\\n            // https://docs.docker.com/engine/reference/builder/#onbuild\\n            pattern: re(/(^ONBUILD<SP>)\\\\w+/.source, 'i'),\\n            lookbehind: true,\\n            greedy: true\\n          }, {\\n            pattern: /^\\\\w+/,\\n            greedy: true\\n          }],\\n          comment: commentRule,\\n          string: stringRule,\\n          variable: /\\\\$(?:\\\\w+|\\\\{[^{}\\\"'\\\\\\\\]*\\\\})/,\\n          operator: /\\\\\\\\$/m\\n        }\\n      },\\n      comment: commentRule\\n    };\\n    Prism.languages.dockerfile = Prism.languages.docker;\\n  })(Prism);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"docker\",\"Prism\",\"re\",\"source\",\"flags\",\"replace\",\"option\",\"space\",\"RegExp\",\"spaceAfterBackSlash\",\"string\",\"stringRule\",\"pattern\",\"greedy\",\"commentRule\",\"lookbehind\",\"languages\",\"instruction\",\"inside\",\"options\",\"property\",\"operator\",\"punctuation\",\"keyword\",\"comment\",\"variable\",\"dockerfile\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]