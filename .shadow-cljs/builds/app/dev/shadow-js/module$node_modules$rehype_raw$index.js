["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/rehype-raw/index.js"],"~:js","shadow$provide.module$node_modules$rehype_raw$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(options={}){return(tree,file)=>(0,_hastUtilRaw.raw)(tree,file,options)};var _hastUtilRaw=require(\"module$node_modules$hast_util_raw$index\")}","~:source","shadow$provide[\"module$node_modules$rehype_raw$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rehypeRaw;\n\nvar _hastUtilRaw = require(\"hast-util-raw\");\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-raw').Options} Options\n * @typedef {import('hast-util-raw')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\n/**\n * Plugin to parse the tree again (and raw nodes).\n * Keeping positional info OK.  \uD83D\uDE4C\n *\n * @type {import('unified').Plugin<[Options?] | Array<void>, Root>}\n */\nfunction rehypeRaw(options = {}) {\n  return (tree, file) => {\n    // Assume that when a root was given, itâ€™s also returned.\n    const result = (0, _hastUtilRaw.raw)(tree, file, options);\n    return result;\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$hast_util_raw$index"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1676841365349,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$rehype_raw$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAgBAC,QAAkB,CAACC,OAAA,CAAU,EAAX,CAAe,CAC/B,MAAO,CAACC,IAAD,CAAOC,IAAP,CAAA,EAEUC,GAAIC,YAAaC,CAAAA,GAAjBF,EAAsBF,IAAtBE,CAA4BD,IAA5BC,CAAkCH,OAAlCG,CAHc,CAdjC,KAAIC,aAAeZ,OAAA,CAAQ,yCAAR,CAR8E;\",\n\"sources\":[\"node_modules/rehype-raw/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$rehype_raw$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = rehypeRaw;\\n\\nvar _hastUtilRaw = require(\\\"hast-util-raw\\\");\\n\\n/**\\n * @typedef {import('hast').Root} Root\\n * @typedef {import('hast-util-raw').Options} Options\\n * @typedef {import('hast-util-raw')} DoNotTouchAsThisImportIncludesRawInTree\\n */\\n\\n/**\\n * Plugin to parse the tree again (and raw nodes).\\n * Keeping positional info OK.  \\ud83d\\ude4c\\n *\\n * @type {import('unified').Plugin<[Options?] | Array<void>, Root>}\\n */\\nfunction rehypeRaw(options = {}) {\\n  return (tree, file) => {\\n    // Assume that when a root was given, it\\u2019s also returned.\\n    const result = (0, _hastUtilRaw.raw)(tree, file, options);\\n    return result;\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"rehypeRaw\",\"options\",\"tree\",\"file\",\"result\",\"_hastUtilRaw\",\"raw\"]\n}\n"]