["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/json.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$json=function(global,require,module,exports){module.exports=function(hljs){const LITERALS=[\"true\",\"false\",\"null\"],LITERALS_MODE={scope:\"literal\",beginKeywords:LITERALS.join(\" \")};return{name:\"JSON\",keywords:{literal:LITERALS},contains:[{className:\"attr\",begin:/\"(\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,relevance:1.01},{match:/[{}[\\],:]/,className:\"punctuation\",relevance:0},hljs.QUOTE_STRING_MODE,LITERALS_MODE,hljs.C_NUMBER_MODE,hljs.C_LINE_COMMENT_MODE,\nhljs.C_BLOCK_COMMENT_MODE],illegal:\"\\\\S\"}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$json\"] = function(global,require,module,exports) {\n/*\nLanguage: JSON\nDescription: JSON (JavaScript Object Notation) is a lightweight data-interchange format.\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: http://www.json.org\nCategory: common, protocols, web\n*/\n\nfunction json(hljs) {\n  const ATTRIBUTE = {\n    className: 'attr',\n    begin: /\"(\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    relevance: 1.01\n  };\n  const PUNCTUATION = {\n    match: /[{}[\\],:]/,\n    className: \"punctuation\",\n    relevance: 0\n  };\n  const LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\"\n  ];\n  // NOTE: normally we would rely on `keywords` for this but using a mode here allows us\n  // - to use the very tight `illegal: \\S` rule later to flag any other character\n  // - as illegal indicating that despite looking like JSON we do not truly have\n  // - JSON and thus improve false-positively greatly since JSON will try and claim\n  // - all sorts of JSON looking stuff\n  const LITERALS_MODE = {\n    scope: \"literal\",\n    beginKeywords: LITERALS.join(\" \"),\n  };\n\n  return {\n    name: 'JSON',\n    keywords:{\n      literal: LITERALS,\n    },\n    contains: [\n      ATTRIBUTE,\n      PUNCTUATION,\n      hljs.QUOTE_STRING_MODE,\n      LITERALS_MODE,\n      hljs.C_NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ],\n    illegal: '\\\\S'\n  };\n}\n\nmodule.exports = json;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["begin","className","contains","relevance","name","scope","keywords","beginKeywords","match","illegal","literal"]],"~:compiled-at",1676671710205,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$json.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqDpHD,MAAOC,CAAAA,OAAP,CA5CAC,QAAa,CAACC,IAAD,CAAO,CAWlB,MAAMC,SAAW,CACf,MADe,CAEf,OAFe,CAGf,MAHe,CAAjB,CAUMC,cAAgB,CACpBC,MAAO,SADa,CAEpBC,cAAeH,QAASI,CAAAA,IAAT,CAAc,GAAd,CAFK,CAKtB,OAAO,CACLC,KAAM,MADD,CAELC,SAAS,CACPC,QAASP,QADF,CAFJ,CAKLQ,SAAU,CA9BMC,CAChBC,UAAW,MADKD,CAEhBE,MAAO,6BAFSF,CAGhBG,UAAW,IAHKH,CA8BN,CAzBQI,CAClBC,MAAO,WADWD,CAElBH,UAAW,aAFOG,CAGlBD,UAAW,CAHOC,CAyBR,CAGRd,IAAKgB,CAAAA,iBAHG,CAIRd,aAJQ,CAKRF,IAAKiB,CAAAA,aALG,CAMRjB,IAAKkB,CAAAA,mBANG;AAORlB,IAAKmB,CAAAA,oBAPG,CALL,CAcLC,QAAS,KAdJ,CA1BW,CATgG;\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/json.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$json\\\"] = function(global,require,module,exports) {\\n/*\\nLanguage: JSON\\nDescription: JSON (JavaScript Object Notation) is a lightweight data-interchange format.\\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\\nWebsite: http://www.json.org\\nCategory: common, protocols, web\\n*/\\n\\nfunction json(hljs) {\\n  const ATTRIBUTE = {\\n    className: 'attr',\\n    begin: /\\\"(\\\\\\\\.|[^\\\\\\\\\\\"\\\\r\\\\n])*\\\"(?=\\\\s*:)/,\\n    relevance: 1.01\\n  };\\n  const PUNCTUATION = {\\n    match: /[{}[\\\\],:]/,\\n    className: \\\"punctuation\\\",\\n    relevance: 0\\n  };\\n  const LITERALS = [\\n    \\\"true\\\",\\n    \\\"false\\\",\\n    \\\"null\\\"\\n  ];\\n  // NOTE: normally we would rely on `keywords` for this but using a mode here allows us\\n  // - to use the very tight `illegal: \\\\S` rule later to flag any other character\\n  // - as illegal indicating that despite looking like JSON we do not truly have\\n  // - JSON and thus improve false-positively greatly since JSON will try and claim\\n  // - all sorts of JSON looking stuff\\n  const LITERALS_MODE = {\\n    scope: \\\"literal\\\",\\n    beginKeywords: LITERALS.join(\\\" \\\"),\\n  };\\n\\n  return {\\n    name: 'JSON',\\n    keywords:{\\n      literal: LITERALS,\\n    },\\n    contains: [\\n      ATTRIBUTE,\\n      PUNCTUATION,\\n      hljs.QUOTE_STRING_MODE,\\n      LITERALS_MODE,\\n      hljs.C_NUMBER_MODE,\\n      hljs.C_LINE_COMMENT_MODE,\\n      hljs.C_BLOCK_COMMENT_MODE\\n    ],\\n    illegal: '\\\\\\\\S'\\n  };\\n}\\n\\nmodule.exports = json;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"json\",\"hljs\",\"LITERALS\",\"LITERALS_MODE\",\"scope\",\"beginKeywords\",\"join\",\"name\",\"keywords\",\"literal\",\"contains\",\"ATTRIBUTE\",\"className\",\"begin\",\"relevance\",\"PUNCTUATION\",\"match\",\"QUOTE_STRING_MODE\",\"C_NUMBER_MODE\",\"C_LINE_COMMENT_MODE\",\"C_BLOCK_COMMENT_MODE\",\"illegal\"]\n}\n"]