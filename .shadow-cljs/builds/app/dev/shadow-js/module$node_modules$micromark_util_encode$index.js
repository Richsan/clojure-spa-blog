["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/micromark-util-encode/index.js"],"~:js","shadow$provide.module$node_modules$micromark_util_encode$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.encode=function(value$jscomp$0){return value$jscomp$0.replace(/[\"&<>]/g,function(value){return\"\\x26\"+characterReferences[value]+\";\"})};const characterReferences={'\"':\"quot\",\"\\x26\":\"amp\",\"\\x3c\":\"lt\",\"\\x3e\":\"gt\"}}","~:source","shadow$provide[\"module$node_modules$micromark_util_encode$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encode = encode;\nconst characterReferences = {\n  '\"': 'quot',\n  '&': 'amp',\n  '<': 'lt',\n  '>': 'gt'\n};\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n * @returns {string}\n */\n\nfunction encode(value) {\n  return value.replace(/[\"&<>]/g, replace);\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n\n  function replace(value) {\n    // @ts-expect-error Hush, itâ€™s fine.\n    return '&' + characterReferences[value] + ';';\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","encode"]],"~:compiled-at",1676665867310,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$micromark_util_encode$index.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,+CAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG5GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,MAAR,CAkBAA,QAAe,CAACD,cAAD,CAAQ,CACrB,MAAOA,eAAME,CAAAA,OAAN,CAAc,SAAd,CAMPA,QAAgB,CAACF,KAAD,CAAQ,CAEtB,MAAO,MAAP,CAAaG,mBAAA,CAAoBH,KAApB,CAAb,CAA0C,GAFpB,CANjB,CADc,CAjBvB,OAAMG,oBAAsB,CAC1B,IAAK,MADqB,CAE1B,OAAK,KAFqB,CAG1B,OAAK,IAHqB,CAI1B,OAAK,IAJqB,CAPgF;\",\n\"sources\":[\"node_modules/micromark-util-encode/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$micromark_util_encode$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.encode = encode;\\nconst characterReferences = {\\n  '\\\"': 'quot',\\n  '&': 'amp',\\n  '<': 'lt',\\n  '>': 'gt'\\n};\\n/**\\n * Encode only the dangerous HTML characters.\\n *\\n * This ensures that certain characters which have special meaning in HTML are\\n * dealt with.\\n * Technically, we can skip `>` and `\\\"` in many cases, but CM includes them.\\n *\\n * @param {string} value\\n * @returns {string}\\n */\\n\\nfunction encode(value) {\\n  return value.replace(/[\\\"&<>]/g, replace);\\n  /**\\n   * @param {string} value\\n   * @returns {string}\\n   */\\n\\n  function replace(value) {\\n    // @ts-expect-error Hush, it\\u2019s fine.\\n    return '&' + characterReferences[value] + ';';\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"encode\",\"replace\",\"characterReferences\"]\n}\n"]