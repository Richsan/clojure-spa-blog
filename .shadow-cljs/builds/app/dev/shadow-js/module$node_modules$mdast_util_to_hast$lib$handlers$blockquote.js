["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/mdast-util-to-hast/lib/handlers/blockquote.js"],"~:js","shadow$provide.module$node_modules$mdast_util_to_hast$lib$handlers$blockquote=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.blockquote=function(state,node){const result={type:\"element\",tagName:\"blockquote\",properties:{},children:state.wrap(state.all(node),!0)};state.patch(node,result);return state.applyData(node,result)}}","~:source","shadow$provide[\"module$node_modules$mdast_util_to_hast$lib$handlers$blockquote\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.blockquote = blockquote;\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nfunction blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["properties","children","__esModule","value","type","tagName","blockquote"]],"~:compiled-at",1676665867309,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$mdast_util_to_hast$lib$handlers$blockquote.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,UAAR,CAkBAA,QAAmB,CAACC,KAAD,CAAQC,IAAR,CAAc,CAE/B,MAAMC,OAAS,CACbC,KAAM,SADO,CAEbC,QAAS,YAFI,CAGbC,WAAY,EAHC,CAIbC,SAAUN,KAAMO,CAAAA,IAAN,CAAWP,KAAMQ,CAAAA,GAAN,CAAUP,IAAV,CAAX,CAA4B,CAAA,CAA5B,CAJG,CAMfD,MAAMS,CAAAA,KAAN,CAAYR,IAAZ,CAAkBC,MAAlB,CACA,OAAOF,MAAMU,CAAAA,SAAN,CAAgBT,IAAhB,CAAsBC,MAAtB,CATwB,CAxB0F;\",\n\"sources\":[\"node_modules/mdast-util-to-hast/lib/handlers/blockquote.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$mdast_util_to_hast$lib$handlers$blockquote\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.blockquote = blockquote;\\n\\n/**\\n * @typedef {import('hast').Element} Element\\n * @typedef {import('mdast').Blockquote} Blockquote\\n * @typedef {import('../state.js').State} State\\n */\\n\\n/**\\n * Turn an mdast `blockquote` node into hast.\\n *\\n * @param {State} state\\n *   Info passed around.\\n * @param {Blockquote} node\\n *   mdast node.\\n * @returns {Element}\\n *   hast node.\\n */\\nfunction blockquote(state, node) {\\n  /** @type {Element} */\\n  const result = {\\n    type: 'element',\\n    tagName: 'blockquote',\\n    properties: {},\\n    children: state.wrap(state.all(node), true)\\n  };\\n  state.patch(node, result);\\n  return state.applyData(node, result);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"blockquote\",\"state\",\"node\",\"result\",\"type\",\"tagName\",\"properties\",\"children\",\"wrap\",\"all\",\"patch\",\"applyData\"]\n}\n"]