["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/r.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$r=function(global,require,module,exports){module.exports=function(hljs){const regex=hljs.regex,IDENT_RE=/(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/,NUMBER_TYPES_RE=regex.either(/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/,/0[xX][0-9a-fA-F]+(?:[pP][+-]?\\d+)?[Li]?/,/(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?[Li]?/),OPERATORS_RE=/[=!<>:]=|\\|\\||&&|:::?|<-|<<-|->>|->|\\|>|[-+*\\/?!$&|:<=>@^~]|\\*\\*/,PUNCTUATION_RE=regex.either(/[()]/,\n/[{}]/,/\\[\\[/,/[[\\]]/,/\\\\/,/,/);return{name:\"R\",keywords:{$pattern:IDENT_RE,keyword:\"function if in break next repeat else for while\",literal:\"NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10\",built_in:\"LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm\"},\ncontains:[hljs.COMMENT(/#'/,/$/,{contains:[{scope:\"doctag\",match:/@examples/,starts:{end:regex.lookahead(regex.either(/\\n^#'\\s*(?=@[a-zA-Z]+)/,/\\n^(?!#')/)),endsParent:!0}},{scope:\"doctag\",begin:\"@param\",end:/$/,contains:[{scope:\"variable\",variants:[{match:IDENT_RE},{match:/`(?:\\\\.|[^`\\\\])+`/}],endsParent:!0}]},{scope:\"doctag\",match:/@[a-zA-Z]+/},{scope:\"keyword\",match:/\\\\[a-zA-Z]+/}]}),hljs.HASH_COMMENT_MODE,{scope:\"string\",contains:[hljs.BACKSLASH_ESCAPE],variants:[hljs.END_SAME_AS_BEGIN({begin:/[rR]\"(-*)\\(/,\nend:/\\)(-*)\"/}),hljs.END_SAME_AS_BEGIN({begin:/[rR]\"(-*)\\{/,end:/\\}(-*)\"/}),hljs.END_SAME_AS_BEGIN({begin:/[rR]\"(-*)\\[/,end:/\\](-*)\"/}),hljs.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\\(/,end:/\\)(-*)'/}),hljs.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\\{/,end:/\\}(-*)'/}),hljs.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\\[/,end:/\\](-*)'/}),{begin:'\"',end:'\"',relevance:0},{begin:\"'\",end:\"'\",relevance:0}]},{relevance:0,variants:[{scope:{1:\"operator\",2:\"number\"},match:[OPERATORS_RE,NUMBER_TYPES_RE]},{scope:{1:\"operator\",2:\"number\"},\nmatch:[/%[^%]*%/,NUMBER_TYPES_RE]},{scope:{1:\"punctuation\",2:\"number\"},match:[PUNCTUATION_RE,NUMBER_TYPES_RE]},{scope:{2:\"number\"},match:[/[^a-zA-Z0-9._]|^/,NUMBER_TYPES_RE]}]},{scope:{3:\"operator\"},match:[IDENT_RE,/\\s+/,/<-/,/\\s+/]},{scope:\"operator\",relevance:0,variants:[{match:OPERATORS_RE},{match:/%[^%]*%/}]},{scope:\"punctuation\",relevance:0,match:PUNCTUATION_RE},{begin:\"`\",end:\"`\",contains:[{begin:/\\\\./}]}]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$r\"] = function(global,require,module,exports) {\n/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: common,scientific\n*/\n\n/** @type LanguageFn */\nfunction r(hljs) {\n  const regex = hljs.regex;\n  // Identifiers in R cannot start with `_`, but they can start with `.` if it\n  // is not immediately followed by a digit.\n  // R also supports quoted identifiers, which are near-arbitrary sequences\n  // delimited by backticks (`…`), which may contain escape sequences. These are\n  // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n  // FIXME: Support Unicode identifiers.\n  const IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n  const NUMBER_TYPES_RE = regex.either(\n    // Special case: only hexadecimal binary powers can contain fractions\n    /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/,\n    // Hexadecimal numbers without fraction and optional binary power\n    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\\d+)?[Li]?/,\n    // Decimal numbers\n    /(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?[Li]?/\n  );\n  const OPERATORS_RE = /[=!<>:]=|\\|\\||&&|:::?|<-|<<-|->>|->|\\|>|[-+*\\/?!$&|:<=>@^~]|\\*\\*/;\n  const PUNCTUATION_RE = regex.either(\n    /[()]/,\n    /[{}]/,\n    /\\[\\[/,\n    /[[\\]]/,\n    /\\\\/,\n    /,/\n  );\n\n  return {\n    name: 'R',\n\n    keywords: {\n      $pattern: IDENT_RE,\n      keyword:\n        'function if in break next repeat else for while',\n      literal:\n        'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 '\n        + 'NA_character_|10 NA_complex_|10',\n      built_in:\n        // Builtin constants\n        'LETTERS letters month.abb month.name pi T F '\n        // Primitive functions\n        // These are all the functions in `base` that are implemented as a\n        // `.Primitive`, minus those functions that are also keywords.\n        + 'abs acos acosh all any anyNA Arg as.call as.character '\n        + 'as.complex as.double as.environment as.integer as.logical '\n        + 'as.null.default as.numeric as.raw asin asinh atan atanh attr '\n        + 'attributes baseenv browser c call ceiling class Conj cos cosh '\n        + 'cospi cummax cummin cumprod cumsum digamma dim dimnames '\n        + 'emptyenv exp expression floor forceAndCall gamma gc.time '\n        + 'globalenv Im interactive invisible is.array is.atomic is.call '\n        + 'is.character is.complex is.double is.environment is.expression '\n        + 'is.finite is.function is.infinite is.integer is.language '\n        + 'is.list is.logical is.matrix is.na is.name is.nan is.null '\n        + 'is.numeric is.object is.pairlist is.raw is.recursive is.single '\n        + 'is.symbol lazyLoadDBfetch length lgamma list log max min '\n        + 'missing Mod names nargs nzchar oldClass on.exit pos.to.env '\n        + 'proc.time prod quote range Re rep retracemem return round '\n        + 'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt '\n        + 'standardGeneric substitute sum switch tan tanh tanpi tracemem '\n        + 'trigamma trunc unclass untracemem UseMethod xtfrm',\n    },\n\n    contains: [\n      // Roxygen comments\n      hljs.COMMENT(\n        /#'/,\n        /$/,\n        { contains: [\n          {\n            // Handle `@examples` separately to cause all subsequent code\n            // until the next `@`-tag on its own line to be kept as-is,\n            // preventing highlighting. This code is example R code, so nested\n            // doctags shouldn’t be treated as such. See\n            // `test/markup/r/roxygen.txt` for an example.\n            scope: 'doctag',\n            match: /@examples/,\n            starts: {\n              end: regex.lookahead(regex.either(\n                // end if another doc comment\n                /\\n^#'\\s*(?=@[a-zA-Z]+)/,\n                // or a line with no comment\n                /\\n^(?!#')/\n              )),\n              endsParent: true\n            }\n          },\n          {\n            // Handle `@param` to highlight the parameter name following\n            // after.\n            scope: 'doctag',\n            begin: '@param',\n            end: /$/,\n            contains: [\n              {\n                scope: 'variable',\n                variants: [\n                  { match: IDENT_RE },\n                  { match: /`(?:\\\\.|[^`\\\\])+`/ }\n                ],\n                endsParent: true\n              }\n            ]\n          },\n          {\n            scope: 'doctag',\n            match: /@[a-zA-Z]+/\n          },\n          {\n            scope: 'keyword',\n            match: /\\\\[a-zA-Z]+/\n          }\n        ] }\n      ),\n\n      hljs.HASH_COMMENT_MODE,\n\n      {\n        scope: 'string',\n        contains: [ hljs.BACKSLASH_ESCAPE ],\n        variants: [\n          hljs.END_SAME_AS_BEGIN({\n            begin: /[rR]\"(-*)\\(/,\n            end: /\\)(-*)\"/\n          }),\n          hljs.END_SAME_AS_BEGIN({\n            begin: /[rR]\"(-*)\\{/,\n            end: /\\}(-*)\"/\n          }),\n          hljs.END_SAME_AS_BEGIN({\n            begin: /[rR]\"(-*)\\[/,\n            end: /\\](-*)\"/\n          }),\n          hljs.END_SAME_AS_BEGIN({\n            begin: /[rR]'(-*)\\(/,\n            end: /\\)(-*)'/\n          }),\n          hljs.END_SAME_AS_BEGIN({\n            begin: /[rR]'(-*)\\{/,\n            end: /\\}(-*)'/\n          }),\n          hljs.END_SAME_AS_BEGIN({\n            begin: /[rR]'(-*)\\[/,\n            end: /\\](-*)'/\n          }),\n          {\n            begin: '\"',\n            end: '\"',\n            relevance: 0\n          },\n          {\n            begin: \"'\",\n            end: \"'\",\n            relevance: 0\n          }\n        ],\n      },\n\n      // Matching numbers immediately following punctuation and operators is\n      // tricky since we need to look at the character ahead of a number to\n      // ensure the number is not part of an identifier, and we cannot use\n      // negative look-behind assertions. So instead we explicitly handle all\n      // possible combinations of (operator|punctuation), number.\n      // TODO: replace with negative look-behind when available\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n      // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n      {\n        relevance: 0,\n        variants: [\n          {\n            scope: {\n              1: 'operator',\n              2: 'number'\n            },\n            match: [\n              OPERATORS_RE,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: {\n              1: 'operator',\n              2: 'number'\n            },\n            match: [\n              /%[^%]*%/,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: {\n              1: 'punctuation',\n              2: 'number'\n            },\n            match: [\n              PUNCTUATION_RE,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: { 2: 'number' },\n            match: [\n              /[^a-zA-Z0-9._]|^/, // not part of an identifier, or start of document\n              NUMBER_TYPES_RE\n            ]\n          }\n        ]\n      },\n\n      // Operators/punctuation when they're not directly followed by numbers\n      {\n        // Relevance boost for the most common assignment form.\n        scope: { 3: 'operator' },\n        match: [\n          IDENT_RE,\n          /\\s+/,\n          /<-/,\n          /\\s+/\n        ]\n      },\n\n      {\n        scope: 'operator',\n        relevance: 0,\n        variants: [\n          { match: OPERATORS_RE },\n          { match: /%[^%]*%/ }\n        ]\n      },\n\n      {\n        scope: 'punctuation',\n        relevance: 0,\n        match: PUNCTUATION_RE\n      },\n\n      {\n        // Escaped identifier\n        begin: '`',\n        end: '`',\n        contains: [ { begin: /\\\\./ } ]\n      }\n    ]\n  };\n}\n\nmodule.exports = r;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["variants","begin","contains","$pattern","relevance","name","endsParent","built_in","keyword","scope","keywords","match","starts","literal","end"]],"~:compiled-at",1676671710224,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$r.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/r.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$r\\\"] = function(global,require,module,exports) {\\n/*\\nLanguage: R\\nDescription: R is a free software environment for statistical computing and graphics.\\nAuthor: Joe Cheng <joe@rstudio.org>\\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\\nWebsite: https://www.r-project.org\\nCategory: common,scientific\\n*/\\n\\n/** @type LanguageFn */\\nfunction r(hljs) {\\n  const regex = hljs.regex;\\n  // Identifiers in R cannot start with `_`, but they can start with `.` if it\\n  // is not immediately followed by a digit.\\n  // R also supports quoted identifiers, which are near-arbitrary sequences\\n  // delimited by backticks (`\\u2026`), which may contain escape sequences. These are\\n  // handled in a separate mode. See `test/markup/r/names.txt` for examples.\\n  // FIXME: Support Unicode identifiers.\\n  const IDENT_RE = /(?:(?:[a-zA-Z]|\\\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\\\.(?!\\\\d)/;\\n  const NUMBER_TYPES_RE = regex.either(\\n    // Special case: only hexadecimal binary powers can contain fractions\\n    /0[xX][0-9a-fA-F]+\\\\.[0-9a-fA-F]*[pP][+-]?\\\\d+i?/,\\n    // Hexadecimal numbers without fraction and optional binary power\\n    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\\\\d+)?[Li]?/,\\n    // Decimal numbers\\n    /(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?[Li]?/\\n  );\\n  const OPERATORS_RE = /[=!<>:]=|\\\\|\\\\||&&|:::?|<-|<<-|->>|->|\\\\|>|[-+*\\\\/?!$&|:<=>@^~]|\\\\*\\\\*/;\\n  const PUNCTUATION_RE = regex.either(\\n    /[()]/,\\n    /[{}]/,\\n    /\\\\[\\\\[/,\\n    /[[\\\\]]/,\\n    /\\\\\\\\/,\\n    /,/\\n  );\\n\\n  return {\\n    name: 'R',\\n\\n    keywords: {\\n      $pattern: IDENT_RE,\\n      keyword:\\n        'function if in break next repeat else for while',\\n      literal:\\n        'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 '\\n        + 'NA_character_|10 NA_complex_|10',\\n      built_in:\\n        // Builtin constants\\n        'LETTERS letters month.abb month.name pi T F '\\n        // Primitive functions\\n        // These are all the functions in `base` that are implemented as a\\n        // `.Primitive`, minus those functions that are also keywords.\\n        + 'abs acos acosh all any anyNA Arg as.call as.character '\\n        + 'as.complex as.double as.environment as.integer as.logical '\\n        + 'as.null.default as.numeric as.raw asin asinh atan atanh attr '\\n        + 'attributes baseenv browser c call ceiling class Conj cos cosh '\\n        + 'cospi cummax cummin cumprod cumsum digamma dim dimnames '\\n        + 'emptyenv exp expression floor forceAndCall gamma gc.time '\\n        + 'globalenv Im interactive invisible is.array is.atomic is.call '\\n        + 'is.character is.complex is.double is.environment is.expression '\\n        + 'is.finite is.function is.infinite is.integer is.language '\\n        + 'is.list is.logical is.matrix is.na is.name is.nan is.null '\\n        + 'is.numeric is.object is.pairlist is.raw is.recursive is.single '\\n        + 'is.symbol lazyLoadDBfetch length lgamma list log max min '\\n        + 'missing Mod names nargs nzchar oldClass on.exit pos.to.env '\\n        + 'proc.time prod quote range Re rep retracemem return round '\\n        + 'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt '\\n        + 'standardGeneric substitute sum switch tan tanh tanpi tracemem '\\n        + 'trigamma trunc unclass untracemem UseMethod xtfrm',\\n    },\\n\\n    contains: [\\n      // Roxygen comments\\n      hljs.COMMENT(\\n        /#'/,\\n        /$/,\\n        { contains: [\\n          {\\n            // Handle `@examples` separately to cause all subsequent code\\n            // until the next `@`-tag on its own line to be kept as-is,\\n            // preventing highlighting. This code is example R code, so nested\\n            // doctags shouldn\\u2019t be treated as such. See\\n            // `test/markup/r/roxygen.txt` for an example.\\n            scope: 'doctag',\\n            match: /@examples/,\\n            starts: {\\n              end: regex.lookahead(regex.either(\\n                // end if another doc comment\\n                /\\\\n^#'\\\\s*(?=@[a-zA-Z]+)/,\\n                // or a line with no comment\\n                /\\\\n^(?!#')/\\n              )),\\n              endsParent: true\\n            }\\n          },\\n          {\\n            // Handle `@param` to highlight the parameter name following\\n            // after.\\n            scope: 'doctag',\\n            begin: '@param',\\n            end: /$/,\\n            contains: [\\n              {\\n                scope: 'variable',\\n                variants: [\\n                  { match: IDENT_RE },\\n                  { match: /`(?:\\\\\\\\.|[^`\\\\\\\\])+`/ }\\n                ],\\n                endsParent: true\\n              }\\n            ]\\n          },\\n          {\\n            scope: 'doctag',\\n            match: /@[a-zA-Z]+/\\n          },\\n          {\\n            scope: 'keyword',\\n            match: /\\\\\\\\[a-zA-Z]+/\\n          }\\n        ] }\\n      ),\\n\\n      hljs.HASH_COMMENT_MODE,\\n\\n      {\\n        scope: 'string',\\n        contains: [ hljs.BACKSLASH_ESCAPE ],\\n        variants: [\\n          hljs.END_SAME_AS_BEGIN({\\n            begin: /[rR]\\\"(-*)\\\\(/,\\n            end: /\\\\)(-*)\\\"/\\n          }),\\n          hljs.END_SAME_AS_BEGIN({\\n            begin: /[rR]\\\"(-*)\\\\{/,\\n            end: /\\\\}(-*)\\\"/\\n          }),\\n          hljs.END_SAME_AS_BEGIN({\\n            begin: /[rR]\\\"(-*)\\\\[/,\\n            end: /\\\\](-*)\\\"/\\n          }),\\n          hljs.END_SAME_AS_BEGIN({\\n            begin: /[rR]'(-*)\\\\(/,\\n            end: /\\\\)(-*)'/\\n          }),\\n          hljs.END_SAME_AS_BEGIN({\\n            begin: /[rR]'(-*)\\\\{/,\\n            end: /\\\\}(-*)'/\\n          }),\\n          hljs.END_SAME_AS_BEGIN({\\n            begin: /[rR]'(-*)\\\\[/,\\n            end: /\\\\](-*)'/\\n          }),\\n          {\\n            begin: '\\\"',\\n            end: '\\\"',\\n            relevance: 0\\n          },\\n          {\\n            begin: \\\"'\\\",\\n            end: \\\"'\\\",\\n            relevance: 0\\n          }\\n        ],\\n      },\\n\\n      // Matching numbers immediately following punctuation and operators is\\n      // tricky since we need to look at the character ahead of a number to\\n      // ensure the number is not part of an identifier, and we cannot use\\n      // negative look-behind assertions. So instead we explicitly handle all\\n      // possible combinations of (operator|punctuation), number.\\n      // TODO: replace with negative look-behind when available\\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\\\.[0-9a-fA-F]*[pP][+-]?\\\\d+i?/ },\\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\\\d+)?[Li]?/ },\\n      // { begin: /(?<![a-zA-Z0-9._])(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][+-]?\\\\d+)?[Li]?/ }\\n      {\\n        relevance: 0,\\n        variants: [\\n          {\\n            scope: {\\n              1: 'operator',\\n              2: 'number'\\n            },\\n            match: [\\n              OPERATORS_RE,\\n              NUMBER_TYPES_RE\\n            ]\\n          },\\n          {\\n            scope: {\\n              1: 'operator',\\n              2: 'number'\\n            },\\n            match: [\\n              /%[^%]*%/,\\n              NUMBER_TYPES_RE\\n            ]\\n          },\\n          {\\n            scope: {\\n              1: 'punctuation',\\n              2: 'number'\\n            },\\n            match: [\\n              PUNCTUATION_RE,\\n              NUMBER_TYPES_RE\\n            ]\\n          },\\n          {\\n            scope: { 2: 'number' },\\n            match: [\\n              /[^a-zA-Z0-9._]|^/, // not part of an identifier, or start of document\\n              NUMBER_TYPES_RE\\n            ]\\n          }\\n        ]\\n      },\\n\\n      // Operators/punctuation when they're not directly followed by numbers\\n      {\\n        // Relevance boost for the most common assignment form.\\n        scope: { 3: 'operator' },\\n        match: [\\n          IDENT_RE,\\n          /\\\\s+/,\\n          /<-/,\\n          /\\\\s+/\\n        ]\\n      },\\n\\n      {\\n        scope: 'operator',\\n        relevance: 0,\\n        variants: [\\n          { match: OPERATORS_RE },\\n          { match: /%[^%]*%/ }\\n        ]\\n      },\\n\\n      {\\n        scope: 'punctuation',\\n        relevance: 0,\\n        match: PUNCTUATION_RE\\n      },\\n\\n      {\\n        // Escaped identifier\\n        begin: '`',\\n        end: '`',\\n        contains: [ { begin: /\\\\\\\\./ } ]\\n      }\\n    ]\\n  };\\n}\\n\\nmodule.exports = r;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"r\",\"hljs\",\"regex\",\"IDENT_RE\",\"NUMBER_TYPES_RE\",\"either\",\"OPERATORS_RE\",\"PUNCTUATION_RE\",\"name\",\"keywords\",\"$pattern\",\"keyword\",\"literal\",\"built_in\",\"contains\",\"COMMENT\",\"scope\",\"match\",\"starts\",\"end\",\"lookahead\",\"endsParent\",\"begin\",\"variants\",\"HASH_COMMENT_MODE\",\"BACKSLASH_ESCAPE\",\"END_SAME_AS_BEGIN\",\"relevance\"]\n}\n"]