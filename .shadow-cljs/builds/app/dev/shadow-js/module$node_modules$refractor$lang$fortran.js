["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/refractor/lang/fortran.js"],"~:js","shadow$provide.module$node_modules$refractor$lang$fortran=function(global,require,module,exports){function fortran(Prism){Prism.languages.fortran={\"quoted-number\":{pattern:/[BOZ](['\"])[A-F0-9]+\\1/i,alias:\"number\"},string:{pattern:/(?:\\b\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:[ \\t]*!.*(?:\\r\\n?|\\n)|(?![ \\t]*!))|(?!\\1).)*(?:\\1|&)/,inside:{comment:{pattern:/(&(?:\\r\\n?|\\n)\\s*)!.*/,lookbehind:!0}}},comment:{pattern:/!.*/,greedy:!0},boolean:/\\.(?:FALSE|TRUE)\\.(?:_\\w+)?/i,number:/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,\nkeyword:[/\\b(?:CHARACTER|COMPLEX|DOUBLE ?PRECISION|INTEGER|LOGICAL|REAL)\\b/i,/\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i,/\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i,\n/\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEIF|ELSEWHERE|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i],operator:[/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.[A-Z]+\\./i,{pattern:/(^|(?!\\().)\\/(?!\\))/,lookbehind:!0}],punctuation:/\\(\\/|\\/\\)|[(),;:&]/}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=fortran;fortran.displayName=\"fortran\";fortran.aliases=[]}","~:source","shadow$provide[\"module$node_modules$refractor$lang$fortran\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = fortran;\n// @ts-nocheck\nfortran.displayName = 'fortran';\nfortran.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nfunction fortran(Prism) {\n  Prism.languages.fortran = {\n    'quoted-number': {\n      pattern: /[BOZ](['\"])[A-F0-9]+\\1/i,\n      alias: 'number'\n    },\n    string: {\n      pattern: /(?:\\b\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:[ \\t]*!.*(?:\\r\\n?|\\n)|(?![ \\t]*!))|(?!\\1).)*(?:\\1|&)/,\n      inside: {\n        comment: {\n          pattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,\n          lookbehind: true\n        }\n      }\n    },\n    comment: {\n      pattern: /!.*/,\n      greedy: true\n    },\n    boolean: /\\.(?:FALSE|TRUE)\\.(?:_\\w+)?/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,\n    keyword: [// Types\n    /\\b(?:CHARACTER|COMPLEX|DOUBLE ?PRECISION|INTEGER|LOGICAL|REAL)\\b/i, // END statements\n    /\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i, // Statements\n    /\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i, // Others\n    /\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEIF|ELSEWHERE|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i],\n    operator: [/\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.[A-Z]+\\./i, {\n      // Use lookbehind to prevent confusion with (/ /)\n      pattern: /(^|(?!\\().)\\/(?!\\))/,\n      lookbehind: true\n    }],\n    punctuation: /\\(\\/|\\/\\)|[(),;:&]/\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["boolean","punctuation","string","aliases","fortran","operator","displayName","__esModule","lookbehind","value","keyword","number","greedy","pattern","inside","alias","comment","default"]],"~:compiled-at",1676841365412,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$refractor$lang$fortran.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,0CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYvGC,QAASA,QAAO,CAACC,KAAD,CAAQ,CACtBA,KAAMC,CAAAA,SAAUF,CAAAA,OAAhB,CAA0B,CACxB,gBAAiB,CACfG,QAAS,yBADM,CAEfC,MAAO,QAFQ,CADO,CAKxBC,OAAQ,CACNF,QAAS,+FADH,CAENG,OAAQ,CACNC,QAAS,CACPJ,QAAS,uBADF,CAEPK,WAAY,CAAA,CAFL,CADH,CAFF,CALgB,CAcxBD,QAAS,CACPJ,QAAS,KADF,CAEPM,OAAQ,CAAA,CAFD,CAde,CAkBxBC,QAAS,8BAlBe,CAmBxBC,OAAQ,wDAnBgB;AAoBxBC,QAAS,CACT,mEADS,CAET,+HAFS,CAGT,2VAHS;AAIT,6JAJS,CApBe,CAyBxBC,SAAU,CAAC,oDAAD,CAAuD,CAE/DV,QAAS,qBAFsD,CAG/DK,WAAY,CAAA,CAHmD,CAAvD,CAzBc,CA8BxBM,YAAa,oBA9BW,CADJ,CATxBC,MAAOC,CAAAA,cAAP,CAAsBjB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CkB,MAAO,CAAA,CADoC,CAA7C,CAGAlB,QAAQmB,CAAAA,OAAR,CAAkBlB,OAElBA,QAAQmB,CAAAA,WAAR,CAAsB,SACtBnB,QAAQoB,CAAAA,OAAR,CAAkB,EATqF;\",\n\"sources\":[\"node_modules/refractor/lang/fortran.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$refractor$lang$fortran\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = fortran;\\n// @ts-nocheck\\nfortran.displayName = 'fortran';\\nfortran.aliases = [];\\n/** @type {import('../core.js').Syntax} */\\n\\nfunction fortran(Prism) {\\n  Prism.languages.fortran = {\\n    'quoted-number': {\\n      pattern: /[BOZ](['\\\"])[A-F0-9]+\\\\1/i,\\n      alias: 'number'\\n    },\\n    string: {\\n      pattern: /(?:\\\\b\\\\w+_)?(['\\\"])(?:\\\\1\\\\1|&(?:\\\\r\\\\n?|\\\\n)(?:[ \\\\t]*!.*(?:\\\\r\\\\n?|\\\\n)|(?![ \\\\t]*!))|(?!\\\\1).)*(?:\\\\1|&)/,\\n      inside: {\\n        comment: {\\n          pattern: /(&(?:\\\\r\\\\n?|\\\\n)\\\\s*)!.*/,\\n          lookbehind: true\\n        }\\n      }\\n    },\\n    comment: {\\n      pattern: /!.*/,\\n      greedy: true\\n    },\\n    boolean: /\\\\.(?:FALSE|TRUE)\\\\.(?:_\\\\w+)?/i,\\n    number: /(?:\\\\b\\\\d+(?:\\\\.\\\\d*)?|\\\\B\\\\.\\\\d+)(?:[ED][+-]?\\\\d+)?(?:_\\\\w+)?/i,\\n    keyword: [// Types\\n    /\\\\b(?:CHARACTER|COMPLEX|DOUBLE ?PRECISION|INTEGER|LOGICAL|REAL)\\\\b/i, // END statements\\n    /\\\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\\\b/i, // Statements\\n    /\\\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\\\b/i, // Others\\n    /\\\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEIF|ELSEWHERE|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\\\b/i],\\n    operator: [/\\\\*\\\\*|\\\\/\\\\/|=>|[=\\\\/]=|[<>]=?|::|[+\\\\-*=%]|\\\\.[A-Z]+\\\\./i, {\\n      // Use lookbehind to prevent confusion with (/ /)\\n      pattern: /(^|(?!\\\\().)\\\\/(?!\\\\))/,\\n      lookbehind: true\\n    }],\\n    punctuation: /\\\\(\\\\/|\\\\/\\\\)|[(),;:&]/\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"fortran\",\"Prism\",\"languages\",\"pattern\",\"alias\",\"string\",\"inside\",\"comment\",\"lookbehind\",\"greedy\",\"boolean\",\"number\",\"keyword\",\"operator\",\"punctuation\",\"Object\",\"defineProperty\",\"value\",\"default\",\"displayName\",\"aliases\"]\n}\n"]