["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/hast-util-parse-selector/lib/index.js"],"~:js","shadow$provide.module$node_modules$hast_util_parse_selector$lib$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.parseSelector=function(selector,defaultTagName){selector=selector||\"\";const props={};let start=0,previous,tagName;for(;start<selector.length;){search.lastIndex=start;const match=search.exec(selector),subvalue=selector.slice(start,match?match.index:selector.length);subvalue&&(previous?\"#\"===previous?props.id=subvalue:Array.isArray(props.className)?\nprops.className.push(subvalue):props.className=[subvalue]:tagName=subvalue,start+=subvalue.length);match&&(previous=match[0],start++)}return{type:\"element\",tagName:tagName||defaultTagName||\"div\",properties:props,children:[]}};const search=/[#.]/g}","~:source","shadow$provide[\"module$node_modules$hast_util_parse_selector$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseSelector = parseSelector;\n\n/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n */\nconst search = /[#.]/g;\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name.\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector.\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\n\nfunction parseSelector(selector, defaultTagName) {\n  const value = selector || '';\n  /** @type {Properties} */\n\n  const props = {};\n  let start = 0;\n  /** @type {string | undefined} */\n\n  let previous;\n  /** @type {string | undefined} */\n\n  let tagName;\n\n  while (start < value.length) {\n    search.lastIndex = start;\n    const match = search.exec(value);\n    const subvalue = value.slice(start, match ? match.index : value.length);\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue;\n      } else if (previous === '#') {\n        props.id = subvalue;\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue);\n      } else {\n        props.className = [subvalue];\n      }\n\n      start += subvalue.length;\n    }\n\n    if (match) {\n      previous = match[0];\n      start++;\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: fine.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["properties","className","children","__esModule","parseSelector","lastIndex","id","value","type","tagName"]],"~:compiled-at",1676667638427,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$hast_util_parse_selector$lib$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CA0BAA,QAAsB,CAACC,QAAD,CAAWC,cAAX,CAA2B,CACzCH,QAAAA,CAAQE,QAARF,EAAoB,EAG1B,OAAMI,MAAQ,EACd,KAAIC,MAAQ,CAAZ,CAGIC,QAHJ,CAMIC,OAEJ,KAAA,CAAOF,KAAP,CAAeL,QAAMQ,CAAAA,MAArB,CAAA,CAA6B,CAC3BC,MAAOC,CAAAA,SAAP,CAAmBL,KACnB,OAAMM,MAAQF,MAAOG,CAAAA,IAAP,CAAYZ,QAAZ,CAAd,CACMa,SAAWb,QAAMc,CAAAA,KAAN,CAAYT,KAAZ,CAAmBM,KAAA,CAAQA,KAAMI,CAAAA,KAAd,CAAsBf,QAAMQ,CAAAA,MAA/C,CAEbK,SAAJ,GACOP,QAAL,CAEwB,GAAjB,GAAIA,QAAJ,CACLF,KAAMY,CAAAA,EADD,CACMH,QADN,CAEII,KAAMC,CAAAA,OAAN,CAAcd,KAAMe,CAAAA,SAApB,CAAJ;AACLf,KAAMe,CAAAA,SAAUC,CAAAA,IAAhB,CAAqBP,QAArB,CADK,CAGLT,KAAMe,CAAAA,SAHD,CAGa,CAACN,QAAD,CAPpB,CACEN,OADF,CACYM,QASZ,CAAAR,KAAA,EAASQ,QAASL,CAAAA,MAXpB,CAcIG,MAAJ,GACEL,QACA,CADWK,KAAA,CAAM,CAAN,CACX,CAAAN,KAAA,EAFF,CAnB2B,CAyB7B,MAAO,CACLgB,KAAM,SADD,CAGLd,QAASA,OAATA,EAAoBJ,cAApBI,EAAsC,KAHjC,CAILe,WAAYlB,KAJP,CAKLmB,SAAU,EALL,CAtCwC,CApBjD,OAAMd,OAAS,OAZoG;\",\n\"sources\":[\"node_modules/hast-util-parse-selector/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$hast_util_parse_selector$lib$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.parseSelector = parseSelector;\\n\\n/**\\n * @typedef {import('hast').Properties} Properties\\n * @typedef {import('hast').Element} Element\\n */\\nconst search = /[#.]/g;\\n/**\\n * Create a hast element from a simple CSS selector.\\n *\\n * @template {string} Selector\\n *   Type of selector.\\n * @template {string} [DefaultTagName='div']\\n *   Type of default tag name.\\n * @param {Selector | null | undefined} [selector]\\n *   Simple CSS selector.\\n *\\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\\n *   Multiple classes are allowed.\\n *   Uses the last ID if multiple IDs are found.\\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\\n * @returns {Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}}\\n *   Built element.\\n */\\n\\nfunction parseSelector(selector, defaultTagName) {\\n  const value = selector || '';\\n  /** @type {Properties} */\\n\\n  const props = {};\\n  let start = 0;\\n  /** @type {string | undefined} */\\n\\n  let previous;\\n  /** @type {string | undefined} */\\n\\n  let tagName;\\n\\n  while (start < value.length) {\\n    search.lastIndex = start;\\n    const match = search.exec(value);\\n    const subvalue = value.slice(start, match ? match.index : value.length);\\n\\n    if (subvalue) {\\n      if (!previous) {\\n        tagName = subvalue;\\n      } else if (previous === '#') {\\n        props.id = subvalue;\\n      } else if (Array.isArray(props.className)) {\\n        props.className.push(subvalue);\\n      } else {\\n        props.className = [subvalue];\\n      }\\n\\n      start += subvalue.length;\\n    }\\n\\n    if (match) {\\n      previous = match[0];\\n      start++;\\n    }\\n  }\\n\\n  return {\\n    type: 'element',\\n    // @ts-expect-error: fine.\\n    tagName: tagName || defaultTagName || 'div',\\n    properties: props,\\n    children: []\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"parseSelector\",\"selector\",\"defaultTagName\",\"props\",\"start\",\"previous\",\"tagName\",\"length\",\"search\",\"lastIndex\",\"match\",\"exec\",\"subvalue\",\"slice\",\"index\",\"id\",\"Array\",\"isArray\",\"className\",\"push\",\"type\",\"properties\",\"children\"]\n}\n"]